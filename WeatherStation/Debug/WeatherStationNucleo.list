
WeatherStationNucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001289c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001620  08012960  08012960  00022960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f80  08013f80  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08013f80  08013f80  00023f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f88  08013f88  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f88  08013f88  00023f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f8c  08013f8c  00023f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08013f90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed8  200001f4  08014184  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010cc  08014184  000310cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b63e  00000000  00000000  0003025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004221  00000000  00000000  0004b89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a0  00000000  00000000  0004fac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001340  00000000  00000000  00051360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c75  00000000  00000000  000526a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022167  00000000  00000000  0006c315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ce0a  00000000  00000000  0008e47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f20  00000000  00000000  0011b288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  001221a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08012944 	.word	0x08012944

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	08012944 	.word	0x08012944

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fd03 	bl	8001e48 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc53 	bl	8001cf8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fcf5 	bl	8001e48 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fceb 	bl	8001e48 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc7b 	bl	8001d7c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc71 	bl	8001d7c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 fb3b 	bl	8002bd4 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 ff94 	bl	8002494 <__aeabi_dsub>
 800056c:	f002 fb32 	bl	8002bd4 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 fca3 	bl	8001f10 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 fb66 	bl	8002ca0 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 fc9a 	bl	8001f10 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 ff56 	bl	8002494 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 fb1f 	bl	8002c40 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 fc83 	bl	8001f10 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 fb46 	bl	8002ca0 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fd20 	bl	800105c <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 fc3e 	bl	8002ec4 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 fc39 	bl	8002ec4 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fdiv>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0245      	lsls	r5, r0, #9
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	0047      	lsls	r7, r0, #1
 80007ca:	1c0c      	adds	r4, r1, #0
 80007cc:	0a6d      	lsrs	r5, r5, #9
 80007ce:	0e3f      	lsrs	r7, r7, #24
 80007d0:	0fc6      	lsrs	r6, r0, #31
 80007d2:	2f00      	cmp	r7, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fdiv+0x1c>
 80007d6:	e06f      	b.n	80008b8 <__aeabi_fdiv+0xfc>
 80007d8:	2fff      	cmp	r7, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fdiv+0x22>
 80007dc:	e074      	b.n	80008c8 <__aeabi_fdiv+0x10c>
 80007de:	2300      	movs	r3, #0
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	4699      	mov	r9, r3
 80007e4:	469a      	mov	sl, r3
 80007e6:	00ed      	lsls	r5, r5, #3
 80007e8:	04d2      	lsls	r2, r2, #19
 80007ea:	4315      	orrs	r5, r2
 80007ec:	3f7f      	subs	r7, #127	; 0x7f
 80007ee:	0263      	lsls	r3, r4, #9
 80007f0:	0a5b      	lsrs	r3, r3, #9
 80007f2:	4698      	mov	r8, r3
 80007f4:	0063      	lsls	r3, r4, #1
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fe4      	lsrs	r4, r4, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d04d      	beq.n	800089a <__aeabi_fdiv+0xde>
 80007fe:	2bff      	cmp	r3, #255	; 0xff
 8000800:	d045      	beq.n	800088e <__aeabi_fdiv+0xd2>
 8000802:	4642      	mov	r2, r8
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	00d2      	lsls	r2, r2, #3
 8000808:	04c9      	lsls	r1, r1, #19
 800080a:	4311      	orrs	r1, r2
 800080c:	4688      	mov	r8, r1
 800080e:	2200      	movs	r2, #0
 8000810:	3b7f      	subs	r3, #127	; 0x7f
 8000812:	0031      	movs	r1, r6
 8000814:	1aff      	subs	r7, r7, r3
 8000816:	464b      	mov	r3, r9
 8000818:	4061      	eors	r1, r4
 800081a:	b2c9      	uxtb	r1, r1
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d900      	bls.n	8000822 <__aeabi_fdiv+0x66>
 8000820:	e0b8      	b.n	8000994 <__aeabi_fdiv+0x1d8>
 8000822:	4870      	ldr	r0, [pc, #448]	; (80009e4 <__aeabi_fdiv+0x228>)
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	58c3      	ldr	r3, [r0, r3]
 8000828:	469f      	mov	pc, r3
 800082a:	2300      	movs	r3, #0
 800082c:	4698      	mov	r8, r3
 800082e:	0026      	movs	r6, r4
 8000830:	4645      	mov	r5, r8
 8000832:	4692      	mov	sl, r2
 8000834:	4653      	mov	r3, sl
 8000836:	2b02      	cmp	r3, #2
 8000838:	d100      	bne.n	800083c <__aeabi_fdiv+0x80>
 800083a:	e08d      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800083c:	2b03      	cmp	r3, #3
 800083e:	d100      	bne.n	8000842 <__aeabi_fdiv+0x86>
 8000840:	e0a1      	b.n	8000986 <__aeabi_fdiv+0x1ca>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d018      	beq.n	8000878 <__aeabi_fdiv+0xbc>
 8000846:	003b      	movs	r3, r7
 8000848:	337f      	adds	r3, #127	; 0x7f
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd6d      	ble.n	800092a <__aeabi_fdiv+0x16e>
 800084e:	076a      	lsls	r2, r5, #29
 8000850:	d004      	beq.n	800085c <__aeabi_fdiv+0xa0>
 8000852:	220f      	movs	r2, #15
 8000854:	402a      	ands	r2, r5
 8000856:	2a04      	cmp	r2, #4
 8000858:	d000      	beq.n	800085c <__aeabi_fdiv+0xa0>
 800085a:	3504      	adds	r5, #4
 800085c:	012a      	lsls	r2, r5, #4
 800085e:	d503      	bpl.n	8000868 <__aeabi_fdiv+0xac>
 8000860:	4b61      	ldr	r3, [pc, #388]	; (80009e8 <__aeabi_fdiv+0x22c>)
 8000862:	401d      	ands	r5, r3
 8000864:	003b      	movs	r3, r7
 8000866:	3380      	adds	r3, #128	; 0x80
 8000868:	2bfe      	cmp	r3, #254	; 0xfe
 800086a:	dd00      	ble.n	800086e <__aeabi_fdiv+0xb2>
 800086c:	e074      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800086e:	01aa      	lsls	r2, r5, #6
 8000870:	0a52      	lsrs	r2, r2, #9
 8000872:	b2d8      	uxtb	r0, r3
 8000874:	e002      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000876:	000e      	movs	r6, r1
 8000878:	2000      	movs	r0, #0
 800087a:	2200      	movs	r2, #0
 800087c:	05c0      	lsls	r0, r0, #23
 800087e:	07f6      	lsls	r6, r6, #31
 8000880:	4310      	orrs	r0, r2
 8000882:	4330      	orrs	r0, r6
 8000884:	bce0      	pop	{r5, r6, r7}
 8000886:	46ba      	mov	sl, r7
 8000888:	46b1      	mov	r9, r6
 800088a:	46a8      	mov	r8, r5
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	4643      	mov	r3, r8
 8000890:	2b00      	cmp	r3, #0
 8000892:	d13f      	bne.n	8000914 <__aeabi_fdiv+0x158>
 8000894:	2202      	movs	r2, #2
 8000896:	3fff      	subs	r7, #255	; 0xff
 8000898:	e003      	b.n	80008a2 <__aeabi_fdiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d12d      	bne.n	80008fc <__aeabi_fdiv+0x140>
 80008a0:	2201      	movs	r2, #1
 80008a2:	0031      	movs	r1, r6
 80008a4:	464b      	mov	r3, r9
 80008a6:	4061      	eors	r1, r4
 80008a8:	b2c9      	uxtb	r1, r1
 80008aa:	4313      	orrs	r3, r2
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d838      	bhi.n	8000922 <__aeabi_fdiv+0x166>
 80008b0:	484e      	ldr	r0, [pc, #312]	; (80009ec <__aeabi_fdiv+0x230>)
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	58c3      	ldr	r3, [r0, r3]
 80008b6:	469f      	mov	pc, r3
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d113      	bne.n	80008e4 <__aeabi_fdiv+0x128>
 80008bc:	2304      	movs	r3, #4
 80008be:	4699      	mov	r9, r3
 80008c0:	3b03      	subs	r3, #3
 80008c2:	2700      	movs	r7, #0
 80008c4:	469a      	mov	sl, r3
 80008c6:	e792      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d105      	bne.n	80008d8 <__aeabi_fdiv+0x11c>
 80008cc:	2308      	movs	r3, #8
 80008ce:	4699      	mov	r9, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	27ff      	movs	r7, #255	; 0xff
 80008d4:	469a      	mov	sl, r3
 80008d6:	e78a      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008d8:	230c      	movs	r3, #12
 80008da:	4699      	mov	r9, r3
 80008dc:	3b09      	subs	r3, #9
 80008de:	27ff      	movs	r7, #255	; 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e784      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008e4:	0028      	movs	r0, r5
 80008e6:	f002 facf 	bl	8002e88 <__clzsi2>
 80008ea:	2776      	movs	r7, #118	; 0x76
 80008ec:	1f43      	subs	r3, r0, #5
 80008ee:	409d      	lsls	r5, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	427f      	negs	r7, r7
 80008f4:	4699      	mov	r9, r3
 80008f6:	469a      	mov	sl, r3
 80008f8:	1a3f      	subs	r7, r7, r0
 80008fa:	e778      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008fc:	4640      	mov	r0, r8
 80008fe:	f002 fac3 	bl	8002e88 <__clzsi2>
 8000902:	4642      	mov	r2, r8
 8000904:	1f43      	subs	r3, r0, #5
 8000906:	409a      	lsls	r2, r3
 8000908:	2376      	movs	r3, #118	; 0x76
 800090a:	425b      	negs	r3, r3
 800090c:	4690      	mov	r8, r2
 800090e:	1a1b      	subs	r3, r3, r0
 8000910:	2200      	movs	r2, #0
 8000912:	e77e      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000914:	2303      	movs	r3, #3
 8000916:	464a      	mov	r2, r9
 8000918:	431a      	orrs	r2, r3
 800091a:	4691      	mov	r9, r2
 800091c:	33fc      	adds	r3, #252	; 0xfc
 800091e:	2203      	movs	r2, #3
 8000920:	e777      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000922:	000e      	movs	r6, r1
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	2200      	movs	r2, #0
 8000928:	e7a8      	b.n	800087c <__aeabi_fdiv+0xc0>
 800092a:	2201      	movs	r2, #1
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dca2      	bgt.n	8000878 <__aeabi_fdiv+0xbc>
 8000932:	379e      	adds	r7, #158	; 0x9e
 8000934:	002a      	movs	r2, r5
 8000936:	40bd      	lsls	r5, r7
 8000938:	40da      	lsrs	r2, r3
 800093a:	1e6b      	subs	r3, r5, #1
 800093c:	419d      	sbcs	r5, r3
 800093e:	4315      	orrs	r5, r2
 8000940:	076a      	lsls	r2, r5, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x192>
 8000944:	220f      	movs	r2, #15
 8000946:	402a      	ands	r2, r5
 8000948:	2a04      	cmp	r2, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x192>
 800094c:	3504      	adds	r5, #4
 800094e:	016a      	lsls	r2, r5, #5
 8000950:	d544      	bpl.n	80009dc <__aeabi_fdiv+0x220>
 8000952:	2001      	movs	r0, #1
 8000954:	2200      	movs	r2, #0
 8000956:	e791      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2200      	movs	r2, #0
 800095c:	e78e      	b.n	800087c <__aeabi_fdiv+0xc0>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	2600      	movs	r6, #0
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	03d2      	lsls	r2, r2, #15
 8000966:	e789      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000968:	2300      	movs	r3, #0
 800096a:	4698      	mov	r8, r3
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	03d2      	lsls	r2, r2, #15
 8000970:	4215      	tst	r5, r2
 8000972:	d008      	beq.n	8000986 <__aeabi_fdiv+0x1ca>
 8000974:	4643      	mov	r3, r8
 8000976:	4213      	tst	r3, r2
 8000978:	d105      	bne.n	8000986 <__aeabi_fdiv+0x1ca>
 800097a:	431a      	orrs	r2, r3
 800097c:	0252      	lsls	r2, r2, #9
 800097e:	0026      	movs	r6, r4
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	0a52      	lsrs	r2, r2, #9
 8000984:	e77a      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	03d2      	lsls	r2, r2, #15
 800098a:	432a      	orrs	r2, r5
 800098c:	0252      	lsls	r2, r2, #9
 800098e:	20ff      	movs	r0, #255	; 0xff
 8000990:	0a52      	lsrs	r2, r2, #9
 8000992:	e773      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000994:	4642      	mov	r2, r8
 8000996:	016b      	lsls	r3, r5, #5
 8000998:	0155      	lsls	r5, r2, #5
 800099a:	42ab      	cmp	r3, r5
 800099c:	d21a      	bcs.n	80009d4 <__aeabi_fdiv+0x218>
 800099e:	201b      	movs	r0, #27
 80009a0:	2200      	movs	r2, #0
 80009a2:	3f01      	subs	r7, #1
 80009a4:	2601      	movs	r6, #1
 80009a6:	001c      	movs	r4, r3
 80009a8:	0052      	lsls	r2, r2, #1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	db01      	blt.n	80009b4 <__aeabi_fdiv+0x1f8>
 80009b0:	429d      	cmp	r5, r3
 80009b2:	d801      	bhi.n	80009b8 <__aeabi_fdiv+0x1fc>
 80009b4:	1b5b      	subs	r3, r3, r5
 80009b6:	4332      	orrs	r2, r6
 80009b8:	3801      	subs	r0, #1
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d1f3      	bne.n	80009a6 <__aeabi_fdiv+0x1ea>
 80009be:	1e58      	subs	r0, r3, #1
 80009c0:	4183      	sbcs	r3, r0
 80009c2:	4313      	orrs	r3, r2
 80009c4:	001d      	movs	r5, r3
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	000e      	movs	r6, r1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_fdiv+0x216>
 80009d0:	e73d      	b.n	800084e <__aeabi_fdiv+0x92>
 80009d2:	e7aa      	b.n	800092a <__aeabi_fdiv+0x16e>
 80009d4:	201a      	movs	r0, #26
 80009d6:	2201      	movs	r2, #1
 80009d8:	1b5b      	subs	r3, r3, r5
 80009da:	e7e3      	b.n	80009a4 <__aeabi_fdiv+0x1e8>
 80009dc:	01aa      	lsls	r2, r5, #6
 80009de:	2000      	movs	r0, #0
 80009e0:	0a52      	lsrs	r2, r2, #9
 80009e2:	e74b      	b.n	800087c <__aeabi_fdiv+0xc0>
 80009e4:	08012dac 	.word	0x08012dac
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	08012dec 	.word	0x08012dec

080009f0 <__aeabi_fmul>:
 80009f0:	0243      	lsls	r3, r0, #9
 80009f2:	0a5b      	lsrs	r3, r3, #9
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	464f      	mov	r7, r9
 80009f8:	4646      	mov	r6, r8
 80009fa:	4699      	mov	r9, r3
 80009fc:	46d6      	mov	lr, sl
 80009fe:	0fc3      	lsrs	r3, r0, #31
 8000a00:	0045      	lsls	r5, r0, #1
 8000a02:	4698      	mov	r8, r3
 8000a04:	b5c0      	push	{r6, r7, lr}
 8000a06:	464b      	mov	r3, r9
 8000a08:	1c0f      	adds	r7, r1, #0
 8000a0a:	0e2d      	lsrs	r5, r5, #24
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fmul+0x20>
 8000a0e:	e0cb      	b.n	8000ba8 <__aeabi_fmul+0x1b8>
 8000a10:	2dff      	cmp	r5, #255	; 0xff
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fmul+0x26>
 8000a14:	e0cf      	b.n	8000bb6 <__aeabi_fmul+0x1c6>
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	04d2      	lsls	r2, r2, #19
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	2300      	movs	r3, #0
 8000a20:	4691      	mov	r9, r2
 8000a22:	2600      	movs	r6, #0
 8000a24:	469a      	mov	sl, r3
 8000a26:	3d7f      	subs	r5, #127	; 0x7f
 8000a28:	027c      	lsls	r4, r7, #9
 8000a2a:	007b      	lsls	r3, r7, #1
 8000a2c:	0a64      	lsrs	r4, r4, #9
 8000a2e:	0e1b      	lsrs	r3, r3, #24
 8000a30:	0fff      	lsrs	r7, r7, #31
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fmul+0x48>
 8000a36:	e0a9      	b.n	8000b8c <__aeabi_fmul+0x19c>
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d011      	beq.n	8000a60 <__aeabi_fmul+0x70>
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	00e4      	lsls	r4, r4, #3
 8000a40:	04d2      	lsls	r2, r2, #19
 8000a42:	4314      	orrs	r4, r2
 8000a44:	4642      	mov	r2, r8
 8000a46:	3b7f      	subs	r3, #127	; 0x7f
 8000a48:	195b      	adds	r3, r3, r5
 8000a4a:	407a      	eors	r2, r7
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	1c5d      	adds	r5, r3, #1
 8000a52:	2e0a      	cmp	r6, #10
 8000a54:	dd13      	ble.n	8000a7e <__aeabi_fmul+0x8e>
 8000a56:	003a      	movs	r2, r7
 8000a58:	2e0b      	cmp	r6, #11
 8000a5a:	d047      	beq.n	8000aec <__aeabi_fmul+0xfc>
 8000a5c:	4647      	mov	r7, r8
 8000a5e:	e03f      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000a60:	002b      	movs	r3, r5
 8000a62:	33ff      	adds	r3, #255	; 0xff
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d11e      	bne.n	8000aa6 <__aeabi_fmul+0xb6>
 8000a68:	2202      	movs	r2, #2
 8000a6a:	4316      	orrs	r6, r2
 8000a6c:	4642      	mov	r2, r8
 8000a6e:	3501      	adds	r5, #1
 8000a70:	407a      	eors	r2, r7
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	35ff      	adds	r5, #255	; 0xff
 8000a76:	2e0a      	cmp	r6, #10
 8000a78:	dd00      	ble.n	8000a7c <__aeabi_fmul+0x8c>
 8000a7a:	e0e4      	b.n	8000c46 <__aeabi_fmul+0x256>
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	2e02      	cmp	r6, #2
 8000a80:	dc1c      	bgt.n	8000abc <__aeabi_fmul+0xcc>
 8000a82:	3e01      	subs	r6, #1
 8000a84:	2e01      	cmp	r6, #1
 8000a86:	d842      	bhi.n	8000b0e <__aeabi_fmul+0x11e>
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d03d      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000a8c:	2801      	cmp	r0, #1
 8000a8e:	d166      	bne.n	8000b5e <__aeabi_fmul+0x16e>
 8000a90:	2000      	movs	r0, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	05c0      	lsls	r0, r0, #23
 8000a96:	4308      	orrs	r0, r1
 8000a98:	07d2      	lsls	r2, r2, #31
 8000a9a:	4310      	orrs	r0, r2
 8000a9c:	bce0      	pop	{r5, r6, r7}
 8000a9e:	46ba      	mov	sl, r7
 8000aa0:	46b1      	mov	r9, r6
 8000aa2:	46a8      	mov	r8, r5
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	4316      	orrs	r6, r2
 8000aaa:	4642      	mov	r2, r8
 8000aac:	3501      	adds	r5, #1
 8000aae:	407a      	eors	r2, r7
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	35ff      	adds	r5, #255	; 0xff
 8000ab4:	2e0a      	cmp	r6, #10
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_fmul+0xca>
 8000ab8:	e0e4      	b.n	8000c84 <__aeabi_fmul+0x294>
 8000aba:	2003      	movs	r0, #3
 8000abc:	2101      	movs	r1, #1
 8000abe:	40b1      	lsls	r1, r6
 8000ac0:	26a6      	movs	r6, #166	; 0xa6
 8000ac2:	00f6      	lsls	r6, r6, #3
 8000ac4:	4231      	tst	r1, r6
 8000ac6:	d10a      	bne.n	8000ade <__aeabi_fmul+0xee>
 8000ac8:	2690      	movs	r6, #144	; 0x90
 8000aca:	00b6      	lsls	r6, r6, #2
 8000acc:	4231      	tst	r1, r6
 8000ace:	d116      	bne.n	8000afe <__aeabi_fmul+0x10e>
 8000ad0:	3eb9      	subs	r6, #185	; 0xb9
 8000ad2:	3eff      	subs	r6, #255	; 0xff
 8000ad4:	420e      	tst	r6, r1
 8000ad6:	d01a      	beq.n	8000b0e <__aeabi_fmul+0x11e>
 8000ad8:	46a1      	mov	r9, r4
 8000ada:	4682      	mov	sl, r0
 8000adc:	e000      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000ade:	0017      	movs	r7, r2
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	003a      	movs	r2, r7
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d00f      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000ae8:	464c      	mov	r4, r9
 8000aea:	4650      	mov	r0, sl
 8000aec:	2803      	cmp	r0, #3
 8000aee:	d1cd      	bne.n	8000a8c <__aeabi_fmul+0x9c>
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	03c9      	lsls	r1, r1, #15
 8000af4:	4321      	orrs	r1, r4
 8000af6:	0249      	lsls	r1, r1, #9
 8000af8:	20ff      	movs	r0, #255	; 0xff
 8000afa:	0a49      	lsrs	r1, r1, #9
 8000afc:	e7ca      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	2200      	movs	r2, #0
 8000b02:	20ff      	movs	r0, #255	; 0xff
 8000b04:	03c9      	lsls	r1, r1, #15
 8000b06:	e7c5      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b08:	20ff      	movs	r0, #255	; 0xff
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e7c2      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b0e:	0c20      	lsrs	r0, r4, #16
 8000b10:	4649      	mov	r1, r9
 8000b12:	0424      	lsls	r4, r4, #16
 8000b14:	0c24      	lsrs	r4, r4, #16
 8000b16:	0027      	movs	r7, r4
 8000b18:	0c0e      	lsrs	r6, r1, #16
 8000b1a:	0409      	lsls	r1, r1, #16
 8000b1c:	0c09      	lsrs	r1, r1, #16
 8000b1e:	4374      	muls	r4, r6
 8000b20:	434f      	muls	r7, r1
 8000b22:	4346      	muls	r6, r0
 8000b24:	4348      	muls	r0, r1
 8000b26:	0c39      	lsrs	r1, r7, #16
 8000b28:	1900      	adds	r0, r0, r4
 8000b2a:	1809      	adds	r1, r1, r0
 8000b2c:	428c      	cmp	r4, r1
 8000b2e:	d903      	bls.n	8000b38 <__aeabi_fmul+0x148>
 8000b30:	2080      	movs	r0, #128	; 0x80
 8000b32:	0240      	lsls	r0, r0, #9
 8000b34:	4684      	mov	ip, r0
 8000b36:	4466      	add	r6, ip
 8000b38:	043f      	lsls	r7, r7, #16
 8000b3a:	0408      	lsls	r0, r1, #16
 8000b3c:	0c3f      	lsrs	r7, r7, #16
 8000b3e:	19c0      	adds	r0, r0, r7
 8000b40:	0184      	lsls	r4, r0, #6
 8000b42:	1e67      	subs	r7, r4, #1
 8000b44:	41bc      	sbcs	r4, r7
 8000b46:	0c09      	lsrs	r1, r1, #16
 8000b48:	0e80      	lsrs	r0, r0, #26
 8000b4a:	1989      	adds	r1, r1, r6
 8000b4c:	4304      	orrs	r4, r0
 8000b4e:	0189      	lsls	r1, r1, #6
 8000b50:	430c      	orrs	r4, r1
 8000b52:	0109      	lsls	r1, r1, #4
 8000b54:	d571      	bpl.n	8000c3a <__aeabi_fmul+0x24a>
 8000b56:	2301      	movs	r3, #1
 8000b58:	0861      	lsrs	r1, r4, #1
 8000b5a:	401c      	ands	r4, r3
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	002b      	movs	r3, r5
 8000b60:	337f      	adds	r3, #127	; 0x7f
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dd51      	ble.n	8000c0a <__aeabi_fmul+0x21a>
 8000b66:	0761      	lsls	r1, r4, #29
 8000b68:	d004      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	4021      	ands	r1, r4
 8000b6e:	2904      	cmp	r1, #4
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b72:	3404      	adds	r4, #4
 8000b74:	0121      	lsls	r1, r4, #4
 8000b76:	d503      	bpl.n	8000b80 <__aeabi_fmul+0x190>
 8000b78:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <__aeabi_fmul+0x298>)
 8000b7a:	401c      	ands	r4, r3
 8000b7c:	002b      	movs	r3, r5
 8000b7e:	3380      	adds	r3, #128	; 0x80
 8000b80:	2bfe      	cmp	r3, #254	; 0xfe
 8000b82:	dcc1      	bgt.n	8000b08 <__aeabi_fmul+0x118>
 8000b84:	01a1      	lsls	r1, r4, #6
 8000b86:	0a49      	lsrs	r1, r1, #9
 8000b88:	b2d8      	uxtb	r0, r3
 8000b8a:	e783      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b8c:	2c00      	cmp	r4, #0
 8000b8e:	d12c      	bne.n	8000bea <__aeabi_fmul+0x1fa>
 8000b90:	2301      	movs	r3, #1
 8000b92:	4642      	mov	r2, r8
 8000b94:	431e      	orrs	r6, r3
 8000b96:	002b      	movs	r3, r5
 8000b98:	407a      	eors	r2, r7
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	1c5d      	adds	r5, r3, #1
 8000ba0:	2e0a      	cmp	r6, #10
 8000ba2:	dd00      	ble.n	8000ba6 <__aeabi_fmul+0x1b6>
 8000ba4:	e757      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000ba6:	e76a      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d110      	bne.n	8000bce <__aeabi_fmul+0x1de>
 8000bac:	2301      	movs	r3, #1
 8000bae:	2604      	movs	r6, #4
 8000bb0:	2500      	movs	r5, #0
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	e738      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d104      	bne.n	8000bc4 <__aeabi_fmul+0x1d4>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	2608      	movs	r6, #8
 8000bbe:	25ff      	movs	r5, #255	; 0xff
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	e731      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	260c      	movs	r6, #12
 8000bc8:	25ff      	movs	r5, #255	; 0xff
 8000bca:	469a      	mov	sl, r3
 8000bcc:	e72c      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bce:	4648      	mov	r0, r9
 8000bd0:	f002 f95a 	bl	8002e88 <__clzsi2>
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	1f43      	subs	r3, r0, #5
 8000bd8:	2576      	movs	r5, #118	; 0x76
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	2300      	movs	r3, #0
 8000bde:	426d      	negs	r5, r5
 8000be0:	4691      	mov	r9, r2
 8000be2:	2600      	movs	r6, #0
 8000be4:	469a      	mov	sl, r3
 8000be6:	1a2d      	subs	r5, r5, r0
 8000be8:	e71e      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bea:	0020      	movs	r0, r4
 8000bec:	f002 f94c 	bl	8002e88 <__clzsi2>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	1f43      	subs	r3, r0, #5
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	1a2b      	subs	r3, r5, r0
 8000bf8:	3b76      	subs	r3, #118	; 0x76
 8000bfa:	407a      	eors	r2, r7
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	1c5d      	adds	r5, r3, #1
 8000c02:	2e0a      	cmp	r6, #10
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_fmul+0x218>
 8000c06:	e726      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000c08:	e739      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	1acb      	subs	r3, r1, r3
 8000c0e:	2b1b      	cmp	r3, #27
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_fmul+0x224>
 8000c12:	e73d      	b.n	8000a90 <__aeabi_fmul+0xa0>
 8000c14:	359e      	adds	r5, #158	; 0x9e
 8000c16:	0021      	movs	r1, r4
 8000c18:	40ac      	lsls	r4, r5
 8000c1a:	40d9      	lsrs	r1, r3
 8000c1c:	1e63      	subs	r3, r4, #1
 8000c1e:	419c      	sbcs	r4, r3
 8000c20:	4321      	orrs	r1, r4
 8000c22:	074b      	lsls	r3, r1, #29
 8000c24:	d004      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c26:	230f      	movs	r3, #15
 8000c28:	400b      	ands	r3, r1
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c2e:	3104      	adds	r1, #4
 8000c30:	014b      	lsls	r3, r1, #5
 8000c32:	d504      	bpl.n	8000c3e <__aeabi_fmul+0x24e>
 8000c34:	2001      	movs	r0, #1
 8000c36:	2100      	movs	r1, #0
 8000c38:	e72c      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c3a:	001d      	movs	r5, r3
 8000c3c:	e78f      	b.n	8000b5e <__aeabi_fmul+0x16e>
 8000c3e:	0189      	lsls	r1, r1, #6
 8000c40:	2000      	movs	r0, #0
 8000c42:	0a49      	lsrs	r1, r1, #9
 8000c44:	e726      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c46:	2302      	movs	r3, #2
 8000c48:	2e0f      	cmp	r6, #15
 8000c4a:	d10c      	bne.n	8000c66 <__aeabi_fmul+0x276>
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	464b      	mov	r3, r9
 8000c50:	03c9      	lsls	r1, r1, #15
 8000c52:	420b      	tst	r3, r1
 8000c54:	d00d      	beq.n	8000c72 <__aeabi_fmul+0x282>
 8000c56:	420c      	tst	r4, r1
 8000c58:	d10b      	bne.n	8000c72 <__aeabi_fmul+0x282>
 8000c5a:	4321      	orrs	r1, r4
 8000c5c:	0249      	lsls	r1, r1, #9
 8000c5e:	003a      	movs	r2, r7
 8000c60:	20ff      	movs	r0, #255	; 0xff
 8000c62:	0a49      	lsrs	r1, r1, #9
 8000c64:	e716      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c66:	2e0b      	cmp	r6, #11
 8000c68:	d000      	beq.n	8000c6c <__aeabi_fmul+0x27c>
 8000c6a:	e6f7      	b.n	8000a5c <__aeabi_fmul+0x6c>
 8000c6c:	46a1      	mov	r9, r4
 8000c6e:	469a      	mov	sl, r3
 8000c70:	e736      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	464b      	mov	r3, r9
 8000c76:	03c9      	lsls	r1, r1, #15
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	0249      	lsls	r1, r1, #9
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	20ff      	movs	r0, #255	; 0xff
 8000c80:	0a49      	lsrs	r1, r1, #9
 8000c82:	e707      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c84:	2303      	movs	r3, #3
 8000c86:	e7df      	b.n	8000c48 <__aeabi_fmul+0x258>
 8000c88:	f7ffffff 	.word	0xf7ffffff

08000c8c <__aeabi_fsub>:
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8e:	46c6      	mov	lr, r8
 8000c90:	0243      	lsls	r3, r0, #9
 8000c92:	0a5b      	lsrs	r3, r3, #9
 8000c94:	0045      	lsls	r5, r0, #1
 8000c96:	00da      	lsls	r2, r3, #3
 8000c98:	0fc4      	lsrs	r4, r0, #31
 8000c9a:	0248      	lsls	r0, r1, #9
 8000c9c:	004f      	lsls	r7, r1, #1
 8000c9e:	4694      	mov	ip, r2
 8000ca0:	0a42      	lsrs	r2, r0, #9
 8000ca2:	001e      	movs	r6, r3
 8000ca4:	4690      	mov	r8, r2
 8000ca6:	b500      	push	{lr}
 8000ca8:	0e2d      	lsrs	r5, r5, #24
 8000caa:	0e3f      	lsrs	r7, r7, #24
 8000cac:	0fc9      	lsrs	r1, r1, #31
 8000cae:	0980      	lsrs	r0, r0, #6
 8000cb0:	2fff      	cmp	r7, #255	; 0xff
 8000cb2:	d059      	beq.n	8000d68 <__aeabi_fsub+0xdc>
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4051      	eors	r1, r2
 8000cb8:	428c      	cmp	r4, r1
 8000cba:	d039      	beq.n	8000d30 <__aeabi_fsub+0xa4>
 8000cbc:	1bea      	subs	r2, r5, r7
 8000cbe:	2a00      	cmp	r2, #0
 8000cc0:	dd58      	ble.n	8000d74 <__aeabi_fsub+0xe8>
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d068      	beq.n	8000d98 <__aeabi_fsub+0x10c>
 8000cc6:	2dff      	cmp	r5, #255	; 0xff
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_fsub+0x40>
 8000cca:	e0d1      	b.n	8000e70 <__aeabi_fsub+0x1e4>
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	04db      	lsls	r3, r3, #19
 8000cd0:	4318      	orrs	r0, r3
 8000cd2:	2a1b      	cmp	r2, #27
 8000cd4:	dc00      	bgt.n	8000cd8 <__aeabi_fsub+0x4c>
 8000cd6:	e0e3      	b.n	8000ea0 <__aeabi_fsub+0x214>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	4662      	mov	r2, ip
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	015a      	lsls	r2, r3, #5
 8000ce0:	d400      	bmi.n	8000ce4 <__aeabi_fsub+0x58>
 8000ce2:	e0ac      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	099e      	lsrs	r6, r3, #6
 8000ce8:	0030      	movs	r0, r6
 8000cea:	f002 f8cd 	bl	8002e88 <__clzsi2>
 8000cee:	0033      	movs	r3, r6
 8000cf0:	3805      	subs	r0, #5
 8000cf2:	4083      	lsls	r3, r0
 8000cf4:	4285      	cmp	r5, r0
 8000cf6:	dc00      	bgt.n	8000cfa <__aeabi_fsub+0x6e>
 8000cf8:	e0c6      	b.n	8000e88 <__aeabi_fsub+0x1fc>
 8000cfa:	4ab2      	ldr	r2, [pc, #712]	; (8000fc4 <__aeabi_fsub+0x338>)
 8000cfc:	1a2d      	subs	r5, r5, r0
 8000cfe:	4013      	ands	r3, r2
 8000d00:	075a      	lsls	r2, r3, #29
 8000d02:	d004      	beq.n	8000d0e <__aeabi_fsub+0x82>
 8000d04:	220f      	movs	r2, #15
 8000d06:	401a      	ands	r2, r3
 8000d08:	2a04      	cmp	r2, #4
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_fsub+0x82>
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d400      	bmi.n	8000d14 <__aeabi_fsub+0x88>
 8000d12:	e097      	b.n	8000e44 <__aeabi_fsub+0x1b8>
 8000d14:	1c6a      	adds	r2, r5, #1
 8000d16:	2dfe      	cmp	r5, #254	; 0xfe
 8000d18:	d100      	bne.n	8000d1c <__aeabi_fsub+0x90>
 8000d1a:	e084      	b.n	8000e26 <__aeabi_fsub+0x19a>
 8000d1c:	019b      	lsls	r3, r3, #6
 8000d1e:	0a5e      	lsrs	r6, r3, #9
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	05d0      	lsls	r0, r2, #23
 8000d24:	4330      	orrs	r0, r6
 8000d26:	07e4      	lsls	r4, r4, #31
 8000d28:	4320      	orrs	r0, r4
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	46b8      	mov	r8, r7
 8000d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d30:	1bea      	subs	r2, r5, r7
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	dd41      	ble.n	8000dba <__aeabi_fsub+0x12e>
 8000d36:	2f00      	cmp	r7, #0
 8000d38:	d06b      	beq.n	8000e12 <__aeabi_fsub+0x186>
 8000d3a:	2dff      	cmp	r5, #255	; 0xff
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_fsub+0xb4>
 8000d3e:	e097      	b.n	8000e70 <__aeabi_fsub+0x1e4>
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	04db      	lsls	r3, r3, #19
 8000d44:	4318      	orrs	r0, r3
 8000d46:	2a1b      	cmp	r2, #27
 8000d48:	dc00      	bgt.n	8000d4c <__aeabi_fsub+0xc0>
 8000d4a:	e0cc      	b.n	8000ee6 <__aeabi_fsub+0x25a>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	4463      	add	r3, ip
 8000d50:	015a      	lsls	r2, r3, #5
 8000d52:	d574      	bpl.n	8000e3e <__aeabi_fsub+0x1b2>
 8000d54:	3501      	adds	r5, #1
 8000d56:	2dff      	cmp	r5, #255	; 0xff
 8000d58:	d065      	beq.n	8000e26 <__aeabi_fsub+0x19a>
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	499a      	ldr	r1, [pc, #616]	; (8000fc8 <__aeabi_fsub+0x33c>)
 8000d5e:	401a      	ands	r2, r3
 8000d60:	085b      	lsrs	r3, r3, #1
 8000d62:	400b      	ands	r3, r1
 8000d64:	4313      	orrs	r3, r2
 8000d66:	e7cb      	b.n	8000d00 <__aeabi_fsub+0x74>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d01f      	beq.n	8000dac <__aeabi_fsub+0x120>
 8000d6c:	428c      	cmp	r4, r1
 8000d6e:	d022      	beq.n	8000db6 <__aeabi_fsub+0x12a>
 8000d70:	002a      	movs	r2, r5
 8000d72:	3aff      	subs	r2, #255	; 0xff
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	d035      	beq.n	8000de4 <__aeabi_fsub+0x158>
 8000d78:	1b7a      	subs	r2, r7, r5
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_fsub+0xf4>
 8000d7e:	e099      	b.n	8000eb4 <__aeabi_fsub+0x228>
 8000d80:	4663      	mov	r3, ip
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fsub+0xfc>
 8000d86:	e0dd      	b.n	8000f44 <__aeabi_fsub+0x2b8>
 8000d88:	1e53      	subs	r3, r2, #1
 8000d8a:	2a01      	cmp	r2, #1
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_fsub+0x104>
 8000d8e:	e105      	b.n	8000f9c <__aeabi_fsub+0x310>
 8000d90:	2aff      	cmp	r2, #255	; 0xff
 8000d92:	d06b      	beq.n	8000e6c <__aeabi_fsub+0x1e0>
 8000d94:	001a      	movs	r2, r3
 8000d96:	e094      	b.n	8000ec2 <__aeabi_fsub+0x236>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d073      	beq.n	8000e84 <__aeabi_fsub+0x1f8>
 8000d9c:	1e51      	subs	r1, r2, #1
 8000d9e:	2a01      	cmp	r2, #1
 8000da0:	d100      	bne.n	8000da4 <__aeabi_fsub+0x118>
 8000da2:	e0df      	b.n	8000f64 <__aeabi_fsub+0x2d8>
 8000da4:	2aff      	cmp	r2, #255	; 0xff
 8000da6:	d063      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000da8:	000a      	movs	r2, r1
 8000daa:	e792      	b.n	8000cd2 <__aeabi_fsub+0x46>
 8000dac:	2201      	movs	r2, #1
 8000dae:	4051      	eors	r1, r2
 8000db0:	42a1      	cmp	r1, r4
 8000db2:	d000      	beq.n	8000db6 <__aeabi_fsub+0x12a>
 8000db4:	e782      	b.n	8000cbc <__aeabi_fsub+0x30>
 8000db6:	002a      	movs	r2, r5
 8000db8:	3aff      	subs	r2, #255	; 0xff
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d036      	beq.n	8000e2c <__aeabi_fsub+0x1a0>
 8000dbe:	1b7a      	subs	r2, r7, r5
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_fsub+0x13a>
 8000dc4:	e0aa      	b.n	8000f1c <__aeabi_fsub+0x290>
 8000dc6:	2fff      	cmp	r7, #255	; 0xff
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_fsub+0x140>
 8000dca:	e0da      	b.n	8000f82 <__aeabi_fsub+0x2f6>
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	4661      	mov	r1, ip
 8000dd0:	04db      	lsls	r3, r3, #19
 8000dd2:	4319      	orrs	r1, r3
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	2a1b      	cmp	r2, #27
 8000dd8:	dc00      	bgt.n	8000ddc <__aeabi_fsub+0x150>
 8000dda:	e0d4      	b.n	8000f86 <__aeabi_fsub+0x2fa>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	003d      	movs	r5, r7
 8000de0:	181b      	adds	r3, r3, r0
 8000de2:	e7b5      	b.n	8000d50 <__aeabi_fsub+0xc4>
 8000de4:	27fe      	movs	r7, #254	; 0xfe
 8000de6:	1c6a      	adds	r2, r5, #1
 8000de8:	4217      	tst	r7, r2
 8000dea:	d171      	bne.n	8000ed0 <__aeabi_fsub+0x244>
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d000      	beq.n	8000df2 <__aeabi_fsub+0x166>
 8000df0:	e09e      	b.n	8000f30 <__aeabi_fsub+0x2a4>
 8000df2:	4663      	mov	r3, ip
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x16e>
 8000df8:	e0d5      	b.n	8000fa6 <__aeabi_fsub+0x31a>
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2800      	cmp	r0, #0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_fsub+0x176>
 8000e00:	e78f      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e02:	1a1b      	subs	r3, r3, r0
 8000e04:	015e      	lsls	r6, r3, #5
 8000e06:	d400      	bmi.n	8000e0a <__aeabi_fsub+0x17e>
 8000e08:	e0d6      	b.n	8000fb8 <__aeabi_fsub+0x32c>
 8000e0a:	4663      	mov	r3, ip
 8000e0c:	000c      	movs	r4, r1
 8000e0e:	1ac3      	subs	r3, r0, r3
 8000e10:	e776      	b.n	8000d00 <__aeabi_fsub+0x74>
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d036      	beq.n	8000e84 <__aeabi_fsub+0x1f8>
 8000e16:	1e51      	subs	r1, r2, #1
 8000e18:	2a01      	cmp	r2, #1
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_fsub+0x192>
 8000e1c:	e09a      	b.n	8000f54 <__aeabi_fsub+0x2c8>
 8000e1e:	2aff      	cmp	r2, #255	; 0xff
 8000e20:	d026      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e22:	000a      	movs	r2, r1
 8000e24:	e78f      	b.n	8000d46 <__aeabi_fsub+0xba>
 8000e26:	22ff      	movs	r2, #255	; 0xff
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e77a      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e2c:	27fe      	movs	r7, #254	; 0xfe
 8000e2e:	1c6a      	adds	r2, r5, #1
 8000e30:	4217      	tst	r7, r2
 8000e32:	d062      	beq.n	8000efa <__aeabi_fsub+0x26e>
 8000e34:	2aff      	cmp	r2, #255	; 0xff
 8000e36:	d0f6      	beq.n	8000e26 <__aeabi_fsub+0x19a>
 8000e38:	0015      	movs	r5, r2
 8000e3a:	4460      	add	r0, ip
 8000e3c:	0843      	lsrs	r3, r0, #1
 8000e3e:	075a      	lsls	r2, r3, #29
 8000e40:	d000      	beq.n	8000e44 <__aeabi_fsub+0x1b8>
 8000e42:	e75f      	b.n	8000d04 <__aeabi_fsub+0x78>
 8000e44:	08db      	lsrs	r3, r3, #3
 8000e46:	2dff      	cmp	r5, #255	; 0xff
 8000e48:	d012      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e4a:	025b      	lsls	r3, r3, #9
 8000e4c:	0a5e      	lsrs	r6, r3, #9
 8000e4e:	b2ea      	uxtb	r2, r5
 8000e50:	e767      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e52:	4662      	mov	r2, ip
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d100      	bne.n	8000e5a <__aeabi_fsub+0x1ce>
 8000e58:	e093      	b.n	8000f82 <__aeabi_fsub+0x2f6>
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	d008      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	03d2      	lsls	r2, r2, #15
 8000e62:	4213      	tst	r3, r2
 8000e64:	d004      	beq.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e66:	4640      	mov	r0, r8
 8000e68:	4210      	tst	r0, r2
 8000e6a:	d101      	bne.n	8000e70 <__aeabi_fsub+0x1e4>
 8000e6c:	000c      	movs	r4, r1
 8000e6e:	4643      	mov	r3, r8
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0d8      	beq.n	8000e26 <__aeabi_fsub+0x19a>
 8000e74:	2680      	movs	r6, #128	; 0x80
 8000e76:	03f6      	lsls	r6, r6, #15
 8000e78:	431e      	orrs	r6, r3
 8000e7a:	0276      	lsls	r6, r6, #9
 8000e7c:	22ff      	movs	r2, #255	; 0xff
 8000e7e:	0a76      	lsrs	r6, r6, #9
 8000e80:	e74f      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000e82:	4643      	mov	r3, r8
 8000e84:	0015      	movs	r5, r2
 8000e86:	e7de      	b.n	8000e46 <__aeabi_fsub+0x1ba>
 8000e88:	2220      	movs	r2, #32
 8000e8a:	1b40      	subs	r0, r0, r5
 8000e8c:	3001      	adds	r0, #1
 8000e8e:	1a12      	subs	r2, r2, r0
 8000e90:	0019      	movs	r1, r3
 8000e92:	4093      	lsls	r3, r2
 8000e94:	40c1      	lsrs	r1, r0
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	4193      	sbcs	r3, r2
 8000e9a:	2500      	movs	r5, #0
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	e72f      	b.n	8000d00 <__aeabi_fsub+0x74>
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	0001      	movs	r1, r0
 8000ea6:	4098      	lsls	r0, r3
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	40d1      	lsrs	r1, r2
 8000eac:	1e5a      	subs	r2, r3, #1
 8000eae:	4193      	sbcs	r3, r2
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	e712      	b.n	8000cda <__aeabi_fsub+0x4e>
 8000eb4:	2fff      	cmp	r7, #255	; 0xff
 8000eb6:	d0d9      	beq.n	8000e6c <__aeabi_fsub+0x1e0>
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	4664      	mov	r4, ip
 8000ebc:	04db      	lsls	r3, r3, #19
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	46a4      	mov	ip, r4
 8000ec2:	2a1b      	cmp	r2, #27
 8000ec4:	dd52      	ble.n	8000f6c <__aeabi_fsub+0x2e0>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	000c      	movs	r4, r1
 8000eca:	003d      	movs	r5, r7
 8000ecc:	1ac3      	subs	r3, r0, r3
 8000ece:	e706      	b.n	8000cde <__aeabi_fsub+0x52>
 8000ed0:	4663      	mov	r3, ip
 8000ed2:	1a1e      	subs	r6, r3, r0
 8000ed4:	0173      	lsls	r3, r6, #5
 8000ed6:	d439      	bmi.n	8000f4c <__aeabi_fsub+0x2c0>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d000      	beq.n	8000ede <__aeabi_fsub+0x252>
 8000edc:	e704      	b.n	8000ce8 <__aeabi_fsub+0x5c>
 8000ede:	2400      	movs	r4, #0
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	e71d      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	1a9b      	subs	r3, r3, r2
 8000eea:	0001      	movs	r1, r0
 8000eec:	4098      	lsls	r0, r3
 8000eee:	0003      	movs	r3, r0
 8000ef0:	40d1      	lsrs	r1, r2
 8000ef2:	1e5a      	subs	r2, r3, #1
 8000ef4:	4193      	sbcs	r3, r2
 8000ef6:	430b      	orrs	r3, r1
 8000ef8:	e729      	b.n	8000d4e <__aeabi_fsub+0xc2>
 8000efa:	2d00      	cmp	r5, #0
 8000efc:	d1a9      	bne.n	8000e52 <__aeabi_fsub+0x1c6>
 8000efe:	4663      	mov	r3, ip
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d056      	beq.n	8000fb2 <__aeabi_fsub+0x326>
 8000f04:	2200      	movs	r2, #0
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fsub+0x280>
 8000f0a:	e70a      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	4463      	add	r3, ip
 8000f10:	015a      	lsls	r2, r3, #5
 8000f12:	d594      	bpl.n	8000e3e <__aeabi_fsub+0x1b2>
 8000f14:	4a2b      	ldr	r2, [pc, #172]	; (8000fc4 <__aeabi_fsub+0x338>)
 8000f16:	3501      	adds	r5, #1
 8000f18:	4013      	ands	r3, r2
 8000f1a:	e790      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000f1c:	4663      	mov	r3, ip
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0af      	beq.n	8000e82 <__aeabi_fsub+0x1f6>
 8000f22:	1e53      	subs	r3, r2, #1
 8000f24:	2a01      	cmp	r2, #1
 8000f26:	d015      	beq.n	8000f54 <__aeabi_fsub+0x2c8>
 8000f28:	2aff      	cmp	r2, #255	; 0xff
 8000f2a:	d02a      	beq.n	8000f82 <__aeabi_fsub+0x2f6>
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	e752      	b.n	8000dd6 <__aeabi_fsub+0x14a>
 8000f30:	4662      	mov	r2, ip
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d191      	bne.n	8000e5a <__aeabi_fsub+0x1ce>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d198      	bne.n	8000e6c <__aeabi_fsub+0x1e0>
 8000f3a:	2680      	movs	r6, #128	; 0x80
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	22ff      	movs	r2, #255	; 0xff
 8000f40:	03f6      	lsls	r6, r6, #15
 8000f42:	e6ee      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000f44:	000c      	movs	r4, r1
 8000f46:	4643      	mov	r3, r8
 8000f48:	0015      	movs	r5, r2
 8000f4a:	e77c      	b.n	8000e46 <__aeabi_fsub+0x1ba>
 8000f4c:	4663      	mov	r3, ip
 8000f4e:	000c      	movs	r4, r1
 8000f50:	1ac6      	subs	r6, r0, r3
 8000f52:	e6c9      	b.n	8000ce8 <__aeabi_fsub+0x5c>
 8000f54:	0003      	movs	r3, r0
 8000f56:	4463      	add	r3, ip
 8000f58:	2501      	movs	r5, #1
 8000f5a:	015a      	lsls	r2, r3, #5
 8000f5c:	d400      	bmi.n	8000f60 <__aeabi_fsub+0x2d4>
 8000f5e:	e76e      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000f60:	2502      	movs	r5, #2
 8000f62:	e6fa      	b.n	8000d5a <__aeabi_fsub+0xce>
 8000f64:	4663      	mov	r3, ip
 8000f66:	2501      	movs	r5, #1
 8000f68:	1a1b      	subs	r3, r3, r0
 8000f6a:	e6b8      	b.n	8000cde <__aeabi_fsub+0x52>
 8000f6c:	4664      	mov	r4, ip
 8000f6e:	2320      	movs	r3, #32
 8000f70:	40d4      	lsrs	r4, r2
 8000f72:	1a9b      	subs	r3, r3, r2
 8000f74:	4662      	mov	r2, ip
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	1e5a      	subs	r2, r3, #1
 8000f7c:	4193      	sbcs	r3, r2
 8000f7e:	4323      	orrs	r3, r4
 8000f80:	e7a2      	b.n	8000ec8 <__aeabi_fsub+0x23c>
 8000f82:	4643      	mov	r3, r8
 8000f84:	e774      	b.n	8000e70 <__aeabi_fsub+0x1e4>
 8000f86:	4661      	mov	r1, ip
 8000f88:	2320      	movs	r3, #32
 8000f8a:	40d1      	lsrs	r1, r2
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	4662      	mov	r2, ip
 8000f90:	409a      	lsls	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	4193      	sbcs	r3, r2
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	e720      	b.n	8000dde <__aeabi_fsub+0x152>
 8000f9c:	4663      	mov	r3, ip
 8000f9e:	000c      	movs	r4, r1
 8000fa0:	2501      	movs	r5, #1
 8000fa2:	1ac3      	subs	r3, r0, r3
 8000fa4:	e69b      	b.n	8000cde <__aeabi_fsub+0x52>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d099      	beq.n	8000ede <__aeabi_fsub+0x252>
 8000faa:	000c      	movs	r4, r1
 8000fac:	4646      	mov	r6, r8
 8000fae:	2200      	movs	r2, #0
 8000fb0:	e6b7      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000fb2:	4646      	mov	r6, r8
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	e6b4      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d000      	beq.n	8000fbe <__aeabi_fsub+0x332>
 8000fbc:	e73f      	b.n	8000e3e <__aeabi_fsub+0x1b2>
 8000fbe:	2400      	movs	r4, #0
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	e6ae      	b.n	8000d22 <__aeabi_fsub+0x96>
 8000fc4:	fbffffff 	.word	0xfbffffff
 8000fc8:	7dffffff 	.word	0x7dffffff

08000fcc <__aeabi_ui2f>:
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	1e04      	subs	r4, r0, #0
 8000fd0:	d00e      	beq.n	8000ff0 <__aeabi_ui2f+0x24>
 8000fd2:	f001 ff59 	bl	8002e88 <__clzsi2>
 8000fd6:	239e      	movs	r3, #158	; 0x9e
 8000fd8:	0001      	movs	r1, r0
 8000fda:	1a1b      	subs	r3, r3, r0
 8000fdc:	2b96      	cmp	r3, #150	; 0x96
 8000fde:	dc0c      	bgt.n	8000ffa <__aeabi_ui2f+0x2e>
 8000fe0:	2808      	cmp	r0, #8
 8000fe2:	d02c      	beq.n	800103e <__aeabi_ui2f+0x72>
 8000fe4:	3908      	subs	r1, #8
 8000fe6:	408c      	lsls	r4, r1
 8000fe8:	0264      	lsls	r4, r4, #9
 8000fea:	0a64      	lsrs	r4, r4, #9
 8000fec:	b2d8      	uxtb	r0, r3
 8000fee:	e001      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	2400      	movs	r4, #0
 8000ff4:	05c0      	lsls	r0, r0, #23
 8000ff6:	4320      	orrs	r0, r4
 8000ff8:	bd70      	pop	{r4, r5, r6, pc}
 8000ffa:	2b99      	cmp	r3, #153	; 0x99
 8000ffc:	dd0a      	ble.n	8001014 <__aeabi_ui2f+0x48>
 8000ffe:	0002      	movs	r2, r0
 8001000:	0020      	movs	r0, r4
 8001002:	321b      	adds	r2, #27
 8001004:	4090      	lsls	r0, r2
 8001006:	0002      	movs	r2, r0
 8001008:	1e50      	subs	r0, r2, #1
 800100a:	4182      	sbcs	r2, r0
 800100c:	2005      	movs	r0, #5
 800100e:	1a40      	subs	r0, r0, r1
 8001010:	40c4      	lsrs	r4, r0
 8001012:	4314      	orrs	r4, r2
 8001014:	2905      	cmp	r1, #5
 8001016:	dc16      	bgt.n	8001046 <__aeabi_ui2f+0x7a>
 8001018:	0022      	movs	r2, r4
 800101a:	480f      	ldr	r0, [pc, #60]	; (8001058 <__aeabi_ui2f+0x8c>)
 800101c:	4002      	ands	r2, r0
 800101e:	0765      	lsls	r5, r4, #29
 8001020:	d009      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 8001022:	250f      	movs	r5, #15
 8001024:	402c      	ands	r4, r5
 8001026:	2c04      	cmp	r4, #4
 8001028:	d005      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 800102a:	3204      	adds	r2, #4
 800102c:	0154      	lsls	r4, r2, #5
 800102e:	d502      	bpl.n	8001036 <__aeabi_ui2f+0x6a>
 8001030:	239f      	movs	r3, #159	; 0x9f
 8001032:	4002      	ands	r2, r0
 8001034:	1a5b      	subs	r3, r3, r1
 8001036:	0192      	lsls	r2, r2, #6
 8001038:	0a54      	lsrs	r4, r2, #9
 800103a:	b2d8      	uxtb	r0, r3
 800103c:	e7da      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 800103e:	0264      	lsls	r4, r4, #9
 8001040:	2096      	movs	r0, #150	; 0x96
 8001042:	0a64      	lsrs	r4, r4, #9
 8001044:	e7d6      	b.n	8000ff4 <__aeabi_ui2f+0x28>
 8001046:	1f4a      	subs	r2, r1, #5
 8001048:	4094      	lsls	r4, r2
 800104a:	0022      	movs	r2, r4
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <__aeabi_ui2f+0x8c>)
 800104e:	4002      	ands	r2, r0
 8001050:	0765      	lsls	r5, r4, #29
 8001052:	d0f0      	beq.n	8001036 <__aeabi_ui2f+0x6a>
 8001054:	e7e5      	b.n	8001022 <__aeabi_ui2f+0x56>
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	fbffffff 	.word	0xfbffffff

0800105c <__aeabi_dadd>:
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	464f      	mov	r7, r9
 8001060:	4646      	mov	r6, r8
 8001062:	46d6      	mov	lr, sl
 8001064:	0004      	movs	r4, r0
 8001066:	b5c0      	push	{r6, r7, lr}
 8001068:	001f      	movs	r7, r3
 800106a:	030b      	lsls	r3, r1, #12
 800106c:	0010      	movs	r0, r2
 800106e:	004e      	lsls	r6, r1, #1
 8001070:	0a5b      	lsrs	r3, r3, #9
 8001072:	0fcd      	lsrs	r5, r1, #31
 8001074:	0f61      	lsrs	r1, r4, #29
 8001076:	007a      	lsls	r2, r7, #1
 8001078:	4319      	orrs	r1, r3
 800107a:	00e3      	lsls	r3, r4, #3
 800107c:	033c      	lsls	r4, r7, #12
 800107e:	0fff      	lsrs	r7, r7, #31
 8001080:	46bc      	mov	ip, r7
 8001082:	0a64      	lsrs	r4, r4, #9
 8001084:	0f47      	lsrs	r7, r0, #29
 8001086:	4327      	orrs	r7, r4
 8001088:	0d76      	lsrs	r6, r6, #21
 800108a:	0d52      	lsrs	r2, r2, #21
 800108c:	00c0      	lsls	r0, r0, #3
 800108e:	46b9      	mov	r9, r7
 8001090:	4680      	mov	r8, r0
 8001092:	1ab7      	subs	r7, r6, r2
 8001094:	4565      	cmp	r5, ip
 8001096:	d100      	bne.n	800109a <__aeabi_dadd+0x3e>
 8001098:	e09b      	b.n	80011d2 <__aeabi_dadd+0x176>
 800109a:	2f00      	cmp	r7, #0
 800109c:	dc00      	bgt.n	80010a0 <__aeabi_dadd+0x44>
 800109e:	e084      	b.n	80011aa <__aeabi_dadd+0x14e>
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dadd+0x4a>
 80010a4:	e0be      	b.n	8001224 <__aeabi_dadd+0x1c8>
 80010a6:	4ac8      	ldr	r2, [pc, #800]	; (80013c8 <__aeabi_dadd+0x36c>)
 80010a8:	4296      	cmp	r6, r2
 80010aa:	d100      	bne.n	80010ae <__aeabi_dadd+0x52>
 80010ac:	e124      	b.n	80012f8 <__aeabi_dadd+0x29c>
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	464c      	mov	r4, r9
 80010b2:	0412      	lsls	r2, r2, #16
 80010b4:	4314      	orrs	r4, r2
 80010b6:	46a1      	mov	r9, r4
 80010b8:	2f38      	cmp	r7, #56	; 0x38
 80010ba:	dd00      	ble.n	80010be <__aeabi_dadd+0x62>
 80010bc:	e167      	b.n	800138e <__aeabi_dadd+0x332>
 80010be:	2f1f      	cmp	r7, #31
 80010c0:	dd00      	ble.n	80010c4 <__aeabi_dadd+0x68>
 80010c2:	e1d6      	b.n	8001472 <__aeabi_dadd+0x416>
 80010c4:	2220      	movs	r2, #32
 80010c6:	464c      	mov	r4, r9
 80010c8:	1bd2      	subs	r2, r2, r7
 80010ca:	4094      	lsls	r4, r2
 80010cc:	46a2      	mov	sl, r4
 80010ce:	4644      	mov	r4, r8
 80010d0:	40fc      	lsrs	r4, r7
 80010d2:	0020      	movs	r0, r4
 80010d4:	4654      	mov	r4, sl
 80010d6:	4304      	orrs	r4, r0
 80010d8:	4640      	mov	r0, r8
 80010da:	4090      	lsls	r0, r2
 80010dc:	1e42      	subs	r2, r0, #1
 80010de:	4190      	sbcs	r0, r2
 80010e0:	464a      	mov	r2, r9
 80010e2:	40fa      	lsrs	r2, r7
 80010e4:	4304      	orrs	r4, r0
 80010e6:	1a89      	subs	r1, r1, r2
 80010e8:	1b1c      	subs	r4, r3, r4
 80010ea:	42a3      	cmp	r3, r4
 80010ec:	4192      	sbcs	r2, r2
 80010ee:	4252      	negs	r2, r2
 80010f0:	1a8b      	subs	r3, r1, r2
 80010f2:	469a      	mov	sl, r3
 80010f4:	4653      	mov	r3, sl
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	d400      	bmi.n	80010fc <__aeabi_dadd+0xa0>
 80010fa:	e0d4      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80010fc:	4653      	mov	r3, sl
 80010fe:	025a      	lsls	r2, r3, #9
 8001100:	0a53      	lsrs	r3, r2, #9
 8001102:	469a      	mov	sl, r3
 8001104:	4653      	mov	r3, sl
 8001106:	2b00      	cmp	r3, #0
 8001108:	d100      	bne.n	800110c <__aeabi_dadd+0xb0>
 800110a:	e104      	b.n	8001316 <__aeabi_dadd+0x2ba>
 800110c:	4650      	mov	r0, sl
 800110e:	f001 febb 	bl	8002e88 <__clzsi2>
 8001112:	0003      	movs	r3, r0
 8001114:	3b08      	subs	r3, #8
 8001116:	2220      	movs	r2, #32
 8001118:	0020      	movs	r0, r4
 800111a:	1ad2      	subs	r2, r2, r3
 800111c:	4651      	mov	r1, sl
 800111e:	40d0      	lsrs	r0, r2
 8001120:	4099      	lsls	r1, r3
 8001122:	0002      	movs	r2, r0
 8001124:	409c      	lsls	r4, r3
 8001126:	430a      	orrs	r2, r1
 8001128:	42b3      	cmp	r3, r6
 800112a:	da00      	bge.n	800112e <__aeabi_dadd+0xd2>
 800112c:	e102      	b.n	8001334 <__aeabi_dadd+0x2d8>
 800112e:	1b9b      	subs	r3, r3, r6
 8001130:	1c59      	adds	r1, r3, #1
 8001132:	291f      	cmp	r1, #31
 8001134:	dd00      	ble.n	8001138 <__aeabi_dadd+0xdc>
 8001136:	e0a7      	b.n	8001288 <__aeabi_dadd+0x22c>
 8001138:	2320      	movs	r3, #32
 800113a:	0010      	movs	r0, r2
 800113c:	0026      	movs	r6, r4
 800113e:	1a5b      	subs	r3, r3, r1
 8001140:	409c      	lsls	r4, r3
 8001142:	4098      	lsls	r0, r3
 8001144:	40ce      	lsrs	r6, r1
 8001146:	40ca      	lsrs	r2, r1
 8001148:	1e63      	subs	r3, r4, #1
 800114a:	419c      	sbcs	r4, r3
 800114c:	4330      	orrs	r0, r6
 800114e:	4692      	mov	sl, r2
 8001150:	2600      	movs	r6, #0
 8001152:	4304      	orrs	r4, r0
 8001154:	0763      	lsls	r3, r4, #29
 8001156:	d009      	beq.n	800116c <__aeabi_dadd+0x110>
 8001158:	230f      	movs	r3, #15
 800115a:	4023      	ands	r3, r4
 800115c:	2b04      	cmp	r3, #4
 800115e:	d005      	beq.n	800116c <__aeabi_dadd+0x110>
 8001160:	1d23      	adds	r3, r4, #4
 8001162:	42a3      	cmp	r3, r4
 8001164:	41a4      	sbcs	r4, r4
 8001166:	4264      	negs	r4, r4
 8001168:	44a2      	add	sl, r4
 800116a:	001c      	movs	r4, r3
 800116c:	4653      	mov	r3, sl
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	d400      	bmi.n	8001174 <__aeabi_dadd+0x118>
 8001172:	e09b      	b.n	80012ac <__aeabi_dadd+0x250>
 8001174:	4b94      	ldr	r3, [pc, #592]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001176:	3601      	adds	r6, #1
 8001178:	429e      	cmp	r6, r3
 800117a:	d100      	bne.n	800117e <__aeabi_dadd+0x122>
 800117c:	e0b8      	b.n	80012f0 <__aeabi_dadd+0x294>
 800117e:	4653      	mov	r3, sl
 8001180:	4992      	ldr	r1, [pc, #584]	; (80013cc <__aeabi_dadd+0x370>)
 8001182:	08e4      	lsrs	r4, r4, #3
 8001184:	400b      	ands	r3, r1
 8001186:	0019      	movs	r1, r3
 8001188:	075b      	lsls	r3, r3, #29
 800118a:	4323      	orrs	r3, r4
 800118c:	0572      	lsls	r2, r6, #21
 800118e:	024c      	lsls	r4, r1, #9
 8001190:	0b24      	lsrs	r4, r4, #12
 8001192:	0d52      	lsrs	r2, r2, #21
 8001194:	0512      	lsls	r2, r2, #20
 8001196:	07ed      	lsls	r5, r5, #31
 8001198:	4322      	orrs	r2, r4
 800119a:	432a      	orrs	r2, r5
 800119c:	0018      	movs	r0, r3
 800119e:	0011      	movs	r1, r2
 80011a0:	bce0      	pop	{r5, r6, r7}
 80011a2:	46ba      	mov	sl, r7
 80011a4:	46b1      	mov	r9, r6
 80011a6:	46a8      	mov	r8, r5
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011aa:	2f00      	cmp	r7, #0
 80011ac:	d048      	beq.n	8001240 <__aeabi_dadd+0x1e4>
 80011ae:	1b97      	subs	r7, r2, r6
 80011b0:	2e00      	cmp	r6, #0
 80011b2:	d000      	beq.n	80011b6 <__aeabi_dadd+0x15a>
 80011b4:	e10e      	b.n	80013d4 <__aeabi_dadd+0x378>
 80011b6:	000c      	movs	r4, r1
 80011b8:	431c      	orrs	r4, r3
 80011ba:	d100      	bne.n	80011be <__aeabi_dadd+0x162>
 80011bc:	e1b7      	b.n	800152e <__aeabi_dadd+0x4d2>
 80011be:	1e7c      	subs	r4, r7, #1
 80011c0:	2f01      	cmp	r7, #1
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dadd+0x16a>
 80011c4:	e226      	b.n	8001614 <__aeabi_dadd+0x5b8>
 80011c6:	4d80      	ldr	r5, [pc, #512]	; (80013c8 <__aeabi_dadd+0x36c>)
 80011c8:	42af      	cmp	r7, r5
 80011ca:	d100      	bne.n	80011ce <__aeabi_dadd+0x172>
 80011cc:	e1d5      	b.n	800157a <__aeabi_dadd+0x51e>
 80011ce:	0027      	movs	r7, r4
 80011d0:	e107      	b.n	80013e2 <__aeabi_dadd+0x386>
 80011d2:	2f00      	cmp	r7, #0
 80011d4:	dc00      	bgt.n	80011d8 <__aeabi_dadd+0x17c>
 80011d6:	e0b2      	b.n	800133e <__aeabi_dadd+0x2e2>
 80011d8:	2a00      	cmp	r2, #0
 80011da:	d047      	beq.n	800126c <__aeabi_dadd+0x210>
 80011dc:	4a7a      	ldr	r2, [pc, #488]	; (80013c8 <__aeabi_dadd+0x36c>)
 80011de:	4296      	cmp	r6, r2
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x188>
 80011e2:	e089      	b.n	80012f8 <__aeabi_dadd+0x29c>
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	464c      	mov	r4, r9
 80011e8:	0412      	lsls	r2, r2, #16
 80011ea:	4314      	orrs	r4, r2
 80011ec:	46a1      	mov	r9, r4
 80011ee:	2f38      	cmp	r7, #56	; 0x38
 80011f0:	dc6b      	bgt.n	80012ca <__aeabi_dadd+0x26e>
 80011f2:	2f1f      	cmp	r7, #31
 80011f4:	dc00      	bgt.n	80011f8 <__aeabi_dadd+0x19c>
 80011f6:	e16e      	b.n	80014d6 <__aeabi_dadd+0x47a>
 80011f8:	003a      	movs	r2, r7
 80011fa:	4648      	mov	r0, r9
 80011fc:	3a20      	subs	r2, #32
 80011fe:	40d0      	lsrs	r0, r2
 8001200:	4684      	mov	ip, r0
 8001202:	2f20      	cmp	r7, #32
 8001204:	d007      	beq.n	8001216 <__aeabi_dadd+0x1ba>
 8001206:	2240      	movs	r2, #64	; 0x40
 8001208:	4648      	mov	r0, r9
 800120a:	1bd2      	subs	r2, r2, r7
 800120c:	4090      	lsls	r0, r2
 800120e:	0002      	movs	r2, r0
 8001210:	4640      	mov	r0, r8
 8001212:	4310      	orrs	r0, r2
 8001214:	4680      	mov	r8, r0
 8001216:	4640      	mov	r0, r8
 8001218:	1e42      	subs	r2, r0, #1
 800121a:	4190      	sbcs	r0, r2
 800121c:	4662      	mov	r2, ip
 800121e:	0004      	movs	r4, r0
 8001220:	4314      	orrs	r4, r2
 8001222:	e057      	b.n	80012d4 <__aeabi_dadd+0x278>
 8001224:	464a      	mov	r2, r9
 8001226:	4302      	orrs	r2, r0
 8001228:	d100      	bne.n	800122c <__aeabi_dadd+0x1d0>
 800122a:	e103      	b.n	8001434 <__aeabi_dadd+0x3d8>
 800122c:	1e7a      	subs	r2, r7, #1
 800122e:	2f01      	cmp	r7, #1
 8001230:	d100      	bne.n	8001234 <__aeabi_dadd+0x1d8>
 8001232:	e193      	b.n	800155c <__aeabi_dadd+0x500>
 8001234:	4c64      	ldr	r4, [pc, #400]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001236:	42a7      	cmp	r7, r4
 8001238:	d100      	bne.n	800123c <__aeabi_dadd+0x1e0>
 800123a:	e18a      	b.n	8001552 <__aeabi_dadd+0x4f6>
 800123c:	0017      	movs	r7, r2
 800123e:	e73b      	b.n	80010b8 <__aeabi_dadd+0x5c>
 8001240:	4c63      	ldr	r4, [pc, #396]	; (80013d0 <__aeabi_dadd+0x374>)
 8001242:	1c72      	adds	r2, r6, #1
 8001244:	4222      	tst	r2, r4
 8001246:	d000      	beq.n	800124a <__aeabi_dadd+0x1ee>
 8001248:	e0e0      	b.n	800140c <__aeabi_dadd+0x3b0>
 800124a:	000a      	movs	r2, r1
 800124c:	431a      	orrs	r2, r3
 800124e:	2e00      	cmp	r6, #0
 8001250:	d000      	beq.n	8001254 <__aeabi_dadd+0x1f8>
 8001252:	e174      	b.n	800153e <__aeabi_dadd+0x4e2>
 8001254:	2a00      	cmp	r2, #0
 8001256:	d100      	bne.n	800125a <__aeabi_dadd+0x1fe>
 8001258:	e1d0      	b.n	80015fc <__aeabi_dadd+0x5a0>
 800125a:	464a      	mov	r2, r9
 800125c:	4302      	orrs	r2, r0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x206>
 8001260:	e1e3      	b.n	800162a <__aeabi_dadd+0x5ce>
 8001262:	074a      	lsls	r2, r1, #29
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	4313      	orrs	r3, r2
 8001268:	08c9      	lsrs	r1, r1, #3
 800126a:	e029      	b.n	80012c0 <__aeabi_dadd+0x264>
 800126c:	464a      	mov	r2, r9
 800126e:	4302      	orrs	r2, r0
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0x218>
 8001272:	e17d      	b.n	8001570 <__aeabi_dadd+0x514>
 8001274:	1e7a      	subs	r2, r7, #1
 8001276:	2f01      	cmp	r7, #1
 8001278:	d100      	bne.n	800127c <__aeabi_dadd+0x220>
 800127a:	e0e0      	b.n	800143e <__aeabi_dadd+0x3e2>
 800127c:	4c52      	ldr	r4, [pc, #328]	; (80013c8 <__aeabi_dadd+0x36c>)
 800127e:	42a7      	cmp	r7, r4
 8001280:	d100      	bne.n	8001284 <__aeabi_dadd+0x228>
 8001282:	e166      	b.n	8001552 <__aeabi_dadd+0x4f6>
 8001284:	0017      	movs	r7, r2
 8001286:	e7b2      	b.n	80011ee <__aeabi_dadd+0x192>
 8001288:	0010      	movs	r0, r2
 800128a:	3b1f      	subs	r3, #31
 800128c:	40d8      	lsrs	r0, r3
 800128e:	2920      	cmp	r1, #32
 8001290:	d003      	beq.n	800129a <__aeabi_dadd+0x23e>
 8001292:	2340      	movs	r3, #64	; 0x40
 8001294:	1a5b      	subs	r3, r3, r1
 8001296:	409a      	lsls	r2, r3
 8001298:	4314      	orrs	r4, r2
 800129a:	1e63      	subs	r3, r4, #1
 800129c:	419c      	sbcs	r4, r3
 800129e:	2300      	movs	r3, #0
 80012a0:	2600      	movs	r6, #0
 80012a2:	469a      	mov	sl, r3
 80012a4:	4304      	orrs	r4, r0
 80012a6:	0763      	lsls	r3, r4, #29
 80012a8:	d000      	beq.n	80012ac <__aeabi_dadd+0x250>
 80012aa:	e755      	b.n	8001158 <__aeabi_dadd+0xfc>
 80012ac:	4652      	mov	r2, sl
 80012ae:	08e3      	lsrs	r3, r4, #3
 80012b0:	0752      	lsls	r2, r2, #29
 80012b2:	4313      	orrs	r3, r2
 80012b4:	4652      	mov	r2, sl
 80012b6:	0037      	movs	r7, r6
 80012b8:	08d1      	lsrs	r1, r2, #3
 80012ba:	4a43      	ldr	r2, [pc, #268]	; (80013c8 <__aeabi_dadd+0x36c>)
 80012bc:	4297      	cmp	r7, r2
 80012be:	d01f      	beq.n	8001300 <__aeabi_dadd+0x2a4>
 80012c0:	0309      	lsls	r1, r1, #12
 80012c2:	057a      	lsls	r2, r7, #21
 80012c4:	0b0c      	lsrs	r4, r1, #12
 80012c6:	0d52      	lsrs	r2, r2, #21
 80012c8:	e764      	b.n	8001194 <__aeabi_dadd+0x138>
 80012ca:	4642      	mov	r2, r8
 80012cc:	464c      	mov	r4, r9
 80012ce:	4314      	orrs	r4, r2
 80012d0:	1e62      	subs	r2, r4, #1
 80012d2:	4194      	sbcs	r4, r2
 80012d4:	18e4      	adds	r4, r4, r3
 80012d6:	429c      	cmp	r4, r3
 80012d8:	4192      	sbcs	r2, r2
 80012da:	4252      	negs	r2, r2
 80012dc:	4692      	mov	sl, r2
 80012de:	448a      	add	sl, r1
 80012e0:	4653      	mov	r3, sl
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	d5df      	bpl.n	80012a6 <__aeabi_dadd+0x24a>
 80012e6:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <__aeabi_dadd+0x36c>)
 80012e8:	3601      	adds	r6, #1
 80012ea:	429e      	cmp	r6, r3
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x294>
 80012ee:	e0b3      	b.n	8001458 <__aeabi_dadd+0x3fc>
 80012f0:	0032      	movs	r2, r6
 80012f2:	2400      	movs	r4, #0
 80012f4:	2300      	movs	r3, #0
 80012f6:	e74d      	b.n	8001194 <__aeabi_dadd+0x138>
 80012f8:	074a      	lsls	r2, r1, #29
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	08c9      	lsrs	r1, r1, #3
 8001300:	001a      	movs	r2, r3
 8001302:	430a      	orrs	r2, r1
 8001304:	d100      	bne.n	8001308 <__aeabi_dadd+0x2ac>
 8001306:	e200      	b.n	800170a <__aeabi_dadd+0x6ae>
 8001308:	2480      	movs	r4, #128	; 0x80
 800130a:	0324      	lsls	r4, r4, #12
 800130c:	430c      	orrs	r4, r1
 800130e:	0324      	lsls	r4, r4, #12
 8001310:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <__aeabi_dadd+0x36c>)
 8001312:	0b24      	lsrs	r4, r4, #12
 8001314:	e73e      	b.n	8001194 <__aeabi_dadd+0x138>
 8001316:	0020      	movs	r0, r4
 8001318:	f001 fdb6 	bl	8002e88 <__clzsi2>
 800131c:	0003      	movs	r3, r0
 800131e:	3318      	adds	r3, #24
 8001320:	2b1f      	cmp	r3, #31
 8001322:	dc00      	bgt.n	8001326 <__aeabi_dadd+0x2ca>
 8001324:	e6f7      	b.n	8001116 <__aeabi_dadd+0xba>
 8001326:	0022      	movs	r2, r4
 8001328:	3808      	subs	r0, #8
 800132a:	4082      	lsls	r2, r0
 800132c:	2400      	movs	r4, #0
 800132e:	42b3      	cmp	r3, r6
 8001330:	db00      	blt.n	8001334 <__aeabi_dadd+0x2d8>
 8001332:	e6fc      	b.n	800112e <__aeabi_dadd+0xd2>
 8001334:	1af6      	subs	r6, r6, r3
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <__aeabi_dadd+0x370>)
 8001338:	401a      	ands	r2, r3
 800133a:	4692      	mov	sl, r2
 800133c:	e70a      	b.n	8001154 <__aeabi_dadd+0xf8>
 800133e:	2f00      	cmp	r7, #0
 8001340:	d02b      	beq.n	800139a <__aeabi_dadd+0x33e>
 8001342:	1b97      	subs	r7, r2, r6
 8001344:	2e00      	cmp	r6, #0
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x2ee>
 8001348:	e0b8      	b.n	80014bc <__aeabi_dadd+0x460>
 800134a:	4c1f      	ldr	r4, [pc, #124]	; (80013c8 <__aeabi_dadd+0x36c>)
 800134c:	42a2      	cmp	r2, r4
 800134e:	d100      	bne.n	8001352 <__aeabi_dadd+0x2f6>
 8001350:	e11c      	b.n	800158c <__aeabi_dadd+0x530>
 8001352:	2480      	movs	r4, #128	; 0x80
 8001354:	0424      	lsls	r4, r4, #16
 8001356:	4321      	orrs	r1, r4
 8001358:	2f38      	cmp	r7, #56	; 0x38
 800135a:	dd00      	ble.n	800135e <__aeabi_dadd+0x302>
 800135c:	e11e      	b.n	800159c <__aeabi_dadd+0x540>
 800135e:	2f1f      	cmp	r7, #31
 8001360:	dd00      	ble.n	8001364 <__aeabi_dadd+0x308>
 8001362:	e19e      	b.n	80016a2 <__aeabi_dadd+0x646>
 8001364:	2620      	movs	r6, #32
 8001366:	000c      	movs	r4, r1
 8001368:	1bf6      	subs	r6, r6, r7
 800136a:	0018      	movs	r0, r3
 800136c:	40b3      	lsls	r3, r6
 800136e:	40b4      	lsls	r4, r6
 8001370:	40f8      	lsrs	r0, r7
 8001372:	1e5e      	subs	r6, r3, #1
 8001374:	41b3      	sbcs	r3, r6
 8001376:	40f9      	lsrs	r1, r7
 8001378:	4304      	orrs	r4, r0
 800137a:	431c      	orrs	r4, r3
 800137c:	4489      	add	r9, r1
 800137e:	4444      	add	r4, r8
 8001380:	4544      	cmp	r4, r8
 8001382:	419b      	sbcs	r3, r3
 8001384:	425b      	negs	r3, r3
 8001386:	444b      	add	r3, r9
 8001388:	469a      	mov	sl, r3
 800138a:	0016      	movs	r6, r2
 800138c:	e7a8      	b.n	80012e0 <__aeabi_dadd+0x284>
 800138e:	4642      	mov	r2, r8
 8001390:	464c      	mov	r4, r9
 8001392:	4314      	orrs	r4, r2
 8001394:	1e62      	subs	r2, r4, #1
 8001396:	4194      	sbcs	r4, r2
 8001398:	e6a6      	b.n	80010e8 <__aeabi_dadd+0x8c>
 800139a:	4c0d      	ldr	r4, [pc, #52]	; (80013d0 <__aeabi_dadd+0x374>)
 800139c:	1c72      	adds	r2, r6, #1
 800139e:	4222      	tst	r2, r4
 80013a0:	d000      	beq.n	80013a4 <__aeabi_dadd+0x348>
 80013a2:	e0a8      	b.n	80014f6 <__aeabi_dadd+0x49a>
 80013a4:	000a      	movs	r2, r1
 80013a6:	431a      	orrs	r2, r3
 80013a8:	2e00      	cmp	r6, #0
 80013aa:	d000      	beq.n	80013ae <__aeabi_dadd+0x352>
 80013ac:	e10a      	b.n	80015c4 <__aeabi_dadd+0x568>
 80013ae:	2a00      	cmp	r2, #0
 80013b0:	d100      	bne.n	80013b4 <__aeabi_dadd+0x358>
 80013b2:	e15e      	b.n	8001672 <__aeabi_dadd+0x616>
 80013b4:	464a      	mov	r2, r9
 80013b6:	4302      	orrs	r2, r0
 80013b8:	d000      	beq.n	80013bc <__aeabi_dadd+0x360>
 80013ba:	e161      	b.n	8001680 <__aeabi_dadd+0x624>
 80013bc:	074a      	lsls	r2, r1, #29
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	08c9      	lsrs	r1, r1, #3
 80013c4:	e77c      	b.n	80012c0 <__aeabi_dadd+0x264>
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	000007ff 	.word	0x000007ff
 80013cc:	ff7fffff 	.word	0xff7fffff
 80013d0:	000007fe 	.word	0x000007fe
 80013d4:	4ccf      	ldr	r4, [pc, #828]	; (8001714 <__aeabi_dadd+0x6b8>)
 80013d6:	42a2      	cmp	r2, r4
 80013d8:	d100      	bne.n	80013dc <__aeabi_dadd+0x380>
 80013da:	e0ce      	b.n	800157a <__aeabi_dadd+0x51e>
 80013dc:	2480      	movs	r4, #128	; 0x80
 80013de:	0424      	lsls	r4, r4, #16
 80013e0:	4321      	orrs	r1, r4
 80013e2:	2f38      	cmp	r7, #56	; 0x38
 80013e4:	dc5b      	bgt.n	800149e <__aeabi_dadd+0x442>
 80013e6:	2f1f      	cmp	r7, #31
 80013e8:	dd00      	ble.n	80013ec <__aeabi_dadd+0x390>
 80013ea:	e0dc      	b.n	80015a6 <__aeabi_dadd+0x54a>
 80013ec:	2520      	movs	r5, #32
 80013ee:	000c      	movs	r4, r1
 80013f0:	1bed      	subs	r5, r5, r7
 80013f2:	001e      	movs	r6, r3
 80013f4:	40ab      	lsls	r3, r5
 80013f6:	40ac      	lsls	r4, r5
 80013f8:	40fe      	lsrs	r6, r7
 80013fa:	1e5d      	subs	r5, r3, #1
 80013fc:	41ab      	sbcs	r3, r5
 80013fe:	4334      	orrs	r4, r6
 8001400:	40f9      	lsrs	r1, r7
 8001402:	431c      	orrs	r4, r3
 8001404:	464b      	mov	r3, r9
 8001406:	1a5b      	subs	r3, r3, r1
 8001408:	4699      	mov	r9, r3
 800140a:	e04c      	b.n	80014a6 <__aeabi_dadd+0x44a>
 800140c:	464a      	mov	r2, r9
 800140e:	1a1c      	subs	r4, r3, r0
 8001410:	1a88      	subs	r0, r1, r2
 8001412:	42a3      	cmp	r3, r4
 8001414:	4192      	sbcs	r2, r2
 8001416:	4252      	negs	r2, r2
 8001418:	4692      	mov	sl, r2
 800141a:	0002      	movs	r2, r0
 800141c:	4650      	mov	r0, sl
 800141e:	1a12      	subs	r2, r2, r0
 8001420:	4692      	mov	sl, r2
 8001422:	0212      	lsls	r2, r2, #8
 8001424:	d478      	bmi.n	8001518 <__aeabi_dadd+0x4bc>
 8001426:	4653      	mov	r3, sl
 8001428:	4323      	orrs	r3, r4
 800142a:	d000      	beq.n	800142e <__aeabi_dadd+0x3d2>
 800142c:	e66a      	b.n	8001104 <__aeabi_dadd+0xa8>
 800142e:	2100      	movs	r1, #0
 8001430:	2500      	movs	r5, #0
 8001432:	e745      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001434:	074a      	lsls	r2, r1, #29
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	4313      	orrs	r3, r2
 800143a:	08c9      	lsrs	r1, r1, #3
 800143c:	e73d      	b.n	80012ba <__aeabi_dadd+0x25e>
 800143e:	181c      	adds	r4, r3, r0
 8001440:	429c      	cmp	r4, r3
 8001442:	419b      	sbcs	r3, r3
 8001444:	4449      	add	r1, r9
 8001446:	468a      	mov	sl, r1
 8001448:	425b      	negs	r3, r3
 800144a:	449a      	add	sl, r3
 800144c:	4653      	mov	r3, sl
 800144e:	2601      	movs	r6, #1
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	d400      	bmi.n	8001456 <__aeabi_dadd+0x3fa>
 8001454:	e727      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001456:	2602      	movs	r6, #2
 8001458:	4652      	mov	r2, sl
 800145a:	4baf      	ldr	r3, [pc, #700]	; (8001718 <__aeabi_dadd+0x6bc>)
 800145c:	2101      	movs	r1, #1
 800145e:	401a      	ands	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	4021      	ands	r1, r4
 8001464:	0862      	lsrs	r2, r4, #1
 8001466:	430a      	orrs	r2, r1
 8001468:	07dc      	lsls	r4, r3, #31
 800146a:	085b      	lsrs	r3, r3, #1
 800146c:	469a      	mov	sl, r3
 800146e:	4314      	orrs	r4, r2
 8001470:	e670      	b.n	8001154 <__aeabi_dadd+0xf8>
 8001472:	003a      	movs	r2, r7
 8001474:	464c      	mov	r4, r9
 8001476:	3a20      	subs	r2, #32
 8001478:	40d4      	lsrs	r4, r2
 800147a:	46a4      	mov	ip, r4
 800147c:	2f20      	cmp	r7, #32
 800147e:	d007      	beq.n	8001490 <__aeabi_dadd+0x434>
 8001480:	2240      	movs	r2, #64	; 0x40
 8001482:	4648      	mov	r0, r9
 8001484:	1bd2      	subs	r2, r2, r7
 8001486:	4090      	lsls	r0, r2
 8001488:	0002      	movs	r2, r0
 800148a:	4640      	mov	r0, r8
 800148c:	4310      	orrs	r0, r2
 800148e:	4680      	mov	r8, r0
 8001490:	4640      	mov	r0, r8
 8001492:	1e42      	subs	r2, r0, #1
 8001494:	4190      	sbcs	r0, r2
 8001496:	4662      	mov	r2, ip
 8001498:	0004      	movs	r4, r0
 800149a:	4314      	orrs	r4, r2
 800149c:	e624      	b.n	80010e8 <__aeabi_dadd+0x8c>
 800149e:	4319      	orrs	r1, r3
 80014a0:	000c      	movs	r4, r1
 80014a2:	1e63      	subs	r3, r4, #1
 80014a4:	419c      	sbcs	r4, r3
 80014a6:	4643      	mov	r3, r8
 80014a8:	1b1c      	subs	r4, r3, r4
 80014aa:	45a0      	cmp	r8, r4
 80014ac:	419b      	sbcs	r3, r3
 80014ae:	4649      	mov	r1, r9
 80014b0:	425b      	negs	r3, r3
 80014b2:	1acb      	subs	r3, r1, r3
 80014b4:	469a      	mov	sl, r3
 80014b6:	4665      	mov	r5, ip
 80014b8:	0016      	movs	r6, r2
 80014ba:	e61b      	b.n	80010f4 <__aeabi_dadd+0x98>
 80014bc:	000c      	movs	r4, r1
 80014be:	431c      	orrs	r4, r3
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dadd+0x468>
 80014c2:	e0c7      	b.n	8001654 <__aeabi_dadd+0x5f8>
 80014c4:	1e7c      	subs	r4, r7, #1
 80014c6:	2f01      	cmp	r7, #1
 80014c8:	d100      	bne.n	80014cc <__aeabi_dadd+0x470>
 80014ca:	e0f9      	b.n	80016c0 <__aeabi_dadd+0x664>
 80014cc:	4e91      	ldr	r6, [pc, #580]	; (8001714 <__aeabi_dadd+0x6b8>)
 80014ce:	42b7      	cmp	r7, r6
 80014d0:	d05c      	beq.n	800158c <__aeabi_dadd+0x530>
 80014d2:	0027      	movs	r7, r4
 80014d4:	e740      	b.n	8001358 <__aeabi_dadd+0x2fc>
 80014d6:	2220      	movs	r2, #32
 80014d8:	464c      	mov	r4, r9
 80014da:	4640      	mov	r0, r8
 80014dc:	1bd2      	subs	r2, r2, r7
 80014de:	4094      	lsls	r4, r2
 80014e0:	40f8      	lsrs	r0, r7
 80014e2:	4304      	orrs	r4, r0
 80014e4:	4640      	mov	r0, r8
 80014e6:	4090      	lsls	r0, r2
 80014e8:	1e42      	subs	r2, r0, #1
 80014ea:	4190      	sbcs	r0, r2
 80014ec:	464a      	mov	r2, r9
 80014ee:	40fa      	lsrs	r2, r7
 80014f0:	4304      	orrs	r4, r0
 80014f2:	1889      	adds	r1, r1, r2
 80014f4:	e6ee      	b.n	80012d4 <__aeabi_dadd+0x278>
 80014f6:	4c87      	ldr	r4, [pc, #540]	; (8001714 <__aeabi_dadd+0x6b8>)
 80014f8:	42a2      	cmp	r2, r4
 80014fa:	d100      	bne.n	80014fe <__aeabi_dadd+0x4a2>
 80014fc:	e6f9      	b.n	80012f2 <__aeabi_dadd+0x296>
 80014fe:	1818      	adds	r0, r3, r0
 8001500:	4298      	cmp	r0, r3
 8001502:	419b      	sbcs	r3, r3
 8001504:	4449      	add	r1, r9
 8001506:	425b      	negs	r3, r3
 8001508:	18cb      	adds	r3, r1, r3
 800150a:	07dc      	lsls	r4, r3, #31
 800150c:	0840      	lsrs	r0, r0, #1
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	469a      	mov	sl, r3
 8001512:	0016      	movs	r6, r2
 8001514:	4304      	orrs	r4, r0
 8001516:	e6c6      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001518:	4642      	mov	r2, r8
 800151a:	1ad4      	subs	r4, r2, r3
 800151c:	45a0      	cmp	r8, r4
 800151e:	4180      	sbcs	r0, r0
 8001520:	464b      	mov	r3, r9
 8001522:	4240      	negs	r0, r0
 8001524:	1a59      	subs	r1, r3, r1
 8001526:	1a0b      	subs	r3, r1, r0
 8001528:	469a      	mov	sl, r3
 800152a:	4665      	mov	r5, ip
 800152c:	e5ea      	b.n	8001104 <__aeabi_dadd+0xa8>
 800152e:	464b      	mov	r3, r9
 8001530:	464a      	mov	r2, r9
 8001532:	08c0      	lsrs	r0, r0, #3
 8001534:	075b      	lsls	r3, r3, #29
 8001536:	4665      	mov	r5, ip
 8001538:	4303      	orrs	r3, r0
 800153a:	08d1      	lsrs	r1, r2, #3
 800153c:	e6bd      	b.n	80012ba <__aeabi_dadd+0x25e>
 800153e:	2a00      	cmp	r2, #0
 8001540:	d000      	beq.n	8001544 <__aeabi_dadd+0x4e8>
 8001542:	e08e      	b.n	8001662 <__aeabi_dadd+0x606>
 8001544:	464b      	mov	r3, r9
 8001546:	4303      	orrs	r3, r0
 8001548:	d117      	bne.n	800157a <__aeabi_dadd+0x51e>
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	2500      	movs	r5, #0
 800154e:	0309      	lsls	r1, r1, #12
 8001550:	e6da      	b.n	8001308 <__aeabi_dadd+0x2ac>
 8001552:	074a      	lsls	r2, r1, #29
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	4313      	orrs	r3, r2
 8001558:	08c9      	lsrs	r1, r1, #3
 800155a:	e6d1      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800155c:	1a1c      	subs	r4, r3, r0
 800155e:	464a      	mov	r2, r9
 8001560:	42a3      	cmp	r3, r4
 8001562:	419b      	sbcs	r3, r3
 8001564:	1a89      	subs	r1, r1, r2
 8001566:	425b      	negs	r3, r3
 8001568:	1acb      	subs	r3, r1, r3
 800156a:	469a      	mov	sl, r3
 800156c:	2601      	movs	r6, #1
 800156e:	e5c1      	b.n	80010f4 <__aeabi_dadd+0x98>
 8001570:	074a      	lsls	r2, r1, #29
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	4313      	orrs	r3, r2
 8001576:	08c9      	lsrs	r1, r1, #3
 8001578:	e69f      	b.n	80012ba <__aeabi_dadd+0x25e>
 800157a:	4643      	mov	r3, r8
 800157c:	08d8      	lsrs	r0, r3, #3
 800157e:	464b      	mov	r3, r9
 8001580:	464a      	mov	r2, r9
 8001582:	075b      	lsls	r3, r3, #29
 8001584:	4665      	mov	r5, ip
 8001586:	4303      	orrs	r3, r0
 8001588:	08d1      	lsrs	r1, r2, #3
 800158a:	e6b9      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800158c:	4643      	mov	r3, r8
 800158e:	08d8      	lsrs	r0, r3, #3
 8001590:	464b      	mov	r3, r9
 8001592:	464a      	mov	r2, r9
 8001594:	075b      	lsls	r3, r3, #29
 8001596:	4303      	orrs	r3, r0
 8001598:	08d1      	lsrs	r1, r2, #3
 800159a:	e6b1      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800159c:	4319      	orrs	r1, r3
 800159e:	000c      	movs	r4, r1
 80015a0:	1e63      	subs	r3, r4, #1
 80015a2:	419c      	sbcs	r4, r3
 80015a4:	e6eb      	b.n	800137e <__aeabi_dadd+0x322>
 80015a6:	003c      	movs	r4, r7
 80015a8:	000d      	movs	r5, r1
 80015aa:	3c20      	subs	r4, #32
 80015ac:	40e5      	lsrs	r5, r4
 80015ae:	2f20      	cmp	r7, #32
 80015b0:	d003      	beq.n	80015ba <__aeabi_dadd+0x55e>
 80015b2:	2440      	movs	r4, #64	; 0x40
 80015b4:	1be4      	subs	r4, r4, r7
 80015b6:	40a1      	lsls	r1, r4
 80015b8:	430b      	orrs	r3, r1
 80015ba:	001c      	movs	r4, r3
 80015bc:	1e63      	subs	r3, r4, #1
 80015be:	419c      	sbcs	r4, r3
 80015c0:	432c      	orrs	r4, r5
 80015c2:	e770      	b.n	80014a6 <__aeabi_dadd+0x44a>
 80015c4:	2a00      	cmp	r2, #0
 80015c6:	d0e1      	beq.n	800158c <__aeabi_dadd+0x530>
 80015c8:	464a      	mov	r2, r9
 80015ca:	4302      	orrs	r2, r0
 80015cc:	d0c1      	beq.n	8001552 <__aeabi_dadd+0x4f6>
 80015ce:	074a      	lsls	r2, r1, #29
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	08c9      	lsrs	r1, r1, #3
 80015d8:	0312      	lsls	r2, r2, #12
 80015da:	4211      	tst	r1, r2
 80015dc:	d008      	beq.n	80015f0 <__aeabi_dadd+0x594>
 80015de:	4648      	mov	r0, r9
 80015e0:	08c4      	lsrs	r4, r0, #3
 80015e2:	4214      	tst	r4, r2
 80015e4:	d104      	bne.n	80015f0 <__aeabi_dadd+0x594>
 80015e6:	4643      	mov	r3, r8
 80015e8:	0021      	movs	r1, r4
 80015ea:	08db      	lsrs	r3, r3, #3
 80015ec:	0742      	lsls	r2, r0, #29
 80015ee:	4313      	orrs	r3, r2
 80015f0:	0f5a      	lsrs	r2, r3, #29
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	0752      	lsls	r2, r2, #29
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	e681      	b.n	8001300 <__aeabi_dadd+0x2a4>
 80015fc:	464b      	mov	r3, r9
 80015fe:	4303      	orrs	r3, r0
 8001600:	d100      	bne.n	8001604 <__aeabi_dadd+0x5a8>
 8001602:	e714      	b.n	800142e <__aeabi_dadd+0x3d2>
 8001604:	464b      	mov	r3, r9
 8001606:	464a      	mov	r2, r9
 8001608:	08c0      	lsrs	r0, r0, #3
 800160a:	075b      	lsls	r3, r3, #29
 800160c:	4665      	mov	r5, ip
 800160e:	4303      	orrs	r3, r0
 8001610:	08d1      	lsrs	r1, r2, #3
 8001612:	e655      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001614:	1ac4      	subs	r4, r0, r3
 8001616:	45a0      	cmp	r8, r4
 8001618:	4180      	sbcs	r0, r0
 800161a:	464b      	mov	r3, r9
 800161c:	4240      	negs	r0, r0
 800161e:	1a59      	subs	r1, r3, r1
 8001620:	1a0b      	subs	r3, r1, r0
 8001622:	469a      	mov	sl, r3
 8001624:	4665      	mov	r5, ip
 8001626:	2601      	movs	r6, #1
 8001628:	e564      	b.n	80010f4 <__aeabi_dadd+0x98>
 800162a:	1a1c      	subs	r4, r3, r0
 800162c:	464a      	mov	r2, r9
 800162e:	42a3      	cmp	r3, r4
 8001630:	4180      	sbcs	r0, r0
 8001632:	1a8a      	subs	r2, r1, r2
 8001634:	4240      	negs	r0, r0
 8001636:	1a12      	subs	r2, r2, r0
 8001638:	4692      	mov	sl, r2
 800163a:	0212      	lsls	r2, r2, #8
 800163c:	d549      	bpl.n	80016d2 <__aeabi_dadd+0x676>
 800163e:	4642      	mov	r2, r8
 8001640:	1ad4      	subs	r4, r2, r3
 8001642:	45a0      	cmp	r8, r4
 8001644:	4180      	sbcs	r0, r0
 8001646:	464b      	mov	r3, r9
 8001648:	4240      	negs	r0, r0
 800164a:	1a59      	subs	r1, r3, r1
 800164c:	1a0b      	subs	r3, r1, r0
 800164e:	469a      	mov	sl, r3
 8001650:	4665      	mov	r5, ip
 8001652:	e57f      	b.n	8001154 <__aeabi_dadd+0xf8>
 8001654:	464b      	mov	r3, r9
 8001656:	464a      	mov	r2, r9
 8001658:	08c0      	lsrs	r0, r0, #3
 800165a:	075b      	lsls	r3, r3, #29
 800165c:	4303      	orrs	r3, r0
 800165e:	08d1      	lsrs	r1, r2, #3
 8001660:	e62b      	b.n	80012ba <__aeabi_dadd+0x25e>
 8001662:	464a      	mov	r2, r9
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	4302      	orrs	r2, r0
 8001668:	d138      	bne.n	80016dc <__aeabi_dadd+0x680>
 800166a:	074a      	lsls	r2, r1, #29
 800166c:	4313      	orrs	r3, r2
 800166e:	08c9      	lsrs	r1, r1, #3
 8001670:	e646      	b.n	8001300 <__aeabi_dadd+0x2a4>
 8001672:	464b      	mov	r3, r9
 8001674:	464a      	mov	r2, r9
 8001676:	08c0      	lsrs	r0, r0, #3
 8001678:	075b      	lsls	r3, r3, #29
 800167a:	4303      	orrs	r3, r0
 800167c:	08d1      	lsrs	r1, r2, #3
 800167e:	e61f      	b.n	80012c0 <__aeabi_dadd+0x264>
 8001680:	181c      	adds	r4, r3, r0
 8001682:	429c      	cmp	r4, r3
 8001684:	419b      	sbcs	r3, r3
 8001686:	4449      	add	r1, r9
 8001688:	468a      	mov	sl, r1
 800168a:	425b      	negs	r3, r3
 800168c:	449a      	add	sl, r3
 800168e:	4653      	mov	r3, sl
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	d400      	bmi.n	8001696 <__aeabi_dadd+0x63a>
 8001694:	e607      	b.n	80012a6 <__aeabi_dadd+0x24a>
 8001696:	4652      	mov	r2, sl
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <__aeabi_dadd+0x6bc>)
 800169a:	2601      	movs	r6, #1
 800169c:	401a      	ands	r2, r3
 800169e:	4692      	mov	sl, r2
 80016a0:	e601      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80016a2:	003c      	movs	r4, r7
 80016a4:	000e      	movs	r6, r1
 80016a6:	3c20      	subs	r4, #32
 80016a8:	40e6      	lsrs	r6, r4
 80016aa:	2f20      	cmp	r7, #32
 80016ac:	d003      	beq.n	80016b6 <__aeabi_dadd+0x65a>
 80016ae:	2440      	movs	r4, #64	; 0x40
 80016b0:	1be4      	subs	r4, r4, r7
 80016b2:	40a1      	lsls	r1, r4
 80016b4:	430b      	orrs	r3, r1
 80016b6:	001c      	movs	r4, r3
 80016b8:	1e63      	subs	r3, r4, #1
 80016ba:	419c      	sbcs	r4, r3
 80016bc:	4334      	orrs	r4, r6
 80016be:	e65e      	b.n	800137e <__aeabi_dadd+0x322>
 80016c0:	4443      	add	r3, r8
 80016c2:	4283      	cmp	r3, r0
 80016c4:	4180      	sbcs	r0, r0
 80016c6:	4449      	add	r1, r9
 80016c8:	468a      	mov	sl, r1
 80016ca:	4240      	negs	r0, r0
 80016cc:	001c      	movs	r4, r3
 80016ce:	4482      	add	sl, r0
 80016d0:	e6bc      	b.n	800144c <__aeabi_dadd+0x3f0>
 80016d2:	4653      	mov	r3, sl
 80016d4:	4323      	orrs	r3, r4
 80016d6:	d100      	bne.n	80016da <__aeabi_dadd+0x67e>
 80016d8:	e6a9      	b.n	800142e <__aeabi_dadd+0x3d2>
 80016da:	e5e4      	b.n	80012a6 <__aeabi_dadd+0x24a>
 80016dc:	074a      	lsls	r2, r1, #29
 80016de:	4313      	orrs	r3, r2
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	08c9      	lsrs	r1, r1, #3
 80016e4:	0312      	lsls	r2, r2, #12
 80016e6:	4211      	tst	r1, r2
 80016e8:	d009      	beq.n	80016fe <__aeabi_dadd+0x6a2>
 80016ea:	4648      	mov	r0, r9
 80016ec:	08c4      	lsrs	r4, r0, #3
 80016ee:	4214      	tst	r4, r2
 80016f0:	d105      	bne.n	80016fe <__aeabi_dadd+0x6a2>
 80016f2:	4643      	mov	r3, r8
 80016f4:	4665      	mov	r5, ip
 80016f6:	0021      	movs	r1, r4
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	0742      	lsls	r2, r0, #29
 80016fc:	4313      	orrs	r3, r2
 80016fe:	0f5a      	lsrs	r2, r3, #29
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	0752      	lsls	r2, r2, #29
 8001706:	4313      	orrs	r3, r2
 8001708:	e5fa      	b.n	8001300 <__aeabi_dadd+0x2a4>
 800170a:	2300      	movs	r3, #0
 800170c:	4a01      	ldr	r2, [pc, #4]	; (8001714 <__aeabi_dadd+0x6b8>)
 800170e:	001c      	movs	r4, r3
 8001710:	e540      	b.n	8001194 <__aeabi_dadd+0x138>
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	000007ff 	.word	0x000007ff
 8001718:	ff7fffff 	.word	0xff7fffff

0800171c <__aeabi_ddiv>:
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	4657      	mov	r7, sl
 8001720:	464e      	mov	r6, r9
 8001722:	4645      	mov	r5, r8
 8001724:	46de      	mov	lr, fp
 8001726:	b5e0      	push	{r5, r6, r7, lr}
 8001728:	030c      	lsls	r4, r1, #12
 800172a:	001f      	movs	r7, r3
 800172c:	004b      	lsls	r3, r1, #1
 800172e:	4681      	mov	r9, r0
 8001730:	4692      	mov	sl, r2
 8001732:	0005      	movs	r5, r0
 8001734:	b085      	sub	sp, #20
 8001736:	0b24      	lsrs	r4, r4, #12
 8001738:	0d5b      	lsrs	r3, r3, #21
 800173a:	0fce      	lsrs	r6, r1, #31
 800173c:	2b00      	cmp	r3, #0
 800173e:	d100      	bne.n	8001742 <__aeabi_ddiv+0x26>
 8001740:	e152      	b.n	80019e8 <__aeabi_ddiv+0x2cc>
 8001742:	4ad2      	ldr	r2, [pc, #840]	; (8001a8c <__aeabi_ddiv+0x370>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d100      	bne.n	800174a <__aeabi_ddiv+0x2e>
 8001748:	e16e      	b.n	8001a28 <__aeabi_ddiv+0x30c>
 800174a:	0f42      	lsrs	r2, r0, #29
 800174c:	00e4      	lsls	r4, r4, #3
 800174e:	4314      	orrs	r4, r2
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	0412      	lsls	r2, r2, #16
 8001754:	4322      	orrs	r2, r4
 8001756:	4690      	mov	r8, r2
 8001758:	4acd      	ldr	r2, [pc, #820]	; (8001a90 <__aeabi_ddiv+0x374>)
 800175a:	00c5      	lsls	r5, r0, #3
 800175c:	4693      	mov	fp, r2
 800175e:	449b      	add	fp, r3
 8001760:	2300      	movs	r3, #0
 8001762:	4699      	mov	r9, r3
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	033c      	lsls	r4, r7, #12
 8001768:	007b      	lsls	r3, r7, #1
 800176a:	4650      	mov	r0, sl
 800176c:	0b24      	lsrs	r4, r4, #12
 800176e:	0d5b      	lsrs	r3, r3, #21
 8001770:	0fff      	lsrs	r7, r7, #31
 8001772:	2b00      	cmp	r3, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_ddiv+0x5c>
 8001776:	e11a      	b.n	80019ae <__aeabi_ddiv+0x292>
 8001778:	4ac4      	ldr	r2, [pc, #784]	; (8001a8c <__aeabi_ddiv+0x370>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d100      	bne.n	8001780 <__aeabi_ddiv+0x64>
 800177e:	e15e      	b.n	8001a3e <__aeabi_ddiv+0x322>
 8001780:	0f42      	lsrs	r2, r0, #29
 8001782:	00e4      	lsls	r4, r4, #3
 8001784:	4322      	orrs	r2, r4
 8001786:	2480      	movs	r4, #128	; 0x80
 8001788:	0424      	lsls	r4, r4, #16
 800178a:	4314      	orrs	r4, r2
 800178c:	4ac0      	ldr	r2, [pc, #768]	; (8001a90 <__aeabi_ddiv+0x374>)
 800178e:	00c1      	lsls	r1, r0, #3
 8001790:	4694      	mov	ip, r2
 8001792:	465a      	mov	r2, fp
 8001794:	4463      	add	r3, ip
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	469b      	mov	fp, r3
 800179a:	2000      	movs	r0, #0
 800179c:	0033      	movs	r3, r6
 800179e:	407b      	eors	r3, r7
 80017a0:	469a      	mov	sl, r3
 80017a2:	464b      	mov	r3, r9
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d827      	bhi.n	80017f8 <__aeabi_ddiv+0xdc>
 80017a8:	4aba      	ldr	r2, [pc, #744]	; (8001a94 <__aeabi_ddiv+0x378>)
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	58d3      	ldr	r3, [r2, r3]
 80017ae:	469f      	mov	pc, r3
 80017b0:	46b2      	mov	sl, r6
 80017b2:	9b00      	ldr	r3, [sp, #0]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d016      	beq.n	80017e6 <__aeabi_ddiv+0xca>
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d100      	bne.n	80017be <__aeabi_ddiv+0xa2>
 80017bc:	e287      	b.n	8001cce <__aeabi_ddiv+0x5b2>
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d000      	beq.n	80017c4 <__aeabi_ddiv+0xa8>
 80017c2:	e0d5      	b.n	8001970 <__aeabi_ddiv+0x254>
 80017c4:	2300      	movs	r3, #0
 80017c6:	2200      	movs	r2, #0
 80017c8:	2500      	movs	r5, #0
 80017ca:	051b      	lsls	r3, r3, #20
 80017cc:	4313      	orrs	r3, r2
 80017ce:	4652      	mov	r2, sl
 80017d0:	07d2      	lsls	r2, r2, #31
 80017d2:	4313      	orrs	r3, r2
 80017d4:	0028      	movs	r0, r5
 80017d6:	0019      	movs	r1, r3
 80017d8:	b005      	add	sp, #20
 80017da:	bcf0      	pop	{r4, r5, r6, r7}
 80017dc:	46bb      	mov	fp, r7
 80017de:	46b2      	mov	sl, r6
 80017e0:	46a9      	mov	r9, r5
 80017e2:	46a0      	mov	r8, r4
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e6:	2200      	movs	r2, #0
 80017e8:	2500      	movs	r5, #0
 80017ea:	4ba8      	ldr	r3, [pc, #672]	; (8001a8c <__aeabi_ddiv+0x370>)
 80017ec:	e7ed      	b.n	80017ca <__aeabi_ddiv+0xae>
 80017ee:	46ba      	mov	sl, r7
 80017f0:	46a0      	mov	r8, r4
 80017f2:	000d      	movs	r5, r1
 80017f4:	9000      	str	r0, [sp, #0]
 80017f6:	e7dc      	b.n	80017b2 <__aeabi_ddiv+0x96>
 80017f8:	4544      	cmp	r4, r8
 80017fa:	d200      	bcs.n	80017fe <__aeabi_ddiv+0xe2>
 80017fc:	e1c4      	b.n	8001b88 <__aeabi_ddiv+0x46c>
 80017fe:	d100      	bne.n	8001802 <__aeabi_ddiv+0xe6>
 8001800:	e1bf      	b.n	8001b82 <__aeabi_ddiv+0x466>
 8001802:	2301      	movs	r3, #1
 8001804:	425b      	negs	r3, r3
 8001806:	469c      	mov	ip, r3
 8001808:	002e      	movs	r6, r5
 800180a:	4640      	mov	r0, r8
 800180c:	2500      	movs	r5, #0
 800180e:	44e3      	add	fp, ip
 8001810:	0223      	lsls	r3, r4, #8
 8001812:	0e0c      	lsrs	r4, r1, #24
 8001814:	431c      	orrs	r4, r3
 8001816:	0c1b      	lsrs	r3, r3, #16
 8001818:	4699      	mov	r9, r3
 800181a:	0423      	lsls	r3, r4, #16
 800181c:	020a      	lsls	r2, r1, #8
 800181e:	0c1f      	lsrs	r7, r3, #16
 8001820:	4649      	mov	r1, r9
 8001822:	9200      	str	r2, [sp, #0]
 8001824:	9701      	str	r7, [sp, #4]
 8001826:	f7fe fd11 	bl	800024c <__aeabi_uidivmod>
 800182a:	0002      	movs	r2, r0
 800182c:	437a      	muls	r2, r7
 800182e:	040b      	lsls	r3, r1, #16
 8001830:	0c31      	lsrs	r1, r6, #16
 8001832:	4680      	mov	r8, r0
 8001834:	4319      	orrs	r1, r3
 8001836:	428a      	cmp	r2, r1
 8001838:	d907      	bls.n	800184a <__aeabi_ddiv+0x12e>
 800183a:	2301      	movs	r3, #1
 800183c:	425b      	negs	r3, r3
 800183e:	469c      	mov	ip, r3
 8001840:	1909      	adds	r1, r1, r4
 8001842:	44e0      	add	r8, ip
 8001844:	428c      	cmp	r4, r1
 8001846:	d800      	bhi.n	800184a <__aeabi_ddiv+0x12e>
 8001848:	e201      	b.n	8001c4e <__aeabi_ddiv+0x532>
 800184a:	1a88      	subs	r0, r1, r2
 800184c:	4649      	mov	r1, r9
 800184e:	f7fe fcfd 	bl	800024c <__aeabi_uidivmod>
 8001852:	9a01      	ldr	r2, [sp, #4]
 8001854:	0436      	lsls	r6, r6, #16
 8001856:	4342      	muls	r2, r0
 8001858:	0409      	lsls	r1, r1, #16
 800185a:	0c36      	lsrs	r6, r6, #16
 800185c:	0003      	movs	r3, r0
 800185e:	430e      	orrs	r6, r1
 8001860:	42b2      	cmp	r2, r6
 8001862:	d904      	bls.n	800186e <__aeabi_ddiv+0x152>
 8001864:	1936      	adds	r6, r6, r4
 8001866:	3b01      	subs	r3, #1
 8001868:	42b4      	cmp	r4, r6
 800186a:	d800      	bhi.n	800186e <__aeabi_ddiv+0x152>
 800186c:	e1e9      	b.n	8001c42 <__aeabi_ddiv+0x526>
 800186e:	1ab0      	subs	r0, r6, r2
 8001870:	4642      	mov	r2, r8
 8001872:	9e00      	ldr	r6, [sp, #0]
 8001874:	0412      	lsls	r2, r2, #16
 8001876:	431a      	orrs	r2, r3
 8001878:	0c33      	lsrs	r3, r6, #16
 800187a:	001f      	movs	r7, r3
 800187c:	0c11      	lsrs	r1, r2, #16
 800187e:	4690      	mov	r8, r2
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	0413      	lsls	r3, r2, #16
 8001884:	0432      	lsls	r2, r6, #16
 8001886:	0c16      	lsrs	r6, r2, #16
 8001888:	0032      	movs	r2, r6
 800188a:	0c1b      	lsrs	r3, r3, #16
 800188c:	435a      	muls	r2, r3
 800188e:	9603      	str	r6, [sp, #12]
 8001890:	437b      	muls	r3, r7
 8001892:	434e      	muls	r6, r1
 8001894:	4379      	muls	r1, r7
 8001896:	0c17      	lsrs	r7, r2, #16
 8001898:	46bc      	mov	ip, r7
 800189a:	199b      	adds	r3, r3, r6
 800189c:	4463      	add	r3, ip
 800189e:	429e      	cmp	r6, r3
 80018a0:	d903      	bls.n	80018aa <__aeabi_ddiv+0x18e>
 80018a2:	2680      	movs	r6, #128	; 0x80
 80018a4:	0276      	lsls	r6, r6, #9
 80018a6:	46b4      	mov	ip, r6
 80018a8:	4461      	add	r1, ip
 80018aa:	0c1e      	lsrs	r6, r3, #16
 80018ac:	1871      	adds	r1, r6, r1
 80018ae:	0416      	lsls	r6, r2, #16
 80018b0:	041b      	lsls	r3, r3, #16
 80018b2:	0c36      	lsrs	r6, r6, #16
 80018b4:	199e      	adds	r6, r3, r6
 80018b6:	4288      	cmp	r0, r1
 80018b8:	d302      	bcc.n	80018c0 <__aeabi_ddiv+0x1a4>
 80018ba:	d112      	bne.n	80018e2 <__aeabi_ddiv+0x1c6>
 80018bc:	42b5      	cmp	r5, r6
 80018be:	d210      	bcs.n	80018e2 <__aeabi_ddiv+0x1c6>
 80018c0:	4643      	mov	r3, r8
 80018c2:	1e5a      	subs	r2, r3, #1
 80018c4:	9b00      	ldr	r3, [sp, #0]
 80018c6:	469c      	mov	ip, r3
 80018c8:	4465      	add	r5, ip
 80018ca:	001f      	movs	r7, r3
 80018cc:	429d      	cmp	r5, r3
 80018ce:	419b      	sbcs	r3, r3
 80018d0:	425b      	negs	r3, r3
 80018d2:	191b      	adds	r3, r3, r4
 80018d4:	18c0      	adds	r0, r0, r3
 80018d6:	4284      	cmp	r4, r0
 80018d8:	d200      	bcs.n	80018dc <__aeabi_ddiv+0x1c0>
 80018da:	e19e      	b.n	8001c1a <__aeabi_ddiv+0x4fe>
 80018dc:	d100      	bne.n	80018e0 <__aeabi_ddiv+0x1c4>
 80018de:	e199      	b.n	8001c14 <__aeabi_ddiv+0x4f8>
 80018e0:	4690      	mov	r8, r2
 80018e2:	1bae      	subs	r6, r5, r6
 80018e4:	42b5      	cmp	r5, r6
 80018e6:	41ad      	sbcs	r5, r5
 80018e8:	1a40      	subs	r0, r0, r1
 80018ea:	426d      	negs	r5, r5
 80018ec:	1b40      	subs	r0, r0, r5
 80018ee:	4284      	cmp	r4, r0
 80018f0:	d100      	bne.n	80018f4 <__aeabi_ddiv+0x1d8>
 80018f2:	e1d2      	b.n	8001c9a <__aeabi_ddiv+0x57e>
 80018f4:	4649      	mov	r1, r9
 80018f6:	f7fe fca9 	bl	800024c <__aeabi_uidivmod>
 80018fa:	9a01      	ldr	r2, [sp, #4]
 80018fc:	040b      	lsls	r3, r1, #16
 80018fe:	4342      	muls	r2, r0
 8001900:	0c31      	lsrs	r1, r6, #16
 8001902:	0005      	movs	r5, r0
 8001904:	4319      	orrs	r1, r3
 8001906:	428a      	cmp	r2, r1
 8001908:	d900      	bls.n	800190c <__aeabi_ddiv+0x1f0>
 800190a:	e16c      	b.n	8001be6 <__aeabi_ddiv+0x4ca>
 800190c:	1a88      	subs	r0, r1, r2
 800190e:	4649      	mov	r1, r9
 8001910:	f7fe fc9c 	bl	800024c <__aeabi_uidivmod>
 8001914:	9a01      	ldr	r2, [sp, #4]
 8001916:	0436      	lsls	r6, r6, #16
 8001918:	4342      	muls	r2, r0
 800191a:	0409      	lsls	r1, r1, #16
 800191c:	0c36      	lsrs	r6, r6, #16
 800191e:	0003      	movs	r3, r0
 8001920:	430e      	orrs	r6, r1
 8001922:	42b2      	cmp	r2, r6
 8001924:	d900      	bls.n	8001928 <__aeabi_ddiv+0x20c>
 8001926:	e153      	b.n	8001bd0 <__aeabi_ddiv+0x4b4>
 8001928:	9803      	ldr	r0, [sp, #12]
 800192a:	1ab6      	subs	r6, r6, r2
 800192c:	0002      	movs	r2, r0
 800192e:	042d      	lsls	r5, r5, #16
 8001930:	431d      	orrs	r5, r3
 8001932:	9f02      	ldr	r7, [sp, #8]
 8001934:	042b      	lsls	r3, r5, #16
 8001936:	0c1b      	lsrs	r3, r3, #16
 8001938:	435a      	muls	r2, r3
 800193a:	437b      	muls	r3, r7
 800193c:	469c      	mov	ip, r3
 800193e:	0c29      	lsrs	r1, r5, #16
 8001940:	4348      	muls	r0, r1
 8001942:	0c13      	lsrs	r3, r2, #16
 8001944:	4484      	add	ip, r0
 8001946:	4463      	add	r3, ip
 8001948:	4379      	muls	r1, r7
 800194a:	4298      	cmp	r0, r3
 800194c:	d903      	bls.n	8001956 <__aeabi_ddiv+0x23a>
 800194e:	2080      	movs	r0, #128	; 0x80
 8001950:	0240      	lsls	r0, r0, #9
 8001952:	4684      	mov	ip, r0
 8001954:	4461      	add	r1, ip
 8001956:	0c18      	lsrs	r0, r3, #16
 8001958:	0412      	lsls	r2, r2, #16
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	0c12      	lsrs	r2, r2, #16
 800195e:	1840      	adds	r0, r0, r1
 8001960:	189b      	adds	r3, r3, r2
 8001962:	4286      	cmp	r6, r0
 8001964:	d200      	bcs.n	8001968 <__aeabi_ddiv+0x24c>
 8001966:	e100      	b.n	8001b6a <__aeabi_ddiv+0x44e>
 8001968:	d100      	bne.n	800196c <__aeabi_ddiv+0x250>
 800196a:	e0fb      	b.n	8001b64 <__aeabi_ddiv+0x448>
 800196c:	2301      	movs	r3, #1
 800196e:	431d      	orrs	r5, r3
 8001970:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <__aeabi_ddiv+0x37c>)
 8001972:	445b      	add	r3, fp
 8001974:	2b00      	cmp	r3, #0
 8001976:	dc00      	bgt.n	800197a <__aeabi_ddiv+0x25e>
 8001978:	e0aa      	b.n	8001ad0 <__aeabi_ddiv+0x3b4>
 800197a:	076a      	lsls	r2, r5, #29
 800197c:	d000      	beq.n	8001980 <__aeabi_ddiv+0x264>
 800197e:	e13d      	b.n	8001bfc <__aeabi_ddiv+0x4e0>
 8001980:	08e9      	lsrs	r1, r5, #3
 8001982:	4642      	mov	r2, r8
 8001984:	01d2      	lsls	r2, r2, #7
 8001986:	d506      	bpl.n	8001996 <__aeabi_ddiv+0x27a>
 8001988:	4642      	mov	r2, r8
 800198a:	4b44      	ldr	r3, [pc, #272]	; (8001a9c <__aeabi_ddiv+0x380>)
 800198c:	401a      	ands	r2, r3
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	4690      	mov	r8, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	445b      	add	r3, fp
 8001996:	4a42      	ldr	r2, [pc, #264]	; (8001aa0 <__aeabi_ddiv+0x384>)
 8001998:	4293      	cmp	r3, r2
 800199a:	dd00      	ble.n	800199e <__aeabi_ddiv+0x282>
 800199c:	e723      	b.n	80017e6 <__aeabi_ddiv+0xca>
 800199e:	4642      	mov	r2, r8
 80019a0:	055b      	lsls	r3, r3, #21
 80019a2:	0755      	lsls	r5, r2, #29
 80019a4:	0252      	lsls	r2, r2, #9
 80019a6:	430d      	orrs	r5, r1
 80019a8:	0b12      	lsrs	r2, r2, #12
 80019aa:	0d5b      	lsrs	r3, r3, #21
 80019ac:	e70d      	b.n	80017ca <__aeabi_ddiv+0xae>
 80019ae:	4651      	mov	r1, sl
 80019b0:	4321      	orrs	r1, r4
 80019b2:	d100      	bne.n	80019b6 <__aeabi_ddiv+0x29a>
 80019b4:	e07c      	b.n	8001ab0 <__aeabi_ddiv+0x394>
 80019b6:	2c00      	cmp	r4, #0
 80019b8:	d100      	bne.n	80019bc <__aeabi_ddiv+0x2a0>
 80019ba:	e0fb      	b.n	8001bb4 <__aeabi_ddiv+0x498>
 80019bc:	0020      	movs	r0, r4
 80019be:	f001 fa63 	bl	8002e88 <__clzsi2>
 80019c2:	0002      	movs	r2, r0
 80019c4:	3a0b      	subs	r2, #11
 80019c6:	231d      	movs	r3, #29
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	4652      	mov	r2, sl
 80019cc:	0001      	movs	r1, r0
 80019ce:	40da      	lsrs	r2, r3
 80019d0:	4653      	mov	r3, sl
 80019d2:	3908      	subs	r1, #8
 80019d4:	408b      	lsls	r3, r1
 80019d6:	408c      	lsls	r4, r1
 80019d8:	0019      	movs	r1, r3
 80019da:	4314      	orrs	r4, r2
 80019dc:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <__aeabi_ddiv+0x388>)
 80019de:	4458      	add	r0, fp
 80019e0:	469b      	mov	fp, r3
 80019e2:	4483      	add	fp, r0
 80019e4:	2000      	movs	r0, #0
 80019e6:	e6d9      	b.n	800179c <__aeabi_ddiv+0x80>
 80019e8:	0003      	movs	r3, r0
 80019ea:	4323      	orrs	r3, r4
 80019ec:	4698      	mov	r8, r3
 80019ee:	d044      	beq.n	8001a7a <__aeabi_ddiv+0x35e>
 80019f0:	2c00      	cmp	r4, #0
 80019f2:	d100      	bne.n	80019f6 <__aeabi_ddiv+0x2da>
 80019f4:	e0cf      	b.n	8001b96 <__aeabi_ddiv+0x47a>
 80019f6:	0020      	movs	r0, r4
 80019f8:	f001 fa46 	bl	8002e88 <__clzsi2>
 80019fc:	0001      	movs	r1, r0
 80019fe:	0002      	movs	r2, r0
 8001a00:	390b      	subs	r1, #11
 8001a02:	231d      	movs	r3, #29
 8001a04:	1a5b      	subs	r3, r3, r1
 8001a06:	4649      	mov	r1, r9
 8001a08:	0010      	movs	r0, r2
 8001a0a:	40d9      	lsrs	r1, r3
 8001a0c:	3808      	subs	r0, #8
 8001a0e:	4084      	lsls	r4, r0
 8001a10:	000b      	movs	r3, r1
 8001a12:	464d      	mov	r5, r9
 8001a14:	4323      	orrs	r3, r4
 8001a16:	4698      	mov	r8, r3
 8001a18:	4085      	lsls	r5, r0
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <__aeabi_ddiv+0x38c>)
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	469b      	mov	fp, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	4699      	mov	r9, r3
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	e69e      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	4322      	orrs	r2, r4
 8001a2c:	4690      	mov	r8, r2
 8001a2e:	d11d      	bne.n	8001a6c <__aeabi_ddiv+0x350>
 8001a30:	2208      	movs	r2, #8
 8001a32:	469b      	mov	fp, r3
 8001a34:	2302      	movs	r3, #2
 8001a36:	2500      	movs	r5, #0
 8001a38:	4691      	mov	r9, r2
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	e693      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a3e:	4651      	mov	r1, sl
 8001a40:	4321      	orrs	r1, r4
 8001a42:	d109      	bne.n	8001a58 <__aeabi_ddiv+0x33c>
 8001a44:	2302      	movs	r3, #2
 8001a46:	464a      	mov	r2, r9
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <__aeabi_ddiv+0x390>)
 8001a4c:	4691      	mov	r9, r2
 8001a4e:	469c      	mov	ip, r3
 8001a50:	2400      	movs	r4, #0
 8001a52:	2002      	movs	r0, #2
 8001a54:	44e3      	add	fp, ip
 8001a56:	e6a1      	b.n	800179c <__aeabi_ddiv+0x80>
 8001a58:	2303      	movs	r3, #3
 8001a5a:	464a      	mov	r2, r9
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <__aeabi_ddiv+0x390>)
 8001a60:	4691      	mov	r9, r2
 8001a62:	469c      	mov	ip, r3
 8001a64:	4651      	mov	r1, sl
 8001a66:	2003      	movs	r0, #3
 8001a68:	44e3      	add	fp, ip
 8001a6a:	e697      	b.n	800179c <__aeabi_ddiv+0x80>
 8001a6c:	220c      	movs	r2, #12
 8001a6e:	469b      	mov	fp, r3
 8001a70:	2303      	movs	r3, #3
 8001a72:	46a0      	mov	r8, r4
 8001a74:	4691      	mov	r9, r2
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	e675      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	4699      	mov	r9, r3
 8001a7e:	2300      	movs	r3, #0
 8001a80:	469b      	mov	fp, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	2500      	movs	r5, #0
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	e66d      	b.n	8001766 <__aeabi_ddiv+0x4a>
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	000007ff 	.word	0x000007ff
 8001a90:	fffffc01 	.word	0xfffffc01
 8001a94:	08012e2c 	.word	0x08012e2c
 8001a98:	000003ff 	.word	0x000003ff
 8001a9c:	feffffff 	.word	0xfeffffff
 8001aa0:	000007fe 	.word	0x000007fe
 8001aa4:	000003f3 	.word	0x000003f3
 8001aa8:	fffffc0d 	.word	0xfffffc0d
 8001aac:	fffff801 	.word	0xfffff801
 8001ab0:	464a      	mov	r2, r9
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	4691      	mov	r9, r2
 8001ab8:	2400      	movs	r4, #0
 8001aba:	2001      	movs	r0, #1
 8001abc:	e66e      	b.n	800179c <__aeabi_ddiv+0x80>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	469a      	mov	sl, r3
 8001ac4:	2500      	movs	r5, #0
 8001ac6:	4b88      	ldr	r3, [pc, #544]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001ac8:	0312      	lsls	r2, r2, #12
 8001aca:	e67e      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001acc:	2501      	movs	r5, #1
 8001ace:	426d      	negs	r5, r5
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	1ad2      	subs	r2, r2, r3
 8001ad4:	2a38      	cmp	r2, #56	; 0x38
 8001ad6:	dd00      	ble.n	8001ada <__aeabi_ddiv+0x3be>
 8001ad8:	e674      	b.n	80017c4 <__aeabi_ddiv+0xa8>
 8001ada:	2a1f      	cmp	r2, #31
 8001adc:	dc00      	bgt.n	8001ae0 <__aeabi_ddiv+0x3c4>
 8001ade:	e0bd      	b.n	8001c5c <__aeabi_ddiv+0x540>
 8001ae0:	211f      	movs	r1, #31
 8001ae2:	4249      	negs	r1, r1
 8001ae4:	1acb      	subs	r3, r1, r3
 8001ae6:	4641      	mov	r1, r8
 8001ae8:	40d9      	lsrs	r1, r3
 8001aea:	000b      	movs	r3, r1
 8001aec:	2a20      	cmp	r2, #32
 8001aee:	d004      	beq.n	8001afa <__aeabi_ddiv+0x3de>
 8001af0:	4641      	mov	r1, r8
 8001af2:	4a7e      	ldr	r2, [pc, #504]	; (8001cec <__aeabi_ddiv+0x5d0>)
 8001af4:	445a      	add	r2, fp
 8001af6:	4091      	lsls	r1, r2
 8001af8:	430d      	orrs	r5, r1
 8001afa:	0029      	movs	r1, r5
 8001afc:	1e4a      	subs	r2, r1, #1
 8001afe:	4191      	sbcs	r1, r2
 8001b00:	4319      	orrs	r1, r3
 8001b02:	2307      	movs	r3, #7
 8001b04:	001d      	movs	r5, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	400d      	ands	r5, r1
 8001b0a:	420b      	tst	r3, r1
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_ddiv+0x3f4>
 8001b0e:	e0d0      	b.n	8001cb2 <__aeabi_ddiv+0x596>
 8001b10:	220f      	movs	r2, #15
 8001b12:	2300      	movs	r3, #0
 8001b14:	400a      	ands	r2, r1
 8001b16:	2a04      	cmp	r2, #4
 8001b18:	d100      	bne.n	8001b1c <__aeabi_ddiv+0x400>
 8001b1a:	e0c7      	b.n	8001cac <__aeabi_ddiv+0x590>
 8001b1c:	1d0a      	adds	r2, r1, #4
 8001b1e:	428a      	cmp	r2, r1
 8001b20:	4189      	sbcs	r1, r1
 8001b22:	4249      	negs	r1, r1
 8001b24:	185b      	adds	r3, r3, r1
 8001b26:	0011      	movs	r1, r2
 8001b28:	021a      	lsls	r2, r3, #8
 8001b2a:	d400      	bmi.n	8001b2e <__aeabi_ddiv+0x412>
 8001b2c:	e0be      	b.n	8001cac <__aeabi_ddiv+0x590>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	2200      	movs	r2, #0
 8001b32:	2500      	movs	r5, #0
 8001b34:	e649      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	4643      	mov	r3, r8
 8001b3a:	0312      	lsls	r2, r2, #12
 8001b3c:	4213      	tst	r3, r2
 8001b3e:	d008      	beq.n	8001b52 <__aeabi_ddiv+0x436>
 8001b40:	4214      	tst	r4, r2
 8001b42:	d106      	bne.n	8001b52 <__aeabi_ddiv+0x436>
 8001b44:	4322      	orrs	r2, r4
 8001b46:	0312      	lsls	r2, r2, #12
 8001b48:	46ba      	mov	sl, r7
 8001b4a:	000d      	movs	r5, r1
 8001b4c:	4b66      	ldr	r3, [pc, #408]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001b4e:	0b12      	lsrs	r2, r2, #12
 8001b50:	e63b      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	4643      	mov	r3, r8
 8001b56:	0312      	lsls	r2, r2, #12
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	0312      	lsls	r2, r2, #12
 8001b5c:	46b2      	mov	sl, r6
 8001b5e:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001b60:	0b12      	lsrs	r2, r2, #12
 8001b62:	e632      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_ddiv+0x44e>
 8001b68:	e702      	b.n	8001970 <__aeabi_ddiv+0x254>
 8001b6a:	19a6      	adds	r6, r4, r6
 8001b6c:	1e6a      	subs	r2, r5, #1
 8001b6e:	42a6      	cmp	r6, r4
 8001b70:	d200      	bcs.n	8001b74 <__aeabi_ddiv+0x458>
 8001b72:	e089      	b.n	8001c88 <__aeabi_ddiv+0x56c>
 8001b74:	4286      	cmp	r6, r0
 8001b76:	d200      	bcs.n	8001b7a <__aeabi_ddiv+0x45e>
 8001b78:	e09f      	b.n	8001cba <__aeabi_ddiv+0x59e>
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_ddiv+0x462>
 8001b7c:	e0af      	b.n	8001cde <__aeabi_ddiv+0x5c2>
 8001b7e:	0015      	movs	r5, r2
 8001b80:	e6f4      	b.n	800196c <__aeabi_ddiv+0x250>
 8001b82:	42a9      	cmp	r1, r5
 8001b84:	d900      	bls.n	8001b88 <__aeabi_ddiv+0x46c>
 8001b86:	e63c      	b.n	8001802 <__aeabi_ddiv+0xe6>
 8001b88:	4643      	mov	r3, r8
 8001b8a:	07de      	lsls	r6, r3, #31
 8001b8c:	0858      	lsrs	r0, r3, #1
 8001b8e:	086b      	lsrs	r3, r5, #1
 8001b90:	431e      	orrs	r6, r3
 8001b92:	07ed      	lsls	r5, r5, #31
 8001b94:	e63c      	b.n	8001810 <__aeabi_ddiv+0xf4>
 8001b96:	f001 f977 	bl	8002e88 <__clzsi2>
 8001b9a:	0001      	movs	r1, r0
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	3115      	adds	r1, #21
 8001ba0:	3220      	adds	r2, #32
 8001ba2:	291c      	cmp	r1, #28
 8001ba4:	dc00      	bgt.n	8001ba8 <__aeabi_ddiv+0x48c>
 8001ba6:	e72c      	b.n	8001a02 <__aeabi_ddiv+0x2e6>
 8001ba8:	464b      	mov	r3, r9
 8001baa:	3808      	subs	r0, #8
 8001bac:	4083      	lsls	r3, r0
 8001bae:	2500      	movs	r5, #0
 8001bb0:	4698      	mov	r8, r3
 8001bb2:	e732      	b.n	8001a1a <__aeabi_ddiv+0x2fe>
 8001bb4:	f001 f968 	bl	8002e88 <__clzsi2>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	001a      	movs	r2, r3
 8001bbc:	3215      	adds	r2, #21
 8001bbe:	3020      	adds	r0, #32
 8001bc0:	2a1c      	cmp	r2, #28
 8001bc2:	dc00      	bgt.n	8001bc6 <__aeabi_ddiv+0x4aa>
 8001bc4:	e6ff      	b.n	80019c6 <__aeabi_ddiv+0x2aa>
 8001bc6:	4654      	mov	r4, sl
 8001bc8:	3b08      	subs	r3, #8
 8001bca:	2100      	movs	r1, #0
 8001bcc:	409c      	lsls	r4, r3
 8001bce:	e705      	b.n	80019dc <__aeabi_ddiv+0x2c0>
 8001bd0:	1936      	adds	r6, r6, r4
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	42b4      	cmp	r4, r6
 8001bd6:	d900      	bls.n	8001bda <__aeabi_ddiv+0x4be>
 8001bd8:	e6a6      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001bda:	42b2      	cmp	r2, r6
 8001bdc:	d800      	bhi.n	8001be0 <__aeabi_ddiv+0x4c4>
 8001bde:	e6a3      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001be0:	1e83      	subs	r3, r0, #2
 8001be2:	1936      	adds	r6, r6, r4
 8001be4:	e6a0      	b.n	8001928 <__aeabi_ddiv+0x20c>
 8001be6:	1909      	adds	r1, r1, r4
 8001be8:	3d01      	subs	r5, #1
 8001bea:	428c      	cmp	r4, r1
 8001bec:	d900      	bls.n	8001bf0 <__aeabi_ddiv+0x4d4>
 8001bee:	e68d      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bf0:	428a      	cmp	r2, r1
 8001bf2:	d800      	bhi.n	8001bf6 <__aeabi_ddiv+0x4da>
 8001bf4:	e68a      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bf6:	1e85      	subs	r5, r0, #2
 8001bf8:	1909      	adds	r1, r1, r4
 8001bfa:	e687      	b.n	800190c <__aeabi_ddiv+0x1f0>
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	402a      	ands	r2, r5
 8001c00:	2a04      	cmp	r2, #4
 8001c02:	d100      	bne.n	8001c06 <__aeabi_ddiv+0x4ea>
 8001c04:	e6bc      	b.n	8001980 <__aeabi_ddiv+0x264>
 8001c06:	1d29      	adds	r1, r5, #4
 8001c08:	42a9      	cmp	r1, r5
 8001c0a:	41ad      	sbcs	r5, r5
 8001c0c:	426d      	negs	r5, r5
 8001c0e:	08c9      	lsrs	r1, r1, #3
 8001c10:	44a8      	add	r8, r5
 8001c12:	e6b6      	b.n	8001982 <__aeabi_ddiv+0x266>
 8001c14:	42af      	cmp	r7, r5
 8001c16:	d900      	bls.n	8001c1a <__aeabi_ddiv+0x4fe>
 8001c18:	e662      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c1a:	4281      	cmp	r1, r0
 8001c1c:	d804      	bhi.n	8001c28 <__aeabi_ddiv+0x50c>
 8001c1e:	d000      	beq.n	8001c22 <__aeabi_ddiv+0x506>
 8001c20:	e65e      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c22:	42ae      	cmp	r6, r5
 8001c24:	d800      	bhi.n	8001c28 <__aeabi_ddiv+0x50c>
 8001c26:	e65b      	b.n	80018e0 <__aeabi_ddiv+0x1c4>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	425b      	negs	r3, r3
 8001c2c:	469c      	mov	ip, r3
 8001c2e:	9b00      	ldr	r3, [sp, #0]
 8001c30:	44e0      	add	r8, ip
 8001c32:	469c      	mov	ip, r3
 8001c34:	4465      	add	r5, ip
 8001c36:	429d      	cmp	r5, r3
 8001c38:	419b      	sbcs	r3, r3
 8001c3a:	425b      	negs	r3, r3
 8001c3c:	191b      	adds	r3, r3, r4
 8001c3e:	18c0      	adds	r0, r0, r3
 8001c40:	e64f      	b.n	80018e2 <__aeabi_ddiv+0x1c6>
 8001c42:	42b2      	cmp	r2, r6
 8001c44:	d800      	bhi.n	8001c48 <__aeabi_ddiv+0x52c>
 8001c46:	e612      	b.n	800186e <__aeabi_ddiv+0x152>
 8001c48:	1e83      	subs	r3, r0, #2
 8001c4a:	1936      	adds	r6, r6, r4
 8001c4c:	e60f      	b.n	800186e <__aeabi_ddiv+0x152>
 8001c4e:	428a      	cmp	r2, r1
 8001c50:	d800      	bhi.n	8001c54 <__aeabi_ddiv+0x538>
 8001c52:	e5fa      	b.n	800184a <__aeabi_ddiv+0x12e>
 8001c54:	1e83      	subs	r3, r0, #2
 8001c56:	4698      	mov	r8, r3
 8001c58:	1909      	adds	r1, r1, r4
 8001c5a:	e5f6      	b.n	800184a <__aeabi_ddiv+0x12e>
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <__aeabi_ddiv+0x5d4>)
 8001c5e:	0028      	movs	r0, r5
 8001c60:	445b      	add	r3, fp
 8001c62:	4641      	mov	r1, r8
 8001c64:	409d      	lsls	r5, r3
 8001c66:	4099      	lsls	r1, r3
 8001c68:	40d0      	lsrs	r0, r2
 8001c6a:	1e6b      	subs	r3, r5, #1
 8001c6c:	419d      	sbcs	r5, r3
 8001c6e:	4643      	mov	r3, r8
 8001c70:	4301      	orrs	r1, r0
 8001c72:	4329      	orrs	r1, r5
 8001c74:	40d3      	lsrs	r3, r2
 8001c76:	074a      	lsls	r2, r1, #29
 8001c78:	d100      	bne.n	8001c7c <__aeabi_ddiv+0x560>
 8001c7a:	e755      	b.n	8001b28 <__aeabi_ddiv+0x40c>
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	400a      	ands	r2, r1
 8001c80:	2a04      	cmp	r2, #4
 8001c82:	d000      	beq.n	8001c86 <__aeabi_ddiv+0x56a>
 8001c84:	e74a      	b.n	8001b1c <__aeabi_ddiv+0x400>
 8001c86:	e74f      	b.n	8001b28 <__aeabi_ddiv+0x40c>
 8001c88:	0015      	movs	r5, r2
 8001c8a:	4286      	cmp	r6, r0
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_ddiv+0x574>
 8001c8e:	e66d      	b.n	800196c <__aeabi_ddiv+0x250>
 8001c90:	9a00      	ldr	r2, [sp, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d000      	beq.n	8001c98 <__aeabi_ddiv+0x57c>
 8001c96:	e669      	b.n	800196c <__aeabi_ddiv+0x250>
 8001c98:	e66a      	b.n	8001970 <__aeabi_ddiv+0x254>
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <__aeabi_ddiv+0x5d8>)
 8001c9c:	445b      	add	r3, fp
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	dc00      	bgt.n	8001ca4 <__aeabi_ddiv+0x588>
 8001ca2:	e713      	b.n	8001acc <__aeabi_ddiv+0x3b0>
 8001ca4:	2501      	movs	r5, #1
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	44a8      	add	r8, r5
 8001caa:	e66a      	b.n	8001982 <__aeabi_ddiv+0x266>
 8001cac:	075d      	lsls	r5, r3, #29
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	0b1a      	lsrs	r2, r3, #12
 8001cb2:	08c9      	lsrs	r1, r1, #3
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	430d      	orrs	r5, r1
 8001cb8:	e587      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001cba:	9900      	ldr	r1, [sp, #0]
 8001cbc:	3d02      	subs	r5, #2
 8001cbe:	004a      	lsls	r2, r1, #1
 8001cc0:	428a      	cmp	r2, r1
 8001cc2:	41bf      	sbcs	r7, r7
 8001cc4:	427f      	negs	r7, r7
 8001cc6:	193f      	adds	r7, r7, r4
 8001cc8:	19f6      	adds	r6, r6, r7
 8001cca:	9200      	str	r2, [sp, #0]
 8001ccc:	e7dd      	b.n	8001c8a <__aeabi_ddiv+0x56e>
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	4643      	mov	r3, r8
 8001cd2:	0312      	lsls	r2, r2, #12
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	0312      	lsls	r2, r2, #12
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <__aeabi_ddiv+0x5cc>)
 8001cda:	0b12      	lsrs	r2, r2, #12
 8001cdc:	e575      	b.n	80017ca <__aeabi_ddiv+0xae>
 8001cde:	9900      	ldr	r1, [sp, #0]
 8001ce0:	4299      	cmp	r1, r3
 8001ce2:	d3ea      	bcc.n	8001cba <__aeabi_ddiv+0x59e>
 8001ce4:	0015      	movs	r5, r2
 8001ce6:	e7d3      	b.n	8001c90 <__aeabi_ddiv+0x574>
 8001ce8:	000007ff 	.word	0x000007ff
 8001cec:	0000043e 	.word	0x0000043e
 8001cf0:	0000041e 	.word	0x0000041e
 8001cf4:	000003ff 	.word	0x000003ff

08001cf8 <__eqdf2>:
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfa:	464e      	mov	r6, r9
 8001cfc:	4645      	mov	r5, r8
 8001cfe:	46de      	mov	lr, fp
 8001d00:	4657      	mov	r7, sl
 8001d02:	4690      	mov	r8, r2
 8001d04:	b5e0      	push	{r5, r6, r7, lr}
 8001d06:	0017      	movs	r7, r2
 8001d08:	031a      	lsls	r2, r3, #12
 8001d0a:	0b12      	lsrs	r2, r2, #12
 8001d0c:	0005      	movs	r5, r0
 8001d0e:	4684      	mov	ip, r0
 8001d10:	4819      	ldr	r0, [pc, #100]	; (8001d78 <__eqdf2+0x80>)
 8001d12:	030e      	lsls	r6, r1, #12
 8001d14:	004c      	lsls	r4, r1, #1
 8001d16:	4691      	mov	r9, r2
 8001d18:	005a      	lsls	r2, r3, #1
 8001d1a:	0fdb      	lsrs	r3, r3, #31
 8001d1c:	469b      	mov	fp, r3
 8001d1e:	0b36      	lsrs	r6, r6, #12
 8001d20:	0d64      	lsrs	r4, r4, #21
 8001d22:	0fc9      	lsrs	r1, r1, #31
 8001d24:	0d52      	lsrs	r2, r2, #21
 8001d26:	4284      	cmp	r4, r0
 8001d28:	d019      	beq.n	8001d5e <__eqdf2+0x66>
 8001d2a:	4282      	cmp	r2, r0
 8001d2c:	d010      	beq.n	8001d50 <__eqdf2+0x58>
 8001d2e:	2001      	movs	r0, #1
 8001d30:	4294      	cmp	r4, r2
 8001d32:	d10e      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d34:	454e      	cmp	r6, r9
 8001d36:	d10c      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d38:	2001      	movs	r0, #1
 8001d3a:	45c4      	cmp	ip, r8
 8001d3c:	d109      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d3e:	4559      	cmp	r1, fp
 8001d40:	d017      	beq.n	8001d72 <__eqdf2+0x7a>
 8001d42:	2c00      	cmp	r4, #0
 8001d44:	d105      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d46:	0030      	movs	r0, r6
 8001d48:	4328      	orrs	r0, r5
 8001d4a:	1e43      	subs	r3, r0, #1
 8001d4c:	4198      	sbcs	r0, r3
 8001d4e:	e000      	b.n	8001d52 <__eqdf2+0x5a>
 8001d50:	2001      	movs	r0, #1
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	0033      	movs	r3, r6
 8001d60:	2001      	movs	r0, #1
 8001d62:	432b      	orrs	r3, r5
 8001d64:	d1f5      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d66:	42a2      	cmp	r2, r4
 8001d68:	d1f3      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d6a:	464b      	mov	r3, r9
 8001d6c:	433b      	orrs	r3, r7
 8001d6e:	d1f0      	bne.n	8001d52 <__eqdf2+0x5a>
 8001d70:	e7e2      	b.n	8001d38 <__eqdf2+0x40>
 8001d72:	2000      	movs	r0, #0
 8001d74:	e7ed      	b.n	8001d52 <__eqdf2+0x5a>
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	000007ff 	.word	0x000007ff

08001d7c <__gedf2>:
 8001d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7e:	4647      	mov	r7, r8
 8001d80:	46ce      	mov	lr, r9
 8001d82:	0004      	movs	r4, r0
 8001d84:	0018      	movs	r0, r3
 8001d86:	0016      	movs	r6, r2
 8001d88:	031b      	lsls	r3, r3, #12
 8001d8a:	0b1b      	lsrs	r3, r3, #12
 8001d8c:	4d2d      	ldr	r5, [pc, #180]	; (8001e44 <__gedf2+0xc8>)
 8001d8e:	004a      	lsls	r2, r1, #1
 8001d90:	4699      	mov	r9, r3
 8001d92:	b580      	push	{r7, lr}
 8001d94:	0043      	lsls	r3, r0, #1
 8001d96:	030f      	lsls	r7, r1, #12
 8001d98:	46a4      	mov	ip, r4
 8001d9a:	46b0      	mov	r8, r6
 8001d9c:	0b3f      	lsrs	r7, r7, #12
 8001d9e:	0d52      	lsrs	r2, r2, #21
 8001da0:	0fc9      	lsrs	r1, r1, #31
 8001da2:	0d5b      	lsrs	r3, r3, #21
 8001da4:	0fc0      	lsrs	r0, r0, #31
 8001da6:	42aa      	cmp	r2, r5
 8001da8:	d021      	beq.n	8001dee <__gedf2+0x72>
 8001daa:	42ab      	cmp	r3, r5
 8001dac:	d013      	beq.n	8001dd6 <__gedf2+0x5a>
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d122      	bne.n	8001df8 <__gedf2+0x7c>
 8001db2:	433c      	orrs	r4, r7
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <__gedf2+0x42>
 8001db8:	464d      	mov	r5, r9
 8001dba:	432e      	orrs	r6, r5
 8001dbc:	d022      	beq.n	8001e04 <__gedf2+0x88>
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d010      	beq.n	8001de4 <__gedf2+0x68>
 8001dc2:	4281      	cmp	r1, r0
 8001dc4:	d022      	beq.n	8001e0c <__gedf2+0x90>
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	3901      	subs	r1, #1
 8001dca:	4008      	ands	r0, r1
 8001dcc:	3801      	subs	r0, #1
 8001dce:	bcc0      	pop	{r6, r7}
 8001dd0:	46b9      	mov	r9, r7
 8001dd2:	46b0      	mov	r8, r6
 8001dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd6:	464d      	mov	r5, r9
 8001dd8:	432e      	orrs	r6, r5
 8001dda:	d129      	bne.n	8001e30 <__gedf2+0xb4>
 8001ddc:	2a00      	cmp	r2, #0
 8001dde:	d1f0      	bne.n	8001dc2 <__gedf2+0x46>
 8001de0:	433c      	orrs	r4, r7
 8001de2:	d1ee      	bne.n	8001dc2 <__gedf2+0x46>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d1f2      	bne.n	8001dce <__gedf2+0x52>
 8001de8:	2001      	movs	r0, #1
 8001dea:	4240      	negs	r0, r0
 8001dec:	e7ef      	b.n	8001dce <__gedf2+0x52>
 8001dee:	003d      	movs	r5, r7
 8001df0:	4325      	orrs	r5, r4
 8001df2:	d11d      	bne.n	8001e30 <__gedf2+0xb4>
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d0ee      	beq.n	8001dd6 <__gedf2+0x5a>
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e2      	bne.n	8001dc2 <__gedf2+0x46>
 8001dfc:	464c      	mov	r4, r9
 8001dfe:	4326      	orrs	r6, r4
 8001e00:	d1df      	bne.n	8001dc2 <__gedf2+0x46>
 8001e02:	e7e0      	b.n	8001dc6 <__gedf2+0x4a>
 8001e04:	2000      	movs	r0, #0
 8001e06:	2c00      	cmp	r4, #0
 8001e08:	d0e1      	beq.n	8001dce <__gedf2+0x52>
 8001e0a:	e7dc      	b.n	8001dc6 <__gedf2+0x4a>
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dc0a      	bgt.n	8001e26 <__gedf2+0xaa>
 8001e10:	dbe8      	blt.n	8001de4 <__gedf2+0x68>
 8001e12:	454f      	cmp	r7, r9
 8001e14:	d8d7      	bhi.n	8001dc6 <__gedf2+0x4a>
 8001e16:	d00e      	beq.n	8001e36 <__gedf2+0xba>
 8001e18:	2000      	movs	r0, #0
 8001e1a:	454f      	cmp	r7, r9
 8001e1c:	d2d7      	bcs.n	8001dce <__gedf2+0x52>
 8001e1e:	2900      	cmp	r1, #0
 8001e20:	d0e2      	beq.n	8001de8 <__gedf2+0x6c>
 8001e22:	0008      	movs	r0, r1
 8001e24:	e7d3      	b.n	8001dce <__gedf2+0x52>
 8001e26:	4243      	negs	r3, r0
 8001e28:	4158      	adcs	r0, r3
 8001e2a:	0040      	lsls	r0, r0, #1
 8001e2c:	3801      	subs	r0, #1
 8001e2e:	e7ce      	b.n	8001dce <__gedf2+0x52>
 8001e30:	2002      	movs	r0, #2
 8001e32:	4240      	negs	r0, r0
 8001e34:	e7cb      	b.n	8001dce <__gedf2+0x52>
 8001e36:	45c4      	cmp	ip, r8
 8001e38:	d8c5      	bhi.n	8001dc6 <__gedf2+0x4a>
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	45c4      	cmp	ip, r8
 8001e3e:	d2c6      	bcs.n	8001dce <__gedf2+0x52>
 8001e40:	e7ed      	b.n	8001e1e <__gedf2+0xa2>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	000007ff 	.word	0x000007ff

08001e48 <__ledf2>:
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	4647      	mov	r7, r8
 8001e4c:	46ce      	mov	lr, r9
 8001e4e:	0004      	movs	r4, r0
 8001e50:	0018      	movs	r0, r3
 8001e52:	0016      	movs	r6, r2
 8001e54:	031b      	lsls	r3, r3, #12
 8001e56:	0b1b      	lsrs	r3, r3, #12
 8001e58:	4d2c      	ldr	r5, [pc, #176]	; (8001f0c <__ledf2+0xc4>)
 8001e5a:	004a      	lsls	r2, r1, #1
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	0043      	lsls	r3, r0, #1
 8001e62:	030f      	lsls	r7, r1, #12
 8001e64:	46a4      	mov	ip, r4
 8001e66:	46b0      	mov	r8, r6
 8001e68:	0b3f      	lsrs	r7, r7, #12
 8001e6a:	0d52      	lsrs	r2, r2, #21
 8001e6c:	0fc9      	lsrs	r1, r1, #31
 8001e6e:	0d5b      	lsrs	r3, r3, #21
 8001e70:	0fc0      	lsrs	r0, r0, #31
 8001e72:	42aa      	cmp	r2, r5
 8001e74:	d00d      	beq.n	8001e92 <__ledf2+0x4a>
 8001e76:	42ab      	cmp	r3, r5
 8001e78:	d010      	beq.n	8001e9c <__ledf2+0x54>
 8001e7a:	2a00      	cmp	r2, #0
 8001e7c:	d127      	bne.n	8001ece <__ledf2+0x86>
 8001e7e:	433c      	orrs	r4, r7
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d111      	bne.n	8001ea8 <__ledf2+0x60>
 8001e84:	464d      	mov	r5, r9
 8001e86:	432e      	orrs	r6, r5
 8001e88:	d10e      	bne.n	8001ea8 <__ledf2+0x60>
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	2c00      	cmp	r4, #0
 8001e8e:	d015      	beq.n	8001ebc <__ledf2+0x74>
 8001e90:	e00e      	b.n	8001eb0 <__ledf2+0x68>
 8001e92:	003d      	movs	r5, r7
 8001e94:	4325      	orrs	r5, r4
 8001e96:	d110      	bne.n	8001eba <__ledf2+0x72>
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d118      	bne.n	8001ece <__ledf2+0x86>
 8001e9c:	464d      	mov	r5, r9
 8001e9e:	432e      	orrs	r6, r5
 8001ea0:	d10b      	bne.n	8001eba <__ledf2+0x72>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d102      	bne.n	8001eac <__ledf2+0x64>
 8001ea6:	433c      	orrs	r4, r7
 8001ea8:	2c00      	cmp	r4, #0
 8001eaa:	d00b      	beq.n	8001ec4 <__ledf2+0x7c>
 8001eac:	4281      	cmp	r1, r0
 8001eae:	d014      	beq.n	8001eda <__ledf2+0x92>
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	3901      	subs	r1, #1
 8001eb4:	4008      	ands	r0, r1
 8001eb6:	3801      	subs	r0, #1
 8001eb8:	e000      	b.n	8001ebc <__ledf2+0x74>
 8001eba:	2002      	movs	r0, #2
 8001ebc:	bcc0      	pop	{r6, r7}
 8001ebe:	46b9      	mov	r9, r7
 8001ec0:	46b0      	mov	r8, r6
 8001ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d1f9      	bne.n	8001ebc <__ledf2+0x74>
 8001ec8:	2001      	movs	r0, #1
 8001eca:	4240      	negs	r0, r0
 8001ecc:	e7f6      	b.n	8001ebc <__ledf2+0x74>
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ec      	bne.n	8001eac <__ledf2+0x64>
 8001ed2:	464c      	mov	r4, r9
 8001ed4:	4326      	orrs	r6, r4
 8001ed6:	d1e9      	bne.n	8001eac <__ledf2+0x64>
 8001ed8:	e7ea      	b.n	8001eb0 <__ledf2+0x68>
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dd04      	ble.n	8001ee8 <__ledf2+0xa0>
 8001ede:	4243      	negs	r3, r0
 8001ee0:	4158      	adcs	r0, r3
 8001ee2:	0040      	lsls	r0, r0, #1
 8001ee4:	3801      	subs	r0, #1
 8001ee6:	e7e9      	b.n	8001ebc <__ledf2+0x74>
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbeb      	blt.n	8001ec4 <__ledf2+0x7c>
 8001eec:	454f      	cmp	r7, r9
 8001eee:	d8df      	bhi.n	8001eb0 <__ledf2+0x68>
 8001ef0:	d006      	beq.n	8001f00 <__ledf2+0xb8>
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	454f      	cmp	r7, r9
 8001ef6:	d2e1      	bcs.n	8001ebc <__ledf2+0x74>
 8001ef8:	2900      	cmp	r1, #0
 8001efa:	d0e5      	beq.n	8001ec8 <__ledf2+0x80>
 8001efc:	0008      	movs	r0, r1
 8001efe:	e7dd      	b.n	8001ebc <__ledf2+0x74>
 8001f00:	45c4      	cmp	ip, r8
 8001f02:	d8d5      	bhi.n	8001eb0 <__ledf2+0x68>
 8001f04:	2000      	movs	r0, #0
 8001f06:	45c4      	cmp	ip, r8
 8001f08:	d2d8      	bcs.n	8001ebc <__ledf2+0x74>
 8001f0a:	e7f5      	b.n	8001ef8 <__ledf2+0xb0>
 8001f0c:	000007ff 	.word	0x000007ff

08001f10 <__aeabi_dmul>:
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f12:	4645      	mov	r5, r8
 8001f14:	46de      	mov	lr, fp
 8001f16:	4657      	mov	r7, sl
 8001f18:	464e      	mov	r6, r9
 8001f1a:	b5e0      	push	{r5, r6, r7, lr}
 8001f1c:	001f      	movs	r7, r3
 8001f1e:	030b      	lsls	r3, r1, #12
 8001f20:	0b1b      	lsrs	r3, r3, #12
 8001f22:	469b      	mov	fp, r3
 8001f24:	004d      	lsls	r5, r1, #1
 8001f26:	0fcb      	lsrs	r3, r1, #31
 8001f28:	0004      	movs	r4, r0
 8001f2a:	4691      	mov	r9, r2
 8001f2c:	4698      	mov	r8, r3
 8001f2e:	b087      	sub	sp, #28
 8001f30:	0d6d      	lsrs	r5, r5, #21
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dmul+0x26>
 8001f34:	e1cd      	b.n	80022d2 <__aeabi_dmul+0x3c2>
 8001f36:	4bce      	ldr	r3, [pc, #824]	; (8002270 <__aeabi_dmul+0x360>)
 8001f38:	429d      	cmp	r5, r3
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dmul+0x2e>
 8001f3c:	e1e9      	b.n	8002312 <__aeabi_dmul+0x402>
 8001f3e:	465a      	mov	r2, fp
 8001f40:	0f43      	lsrs	r3, r0, #29
 8001f42:	00d2      	lsls	r2, r2, #3
 8001f44:	4313      	orrs	r3, r2
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	0412      	lsls	r2, r2, #16
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	00c3      	lsls	r3, r0, #3
 8001f4e:	469a      	mov	sl, r3
 8001f50:	4bc8      	ldr	r3, [pc, #800]	; (8002274 <__aeabi_dmul+0x364>)
 8001f52:	4693      	mov	fp, r2
 8001f54:	469c      	mov	ip, r3
 8001f56:	2300      	movs	r3, #0
 8001f58:	2600      	movs	r6, #0
 8001f5a:	4465      	add	r5, ip
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	033c      	lsls	r4, r7, #12
 8001f60:	007b      	lsls	r3, r7, #1
 8001f62:	4648      	mov	r0, r9
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	0fff      	lsrs	r7, r7, #31
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dmul+0x60>
 8001f6e:	e189      	b.n	8002284 <__aeabi_dmul+0x374>
 8001f70:	4abf      	ldr	r2, [pc, #764]	; (8002270 <__aeabi_dmul+0x360>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d019      	beq.n	8001faa <__aeabi_dmul+0x9a>
 8001f76:	0f42      	lsrs	r2, r0, #29
 8001f78:	00e4      	lsls	r4, r4, #3
 8001f7a:	4322      	orrs	r2, r4
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0424      	lsls	r4, r4, #16
 8001f80:	4314      	orrs	r4, r2
 8001f82:	4abc      	ldr	r2, [pc, #752]	; (8002274 <__aeabi_dmul+0x364>)
 8001f84:	2100      	movs	r1, #0
 8001f86:	4694      	mov	ip, r2
 8001f88:	4642      	mov	r2, r8
 8001f8a:	4463      	add	r3, ip
 8001f8c:	195b      	adds	r3, r3, r5
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	9b01      	ldr	r3, [sp, #4]
 8001f92:	407a      	eors	r2, r7
 8001f94:	3301      	adds	r3, #1
 8001f96:	00c0      	lsls	r0, r0, #3
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	2e0a      	cmp	r6, #10
 8001f9e:	dd1c      	ble.n	8001fda <__aeabi_dmul+0xca>
 8001fa0:	003a      	movs	r2, r7
 8001fa2:	2e0b      	cmp	r6, #11
 8001fa4:	d05e      	beq.n	8002064 <__aeabi_dmul+0x154>
 8001fa6:	4647      	mov	r7, r8
 8001fa8:	e056      	b.n	8002058 <__aeabi_dmul+0x148>
 8001faa:	4649      	mov	r1, r9
 8001fac:	4bb0      	ldr	r3, [pc, #704]	; (8002270 <__aeabi_dmul+0x360>)
 8001fae:	4321      	orrs	r1, r4
 8001fb0:	18eb      	adds	r3, r5, r3
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	2900      	cmp	r1, #0
 8001fb6:	d12a      	bne.n	800200e <__aeabi_dmul+0xfe>
 8001fb8:	2080      	movs	r0, #128	; 0x80
 8001fba:	2202      	movs	r2, #2
 8001fbc:	0100      	lsls	r0, r0, #4
 8001fbe:	002b      	movs	r3, r5
 8001fc0:	4684      	mov	ip, r0
 8001fc2:	4316      	orrs	r6, r2
 8001fc4:	4642      	mov	r2, r8
 8001fc6:	4463      	add	r3, ip
 8001fc8:	407a      	eors	r2, r7
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	9302      	str	r3, [sp, #8]
 8001fce:	2e0a      	cmp	r6, #10
 8001fd0:	dd00      	ble.n	8001fd4 <__aeabi_dmul+0xc4>
 8001fd2:	e231      	b.n	8002438 <__aeabi_dmul+0x528>
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	2400      	movs	r4, #0
 8001fd8:	2102      	movs	r1, #2
 8001fda:	2e02      	cmp	r6, #2
 8001fdc:	dc26      	bgt.n	800202c <__aeabi_dmul+0x11c>
 8001fde:	3e01      	subs	r6, #1
 8001fe0:	2e01      	cmp	r6, #1
 8001fe2:	d852      	bhi.n	800208a <__aeabi_dmul+0x17a>
 8001fe4:	2902      	cmp	r1, #2
 8001fe6:	d04c      	beq.n	8002082 <__aeabi_dmul+0x172>
 8001fe8:	2901      	cmp	r1, #1
 8001fea:	d000      	beq.n	8001fee <__aeabi_dmul+0xde>
 8001fec:	e118      	b.n	8002220 <__aeabi_dmul+0x310>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	2500      	movs	r5, #0
 8001ff4:	051b      	lsls	r3, r3, #20
 8001ff6:	4323      	orrs	r3, r4
 8001ff8:	07d2      	lsls	r2, r2, #31
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	0019      	movs	r1, r3
 8002000:	b007      	add	sp, #28
 8002002:	bcf0      	pop	{r4, r5, r6, r7}
 8002004:	46bb      	mov	fp, r7
 8002006:	46b2      	mov	sl, r6
 8002008:	46a9      	mov	r9, r5
 800200a:	46a0      	mov	r8, r4
 800200c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	2203      	movs	r2, #3
 8002012:	0109      	lsls	r1, r1, #4
 8002014:	002b      	movs	r3, r5
 8002016:	468c      	mov	ip, r1
 8002018:	4316      	orrs	r6, r2
 800201a:	4642      	mov	r2, r8
 800201c:	4463      	add	r3, ip
 800201e:	407a      	eors	r2, r7
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	9302      	str	r3, [sp, #8]
 8002024:	2e0a      	cmp	r6, #10
 8002026:	dd00      	ble.n	800202a <__aeabi_dmul+0x11a>
 8002028:	e228      	b.n	800247c <__aeabi_dmul+0x56c>
 800202a:	2103      	movs	r1, #3
 800202c:	2501      	movs	r5, #1
 800202e:	40b5      	lsls	r5, r6
 8002030:	46ac      	mov	ip, r5
 8002032:	26a6      	movs	r6, #166	; 0xa6
 8002034:	4663      	mov	r3, ip
 8002036:	00f6      	lsls	r6, r6, #3
 8002038:	4035      	ands	r5, r6
 800203a:	4233      	tst	r3, r6
 800203c:	d10b      	bne.n	8002056 <__aeabi_dmul+0x146>
 800203e:	2690      	movs	r6, #144	; 0x90
 8002040:	00b6      	lsls	r6, r6, #2
 8002042:	4233      	tst	r3, r6
 8002044:	d118      	bne.n	8002078 <__aeabi_dmul+0x168>
 8002046:	3eb9      	subs	r6, #185	; 0xb9
 8002048:	3eff      	subs	r6, #255	; 0xff
 800204a:	421e      	tst	r6, r3
 800204c:	d01d      	beq.n	800208a <__aeabi_dmul+0x17a>
 800204e:	46a3      	mov	fp, r4
 8002050:	4682      	mov	sl, r0
 8002052:	9100      	str	r1, [sp, #0]
 8002054:	e000      	b.n	8002058 <__aeabi_dmul+0x148>
 8002056:	0017      	movs	r7, r2
 8002058:	9900      	ldr	r1, [sp, #0]
 800205a:	003a      	movs	r2, r7
 800205c:	2902      	cmp	r1, #2
 800205e:	d010      	beq.n	8002082 <__aeabi_dmul+0x172>
 8002060:	465c      	mov	r4, fp
 8002062:	4650      	mov	r0, sl
 8002064:	2903      	cmp	r1, #3
 8002066:	d1bf      	bne.n	8001fe8 <__aeabi_dmul+0xd8>
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	031b      	lsls	r3, r3, #12
 800206c:	431c      	orrs	r4, r3
 800206e:	0324      	lsls	r4, r4, #12
 8002070:	0005      	movs	r5, r0
 8002072:	4b7f      	ldr	r3, [pc, #508]	; (8002270 <__aeabi_dmul+0x360>)
 8002074:	0b24      	lsrs	r4, r4, #12
 8002076:	e7bd      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002078:	2480      	movs	r4, #128	; 0x80
 800207a:	2200      	movs	r2, #0
 800207c:	4b7c      	ldr	r3, [pc, #496]	; (8002270 <__aeabi_dmul+0x360>)
 800207e:	0324      	lsls	r4, r4, #12
 8002080:	e7b8      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002082:	2400      	movs	r4, #0
 8002084:	2500      	movs	r5, #0
 8002086:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <__aeabi_dmul+0x360>)
 8002088:	e7b4      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800208a:	4653      	mov	r3, sl
 800208c:	041e      	lsls	r6, r3, #16
 800208e:	0c36      	lsrs	r6, r6, #16
 8002090:	0c1f      	lsrs	r7, r3, #16
 8002092:	0033      	movs	r3, r6
 8002094:	0c01      	lsrs	r1, r0, #16
 8002096:	0400      	lsls	r0, r0, #16
 8002098:	0c00      	lsrs	r0, r0, #16
 800209a:	4343      	muls	r3, r0
 800209c:	4698      	mov	r8, r3
 800209e:	0003      	movs	r3, r0
 80020a0:	437b      	muls	r3, r7
 80020a2:	4699      	mov	r9, r3
 80020a4:	0033      	movs	r3, r6
 80020a6:	434b      	muls	r3, r1
 80020a8:	469c      	mov	ip, r3
 80020aa:	4643      	mov	r3, r8
 80020ac:	000d      	movs	r5, r1
 80020ae:	0c1b      	lsrs	r3, r3, #16
 80020b0:	469a      	mov	sl, r3
 80020b2:	437d      	muls	r5, r7
 80020b4:	44cc      	add	ip, r9
 80020b6:	44d4      	add	ip, sl
 80020b8:	9500      	str	r5, [sp, #0]
 80020ba:	45e1      	cmp	r9, ip
 80020bc:	d904      	bls.n	80020c8 <__aeabi_dmul+0x1b8>
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	025b      	lsls	r3, r3, #9
 80020c2:	4699      	mov	r9, r3
 80020c4:	444d      	add	r5, r9
 80020c6:	9500      	str	r5, [sp, #0]
 80020c8:	4663      	mov	r3, ip
 80020ca:	0c1b      	lsrs	r3, r3, #16
 80020cc:	001d      	movs	r5, r3
 80020ce:	4663      	mov	r3, ip
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	469c      	mov	ip, r3
 80020d4:	4643      	mov	r3, r8
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	4698      	mov	r8, r3
 80020dc:	4663      	mov	r3, ip
 80020de:	4443      	add	r3, r8
 80020e0:	9303      	str	r3, [sp, #12]
 80020e2:	0c23      	lsrs	r3, r4, #16
 80020e4:	4698      	mov	r8, r3
 80020e6:	0033      	movs	r3, r6
 80020e8:	0424      	lsls	r4, r4, #16
 80020ea:	0c24      	lsrs	r4, r4, #16
 80020ec:	4363      	muls	r3, r4
 80020ee:	469c      	mov	ip, r3
 80020f0:	0023      	movs	r3, r4
 80020f2:	437b      	muls	r3, r7
 80020f4:	4699      	mov	r9, r3
 80020f6:	4643      	mov	r3, r8
 80020f8:	435e      	muls	r6, r3
 80020fa:	435f      	muls	r7, r3
 80020fc:	444e      	add	r6, r9
 80020fe:	4663      	mov	r3, ip
 8002100:	46b2      	mov	sl, r6
 8002102:	0c1e      	lsrs	r6, r3, #16
 8002104:	4456      	add	r6, sl
 8002106:	45b1      	cmp	r9, r6
 8002108:	d903      	bls.n	8002112 <__aeabi_dmul+0x202>
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	025b      	lsls	r3, r3, #9
 800210e:	4699      	mov	r9, r3
 8002110:	444f      	add	r7, r9
 8002112:	0c33      	lsrs	r3, r6, #16
 8002114:	4699      	mov	r9, r3
 8002116:	003b      	movs	r3, r7
 8002118:	444b      	add	r3, r9
 800211a:	9305      	str	r3, [sp, #20]
 800211c:	4663      	mov	r3, ip
 800211e:	46ac      	mov	ip, r5
 8002120:	041f      	lsls	r7, r3, #16
 8002122:	0c3f      	lsrs	r7, r7, #16
 8002124:	0436      	lsls	r6, r6, #16
 8002126:	19f6      	adds	r6, r6, r7
 8002128:	44b4      	add	ip, r6
 800212a:	4663      	mov	r3, ip
 800212c:	9304      	str	r3, [sp, #16]
 800212e:	465b      	mov	r3, fp
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	469c      	mov	ip, r3
 8002134:	465b      	mov	r3, fp
 8002136:	041f      	lsls	r7, r3, #16
 8002138:	0c3f      	lsrs	r7, r7, #16
 800213a:	003b      	movs	r3, r7
 800213c:	4343      	muls	r3, r0
 800213e:	4699      	mov	r9, r3
 8002140:	4663      	mov	r3, ip
 8002142:	4343      	muls	r3, r0
 8002144:	469a      	mov	sl, r3
 8002146:	464b      	mov	r3, r9
 8002148:	4660      	mov	r0, ip
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	469b      	mov	fp, r3
 800214e:	4348      	muls	r0, r1
 8002150:	4379      	muls	r1, r7
 8002152:	4451      	add	r1, sl
 8002154:	4459      	add	r1, fp
 8002156:	458a      	cmp	sl, r1
 8002158:	d903      	bls.n	8002162 <__aeabi_dmul+0x252>
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	025b      	lsls	r3, r3, #9
 800215e:	469a      	mov	sl, r3
 8002160:	4450      	add	r0, sl
 8002162:	0c0b      	lsrs	r3, r1, #16
 8002164:	469a      	mov	sl, r3
 8002166:	464b      	mov	r3, r9
 8002168:	041b      	lsls	r3, r3, #16
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	4699      	mov	r9, r3
 800216e:	003b      	movs	r3, r7
 8002170:	4363      	muls	r3, r4
 8002172:	0409      	lsls	r1, r1, #16
 8002174:	4645      	mov	r5, r8
 8002176:	4449      	add	r1, r9
 8002178:	4699      	mov	r9, r3
 800217a:	4663      	mov	r3, ip
 800217c:	435c      	muls	r4, r3
 800217e:	436b      	muls	r3, r5
 8002180:	469c      	mov	ip, r3
 8002182:	464b      	mov	r3, r9
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	4698      	mov	r8, r3
 8002188:	436f      	muls	r7, r5
 800218a:	193f      	adds	r7, r7, r4
 800218c:	4447      	add	r7, r8
 800218e:	4450      	add	r0, sl
 8002190:	42bc      	cmp	r4, r7
 8002192:	d903      	bls.n	800219c <__aeabi_dmul+0x28c>
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	4698      	mov	r8, r3
 800219a:	44c4      	add	ip, r8
 800219c:	9b04      	ldr	r3, [sp, #16]
 800219e:	9d00      	ldr	r5, [sp, #0]
 80021a0:	4698      	mov	r8, r3
 80021a2:	4445      	add	r5, r8
 80021a4:	42b5      	cmp	r5, r6
 80021a6:	41b6      	sbcs	r6, r6
 80021a8:	4273      	negs	r3, r6
 80021aa:	4698      	mov	r8, r3
 80021ac:	464b      	mov	r3, r9
 80021ae:	041e      	lsls	r6, r3, #16
 80021b0:	9b05      	ldr	r3, [sp, #20]
 80021b2:	043c      	lsls	r4, r7, #16
 80021b4:	4699      	mov	r9, r3
 80021b6:	0c36      	lsrs	r6, r6, #16
 80021b8:	19a4      	adds	r4, r4, r6
 80021ba:	444c      	add	r4, r9
 80021bc:	46a1      	mov	r9, r4
 80021be:	4683      	mov	fp, r0
 80021c0:	186e      	adds	r6, r5, r1
 80021c2:	44c1      	add	r9, r8
 80021c4:	428e      	cmp	r6, r1
 80021c6:	4189      	sbcs	r1, r1
 80021c8:	44cb      	add	fp, r9
 80021ca:	465d      	mov	r5, fp
 80021cc:	4249      	negs	r1, r1
 80021ce:	186d      	adds	r5, r5, r1
 80021d0:	429c      	cmp	r4, r3
 80021d2:	41a4      	sbcs	r4, r4
 80021d4:	45c1      	cmp	r9, r8
 80021d6:	419b      	sbcs	r3, r3
 80021d8:	4583      	cmp	fp, r0
 80021da:	4180      	sbcs	r0, r0
 80021dc:	428d      	cmp	r5, r1
 80021de:	4189      	sbcs	r1, r1
 80021e0:	425b      	negs	r3, r3
 80021e2:	4264      	negs	r4, r4
 80021e4:	431c      	orrs	r4, r3
 80021e6:	4240      	negs	r0, r0
 80021e8:	9b03      	ldr	r3, [sp, #12]
 80021ea:	4249      	negs	r1, r1
 80021ec:	4301      	orrs	r1, r0
 80021ee:	0270      	lsls	r0, r6, #9
 80021f0:	0c3f      	lsrs	r7, r7, #16
 80021f2:	4318      	orrs	r0, r3
 80021f4:	19e4      	adds	r4, r4, r7
 80021f6:	1e47      	subs	r7, r0, #1
 80021f8:	41b8      	sbcs	r0, r7
 80021fa:	1864      	adds	r4, r4, r1
 80021fc:	4464      	add	r4, ip
 80021fe:	0df6      	lsrs	r6, r6, #23
 8002200:	0261      	lsls	r1, r4, #9
 8002202:	4330      	orrs	r0, r6
 8002204:	0dec      	lsrs	r4, r5, #23
 8002206:	026e      	lsls	r6, r5, #9
 8002208:	430c      	orrs	r4, r1
 800220a:	4330      	orrs	r0, r6
 800220c:	01c9      	lsls	r1, r1, #7
 800220e:	d400      	bmi.n	8002212 <__aeabi_dmul+0x302>
 8002210:	e0f1      	b.n	80023f6 <__aeabi_dmul+0x4e6>
 8002212:	2101      	movs	r1, #1
 8002214:	0843      	lsrs	r3, r0, #1
 8002216:	4001      	ands	r1, r0
 8002218:	430b      	orrs	r3, r1
 800221a:	07e0      	lsls	r0, r4, #31
 800221c:	4318      	orrs	r0, r3
 800221e:	0864      	lsrs	r4, r4, #1
 8002220:	4915      	ldr	r1, [pc, #84]	; (8002278 <__aeabi_dmul+0x368>)
 8002222:	9b02      	ldr	r3, [sp, #8]
 8002224:	468c      	mov	ip, r1
 8002226:	4463      	add	r3, ip
 8002228:	2b00      	cmp	r3, #0
 800222a:	dc00      	bgt.n	800222e <__aeabi_dmul+0x31e>
 800222c:	e097      	b.n	800235e <__aeabi_dmul+0x44e>
 800222e:	0741      	lsls	r1, r0, #29
 8002230:	d009      	beq.n	8002246 <__aeabi_dmul+0x336>
 8002232:	210f      	movs	r1, #15
 8002234:	4001      	ands	r1, r0
 8002236:	2904      	cmp	r1, #4
 8002238:	d005      	beq.n	8002246 <__aeabi_dmul+0x336>
 800223a:	1d01      	adds	r1, r0, #4
 800223c:	4281      	cmp	r1, r0
 800223e:	4180      	sbcs	r0, r0
 8002240:	4240      	negs	r0, r0
 8002242:	1824      	adds	r4, r4, r0
 8002244:	0008      	movs	r0, r1
 8002246:	01e1      	lsls	r1, r4, #7
 8002248:	d506      	bpl.n	8002258 <__aeabi_dmul+0x348>
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	00c9      	lsls	r1, r1, #3
 800224e:	468c      	mov	ip, r1
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <__aeabi_dmul+0x36c>)
 8002252:	401c      	ands	r4, r3
 8002254:	9b02      	ldr	r3, [sp, #8]
 8002256:	4463      	add	r3, ip
 8002258:	4909      	ldr	r1, [pc, #36]	; (8002280 <__aeabi_dmul+0x370>)
 800225a:	428b      	cmp	r3, r1
 800225c:	dd00      	ble.n	8002260 <__aeabi_dmul+0x350>
 800225e:	e710      	b.n	8002082 <__aeabi_dmul+0x172>
 8002260:	0761      	lsls	r1, r4, #29
 8002262:	08c5      	lsrs	r5, r0, #3
 8002264:	0264      	lsls	r4, r4, #9
 8002266:	055b      	lsls	r3, r3, #21
 8002268:	430d      	orrs	r5, r1
 800226a:	0b24      	lsrs	r4, r4, #12
 800226c:	0d5b      	lsrs	r3, r3, #21
 800226e:	e6c1      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002270:	000007ff 	.word	0x000007ff
 8002274:	fffffc01 	.word	0xfffffc01
 8002278:	000003ff 	.word	0x000003ff
 800227c:	feffffff 	.word	0xfeffffff
 8002280:	000007fe 	.word	0x000007fe
 8002284:	464b      	mov	r3, r9
 8002286:	4323      	orrs	r3, r4
 8002288:	d059      	beq.n	800233e <__aeabi_dmul+0x42e>
 800228a:	2c00      	cmp	r4, #0
 800228c:	d100      	bne.n	8002290 <__aeabi_dmul+0x380>
 800228e:	e0a3      	b.n	80023d8 <__aeabi_dmul+0x4c8>
 8002290:	0020      	movs	r0, r4
 8002292:	f000 fdf9 	bl	8002e88 <__clzsi2>
 8002296:	0001      	movs	r1, r0
 8002298:	0003      	movs	r3, r0
 800229a:	390b      	subs	r1, #11
 800229c:	221d      	movs	r2, #29
 800229e:	1a52      	subs	r2, r2, r1
 80022a0:	4649      	mov	r1, r9
 80022a2:	0018      	movs	r0, r3
 80022a4:	40d1      	lsrs	r1, r2
 80022a6:	464a      	mov	r2, r9
 80022a8:	3808      	subs	r0, #8
 80022aa:	4082      	lsls	r2, r0
 80022ac:	4084      	lsls	r4, r0
 80022ae:	0010      	movs	r0, r2
 80022b0:	430c      	orrs	r4, r1
 80022b2:	4a74      	ldr	r2, [pc, #464]	; (8002484 <__aeabi_dmul+0x574>)
 80022b4:	1aeb      	subs	r3, r5, r3
 80022b6:	4694      	mov	ip, r2
 80022b8:	4642      	mov	r2, r8
 80022ba:	4463      	add	r3, ip
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	9b01      	ldr	r3, [sp, #4]
 80022c0:	407a      	eors	r2, r7
 80022c2:	3301      	adds	r3, #1
 80022c4:	2100      	movs	r1, #0
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	2e0a      	cmp	r6, #10
 80022cc:	dd00      	ble.n	80022d0 <__aeabi_dmul+0x3c0>
 80022ce:	e667      	b.n	8001fa0 <__aeabi_dmul+0x90>
 80022d0:	e683      	b.n	8001fda <__aeabi_dmul+0xca>
 80022d2:	465b      	mov	r3, fp
 80022d4:	4303      	orrs	r3, r0
 80022d6:	469a      	mov	sl, r3
 80022d8:	d02a      	beq.n	8002330 <__aeabi_dmul+0x420>
 80022da:	465b      	mov	r3, fp
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d06d      	beq.n	80023bc <__aeabi_dmul+0x4ac>
 80022e0:	4658      	mov	r0, fp
 80022e2:	f000 fdd1 	bl	8002e88 <__clzsi2>
 80022e6:	0001      	movs	r1, r0
 80022e8:	0003      	movs	r3, r0
 80022ea:	390b      	subs	r1, #11
 80022ec:	221d      	movs	r2, #29
 80022ee:	1a52      	subs	r2, r2, r1
 80022f0:	0021      	movs	r1, r4
 80022f2:	0018      	movs	r0, r3
 80022f4:	465d      	mov	r5, fp
 80022f6:	40d1      	lsrs	r1, r2
 80022f8:	3808      	subs	r0, #8
 80022fa:	4085      	lsls	r5, r0
 80022fc:	000a      	movs	r2, r1
 80022fe:	4084      	lsls	r4, r0
 8002300:	432a      	orrs	r2, r5
 8002302:	4693      	mov	fp, r2
 8002304:	46a2      	mov	sl, r4
 8002306:	4d5f      	ldr	r5, [pc, #380]	; (8002484 <__aeabi_dmul+0x574>)
 8002308:	2600      	movs	r6, #0
 800230a:	1aed      	subs	r5, r5, r3
 800230c:	2300      	movs	r3, #0
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	e625      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002312:	465b      	mov	r3, fp
 8002314:	4303      	orrs	r3, r0
 8002316:	469a      	mov	sl, r3
 8002318:	d105      	bne.n	8002326 <__aeabi_dmul+0x416>
 800231a:	2300      	movs	r3, #0
 800231c:	469b      	mov	fp, r3
 800231e:	3302      	adds	r3, #2
 8002320:	2608      	movs	r6, #8
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	e61b      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002326:	2303      	movs	r3, #3
 8002328:	4682      	mov	sl, r0
 800232a:	260c      	movs	r6, #12
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	e616      	b.n	8001f5e <__aeabi_dmul+0x4e>
 8002330:	2300      	movs	r3, #0
 8002332:	469b      	mov	fp, r3
 8002334:	3301      	adds	r3, #1
 8002336:	2604      	movs	r6, #4
 8002338:	2500      	movs	r5, #0
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	e60f      	b.n	8001f5e <__aeabi_dmul+0x4e>
 800233e:	4642      	mov	r2, r8
 8002340:	3301      	adds	r3, #1
 8002342:	9501      	str	r5, [sp, #4]
 8002344:	431e      	orrs	r6, r3
 8002346:	9b01      	ldr	r3, [sp, #4]
 8002348:	407a      	eors	r2, r7
 800234a:	3301      	adds	r3, #1
 800234c:	2400      	movs	r4, #0
 800234e:	2000      	movs	r0, #0
 8002350:	2101      	movs	r1, #1
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	2e0a      	cmp	r6, #10
 8002358:	dd00      	ble.n	800235c <__aeabi_dmul+0x44c>
 800235a:	e621      	b.n	8001fa0 <__aeabi_dmul+0x90>
 800235c:	e63d      	b.n	8001fda <__aeabi_dmul+0xca>
 800235e:	2101      	movs	r1, #1
 8002360:	1ac9      	subs	r1, r1, r3
 8002362:	2938      	cmp	r1, #56	; 0x38
 8002364:	dd00      	ble.n	8002368 <__aeabi_dmul+0x458>
 8002366:	e642      	b.n	8001fee <__aeabi_dmul+0xde>
 8002368:	291f      	cmp	r1, #31
 800236a:	dd47      	ble.n	80023fc <__aeabi_dmul+0x4ec>
 800236c:	261f      	movs	r6, #31
 800236e:	0025      	movs	r5, r4
 8002370:	4276      	negs	r6, r6
 8002372:	1af3      	subs	r3, r6, r3
 8002374:	40dd      	lsrs	r5, r3
 8002376:	002b      	movs	r3, r5
 8002378:	2920      	cmp	r1, #32
 800237a:	d005      	beq.n	8002388 <__aeabi_dmul+0x478>
 800237c:	4942      	ldr	r1, [pc, #264]	; (8002488 <__aeabi_dmul+0x578>)
 800237e:	9d02      	ldr	r5, [sp, #8]
 8002380:	468c      	mov	ip, r1
 8002382:	4465      	add	r5, ip
 8002384:	40ac      	lsls	r4, r5
 8002386:	4320      	orrs	r0, r4
 8002388:	1e41      	subs	r1, r0, #1
 800238a:	4188      	sbcs	r0, r1
 800238c:	4318      	orrs	r0, r3
 800238e:	2307      	movs	r3, #7
 8002390:	001d      	movs	r5, r3
 8002392:	2400      	movs	r4, #0
 8002394:	4005      	ands	r5, r0
 8002396:	4203      	tst	r3, r0
 8002398:	d04a      	beq.n	8002430 <__aeabi_dmul+0x520>
 800239a:	230f      	movs	r3, #15
 800239c:	2400      	movs	r4, #0
 800239e:	4003      	ands	r3, r0
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d042      	beq.n	800242a <__aeabi_dmul+0x51a>
 80023a4:	1d03      	adds	r3, r0, #4
 80023a6:	4283      	cmp	r3, r0
 80023a8:	4180      	sbcs	r0, r0
 80023aa:	4240      	negs	r0, r0
 80023ac:	1824      	adds	r4, r4, r0
 80023ae:	0018      	movs	r0, r3
 80023b0:	0223      	lsls	r3, r4, #8
 80023b2:	d53a      	bpl.n	800242a <__aeabi_dmul+0x51a>
 80023b4:	2301      	movs	r3, #1
 80023b6:	2400      	movs	r4, #0
 80023b8:	2500      	movs	r5, #0
 80023ba:	e61b      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 80023bc:	f000 fd64 	bl	8002e88 <__clzsi2>
 80023c0:	0001      	movs	r1, r0
 80023c2:	0003      	movs	r3, r0
 80023c4:	3115      	adds	r1, #21
 80023c6:	3320      	adds	r3, #32
 80023c8:	291c      	cmp	r1, #28
 80023ca:	dd8f      	ble.n	80022ec <__aeabi_dmul+0x3dc>
 80023cc:	3808      	subs	r0, #8
 80023ce:	2200      	movs	r2, #0
 80023d0:	4084      	lsls	r4, r0
 80023d2:	4692      	mov	sl, r2
 80023d4:	46a3      	mov	fp, r4
 80023d6:	e796      	b.n	8002306 <__aeabi_dmul+0x3f6>
 80023d8:	f000 fd56 	bl	8002e88 <__clzsi2>
 80023dc:	0001      	movs	r1, r0
 80023de:	0003      	movs	r3, r0
 80023e0:	3115      	adds	r1, #21
 80023e2:	3320      	adds	r3, #32
 80023e4:	291c      	cmp	r1, #28
 80023e6:	dc00      	bgt.n	80023ea <__aeabi_dmul+0x4da>
 80023e8:	e758      	b.n	800229c <__aeabi_dmul+0x38c>
 80023ea:	0002      	movs	r2, r0
 80023ec:	464c      	mov	r4, r9
 80023ee:	3a08      	subs	r2, #8
 80023f0:	2000      	movs	r0, #0
 80023f2:	4094      	lsls	r4, r2
 80023f4:	e75d      	b.n	80022b2 <__aeabi_dmul+0x3a2>
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	e711      	b.n	8002220 <__aeabi_dmul+0x310>
 80023fc:	4b23      	ldr	r3, [pc, #140]	; (800248c <__aeabi_dmul+0x57c>)
 80023fe:	0026      	movs	r6, r4
 8002400:	469c      	mov	ip, r3
 8002402:	0003      	movs	r3, r0
 8002404:	9d02      	ldr	r5, [sp, #8]
 8002406:	40cb      	lsrs	r3, r1
 8002408:	4465      	add	r5, ip
 800240a:	40ae      	lsls	r6, r5
 800240c:	431e      	orrs	r6, r3
 800240e:	0003      	movs	r3, r0
 8002410:	40ab      	lsls	r3, r5
 8002412:	1e58      	subs	r0, r3, #1
 8002414:	4183      	sbcs	r3, r0
 8002416:	0030      	movs	r0, r6
 8002418:	4318      	orrs	r0, r3
 800241a:	40cc      	lsrs	r4, r1
 800241c:	0743      	lsls	r3, r0, #29
 800241e:	d0c7      	beq.n	80023b0 <__aeabi_dmul+0x4a0>
 8002420:	230f      	movs	r3, #15
 8002422:	4003      	ands	r3, r0
 8002424:	2b04      	cmp	r3, #4
 8002426:	d1bd      	bne.n	80023a4 <__aeabi_dmul+0x494>
 8002428:	e7c2      	b.n	80023b0 <__aeabi_dmul+0x4a0>
 800242a:	0765      	lsls	r5, r4, #29
 800242c:	0264      	lsls	r4, r4, #9
 800242e:	0b24      	lsrs	r4, r4, #12
 8002430:	08c0      	lsrs	r0, r0, #3
 8002432:	2300      	movs	r3, #0
 8002434:	4305      	orrs	r5, r0
 8002436:	e5dd      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 8002438:	2500      	movs	r5, #0
 800243a:	2302      	movs	r3, #2
 800243c:	2e0f      	cmp	r6, #15
 800243e:	d10c      	bne.n	800245a <__aeabi_dmul+0x54a>
 8002440:	2480      	movs	r4, #128	; 0x80
 8002442:	465b      	mov	r3, fp
 8002444:	0324      	lsls	r4, r4, #12
 8002446:	4223      	tst	r3, r4
 8002448:	d00e      	beq.n	8002468 <__aeabi_dmul+0x558>
 800244a:	4221      	tst	r1, r4
 800244c:	d10c      	bne.n	8002468 <__aeabi_dmul+0x558>
 800244e:	430c      	orrs	r4, r1
 8002450:	0324      	lsls	r4, r4, #12
 8002452:	003a      	movs	r2, r7
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <__aeabi_dmul+0x580>)
 8002456:	0b24      	lsrs	r4, r4, #12
 8002458:	e5cc      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800245a:	2e0b      	cmp	r6, #11
 800245c:	d000      	beq.n	8002460 <__aeabi_dmul+0x550>
 800245e:	e5a2      	b.n	8001fa6 <__aeabi_dmul+0x96>
 8002460:	468b      	mov	fp, r1
 8002462:	46aa      	mov	sl, r5
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	e5f7      	b.n	8002058 <__aeabi_dmul+0x148>
 8002468:	2480      	movs	r4, #128	; 0x80
 800246a:	465b      	mov	r3, fp
 800246c:	0324      	lsls	r4, r4, #12
 800246e:	431c      	orrs	r4, r3
 8002470:	0324      	lsls	r4, r4, #12
 8002472:	4642      	mov	r2, r8
 8002474:	4655      	mov	r5, sl
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <__aeabi_dmul+0x580>)
 8002478:	0b24      	lsrs	r4, r4, #12
 800247a:	e5bb      	b.n	8001ff4 <__aeabi_dmul+0xe4>
 800247c:	464d      	mov	r5, r9
 800247e:	0021      	movs	r1, r4
 8002480:	2303      	movs	r3, #3
 8002482:	e7db      	b.n	800243c <__aeabi_dmul+0x52c>
 8002484:	fffffc0d 	.word	0xfffffc0d
 8002488:	0000043e 	.word	0x0000043e
 800248c:	0000041e 	.word	0x0000041e
 8002490:	000007ff 	.word	0x000007ff

08002494 <__aeabi_dsub>:
 8002494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002496:	4657      	mov	r7, sl
 8002498:	464e      	mov	r6, r9
 800249a:	4645      	mov	r5, r8
 800249c:	46de      	mov	lr, fp
 800249e:	b5e0      	push	{r5, r6, r7, lr}
 80024a0:	000d      	movs	r5, r1
 80024a2:	0004      	movs	r4, r0
 80024a4:	0019      	movs	r1, r3
 80024a6:	0010      	movs	r0, r2
 80024a8:	032b      	lsls	r3, r5, #12
 80024aa:	0a5b      	lsrs	r3, r3, #9
 80024ac:	0f62      	lsrs	r2, r4, #29
 80024ae:	431a      	orrs	r2, r3
 80024b0:	00e3      	lsls	r3, r4, #3
 80024b2:	030c      	lsls	r4, r1, #12
 80024b4:	0a64      	lsrs	r4, r4, #9
 80024b6:	0f47      	lsrs	r7, r0, #29
 80024b8:	4327      	orrs	r7, r4
 80024ba:	4cd0      	ldr	r4, [pc, #832]	; (80027fc <__aeabi_dsub+0x368>)
 80024bc:	006e      	lsls	r6, r5, #1
 80024be:	4691      	mov	r9, r2
 80024c0:	b083      	sub	sp, #12
 80024c2:	004a      	lsls	r2, r1, #1
 80024c4:	00c0      	lsls	r0, r0, #3
 80024c6:	4698      	mov	r8, r3
 80024c8:	46a2      	mov	sl, r4
 80024ca:	0d76      	lsrs	r6, r6, #21
 80024cc:	0fed      	lsrs	r5, r5, #31
 80024ce:	0d52      	lsrs	r2, r2, #21
 80024d0:	0fc9      	lsrs	r1, r1, #31
 80024d2:	9001      	str	r0, [sp, #4]
 80024d4:	42a2      	cmp	r2, r4
 80024d6:	d100      	bne.n	80024da <__aeabi_dsub+0x46>
 80024d8:	e0b9      	b.n	800264e <__aeabi_dsub+0x1ba>
 80024da:	2401      	movs	r4, #1
 80024dc:	4061      	eors	r1, r4
 80024de:	468b      	mov	fp, r1
 80024e0:	428d      	cmp	r5, r1
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x52>
 80024e4:	e08d      	b.n	8002602 <__aeabi_dsub+0x16e>
 80024e6:	1ab4      	subs	r4, r6, r2
 80024e8:	46a4      	mov	ip, r4
 80024ea:	2c00      	cmp	r4, #0
 80024ec:	dc00      	bgt.n	80024f0 <__aeabi_dsub+0x5c>
 80024ee:	e0b7      	b.n	8002660 <__aeabi_dsub+0x1cc>
 80024f0:	2a00      	cmp	r2, #0
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dsub+0x62>
 80024f4:	e0cb      	b.n	800268e <__aeabi_dsub+0x1fa>
 80024f6:	4ac1      	ldr	r2, [pc, #772]	; (80027fc <__aeabi_dsub+0x368>)
 80024f8:	4296      	cmp	r6, r2
 80024fa:	d100      	bne.n	80024fe <__aeabi_dsub+0x6a>
 80024fc:	e186      	b.n	800280c <__aeabi_dsub+0x378>
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	0412      	lsls	r2, r2, #16
 8002502:	4317      	orrs	r7, r2
 8002504:	4662      	mov	r2, ip
 8002506:	2a38      	cmp	r2, #56	; 0x38
 8002508:	dd00      	ble.n	800250c <__aeabi_dsub+0x78>
 800250a:	e1a4      	b.n	8002856 <__aeabi_dsub+0x3c2>
 800250c:	2a1f      	cmp	r2, #31
 800250e:	dd00      	ble.n	8002512 <__aeabi_dsub+0x7e>
 8002510:	e21d      	b.n	800294e <__aeabi_dsub+0x4ba>
 8002512:	4661      	mov	r1, ip
 8002514:	2220      	movs	r2, #32
 8002516:	003c      	movs	r4, r7
 8002518:	1a52      	subs	r2, r2, r1
 800251a:	0001      	movs	r1, r0
 800251c:	4090      	lsls	r0, r2
 800251e:	4094      	lsls	r4, r2
 8002520:	1e42      	subs	r2, r0, #1
 8002522:	4190      	sbcs	r0, r2
 8002524:	4662      	mov	r2, ip
 8002526:	46a0      	mov	r8, r4
 8002528:	4664      	mov	r4, ip
 800252a:	40d7      	lsrs	r7, r2
 800252c:	464a      	mov	r2, r9
 800252e:	40e1      	lsrs	r1, r4
 8002530:	4644      	mov	r4, r8
 8002532:	1bd2      	subs	r2, r2, r7
 8002534:	4691      	mov	r9, r2
 8002536:	430c      	orrs	r4, r1
 8002538:	4304      	orrs	r4, r0
 800253a:	1b1c      	subs	r4, r3, r4
 800253c:	42a3      	cmp	r3, r4
 800253e:	4192      	sbcs	r2, r2
 8002540:	464b      	mov	r3, r9
 8002542:	4252      	negs	r2, r2
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	469a      	mov	sl, r3
 8002548:	4653      	mov	r3, sl
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	d400      	bmi.n	8002550 <__aeabi_dsub+0xbc>
 800254e:	e12b      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002550:	4653      	mov	r3, sl
 8002552:	025a      	lsls	r2, r3, #9
 8002554:	0a53      	lsrs	r3, r2, #9
 8002556:	469a      	mov	sl, r3
 8002558:	4653      	mov	r3, sl
 800255a:	2b00      	cmp	r3, #0
 800255c:	d100      	bne.n	8002560 <__aeabi_dsub+0xcc>
 800255e:	e166      	b.n	800282e <__aeabi_dsub+0x39a>
 8002560:	4650      	mov	r0, sl
 8002562:	f000 fc91 	bl	8002e88 <__clzsi2>
 8002566:	0003      	movs	r3, r0
 8002568:	3b08      	subs	r3, #8
 800256a:	2220      	movs	r2, #32
 800256c:	0020      	movs	r0, r4
 800256e:	1ad2      	subs	r2, r2, r3
 8002570:	4651      	mov	r1, sl
 8002572:	40d0      	lsrs	r0, r2
 8002574:	4099      	lsls	r1, r3
 8002576:	0002      	movs	r2, r0
 8002578:	409c      	lsls	r4, r3
 800257a:	430a      	orrs	r2, r1
 800257c:	429e      	cmp	r6, r3
 800257e:	dd00      	ble.n	8002582 <__aeabi_dsub+0xee>
 8002580:	e164      	b.n	800284c <__aeabi_dsub+0x3b8>
 8002582:	1b9b      	subs	r3, r3, r6
 8002584:	1c59      	adds	r1, r3, #1
 8002586:	291f      	cmp	r1, #31
 8002588:	dd00      	ble.n	800258c <__aeabi_dsub+0xf8>
 800258a:	e0fe      	b.n	800278a <__aeabi_dsub+0x2f6>
 800258c:	2320      	movs	r3, #32
 800258e:	0010      	movs	r0, r2
 8002590:	0026      	movs	r6, r4
 8002592:	1a5b      	subs	r3, r3, r1
 8002594:	409c      	lsls	r4, r3
 8002596:	4098      	lsls	r0, r3
 8002598:	40ce      	lsrs	r6, r1
 800259a:	40ca      	lsrs	r2, r1
 800259c:	1e63      	subs	r3, r4, #1
 800259e:	419c      	sbcs	r4, r3
 80025a0:	4330      	orrs	r0, r6
 80025a2:	4692      	mov	sl, r2
 80025a4:	2600      	movs	r6, #0
 80025a6:	4304      	orrs	r4, r0
 80025a8:	0763      	lsls	r3, r4, #29
 80025aa:	d009      	beq.n	80025c0 <__aeabi_dsub+0x12c>
 80025ac:	230f      	movs	r3, #15
 80025ae:	4023      	ands	r3, r4
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d005      	beq.n	80025c0 <__aeabi_dsub+0x12c>
 80025b4:	1d23      	adds	r3, r4, #4
 80025b6:	42a3      	cmp	r3, r4
 80025b8:	41a4      	sbcs	r4, r4
 80025ba:	4264      	negs	r4, r4
 80025bc:	44a2      	add	sl, r4
 80025be:	001c      	movs	r4, r3
 80025c0:	4653      	mov	r3, sl
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	d400      	bmi.n	80025c8 <__aeabi_dsub+0x134>
 80025c6:	e0f2      	b.n	80027ae <__aeabi_dsub+0x31a>
 80025c8:	4b8c      	ldr	r3, [pc, #560]	; (80027fc <__aeabi_dsub+0x368>)
 80025ca:	3601      	adds	r6, #1
 80025cc:	429e      	cmp	r6, r3
 80025ce:	d100      	bne.n	80025d2 <__aeabi_dsub+0x13e>
 80025d0:	e10f      	b.n	80027f2 <__aeabi_dsub+0x35e>
 80025d2:	4653      	mov	r3, sl
 80025d4:	498a      	ldr	r1, [pc, #552]	; (8002800 <__aeabi_dsub+0x36c>)
 80025d6:	08e4      	lsrs	r4, r4, #3
 80025d8:	400b      	ands	r3, r1
 80025da:	0019      	movs	r1, r3
 80025dc:	075b      	lsls	r3, r3, #29
 80025de:	4323      	orrs	r3, r4
 80025e0:	0572      	lsls	r2, r6, #21
 80025e2:	024c      	lsls	r4, r1, #9
 80025e4:	0b24      	lsrs	r4, r4, #12
 80025e6:	0d52      	lsrs	r2, r2, #21
 80025e8:	0512      	lsls	r2, r2, #20
 80025ea:	4322      	orrs	r2, r4
 80025ec:	07ed      	lsls	r5, r5, #31
 80025ee:	432a      	orrs	r2, r5
 80025f0:	0018      	movs	r0, r3
 80025f2:	0011      	movs	r1, r2
 80025f4:	b003      	add	sp, #12
 80025f6:	bcf0      	pop	{r4, r5, r6, r7}
 80025f8:	46bb      	mov	fp, r7
 80025fa:	46b2      	mov	sl, r6
 80025fc:	46a9      	mov	r9, r5
 80025fe:	46a0      	mov	r8, r4
 8002600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002602:	1ab4      	subs	r4, r6, r2
 8002604:	46a4      	mov	ip, r4
 8002606:	2c00      	cmp	r4, #0
 8002608:	dd59      	ble.n	80026be <__aeabi_dsub+0x22a>
 800260a:	2a00      	cmp	r2, #0
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x17c>
 800260e:	e0b0      	b.n	8002772 <__aeabi_dsub+0x2de>
 8002610:	4556      	cmp	r6, sl
 8002612:	d100      	bne.n	8002616 <__aeabi_dsub+0x182>
 8002614:	e0fa      	b.n	800280c <__aeabi_dsub+0x378>
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	0412      	lsls	r2, r2, #16
 800261a:	4317      	orrs	r7, r2
 800261c:	4662      	mov	r2, ip
 800261e:	2a38      	cmp	r2, #56	; 0x38
 8002620:	dd00      	ble.n	8002624 <__aeabi_dsub+0x190>
 8002622:	e0d4      	b.n	80027ce <__aeabi_dsub+0x33a>
 8002624:	2a1f      	cmp	r2, #31
 8002626:	dc00      	bgt.n	800262a <__aeabi_dsub+0x196>
 8002628:	e1c0      	b.n	80029ac <__aeabi_dsub+0x518>
 800262a:	0039      	movs	r1, r7
 800262c:	3a20      	subs	r2, #32
 800262e:	40d1      	lsrs	r1, r2
 8002630:	4662      	mov	r2, ip
 8002632:	2a20      	cmp	r2, #32
 8002634:	d006      	beq.n	8002644 <__aeabi_dsub+0x1b0>
 8002636:	4664      	mov	r4, ip
 8002638:	2240      	movs	r2, #64	; 0x40
 800263a:	1b12      	subs	r2, r2, r4
 800263c:	003c      	movs	r4, r7
 800263e:	4094      	lsls	r4, r2
 8002640:	4304      	orrs	r4, r0
 8002642:	9401      	str	r4, [sp, #4]
 8002644:	9c01      	ldr	r4, [sp, #4]
 8002646:	1e62      	subs	r2, r4, #1
 8002648:	4194      	sbcs	r4, r2
 800264a:	430c      	orrs	r4, r1
 800264c:	e0c3      	b.n	80027d6 <__aeabi_dsub+0x342>
 800264e:	003c      	movs	r4, r7
 8002650:	4304      	orrs	r4, r0
 8002652:	d02b      	beq.n	80026ac <__aeabi_dsub+0x218>
 8002654:	468b      	mov	fp, r1
 8002656:	428d      	cmp	r5, r1
 8002658:	d02e      	beq.n	80026b8 <__aeabi_dsub+0x224>
 800265a:	4c6a      	ldr	r4, [pc, #424]	; (8002804 <__aeabi_dsub+0x370>)
 800265c:	46a4      	mov	ip, r4
 800265e:	44b4      	add	ip, r6
 8002660:	4664      	mov	r4, ip
 8002662:	2c00      	cmp	r4, #0
 8002664:	d05f      	beq.n	8002726 <__aeabi_dsub+0x292>
 8002666:	1b94      	subs	r4, r2, r6
 8002668:	46a4      	mov	ip, r4
 800266a:	2e00      	cmp	r6, #0
 800266c:	d000      	beq.n	8002670 <__aeabi_dsub+0x1dc>
 800266e:	e120      	b.n	80028b2 <__aeabi_dsub+0x41e>
 8002670:	464c      	mov	r4, r9
 8002672:	431c      	orrs	r4, r3
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x1e4>
 8002676:	e1c7      	b.n	8002a08 <__aeabi_dsub+0x574>
 8002678:	4661      	mov	r1, ip
 800267a:	1e4c      	subs	r4, r1, #1
 800267c:	2901      	cmp	r1, #1
 800267e:	d100      	bne.n	8002682 <__aeabi_dsub+0x1ee>
 8002680:	e223      	b.n	8002aca <__aeabi_dsub+0x636>
 8002682:	4d5e      	ldr	r5, [pc, #376]	; (80027fc <__aeabi_dsub+0x368>)
 8002684:	45ac      	cmp	ip, r5
 8002686:	d100      	bne.n	800268a <__aeabi_dsub+0x1f6>
 8002688:	e1d8      	b.n	8002a3c <__aeabi_dsub+0x5a8>
 800268a:	46a4      	mov	ip, r4
 800268c:	e11a      	b.n	80028c4 <__aeabi_dsub+0x430>
 800268e:	003a      	movs	r2, r7
 8002690:	4302      	orrs	r2, r0
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x202>
 8002694:	e0e4      	b.n	8002860 <__aeabi_dsub+0x3cc>
 8002696:	0022      	movs	r2, r4
 8002698:	3a01      	subs	r2, #1
 800269a:	2c01      	cmp	r4, #1
 800269c:	d100      	bne.n	80026a0 <__aeabi_dsub+0x20c>
 800269e:	e1c3      	b.n	8002a28 <__aeabi_dsub+0x594>
 80026a0:	4956      	ldr	r1, [pc, #344]	; (80027fc <__aeabi_dsub+0x368>)
 80026a2:	428c      	cmp	r4, r1
 80026a4:	d100      	bne.n	80026a8 <__aeabi_dsub+0x214>
 80026a6:	e0b1      	b.n	800280c <__aeabi_dsub+0x378>
 80026a8:	4694      	mov	ip, r2
 80026aa:	e72b      	b.n	8002504 <__aeabi_dsub+0x70>
 80026ac:	2401      	movs	r4, #1
 80026ae:	4061      	eors	r1, r4
 80026b0:	468b      	mov	fp, r1
 80026b2:	428d      	cmp	r5, r1
 80026b4:	d000      	beq.n	80026b8 <__aeabi_dsub+0x224>
 80026b6:	e716      	b.n	80024e6 <__aeabi_dsub+0x52>
 80026b8:	4952      	ldr	r1, [pc, #328]	; (8002804 <__aeabi_dsub+0x370>)
 80026ba:	468c      	mov	ip, r1
 80026bc:	44b4      	add	ip, r6
 80026be:	4664      	mov	r4, ip
 80026c0:	2c00      	cmp	r4, #0
 80026c2:	d100      	bne.n	80026c6 <__aeabi_dsub+0x232>
 80026c4:	e0d3      	b.n	800286e <__aeabi_dsub+0x3da>
 80026c6:	1b91      	subs	r1, r2, r6
 80026c8:	468c      	mov	ip, r1
 80026ca:	2e00      	cmp	r6, #0
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dsub+0x23c>
 80026ce:	e15e      	b.n	800298e <__aeabi_dsub+0x4fa>
 80026d0:	494a      	ldr	r1, [pc, #296]	; (80027fc <__aeabi_dsub+0x368>)
 80026d2:	428a      	cmp	r2, r1
 80026d4:	d100      	bne.n	80026d8 <__aeabi_dsub+0x244>
 80026d6:	e1be      	b.n	8002a56 <__aeabi_dsub+0x5c2>
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	464c      	mov	r4, r9
 80026dc:	0409      	lsls	r1, r1, #16
 80026de:	430c      	orrs	r4, r1
 80026e0:	46a1      	mov	r9, r4
 80026e2:	4661      	mov	r1, ip
 80026e4:	2938      	cmp	r1, #56	; 0x38
 80026e6:	dd00      	ble.n	80026ea <__aeabi_dsub+0x256>
 80026e8:	e1ba      	b.n	8002a60 <__aeabi_dsub+0x5cc>
 80026ea:	291f      	cmp	r1, #31
 80026ec:	dd00      	ble.n	80026f0 <__aeabi_dsub+0x25c>
 80026ee:	e227      	b.n	8002b40 <__aeabi_dsub+0x6ac>
 80026f0:	2420      	movs	r4, #32
 80026f2:	1a64      	subs	r4, r4, r1
 80026f4:	4649      	mov	r1, r9
 80026f6:	40a1      	lsls	r1, r4
 80026f8:	001e      	movs	r6, r3
 80026fa:	4688      	mov	r8, r1
 80026fc:	4661      	mov	r1, ip
 80026fe:	40a3      	lsls	r3, r4
 8002700:	40ce      	lsrs	r6, r1
 8002702:	4641      	mov	r1, r8
 8002704:	1e5c      	subs	r4, r3, #1
 8002706:	41a3      	sbcs	r3, r4
 8002708:	4331      	orrs	r1, r6
 800270a:	4319      	orrs	r1, r3
 800270c:	000c      	movs	r4, r1
 800270e:	4663      	mov	r3, ip
 8002710:	4649      	mov	r1, r9
 8002712:	40d9      	lsrs	r1, r3
 8002714:	187f      	adds	r7, r7, r1
 8002716:	1824      	adds	r4, r4, r0
 8002718:	4284      	cmp	r4, r0
 800271a:	419b      	sbcs	r3, r3
 800271c:	425b      	negs	r3, r3
 800271e:	469a      	mov	sl, r3
 8002720:	0016      	movs	r6, r2
 8002722:	44ba      	add	sl, r7
 8002724:	e05d      	b.n	80027e2 <__aeabi_dsub+0x34e>
 8002726:	4c38      	ldr	r4, [pc, #224]	; (8002808 <__aeabi_dsub+0x374>)
 8002728:	1c72      	adds	r2, r6, #1
 800272a:	4222      	tst	r2, r4
 800272c:	d000      	beq.n	8002730 <__aeabi_dsub+0x29c>
 800272e:	e0df      	b.n	80028f0 <__aeabi_dsub+0x45c>
 8002730:	464a      	mov	r2, r9
 8002732:	431a      	orrs	r2, r3
 8002734:	2e00      	cmp	r6, #0
 8002736:	d000      	beq.n	800273a <__aeabi_dsub+0x2a6>
 8002738:	e15c      	b.n	80029f4 <__aeabi_dsub+0x560>
 800273a:	2a00      	cmp	r2, #0
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x2ac>
 800273e:	e1cf      	b.n	8002ae0 <__aeabi_dsub+0x64c>
 8002740:	003a      	movs	r2, r7
 8002742:	4302      	orrs	r2, r0
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x2b4>
 8002746:	e17f      	b.n	8002a48 <__aeabi_dsub+0x5b4>
 8002748:	1a1c      	subs	r4, r3, r0
 800274a:	464a      	mov	r2, r9
 800274c:	42a3      	cmp	r3, r4
 800274e:	4189      	sbcs	r1, r1
 8002750:	1bd2      	subs	r2, r2, r7
 8002752:	4249      	negs	r1, r1
 8002754:	1a52      	subs	r2, r2, r1
 8002756:	4692      	mov	sl, r2
 8002758:	0212      	lsls	r2, r2, #8
 800275a:	d400      	bmi.n	800275e <__aeabi_dsub+0x2ca>
 800275c:	e20a      	b.n	8002b74 <__aeabi_dsub+0x6e0>
 800275e:	1ac4      	subs	r4, r0, r3
 8002760:	42a0      	cmp	r0, r4
 8002762:	4180      	sbcs	r0, r0
 8002764:	464b      	mov	r3, r9
 8002766:	4240      	negs	r0, r0
 8002768:	1aff      	subs	r7, r7, r3
 800276a:	1a3b      	subs	r3, r7, r0
 800276c:	469a      	mov	sl, r3
 800276e:	465d      	mov	r5, fp
 8002770:	e71a      	b.n	80025a8 <__aeabi_dsub+0x114>
 8002772:	003a      	movs	r2, r7
 8002774:	4302      	orrs	r2, r0
 8002776:	d073      	beq.n	8002860 <__aeabi_dsub+0x3cc>
 8002778:	0022      	movs	r2, r4
 800277a:	3a01      	subs	r2, #1
 800277c:	2c01      	cmp	r4, #1
 800277e:	d100      	bne.n	8002782 <__aeabi_dsub+0x2ee>
 8002780:	e0cb      	b.n	800291a <__aeabi_dsub+0x486>
 8002782:	4554      	cmp	r4, sl
 8002784:	d042      	beq.n	800280c <__aeabi_dsub+0x378>
 8002786:	4694      	mov	ip, r2
 8002788:	e748      	b.n	800261c <__aeabi_dsub+0x188>
 800278a:	0010      	movs	r0, r2
 800278c:	3b1f      	subs	r3, #31
 800278e:	40d8      	lsrs	r0, r3
 8002790:	2920      	cmp	r1, #32
 8002792:	d003      	beq.n	800279c <__aeabi_dsub+0x308>
 8002794:	2340      	movs	r3, #64	; 0x40
 8002796:	1a5b      	subs	r3, r3, r1
 8002798:	409a      	lsls	r2, r3
 800279a:	4314      	orrs	r4, r2
 800279c:	1e63      	subs	r3, r4, #1
 800279e:	419c      	sbcs	r4, r3
 80027a0:	2300      	movs	r3, #0
 80027a2:	2600      	movs	r6, #0
 80027a4:	469a      	mov	sl, r3
 80027a6:	4304      	orrs	r4, r0
 80027a8:	0763      	lsls	r3, r4, #29
 80027aa:	d000      	beq.n	80027ae <__aeabi_dsub+0x31a>
 80027ac:	e6fe      	b.n	80025ac <__aeabi_dsub+0x118>
 80027ae:	4652      	mov	r2, sl
 80027b0:	08e3      	lsrs	r3, r4, #3
 80027b2:	0752      	lsls	r2, r2, #29
 80027b4:	4313      	orrs	r3, r2
 80027b6:	4652      	mov	r2, sl
 80027b8:	46b4      	mov	ip, r6
 80027ba:	08d2      	lsrs	r2, r2, #3
 80027bc:	490f      	ldr	r1, [pc, #60]	; (80027fc <__aeabi_dsub+0x368>)
 80027be:	458c      	cmp	ip, r1
 80027c0:	d02a      	beq.n	8002818 <__aeabi_dsub+0x384>
 80027c2:	0312      	lsls	r2, r2, #12
 80027c4:	0b14      	lsrs	r4, r2, #12
 80027c6:	4662      	mov	r2, ip
 80027c8:	0552      	lsls	r2, r2, #21
 80027ca:	0d52      	lsrs	r2, r2, #21
 80027cc:	e70c      	b.n	80025e8 <__aeabi_dsub+0x154>
 80027ce:	003c      	movs	r4, r7
 80027d0:	4304      	orrs	r4, r0
 80027d2:	1e62      	subs	r2, r4, #1
 80027d4:	4194      	sbcs	r4, r2
 80027d6:	18e4      	adds	r4, r4, r3
 80027d8:	429c      	cmp	r4, r3
 80027da:	4192      	sbcs	r2, r2
 80027dc:	4252      	negs	r2, r2
 80027de:	444a      	add	r2, r9
 80027e0:	4692      	mov	sl, r2
 80027e2:	4653      	mov	r3, sl
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	d5df      	bpl.n	80027a8 <__aeabi_dsub+0x314>
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <__aeabi_dsub+0x368>)
 80027ea:	3601      	adds	r6, #1
 80027ec:	429e      	cmp	r6, r3
 80027ee:	d000      	beq.n	80027f2 <__aeabi_dsub+0x35e>
 80027f0:	e0a0      	b.n	8002934 <__aeabi_dsub+0x4a0>
 80027f2:	0032      	movs	r2, r6
 80027f4:	2400      	movs	r4, #0
 80027f6:	2300      	movs	r3, #0
 80027f8:	e6f6      	b.n	80025e8 <__aeabi_dsub+0x154>
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	000007ff 	.word	0x000007ff
 8002800:	ff7fffff 	.word	0xff7fffff
 8002804:	fffff801 	.word	0xfffff801
 8002808:	000007fe 	.word	0x000007fe
 800280c:	08db      	lsrs	r3, r3, #3
 800280e:	464a      	mov	r2, r9
 8002810:	0752      	lsls	r2, r2, #29
 8002812:	4313      	orrs	r3, r2
 8002814:	464a      	mov	r2, r9
 8002816:	08d2      	lsrs	r2, r2, #3
 8002818:	0019      	movs	r1, r3
 800281a:	4311      	orrs	r1, r2
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x38c>
 800281e:	e1b5      	b.n	8002b8c <__aeabi_dsub+0x6f8>
 8002820:	2480      	movs	r4, #128	; 0x80
 8002822:	0324      	lsls	r4, r4, #12
 8002824:	4314      	orrs	r4, r2
 8002826:	0324      	lsls	r4, r4, #12
 8002828:	4ad5      	ldr	r2, [pc, #852]	; (8002b80 <__aeabi_dsub+0x6ec>)
 800282a:	0b24      	lsrs	r4, r4, #12
 800282c:	e6dc      	b.n	80025e8 <__aeabi_dsub+0x154>
 800282e:	0020      	movs	r0, r4
 8002830:	f000 fb2a 	bl	8002e88 <__clzsi2>
 8002834:	0003      	movs	r3, r0
 8002836:	3318      	adds	r3, #24
 8002838:	2b1f      	cmp	r3, #31
 800283a:	dc00      	bgt.n	800283e <__aeabi_dsub+0x3aa>
 800283c:	e695      	b.n	800256a <__aeabi_dsub+0xd6>
 800283e:	0022      	movs	r2, r4
 8002840:	3808      	subs	r0, #8
 8002842:	4082      	lsls	r2, r0
 8002844:	2400      	movs	r4, #0
 8002846:	429e      	cmp	r6, r3
 8002848:	dc00      	bgt.n	800284c <__aeabi_dsub+0x3b8>
 800284a:	e69a      	b.n	8002582 <__aeabi_dsub+0xee>
 800284c:	1af6      	subs	r6, r6, r3
 800284e:	4bcd      	ldr	r3, [pc, #820]	; (8002b84 <__aeabi_dsub+0x6f0>)
 8002850:	401a      	ands	r2, r3
 8002852:	4692      	mov	sl, r2
 8002854:	e6a8      	b.n	80025a8 <__aeabi_dsub+0x114>
 8002856:	003c      	movs	r4, r7
 8002858:	4304      	orrs	r4, r0
 800285a:	1e62      	subs	r2, r4, #1
 800285c:	4194      	sbcs	r4, r2
 800285e:	e66c      	b.n	800253a <__aeabi_dsub+0xa6>
 8002860:	464a      	mov	r2, r9
 8002862:	08db      	lsrs	r3, r3, #3
 8002864:	0752      	lsls	r2, r2, #29
 8002866:	4313      	orrs	r3, r2
 8002868:	464a      	mov	r2, r9
 800286a:	08d2      	lsrs	r2, r2, #3
 800286c:	e7a6      	b.n	80027bc <__aeabi_dsub+0x328>
 800286e:	4cc6      	ldr	r4, [pc, #792]	; (8002b88 <__aeabi_dsub+0x6f4>)
 8002870:	1c72      	adds	r2, r6, #1
 8002872:	4222      	tst	r2, r4
 8002874:	d000      	beq.n	8002878 <__aeabi_dsub+0x3e4>
 8002876:	e0ac      	b.n	80029d2 <__aeabi_dsub+0x53e>
 8002878:	464a      	mov	r2, r9
 800287a:	431a      	orrs	r2, r3
 800287c:	2e00      	cmp	r6, #0
 800287e:	d000      	beq.n	8002882 <__aeabi_dsub+0x3ee>
 8002880:	e105      	b.n	8002a8e <__aeabi_dsub+0x5fa>
 8002882:	2a00      	cmp	r2, #0
 8002884:	d100      	bne.n	8002888 <__aeabi_dsub+0x3f4>
 8002886:	e156      	b.n	8002b36 <__aeabi_dsub+0x6a2>
 8002888:	003a      	movs	r2, r7
 800288a:	4302      	orrs	r2, r0
 800288c:	d100      	bne.n	8002890 <__aeabi_dsub+0x3fc>
 800288e:	e0db      	b.n	8002a48 <__aeabi_dsub+0x5b4>
 8002890:	181c      	adds	r4, r3, r0
 8002892:	429c      	cmp	r4, r3
 8002894:	419b      	sbcs	r3, r3
 8002896:	444f      	add	r7, r9
 8002898:	46ba      	mov	sl, r7
 800289a:	425b      	negs	r3, r3
 800289c:	449a      	add	sl, r3
 800289e:	4653      	mov	r3, sl
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	d400      	bmi.n	80028a6 <__aeabi_dsub+0x412>
 80028a4:	e780      	b.n	80027a8 <__aeabi_dsub+0x314>
 80028a6:	4652      	mov	r2, sl
 80028a8:	4bb6      	ldr	r3, [pc, #728]	; (8002b84 <__aeabi_dsub+0x6f0>)
 80028aa:	2601      	movs	r6, #1
 80028ac:	401a      	ands	r2, r3
 80028ae:	4692      	mov	sl, r2
 80028b0:	e77a      	b.n	80027a8 <__aeabi_dsub+0x314>
 80028b2:	4cb3      	ldr	r4, [pc, #716]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80028b4:	42a2      	cmp	r2, r4
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x426>
 80028b8:	e0c0      	b.n	8002a3c <__aeabi_dsub+0x5a8>
 80028ba:	2480      	movs	r4, #128	; 0x80
 80028bc:	464d      	mov	r5, r9
 80028be:	0424      	lsls	r4, r4, #16
 80028c0:	4325      	orrs	r5, r4
 80028c2:	46a9      	mov	r9, r5
 80028c4:	4664      	mov	r4, ip
 80028c6:	2c38      	cmp	r4, #56	; 0x38
 80028c8:	dc53      	bgt.n	8002972 <__aeabi_dsub+0x4de>
 80028ca:	4661      	mov	r1, ip
 80028cc:	2c1f      	cmp	r4, #31
 80028ce:	dd00      	ble.n	80028d2 <__aeabi_dsub+0x43e>
 80028d0:	e0cd      	b.n	8002a6e <__aeabi_dsub+0x5da>
 80028d2:	2520      	movs	r5, #32
 80028d4:	001e      	movs	r6, r3
 80028d6:	1b2d      	subs	r5, r5, r4
 80028d8:	464c      	mov	r4, r9
 80028da:	40ab      	lsls	r3, r5
 80028dc:	40ac      	lsls	r4, r5
 80028de:	40ce      	lsrs	r6, r1
 80028e0:	1e5d      	subs	r5, r3, #1
 80028e2:	41ab      	sbcs	r3, r5
 80028e4:	4334      	orrs	r4, r6
 80028e6:	4323      	orrs	r3, r4
 80028e8:	464c      	mov	r4, r9
 80028ea:	40cc      	lsrs	r4, r1
 80028ec:	1b3f      	subs	r7, r7, r4
 80028ee:	e045      	b.n	800297c <__aeabi_dsub+0x4e8>
 80028f0:	464a      	mov	r2, r9
 80028f2:	1a1c      	subs	r4, r3, r0
 80028f4:	1bd1      	subs	r1, r2, r7
 80028f6:	42a3      	cmp	r3, r4
 80028f8:	4192      	sbcs	r2, r2
 80028fa:	4252      	negs	r2, r2
 80028fc:	4692      	mov	sl, r2
 80028fe:	000a      	movs	r2, r1
 8002900:	4651      	mov	r1, sl
 8002902:	1a52      	subs	r2, r2, r1
 8002904:	4692      	mov	sl, r2
 8002906:	0212      	lsls	r2, r2, #8
 8002908:	d500      	bpl.n	800290c <__aeabi_dsub+0x478>
 800290a:	e083      	b.n	8002a14 <__aeabi_dsub+0x580>
 800290c:	4653      	mov	r3, sl
 800290e:	4323      	orrs	r3, r4
 8002910:	d000      	beq.n	8002914 <__aeabi_dsub+0x480>
 8002912:	e621      	b.n	8002558 <__aeabi_dsub+0xc4>
 8002914:	2200      	movs	r2, #0
 8002916:	2500      	movs	r5, #0
 8002918:	e753      	b.n	80027c2 <__aeabi_dsub+0x32e>
 800291a:	181c      	adds	r4, r3, r0
 800291c:	429c      	cmp	r4, r3
 800291e:	419b      	sbcs	r3, r3
 8002920:	444f      	add	r7, r9
 8002922:	46ba      	mov	sl, r7
 8002924:	425b      	negs	r3, r3
 8002926:	449a      	add	sl, r3
 8002928:	4653      	mov	r3, sl
 800292a:	2601      	movs	r6, #1
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	d400      	bmi.n	8002932 <__aeabi_dsub+0x49e>
 8002930:	e73a      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002932:	2602      	movs	r6, #2
 8002934:	4652      	mov	r2, sl
 8002936:	4b93      	ldr	r3, [pc, #588]	; (8002b84 <__aeabi_dsub+0x6f0>)
 8002938:	2101      	movs	r1, #1
 800293a:	401a      	ands	r2, r3
 800293c:	0013      	movs	r3, r2
 800293e:	4021      	ands	r1, r4
 8002940:	0862      	lsrs	r2, r4, #1
 8002942:	430a      	orrs	r2, r1
 8002944:	07dc      	lsls	r4, r3, #31
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	469a      	mov	sl, r3
 800294a:	4314      	orrs	r4, r2
 800294c:	e62c      	b.n	80025a8 <__aeabi_dsub+0x114>
 800294e:	0039      	movs	r1, r7
 8002950:	3a20      	subs	r2, #32
 8002952:	40d1      	lsrs	r1, r2
 8002954:	4662      	mov	r2, ip
 8002956:	2a20      	cmp	r2, #32
 8002958:	d006      	beq.n	8002968 <__aeabi_dsub+0x4d4>
 800295a:	4664      	mov	r4, ip
 800295c:	2240      	movs	r2, #64	; 0x40
 800295e:	1b12      	subs	r2, r2, r4
 8002960:	003c      	movs	r4, r7
 8002962:	4094      	lsls	r4, r2
 8002964:	4304      	orrs	r4, r0
 8002966:	9401      	str	r4, [sp, #4]
 8002968:	9c01      	ldr	r4, [sp, #4]
 800296a:	1e62      	subs	r2, r4, #1
 800296c:	4194      	sbcs	r4, r2
 800296e:	430c      	orrs	r4, r1
 8002970:	e5e3      	b.n	800253a <__aeabi_dsub+0xa6>
 8002972:	4649      	mov	r1, r9
 8002974:	4319      	orrs	r1, r3
 8002976:	000b      	movs	r3, r1
 8002978:	1e5c      	subs	r4, r3, #1
 800297a:	41a3      	sbcs	r3, r4
 800297c:	1ac4      	subs	r4, r0, r3
 800297e:	42a0      	cmp	r0, r4
 8002980:	419b      	sbcs	r3, r3
 8002982:	425b      	negs	r3, r3
 8002984:	1afb      	subs	r3, r7, r3
 8002986:	469a      	mov	sl, r3
 8002988:	465d      	mov	r5, fp
 800298a:	0016      	movs	r6, r2
 800298c:	e5dc      	b.n	8002548 <__aeabi_dsub+0xb4>
 800298e:	4649      	mov	r1, r9
 8002990:	4319      	orrs	r1, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x502>
 8002994:	e0ae      	b.n	8002af4 <__aeabi_dsub+0x660>
 8002996:	4661      	mov	r1, ip
 8002998:	4664      	mov	r4, ip
 800299a:	3901      	subs	r1, #1
 800299c:	2c01      	cmp	r4, #1
 800299e:	d100      	bne.n	80029a2 <__aeabi_dsub+0x50e>
 80029a0:	e0e0      	b.n	8002b64 <__aeabi_dsub+0x6d0>
 80029a2:	4c77      	ldr	r4, [pc, #476]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80029a4:	45a4      	cmp	ip, r4
 80029a6:	d056      	beq.n	8002a56 <__aeabi_dsub+0x5c2>
 80029a8:	468c      	mov	ip, r1
 80029aa:	e69a      	b.n	80026e2 <__aeabi_dsub+0x24e>
 80029ac:	4661      	mov	r1, ip
 80029ae:	2220      	movs	r2, #32
 80029b0:	003c      	movs	r4, r7
 80029b2:	1a52      	subs	r2, r2, r1
 80029b4:	4094      	lsls	r4, r2
 80029b6:	0001      	movs	r1, r0
 80029b8:	4090      	lsls	r0, r2
 80029ba:	46a0      	mov	r8, r4
 80029bc:	4664      	mov	r4, ip
 80029be:	1e42      	subs	r2, r0, #1
 80029c0:	4190      	sbcs	r0, r2
 80029c2:	4662      	mov	r2, ip
 80029c4:	40e1      	lsrs	r1, r4
 80029c6:	4644      	mov	r4, r8
 80029c8:	40d7      	lsrs	r7, r2
 80029ca:	430c      	orrs	r4, r1
 80029cc:	4304      	orrs	r4, r0
 80029ce:	44b9      	add	r9, r7
 80029d0:	e701      	b.n	80027d6 <__aeabi_dsub+0x342>
 80029d2:	496b      	ldr	r1, [pc, #428]	; (8002b80 <__aeabi_dsub+0x6ec>)
 80029d4:	428a      	cmp	r2, r1
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x546>
 80029d8:	e70c      	b.n	80027f4 <__aeabi_dsub+0x360>
 80029da:	1818      	adds	r0, r3, r0
 80029dc:	4298      	cmp	r0, r3
 80029de:	419b      	sbcs	r3, r3
 80029e0:	444f      	add	r7, r9
 80029e2:	425b      	negs	r3, r3
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	07dc      	lsls	r4, r3, #31
 80029e8:	0840      	lsrs	r0, r0, #1
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	469a      	mov	sl, r3
 80029ee:	0016      	movs	r6, r2
 80029f0:	4304      	orrs	r4, r0
 80029f2:	e6d9      	b.n	80027a8 <__aeabi_dsub+0x314>
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	d000      	beq.n	80029fa <__aeabi_dsub+0x566>
 80029f8:	e081      	b.n	8002afe <__aeabi_dsub+0x66a>
 80029fa:	003b      	movs	r3, r7
 80029fc:	4303      	orrs	r3, r0
 80029fe:	d11d      	bne.n	8002a3c <__aeabi_dsub+0x5a8>
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	2500      	movs	r5, #0
 8002a04:	0312      	lsls	r2, r2, #12
 8002a06:	e70b      	b.n	8002820 <__aeabi_dsub+0x38c>
 8002a08:	08c0      	lsrs	r0, r0, #3
 8002a0a:	077b      	lsls	r3, r7, #29
 8002a0c:	465d      	mov	r5, fp
 8002a0e:	4303      	orrs	r3, r0
 8002a10:	08fa      	lsrs	r2, r7, #3
 8002a12:	e6d3      	b.n	80027bc <__aeabi_dsub+0x328>
 8002a14:	1ac4      	subs	r4, r0, r3
 8002a16:	42a0      	cmp	r0, r4
 8002a18:	4180      	sbcs	r0, r0
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	4240      	negs	r0, r0
 8002a1e:	1aff      	subs	r7, r7, r3
 8002a20:	1a3b      	subs	r3, r7, r0
 8002a22:	469a      	mov	sl, r3
 8002a24:	465d      	mov	r5, fp
 8002a26:	e597      	b.n	8002558 <__aeabi_dsub+0xc4>
 8002a28:	1a1c      	subs	r4, r3, r0
 8002a2a:	464a      	mov	r2, r9
 8002a2c:	42a3      	cmp	r3, r4
 8002a2e:	419b      	sbcs	r3, r3
 8002a30:	1bd7      	subs	r7, r2, r7
 8002a32:	425b      	negs	r3, r3
 8002a34:	1afb      	subs	r3, r7, r3
 8002a36:	469a      	mov	sl, r3
 8002a38:	2601      	movs	r6, #1
 8002a3a:	e585      	b.n	8002548 <__aeabi_dsub+0xb4>
 8002a3c:	08c0      	lsrs	r0, r0, #3
 8002a3e:	077b      	lsls	r3, r7, #29
 8002a40:	465d      	mov	r5, fp
 8002a42:	4303      	orrs	r3, r0
 8002a44:	08fa      	lsrs	r2, r7, #3
 8002a46:	e6e7      	b.n	8002818 <__aeabi_dsub+0x384>
 8002a48:	464a      	mov	r2, r9
 8002a4a:	08db      	lsrs	r3, r3, #3
 8002a4c:	0752      	lsls	r2, r2, #29
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	464a      	mov	r2, r9
 8002a52:	08d2      	lsrs	r2, r2, #3
 8002a54:	e6b5      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002a56:	08c0      	lsrs	r0, r0, #3
 8002a58:	077b      	lsls	r3, r7, #29
 8002a5a:	4303      	orrs	r3, r0
 8002a5c:	08fa      	lsrs	r2, r7, #3
 8002a5e:	e6db      	b.n	8002818 <__aeabi_dsub+0x384>
 8002a60:	4649      	mov	r1, r9
 8002a62:	4319      	orrs	r1, r3
 8002a64:	000b      	movs	r3, r1
 8002a66:	1e59      	subs	r1, r3, #1
 8002a68:	418b      	sbcs	r3, r1
 8002a6a:	001c      	movs	r4, r3
 8002a6c:	e653      	b.n	8002716 <__aeabi_dsub+0x282>
 8002a6e:	464d      	mov	r5, r9
 8002a70:	3c20      	subs	r4, #32
 8002a72:	40e5      	lsrs	r5, r4
 8002a74:	2920      	cmp	r1, #32
 8002a76:	d005      	beq.n	8002a84 <__aeabi_dsub+0x5f0>
 8002a78:	2440      	movs	r4, #64	; 0x40
 8002a7a:	1a64      	subs	r4, r4, r1
 8002a7c:	4649      	mov	r1, r9
 8002a7e:	40a1      	lsls	r1, r4
 8002a80:	430b      	orrs	r3, r1
 8002a82:	4698      	mov	r8, r3
 8002a84:	4643      	mov	r3, r8
 8002a86:	1e5c      	subs	r4, r3, #1
 8002a88:	41a3      	sbcs	r3, r4
 8002a8a:	432b      	orrs	r3, r5
 8002a8c:	e776      	b.n	800297c <__aeabi_dsub+0x4e8>
 8002a8e:	2a00      	cmp	r2, #0
 8002a90:	d0e1      	beq.n	8002a56 <__aeabi_dsub+0x5c2>
 8002a92:	003a      	movs	r2, r7
 8002a94:	08db      	lsrs	r3, r3, #3
 8002a96:	4302      	orrs	r2, r0
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x608>
 8002a9a:	e6b8      	b.n	800280e <__aeabi_dsub+0x37a>
 8002a9c:	464a      	mov	r2, r9
 8002a9e:	0752      	lsls	r2, r2, #29
 8002aa0:	2480      	movs	r4, #128	; 0x80
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	464a      	mov	r2, r9
 8002aa6:	0324      	lsls	r4, r4, #12
 8002aa8:	08d2      	lsrs	r2, r2, #3
 8002aaa:	4222      	tst	r2, r4
 8002aac:	d007      	beq.n	8002abe <__aeabi_dsub+0x62a>
 8002aae:	08fe      	lsrs	r6, r7, #3
 8002ab0:	4226      	tst	r6, r4
 8002ab2:	d104      	bne.n	8002abe <__aeabi_dsub+0x62a>
 8002ab4:	465d      	mov	r5, fp
 8002ab6:	0032      	movs	r2, r6
 8002ab8:	08c3      	lsrs	r3, r0, #3
 8002aba:	077f      	lsls	r7, r7, #29
 8002abc:	433b      	orrs	r3, r7
 8002abe:	0f59      	lsrs	r1, r3, #29
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	0749      	lsls	r1, r1, #29
 8002ac4:	08db      	lsrs	r3, r3, #3
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	e6a6      	b.n	8002818 <__aeabi_dsub+0x384>
 8002aca:	1ac4      	subs	r4, r0, r3
 8002acc:	42a0      	cmp	r0, r4
 8002ace:	4180      	sbcs	r0, r0
 8002ad0:	464b      	mov	r3, r9
 8002ad2:	4240      	negs	r0, r0
 8002ad4:	1aff      	subs	r7, r7, r3
 8002ad6:	1a3b      	subs	r3, r7, r0
 8002ad8:	469a      	mov	sl, r3
 8002ada:	465d      	mov	r5, fp
 8002adc:	2601      	movs	r6, #1
 8002ade:	e533      	b.n	8002548 <__aeabi_dsub+0xb4>
 8002ae0:	003b      	movs	r3, r7
 8002ae2:	4303      	orrs	r3, r0
 8002ae4:	d100      	bne.n	8002ae8 <__aeabi_dsub+0x654>
 8002ae6:	e715      	b.n	8002914 <__aeabi_dsub+0x480>
 8002ae8:	08c0      	lsrs	r0, r0, #3
 8002aea:	077b      	lsls	r3, r7, #29
 8002aec:	465d      	mov	r5, fp
 8002aee:	4303      	orrs	r3, r0
 8002af0:	08fa      	lsrs	r2, r7, #3
 8002af2:	e666      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002af4:	08c0      	lsrs	r0, r0, #3
 8002af6:	077b      	lsls	r3, r7, #29
 8002af8:	4303      	orrs	r3, r0
 8002afa:	08fa      	lsrs	r2, r7, #3
 8002afc:	e65e      	b.n	80027bc <__aeabi_dsub+0x328>
 8002afe:	003a      	movs	r2, r7
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	4302      	orrs	r2, r0
 8002b04:	d100      	bne.n	8002b08 <__aeabi_dsub+0x674>
 8002b06:	e682      	b.n	800280e <__aeabi_dsub+0x37a>
 8002b08:	464a      	mov	r2, r9
 8002b0a:	0752      	lsls	r2, r2, #29
 8002b0c:	2480      	movs	r4, #128	; 0x80
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	464a      	mov	r2, r9
 8002b12:	0324      	lsls	r4, r4, #12
 8002b14:	08d2      	lsrs	r2, r2, #3
 8002b16:	4222      	tst	r2, r4
 8002b18:	d007      	beq.n	8002b2a <__aeabi_dsub+0x696>
 8002b1a:	08fe      	lsrs	r6, r7, #3
 8002b1c:	4226      	tst	r6, r4
 8002b1e:	d104      	bne.n	8002b2a <__aeabi_dsub+0x696>
 8002b20:	465d      	mov	r5, fp
 8002b22:	0032      	movs	r2, r6
 8002b24:	08c3      	lsrs	r3, r0, #3
 8002b26:	077f      	lsls	r7, r7, #29
 8002b28:	433b      	orrs	r3, r7
 8002b2a:	0f59      	lsrs	r1, r3, #29
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	08db      	lsrs	r3, r3, #3
 8002b30:	0749      	lsls	r1, r1, #29
 8002b32:	430b      	orrs	r3, r1
 8002b34:	e670      	b.n	8002818 <__aeabi_dsub+0x384>
 8002b36:	08c0      	lsrs	r0, r0, #3
 8002b38:	077b      	lsls	r3, r7, #29
 8002b3a:	4303      	orrs	r3, r0
 8002b3c:	08fa      	lsrs	r2, r7, #3
 8002b3e:	e640      	b.n	80027c2 <__aeabi_dsub+0x32e>
 8002b40:	464c      	mov	r4, r9
 8002b42:	3920      	subs	r1, #32
 8002b44:	40cc      	lsrs	r4, r1
 8002b46:	4661      	mov	r1, ip
 8002b48:	2920      	cmp	r1, #32
 8002b4a:	d006      	beq.n	8002b5a <__aeabi_dsub+0x6c6>
 8002b4c:	4666      	mov	r6, ip
 8002b4e:	2140      	movs	r1, #64	; 0x40
 8002b50:	1b89      	subs	r1, r1, r6
 8002b52:	464e      	mov	r6, r9
 8002b54:	408e      	lsls	r6, r1
 8002b56:	4333      	orrs	r3, r6
 8002b58:	4698      	mov	r8, r3
 8002b5a:	4643      	mov	r3, r8
 8002b5c:	1e59      	subs	r1, r3, #1
 8002b5e:	418b      	sbcs	r3, r1
 8002b60:	431c      	orrs	r4, r3
 8002b62:	e5d8      	b.n	8002716 <__aeabi_dsub+0x282>
 8002b64:	181c      	adds	r4, r3, r0
 8002b66:	4284      	cmp	r4, r0
 8002b68:	4180      	sbcs	r0, r0
 8002b6a:	444f      	add	r7, r9
 8002b6c:	46ba      	mov	sl, r7
 8002b6e:	4240      	negs	r0, r0
 8002b70:	4482      	add	sl, r0
 8002b72:	e6d9      	b.n	8002928 <__aeabi_dsub+0x494>
 8002b74:	4653      	mov	r3, sl
 8002b76:	4323      	orrs	r3, r4
 8002b78:	d100      	bne.n	8002b7c <__aeabi_dsub+0x6e8>
 8002b7a:	e6cb      	b.n	8002914 <__aeabi_dsub+0x480>
 8002b7c:	e614      	b.n	80027a8 <__aeabi_dsub+0x314>
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	000007ff 	.word	0x000007ff
 8002b84:	ff7fffff 	.word	0xff7fffff
 8002b88:	000007fe 	.word	0x000007fe
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	4a01      	ldr	r2, [pc, #4]	; (8002b94 <__aeabi_dsub+0x700>)
 8002b90:	001c      	movs	r4, r3
 8002b92:	e529      	b.n	80025e8 <__aeabi_dsub+0x154>
 8002b94:	000007ff 	.word	0x000007ff

08002b98 <__aeabi_dcmpun>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	0005      	movs	r5, r0
 8002b9c:	480c      	ldr	r0, [pc, #48]	; (8002bd0 <__aeabi_dcmpun+0x38>)
 8002b9e:	031c      	lsls	r4, r3, #12
 8002ba0:	0016      	movs	r6, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	030a      	lsls	r2, r1, #12
 8002ba6:	0049      	lsls	r1, r1, #1
 8002ba8:	0b12      	lsrs	r2, r2, #12
 8002baa:	0d49      	lsrs	r1, r1, #21
 8002bac:	0b24      	lsrs	r4, r4, #12
 8002bae:	0d5b      	lsrs	r3, r3, #21
 8002bb0:	4281      	cmp	r1, r0
 8002bb2:	d008      	beq.n	8002bc6 <__aeabi_dcmpun+0x2e>
 8002bb4:	4a06      	ldr	r2, [pc, #24]	; (8002bd0 <__aeabi_dcmpun+0x38>)
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d103      	bne.n	8002bc4 <__aeabi_dcmpun+0x2c>
 8002bbc:	0020      	movs	r0, r4
 8002bbe:	4330      	orrs	r0, r6
 8002bc0:	1e43      	subs	r3, r0, #1
 8002bc2:	4198      	sbcs	r0, r3
 8002bc4:	bd70      	pop	{r4, r5, r6, pc}
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	432a      	orrs	r2, r5
 8002bca:	d1fb      	bne.n	8002bc4 <__aeabi_dcmpun+0x2c>
 8002bcc:	e7f2      	b.n	8002bb4 <__aeabi_dcmpun+0x1c>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	000007ff 	.word	0x000007ff

08002bd4 <__aeabi_d2iz>:
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	b530      	push	{r4, r5, lr}
 8002bd8:	4c13      	ldr	r4, [pc, #76]	; (8002c28 <__aeabi_d2iz+0x54>)
 8002bda:	0053      	lsls	r3, r2, #1
 8002bdc:	0309      	lsls	r1, r1, #12
 8002bde:	0005      	movs	r5, r0
 8002be0:	0b09      	lsrs	r1, r1, #12
 8002be2:	2000      	movs	r0, #0
 8002be4:	0d5b      	lsrs	r3, r3, #21
 8002be6:	0fd2      	lsrs	r2, r2, #31
 8002be8:	42a3      	cmp	r3, r4
 8002bea:	dd04      	ble.n	8002bf6 <__aeabi_d2iz+0x22>
 8002bec:	480f      	ldr	r0, [pc, #60]	; (8002c2c <__aeabi_d2iz+0x58>)
 8002bee:	4283      	cmp	r3, r0
 8002bf0:	dd02      	ble.n	8002bf8 <__aeabi_d2iz+0x24>
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <__aeabi_d2iz+0x5c>)
 8002bf4:	18d0      	adds	r0, r2, r3
 8002bf6:	bd30      	pop	{r4, r5, pc}
 8002bf8:	2080      	movs	r0, #128	; 0x80
 8002bfa:	0340      	lsls	r0, r0, #13
 8002bfc:	4301      	orrs	r1, r0
 8002bfe:	480d      	ldr	r0, [pc, #52]	; (8002c34 <__aeabi_d2iz+0x60>)
 8002c00:	1ac0      	subs	r0, r0, r3
 8002c02:	281f      	cmp	r0, #31
 8002c04:	dd08      	ble.n	8002c18 <__aeabi_d2iz+0x44>
 8002c06:	480c      	ldr	r0, [pc, #48]	; (8002c38 <__aeabi_d2iz+0x64>)
 8002c08:	1ac3      	subs	r3, r0, r3
 8002c0a:	40d9      	lsrs	r1, r3
 8002c0c:	000b      	movs	r3, r1
 8002c0e:	4258      	negs	r0, r3
 8002c10:	2a00      	cmp	r2, #0
 8002c12:	d1f0      	bne.n	8002bf6 <__aeabi_d2iz+0x22>
 8002c14:	0018      	movs	r0, r3
 8002c16:	e7ee      	b.n	8002bf6 <__aeabi_d2iz+0x22>
 8002c18:	4c08      	ldr	r4, [pc, #32]	; (8002c3c <__aeabi_d2iz+0x68>)
 8002c1a:	40c5      	lsrs	r5, r0
 8002c1c:	46a4      	mov	ip, r4
 8002c1e:	4463      	add	r3, ip
 8002c20:	4099      	lsls	r1, r3
 8002c22:	000b      	movs	r3, r1
 8002c24:	432b      	orrs	r3, r5
 8002c26:	e7f2      	b.n	8002c0e <__aeabi_d2iz+0x3a>
 8002c28:	000003fe 	.word	0x000003fe
 8002c2c:	0000041d 	.word	0x0000041d
 8002c30:	7fffffff 	.word	0x7fffffff
 8002c34:	00000433 	.word	0x00000433
 8002c38:	00000413 	.word	0x00000413
 8002c3c:	fffffbed 	.word	0xfffffbed

08002c40 <__aeabi_i2d>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	2800      	cmp	r0, #0
 8002c44:	d016      	beq.n	8002c74 <__aeabi_i2d+0x34>
 8002c46:	17c3      	asrs	r3, r0, #31
 8002c48:	18c5      	adds	r5, r0, r3
 8002c4a:	405d      	eors	r5, r3
 8002c4c:	0fc4      	lsrs	r4, r0, #31
 8002c4e:	0028      	movs	r0, r5
 8002c50:	f000 f91a 	bl	8002e88 <__clzsi2>
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <__aeabi_i2d+0x5c>)
 8002c56:	1a1b      	subs	r3, r3, r0
 8002c58:	280a      	cmp	r0, #10
 8002c5a:	dc16      	bgt.n	8002c8a <__aeabi_i2d+0x4a>
 8002c5c:	0002      	movs	r2, r0
 8002c5e:	002e      	movs	r6, r5
 8002c60:	3215      	adds	r2, #21
 8002c62:	4096      	lsls	r6, r2
 8002c64:	220b      	movs	r2, #11
 8002c66:	1a12      	subs	r2, r2, r0
 8002c68:	40d5      	lsrs	r5, r2
 8002c6a:	055b      	lsls	r3, r3, #21
 8002c6c:	032d      	lsls	r5, r5, #12
 8002c6e:	0b2d      	lsrs	r5, r5, #12
 8002c70:	0d5b      	lsrs	r3, r3, #21
 8002c72:	e003      	b.n	8002c7c <__aeabi_i2d+0x3c>
 8002c74:	2400      	movs	r4, #0
 8002c76:	2300      	movs	r3, #0
 8002c78:	2500      	movs	r5, #0
 8002c7a:	2600      	movs	r6, #0
 8002c7c:	051b      	lsls	r3, r3, #20
 8002c7e:	432b      	orrs	r3, r5
 8002c80:	07e4      	lsls	r4, r4, #31
 8002c82:	4323      	orrs	r3, r4
 8002c84:	0030      	movs	r0, r6
 8002c86:	0019      	movs	r1, r3
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
 8002c8a:	380b      	subs	r0, #11
 8002c8c:	4085      	lsls	r5, r0
 8002c8e:	055b      	lsls	r3, r3, #21
 8002c90:	032d      	lsls	r5, r5, #12
 8002c92:	2600      	movs	r6, #0
 8002c94:	0b2d      	lsrs	r5, r5, #12
 8002c96:	0d5b      	lsrs	r3, r3, #21
 8002c98:	e7f0      	b.n	8002c7c <__aeabi_i2d+0x3c>
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	0000041e 	.word	0x0000041e

08002ca0 <__aeabi_ui2d>:
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	1e04      	subs	r4, r0, #0
 8002ca4:	d010      	beq.n	8002cc8 <__aeabi_ui2d+0x28>
 8002ca6:	f000 f8ef 	bl	8002e88 <__clzsi2>
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <__aeabi_ui2d+0x48>)
 8002cac:	1a1b      	subs	r3, r3, r0
 8002cae:	280a      	cmp	r0, #10
 8002cb0:	dc11      	bgt.n	8002cd6 <__aeabi_ui2d+0x36>
 8002cb2:	220b      	movs	r2, #11
 8002cb4:	0021      	movs	r1, r4
 8002cb6:	1a12      	subs	r2, r2, r0
 8002cb8:	40d1      	lsrs	r1, r2
 8002cba:	3015      	adds	r0, #21
 8002cbc:	030a      	lsls	r2, r1, #12
 8002cbe:	055b      	lsls	r3, r3, #21
 8002cc0:	4084      	lsls	r4, r0
 8002cc2:	0b12      	lsrs	r2, r2, #12
 8002cc4:	0d5b      	lsrs	r3, r3, #21
 8002cc6:	e001      	b.n	8002ccc <__aeabi_ui2d+0x2c>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2200      	movs	r2, #0
 8002ccc:	051b      	lsls	r3, r3, #20
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	bd10      	pop	{r4, pc}
 8002cd6:	0022      	movs	r2, r4
 8002cd8:	380b      	subs	r0, #11
 8002cda:	4082      	lsls	r2, r0
 8002cdc:	055b      	lsls	r3, r3, #21
 8002cde:	0312      	lsls	r2, r2, #12
 8002ce0:	2400      	movs	r4, #0
 8002ce2:	0b12      	lsrs	r2, r2, #12
 8002ce4:	0d5b      	lsrs	r3, r3, #21
 8002ce6:	e7f1      	b.n	8002ccc <__aeabi_ui2d+0x2c>
 8002ce8:	0000041e 	.word	0x0000041e

08002cec <__aeabi_f2d>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	0242      	lsls	r2, r0, #9
 8002cf0:	0043      	lsls	r3, r0, #1
 8002cf2:	0fc4      	lsrs	r4, r0, #31
 8002cf4:	20fe      	movs	r0, #254	; 0xfe
 8002cf6:	0e1b      	lsrs	r3, r3, #24
 8002cf8:	1c59      	adds	r1, r3, #1
 8002cfa:	0a55      	lsrs	r5, r2, #9
 8002cfc:	4208      	tst	r0, r1
 8002cfe:	d00c      	beq.n	8002d1a <__aeabi_f2d+0x2e>
 8002d00:	21e0      	movs	r1, #224	; 0xe0
 8002d02:	0089      	lsls	r1, r1, #2
 8002d04:	468c      	mov	ip, r1
 8002d06:	076d      	lsls	r5, r5, #29
 8002d08:	0b12      	lsrs	r2, r2, #12
 8002d0a:	4463      	add	r3, ip
 8002d0c:	051b      	lsls	r3, r3, #20
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	07e4      	lsls	r4, r4, #31
 8002d12:	4323      	orrs	r3, r4
 8002d14:	0028      	movs	r0, r5
 8002d16:	0019      	movs	r1, r3
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d114      	bne.n	8002d48 <__aeabi_f2d+0x5c>
 8002d1e:	2d00      	cmp	r5, #0
 8002d20:	d01b      	beq.n	8002d5a <__aeabi_f2d+0x6e>
 8002d22:	0028      	movs	r0, r5
 8002d24:	f000 f8b0 	bl	8002e88 <__clzsi2>
 8002d28:	280a      	cmp	r0, #10
 8002d2a:	dc1c      	bgt.n	8002d66 <__aeabi_f2d+0x7a>
 8002d2c:	230b      	movs	r3, #11
 8002d2e:	002a      	movs	r2, r5
 8002d30:	1a1b      	subs	r3, r3, r0
 8002d32:	40da      	lsrs	r2, r3
 8002d34:	0003      	movs	r3, r0
 8002d36:	3315      	adds	r3, #21
 8002d38:	409d      	lsls	r5, r3
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <__aeabi_f2d+0x88>)
 8002d3c:	0312      	lsls	r2, r2, #12
 8002d3e:	1a1b      	subs	r3, r3, r0
 8002d40:	055b      	lsls	r3, r3, #21
 8002d42:	0b12      	lsrs	r2, r2, #12
 8002d44:	0d5b      	lsrs	r3, r3, #21
 8002d46:	e7e1      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d48:	2d00      	cmp	r5, #0
 8002d4a:	d009      	beq.n	8002d60 <__aeabi_f2d+0x74>
 8002d4c:	0b13      	lsrs	r3, r2, #12
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	0312      	lsls	r2, r2, #12
 8002d52:	431a      	orrs	r2, r3
 8002d54:	076d      	lsls	r5, r5, #29
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <__aeabi_f2d+0x8c>)
 8002d58:	e7d8      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	e7d5      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d60:	2200      	movs	r2, #0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <__aeabi_f2d+0x8c>)
 8002d64:	e7d2      	b.n	8002d0c <__aeabi_f2d+0x20>
 8002d66:	0003      	movs	r3, r0
 8002d68:	002a      	movs	r2, r5
 8002d6a:	3b0b      	subs	r3, #11
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	2500      	movs	r5, #0
 8002d70:	e7e3      	b.n	8002d3a <__aeabi_f2d+0x4e>
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	00000389 	.word	0x00000389
 8002d78:	000007ff 	.word	0x000007ff

08002d7c <__aeabi_d2f>:
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d80:	004b      	lsls	r3, r1, #1
 8002d82:	030d      	lsls	r5, r1, #12
 8002d84:	0f40      	lsrs	r0, r0, #29
 8002d86:	0d5b      	lsrs	r3, r3, #21
 8002d88:	0fcc      	lsrs	r4, r1, #31
 8002d8a:	0a6d      	lsrs	r5, r5, #9
 8002d8c:	493a      	ldr	r1, [pc, #232]	; (8002e78 <__aeabi_d2f+0xfc>)
 8002d8e:	4305      	orrs	r5, r0
 8002d90:	1c58      	adds	r0, r3, #1
 8002d92:	00d7      	lsls	r7, r2, #3
 8002d94:	4208      	tst	r0, r1
 8002d96:	d00a      	beq.n	8002dae <__aeabi_d2f+0x32>
 8002d98:	4938      	ldr	r1, [pc, #224]	; (8002e7c <__aeabi_d2f+0x100>)
 8002d9a:	1859      	adds	r1, r3, r1
 8002d9c:	29fe      	cmp	r1, #254	; 0xfe
 8002d9e:	dd16      	ble.n	8002dce <__aeabi_d2f+0x52>
 8002da0:	20ff      	movs	r0, #255	; 0xff
 8002da2:	2200      	movs	r2, #0
 8002da4:	05c0      	lsls	r0, r0, #23
 8002da6:	4310      	orrs	r0, r2
 8002da8:	07e4      	lsls	r4, r4, #31
 8002daa:	4320      	orrs	r0, r4
 8002dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <__aeabi_d2f+0x44>
 8002db2:	433d      	orrs	r5, r7
 8002db4:	d026      	beq.n	8002e04 <__aeabi_d2f+0x88>
 8002db6:	2205      	movs	r2, #5
 8002db8:	0192      	lsls	r2, r2, #6
 8002dba:	0a52      	lsrs	r2, r2, #9
 8002dbc:	b2d8      	uxtb	r0, r3
 8002dbe:	e7f1      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002dc0:	432f      	orrs	r7, r5
 8002dc2:	d0ed      	beq.n	8002da0 <__aeabi_d2f+0x24>
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	03d2      	lsls	r2, r2, #15
 8002dc8:	20ff      	movs	r0, #255	; 0xff
 8002dca:	432a      	orrs	r2, r5
 8002dcc:	e7ea      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002dce:	2900      	cmp	r1, #0
 8002dd0:	dd1b      	ble.n	8002e0a <__aeabi_d2f+0x8e>
 8002dd2:	0192      	lsls	r2, r2, #6
 8002dd4:	1e50      	subs	r0, r2, #1
 8002dd6:	4182      	sbcs	r2, r0
 8002dd8:	00ed      	lsls	r5, r5, #3
 8002dda:	0f7f      	lsrs	r7, r7, #29
 8002ddc:	432a      	orrs	r2, r5
 8002dde:	433a      	orrs	r2, r7
 8002de0:	0753      	lsls	r3, r2, #29
 8002de2:	d047      	beq.n	8002e74 <__aeabi_d2f+0xf8>
 8002de4:	230f      	movs	r3, #15
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d000      	beq.n	8002dee <__aeabi_d2f+0x72>
 8002dec:	3204      	adds	r2, #4
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	04db      	lsls	r3, r3, #19
 8002df2:	4013      	ands	r3, r2
 8002df4:	d03e      	beq.n	8002e74 <__aeabi_d2f+0xf8>
 8002df6:	1c48      	adds	r0, r1, #1
 8002df8:	29fe      	cmp	r1, #254	; 0xfe
 8002dfa:	d0d1      	beq.n	8002da0 <__aeabi_d2f+0x24>
 8002dfc:	0192      	lsls	r2, r2, #6
 8002dfe:	0a52      	lsrs	r2, r2, #9
 8002e00:	b2c0      	uxtb	r0, r0
 8002e02:	e7cf      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002e04:	2000      	movs	r0, #0
 8002e06:	2200      	movs	r2, #0
 8002e08:	e7cc      	b.n	8002da4 <__aeabi_d2f+0x28>
 8002e0a:	000a      	movs	r2, r1
 8002e0c:	3217      	adds	r2, #23
 8002e0e:	db2f      	blt.n	8002e70 <__aeabi_d2f+0xf4>
 8002e10:	2680      	movs	r6, #128	; 0x80
 8002e12:	0436      	lsls	r6, r6, #16
 8002e14:	432e      	orrs	r6, r5
 8002e16:	251e      	movs	r5, #30
 8002e18:	1a6d      	subs	r5, r5, r1
 8002e1a:	2d1f      	cmp	r5, #31
 8002e1c:	dd11      	ble.n	8002e42 <__aeabi_d2f+0xc6>
 8002e1e:	2202      	movs	r2, #2
 8002e20:	4252      	negs	r2, r2
 8002e22:	1a52      	subs	r2, r2, r1
 8002e24:	0031      	movs	r1, r6
 8002e26:	40d1      	lsrs	r1, r2
 8002e28:	2d20      	cmp	r5, #32
 8002e2a:	d004      	beq.n	8002e36 <__aeabi_d2f+0xba>
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <__aeabi_d2f+0x104>)
 8002e2e:	4694      	mov	ip, r2
 8002e30:	4463      	add	r3, ip
 8002e32:	409e      	lsls	r6, r3
 8002e34:	4337      	orrs	r7, r6
 8002e36:	003a      	movs	r2, r7
 8002e38:	1e53      	subs	r3, r2, #1
 8002e3a:	419a      	sbcs	r2, r3
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	2100      	movs	r1, #0
 8002e40:	e7ce      	b.n	8002de0 <__aeabi_d2f+0x64>
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <__aeabi_d2f+0x108>)
 8002e44:	0038      	movs	r0, r7
 8002e46:	4694      	mov	ip, r2
 8002e48:	4463      	add	r3, ip
 8002e4a:	4098      	lsls	r0, r3
 8002e4c:	003a      	movs	r2, r7
 8002e4e:	1e41      	subs	r1, r0, #1
 8002e50:	4188      	sbcs	r0, r1
 8002e52:	409e      	lsls	r6, r3
 8002e54:	40ea      	lsrs	r2, r5
 8002e56:	4330      	orrs	r0, r6
 8002e58:	4302      	orrs	r2, r0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	0753      	lsls	r3, r2, #29
 8002e5e:	d1c1      	bne.n	8002de4 <__aeabi_d2f+0x68>
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	0013      	movs	r3, r2
 8002e64:	04c9      	lsls	r1, r1, #19
 8002e66:	2001      	movs	r0, #1
 8002e68:	400b      	ands	r3, r1
 8002e6a:	420a      	tst	r2, r1
 8002e6c:	d1c6      	bne.n	8002dfc <__aeabi_d2f+0x80>
 8002e6e:	e7a3      	b.n	8002db8 <__aeabi_d2f+0x3c>
 8002e70:	2300      	movs	r3, #0
 8002e72:	e7a0      	b.n	8002db6 <__aeabi_d2f+0x3a>
 8002e74:	000b      	movs	r3, r1
 8002e76:	e79f      	b.n	8002db8 <__aeabi_d2f+0x3c>
 8002e78:	000007fe 	.word	0x000007fe
 8002e7c:	fffffc80 	.word	0xfffffc80
 8002e80:	fffffca2 	.word	0xfffffca2
 8002e84:	fffffc82 	.word	0xfffffc82

08002e88 <__clzsi2>:
 8002e88:	211c      	movs	r1, #28
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	4298      	cmp	r0, r3
 8002e90:	d301      	bcc.n	8002e96 <__clzsi2+0xe>
 8002e92:	0c00      	lsrs	r0, r0, #16
 8002e94:	3910      	subs	r1, #16
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	4298      	cmp	r0, r3
 8002e9a:	d301      	bcc.n	8002ea0 <__clzsi2+0x18>
 8002e9c:	0a00      	lsrs	r0, r0, #8
 8002e9e:	3908      	subs	r1, #8
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	4298      	cmp	r0, r3
 8002ea4:	d301      	bcc.n	8002eaa <__clzsi2+0x22>
 8002ea6:	0900      	lsrs	r0, r0, #4
 8002ea8:	3904      	subs	r1, #4
 8002eaa:	a202      	add	r2, pc, #8	; (adr r2, 8002eb4 <__clzsi2+0x2c>)
 8002eac:	5c10      	ldrb	r0, [r2, r0]
 8002eae:	1840      	adds	r0, r0, r1
 8002eb0:	4770      	bx	lr
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	02020304 	.word	0x02020304
 8002eb8:	01010101 	.word	0x01010101
	...

08002ec4 <__clzdi2>:
 8002ec4:	b510      	push	{r4, lr}
 8002ec6:	2900      	cmp	r1, #0
 8002ec8:	d103      	bne.n	8002ed2 <__clzdi2+0xe>
 8002eca:	f7ff ffdd 	bl	8002e88 <__clzsi2>
 8002ece:	3020      	adds	r0, #32
 8002ed0:	e002      	b.n	8002ed8 <__clzdi2+0x14>
 8002ed2:	0008      	movs	r0, r1
 8002ed4:	f7ff ffd8 	bl	8002e88 <__clzsi2>
 8002ed8:	bd10      	pop	{r4, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)

08002edc <ESP_init>:

/**
 * @brief Initializes the ESP8266 module in single connection mode.
 */
void ESP_init ()
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8002ee0:	f001 fa72 	bl	80043c8 <Ringbuf_init>
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 8002ee4:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <ESP_init+0x34>)
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <ESP_init+0x38>)
 8002ee8:	0011      	movs	r1, r2
 8002eea:	0018      	movs	r0, r3
 8002eec:	f001 fc80 	bl	80047f0 <Uart_sendstring>
	if (!Wait_for("OK\r\n", wifi_uart)) {}
 8002ef0:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <ESP_init+0x34>)
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <ESP_init+0x3c>)
 8002ef4:	0011      	movs	r1, r2
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f001 fc94 	bl	8004824 <Wait_for>
	Uart_sendstring("Set CWMODE to 1\r\n\n", pc_uart);
 8002efc:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <ESP_init+0x40>)
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <ESP_init+0x44>)
 8002f00:	0011      	movs	r1, r2
 8002f02:	0018      	movs	r0, r3
 8002f04:	f001 fc74 	bl	80047f0 <Uart_sendstring>
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	20000b94 	.word	0x20000b94
 8002f14:	08012960 	.word	0x08012960
 8002f18:	08012970 	.word	0x08012970
 8002f1c:	20000c1c 	.word	0x20000c1c
 8002f20:	08012978 	.word	0x08012978

08002f24 <ESP_wifiConnect>:

/**
 * @brief Connects to the specified Wi-Fi network using the ESP8266 module.
 */
void ESP_wifiConnect()
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b09a      	sub	sp, #104	; 0x68
 8002f28:	af00      	add	r7, sp, #0
	char cmd[100];
	sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", WIFI_SSID, WIFI_PASSWORD);
 8002f2a:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <ESP_wifiConnect+0x64>)
 8002f2c:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <ESP_wifiConnect+0x68>)
 8002f2e:	4918      	ldr	r1, [pc, #96]	; (8002f90 <ESP_wifiConnect+0x6c>)
 8002f30:	1d38      	adds	r0, r7, #4
 8002f32:	f00b ffbf 	bl	800eeb4 <siprintf>
	Uart_sendstring(cmd, wifi_uart);
 8002f36:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <ESP_wifiConnect+0x70>)
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	0011      	movs	r1, r2
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f001 fc57 	bl	80047f0 <Uart_sendstring>
	if (!Wait_for("OK\r\n", wifi_uart)) {}
 8002f42:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <ESP_wifiConnect+0x70>)
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <ESP_wifiConnect+0x74>)
 8002f46:	0011      	movs	r1, r2
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f001 fc6b 	bl	8004824 <Wait_for>
	Uart_sendstring("WiFi Connected!\r\n\n", pc_uart);
 8002f4e:	4a13      	ldr	r2, [pc, #76]	; (8002f9c <ESP_wifiConnect+0x78>)
 8002f50:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <ESP_wifiConnect+0x7c>)
 8002f52:	0011      	movs	r1, r2
 8002f54:	0018      	movs	r0, r3
 8002f56:	f001 fc4b 	bl	80047f0 <Uart_sendstring>

	Uart_sendstring("AT+CIPMUX=0\r\n", wifi_uart);
 8002f5a:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <ESP_wifiConnect+0x70>)
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <ESP_wifiConnect+0x80>)
 8002f5e:	0011      	movs	r1, r2
 8002f60:	0018      	movs	r0, r3
 8002f62:	f001 fc45 	bl	80047f0 <Uart_sendstring>
	if (!Wait_for("OK\r\n", wifi_uart)) {}
 8002f66:	4a0b      	ldr	r2, [pc, #44]	; (8002f94 <ESP_wifiConnect+0x70>)
 8002f68:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <ESP_wifiConnect+0x74>)
 8002f6a:	0011      	movs	r1, r2
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f001 fc59 	bl	8004824 <Wait_for>
	Uart_sendstring("Disabled multiple connections\r\n\n", pc_uart);
 8002f72:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <ESP_wifiConnect+0x78>)
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <ESP_wifiConnect+0x84>)
 8002f76:	0011      	movs	r1, r2
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f001 fc39 	bl	80047f0 <Uart_sendstring>
}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b01a      	add	sp, #104	; 0x68
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	0801298c 	.word	0x0801298c
 8002f8c:	0801299c 	.word	0x0801299c
 8002f90:	080129a4 	.word	0x080129a4
 8002f94:	20000b94 	.word	0x20000b94
 8002f98:	08012970 	.word	0x08012970
 8002f9c:	20000c1c 	.word	0x20000c1c
 8002fa0:	080129bc 	.word	0x080129bc
 8002fa4:	080129d0 	.word	0x080129d0
 8002fa8:	080129e0 	.word	0x080129e0

08002fac <ESP_apiConnect>:

/**
 * @brief Establishes a TCP connection with the weather API server.
 */
void ESP_apiConnect()
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b09a      	sub	sp, #104	; 0x68
 8002fb0:	af00      	add	r7, sp, #0
	char cmd[100];
	sprintf(cmd, "AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", API_URL, API_PORT);
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <ESP_apiConnect+0x40>)
 8002fb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <ESP_apiConnect+0x44>)
 8002fb6:	490f      	ldr	r1, [pc, #60]	; (8002ff4 <ESP_apiConnect+0x48>)
 8002fb8:	1d38      	adds	r0, r7, #4
 8002fba:	f00b ff7b 	bl	800eeb4 <siprintf>
	Uart_sendstring(cmd, wifi_uart);
 8002fbe:	4a0e      	ldr	r2, [pc, #56]	; (8002ff8 <ESP_apiConnect+0x4c>)
 8002fc0:	1d3b      	adds	r3, r7, #4
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f001 fc13 	bl	80047f0 <Uart_sendstring>
	if (!Wait_for("OK\r\n", wifi_uart)) {}
 8002fca:	4a0b      	ldr	r2, [pc, #44]	; (8002ff8 <ESP_apiConnect+0x4c>)
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <ESP_apiConnect+0x50>)
 8002fce:	0011      	movs	r1, r2
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f001 fc27 	bl	8004824 <Wait_for>
	Uart_sendstring("Established TCP connection with 'api.weatherapi.com'\r\n", pc_uart);
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <ESP_apiConnect+0x54>)
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <ESP_apiConnect+0x58>)
 8002fda:	0011      	movs	r1, r2
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f001 fc07 	bl	80047f0 <Uart_sendstring>
}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b01a      	add	sp, #104	; 0x68
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	08012a04 	.word	0x08012a04
 8002ff0:	08012a08 	.word	0x08012a08
 8002ff4:	08012a1c 	.word	0x08012a1c
 8002ff8:	20000b94 	.word	0x20000b94
 8002ffc:	08012970 	.word	0x08012970
 8003000:	20000c1c 	.word	0x20000c1c
 8003004:	08012a38 	.word	0x08012a38

08003008 <ESP_apiClose>:

/**
 * @brief Closes the TCP connection with the weather API server.
 */
void ESP_apiClose()
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
    Uart_sendstring("AT+CIPCLOSE\r\n", wifi_uart);
 800300c:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <ESP_apiClose+0x30>)
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <ESP_apiClose+0x34>)
 8003010:	0011      	movs	r1, r2
 8003012:	0018      	movs	r0, r3
 8003014:	f001 fbec 	bl	80047f0 <Uart_sendstring>
    if (!Wait_for("OK\r\n", wifi_uart)) {}
 8003018:	4a07      	ldr	r2, [pc, #28]	; (8003038 <ESP_apiClose+0x30>)
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <ESP_apiClose+0x38>)
 800301c:	0011      	movs	r1, r2
 800301e:	0018      	movs	r0, r3
 8003020:	f001 fc00 	bl	8004824 <Wait_for>
    Uart_sendstring("TCP connection closed\r\n\n", pc_uart);
 8003024:	4a07      	ldr	r2, [pc, #28]	; (8003044 <ESP_apiClose+0x3c>)
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <ESP_apiClose+0x40>)
 8003028:	0011      	movs	r1, r2
 800302a:	0018      	movs	r0, r3
 800302c:	f001 fbe0 	bl	80047f0 <Uart_sendstring>
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	20000b94 	.word	0x20000b94
 800303c:	08012a70 	.word	0x08012a70
 8003040:	08012970 	.word	0x08012970
 8003044:	20000c1c 	.word	0x20000c1c
 8003048:	08012a80 	.word	0x08012a80

0800304c <ESP_fetchWeatherData>:
 * @param min_temp String buffer to store the minimum temperature.
 * @param avg_temp String buffer to store the average temperature.
 * @param weather_condition String buffer to store the weather condition.
 */
void ESP_fetchWeatherData(char *date, char *max_temp, char *min_temp, char *avg_temp, char *weather_condition)
{
 800304c:	b5b0      	push	{r4, r5, r7, lr}
 800304e:	b0c8      	sub	sp, #288	; 0x120
 8003050:	af04      	add	r7, sp, #16
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]
	char cmd[100];
	char getRequest[150];

	ESP_apiConnect();
 800305a:	f7ff ffa7 	bl	8002fac <ESP_apiConnect>
	snprintf(getRequest, sizeof(getRequest), "GET %s HTTP/1.1\r\nHost: api.weatherapi.com\r\n\r\n", GET_URL);
 800305e:	4b58      	ldr	r3, [pc, #352]	; (80031c0 <ESP_fetchWeatherData+0x174>)
 8003060:	4a58      	ldr	r2, [pc, #352]	; (80031c4 <ESP_fetchWeatherData+0x178>)
 8003062:	2414      	movs	r4, #20
 8003064:	1938      	adds	r0, r7, r4
 8003066:	2196      	movs	r1, #150	; 0x96
 8003068:	f00b fef0 	bl	800ee4c <sniprintf>
	snprintf(cmd, sizeof(cmd), "AT+CIPSEND=%d\r\n", strlen(getRequest));
 800306c:	193b      	adds	r3, r7, r4
 800306e:	0018      	movs	r0, r3
 8003070:	f7fd f84a 	bl	8000108 <strlen>
 8003074:	0003      	movs	r3, r0
 8003076:	4a54      	ldr	r2, [pc, #336]	; (80031c8 <ESP_fetchWeatherData+0x17c>)
 8003078:	25ac      	movs	r5, #172	; 0xac
 800307a:	1978      	adds	r0, r7, r5
 800307c:	2164      	movs	r1, #100	; 0x64
 800307e:	f00b fee5 	bl	800ee4c <sniprintf>
	Uart_sendstring(cmd, wifi_uart);
 8003082:	4a52      	ldr	r2, [pc, #328]	; (80031cc <ESP_fetchWeatherData+0x180>)
 8003084:	197b      	adds	r3, r7, r5
 8003086:	0011      	movs	r1, r2
 8003088:	0018      	movs	r0, r3
 800308a:	f001 fbb1 	bl	80047f0 <Uart_sendstring>
	if (!Wait_for(">", wifi_uart)) {}
 800308e:	4a4f      	ldr	r2, [pc, #316]	; (80031cc <ESP_fetchWeatherData+0x180>)
 8003090:	4b4f      	ldr	r3, [pc, #316]	; (80031d0 <ESP_fetchWeatherData+0x184>)
 8003092:	0011      	movs	r1, r2
 8003094:	0018      	movs	r0, r3
 8003096:	f001 fbc5 	bl	8004824 <Wait_for>
	Uart_sendstring(getRequest, wifi_uart);
 800309a:	4a4c      	ldr	r2, [pc, #304]	; (80031cc <ESP_fetchWeatherData+0x180>)
 800309c:	193b      	adds	r3, r7, r4
 800309e:	0011      	movs	r1, r2
 80030a0:	0018      	movs	r0, r3
 80030a2:	f001 fba5 	bl	80047f0 <Uart_sendstring>

	while (!(Get_after ("\"localtime\":", 20, date, wifi_uart)));
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	4b48      	ldr	r3, [pc, #288]	; (80031cc <ESP_fetchWeatherData+0x180>)
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4849      	ldr	r0, [pc, #292]	; (80031d4 <ESP_fetchWeatherData+0x188>)
 80030ae:	2114      	movs	r1, #20
 80030b0:	f001 fb68 	bl	8004784 <Get_after>
 80030b4:	1e03      	subs	r3, r0, #0
 80030b6:	d0f7      	beq.n	80030a8 <ESP_fetchWeatherData+0x5c>
	while (!(Get_after ("maxtemp_c\":", 5, max_temp, wifi_uart)));
 80030b8:	46c0      	nop			; (mov r8, r8)
 80030ba:	4b44      	ldr	r3, [pc, #272]	; (80031cc <ESP_fetchWeatherData+0x180>)
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	4846      	ldr	r0, [pc, #280]	; (80031d8 <ESP_fetchWeatherData+0x18c>)
 80030c0:	2105      	movs	r1, #5
 80030c2:	f001 fb5f 	bl	8004784 <Get_after>
 80030c6:	1e03      	subs	r3, r0, #0
 80030c8:	d0f7      	beq.n	80030ba <ESP_fetchWeatherData+0x6e>
	while (!(Get_after ("mintemp_c\":", 5, min_temp, wifi_uart)));
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	4b3f      	ldr	r3, [pc, #252]	; (80031cc <ESP_fetchWeatherData+0x180>)
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4842      	ldr	r0, [pc, #264]	; (80031dc <ESP_fetchWeatherData+0x190>)
 80030d2:	2105      	movs	r1, #5
 80030d4:	f001 fb56 	bl	8004784 <Get_after>
 80030d8:	1e03      	subs	r3, r0, #0
 80030da:	d0f7      	beq.n	80030cc <ESP_fetchWeatherData+0x80>
	while (!(Get_after ("avgtemp_c\":", 5, avg_temp, wifi_uart)));
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	4b3b      	ldr	r3, [pc, #236]	; (80031cc <ESP_fetchWeatherData+0x180>)
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	483f      	ldr	r0, [pc, #252]	; (80031e0 <ESP_fetchWeatherData+0x194>)
 80030e4:	2105      	movs	r1, #5
 80030e6:	f001 fb4d 	bl	8004784 <Get_after>
 80030ea:	1e03      	subs	r3, r0, #0
 80030ec:	d0f7      	beq.n	80030de <ESP_fetchWeatherData+0x92>
	while (!(Get_after ("text\":", 50, weather_condition, wifi_uart)));
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	4b36      	ldr	r3, [pc, #216]	; (80031cc <ESP_fetchWeatherData+0x180>)
 80030f2:	248c      	movs	r4, #140	; 0x8c
 80030f4:	0064      	lsls	r4, r4, #1
 80030f6:	2508      	movs	r5, #8
 80030f8:	1962      	adds	r2, r4, r5
 80030fa:	19d2      	adds	r2, r2, r7
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	4839      	ldr	r0, [pc, #228]	; (80031e4 <ESP_fetchWeatherData+0x198>)
 8003100:	2132      	movs	r1, #50	; 0x32
 8003102:	f001 fb3f 	bl	8004784 <Get_after>
 8003106:	1e03      	subs	r3, r0, #0
 8003108:	d0f2      	beq.n	80030f0 <ESP_fetchWeatherData+0xa4>

	Parse_text(date);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	0018      	movs	r0, r3
 800310e:	f000 f8b7 	bl	8003280 <Parse_text>
	Parse_text(weather_condition);
 8003112:	1963      	adds	r3, r4, r5
 8003114:	19db      	adds	r3, r3, r7
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	0018      	movs	r0, r3
 800311a:	f000 f8b1 	bl	8003280 <Parse_text>
	Parse_number(max_temp);
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	0018      	movs	r0, r3
 8003122:	f000 f86d 	bl	8003200 <Parse_number>
	Parse_number(min_temp);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	0018      	movs	r0, r3
 800312a:	f000 f869 	bl	8003200 <Parse_number>
	Parse_number(avg_temp);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	0018      	movs	r0, r3
 8003132:	f000 f865 	bl	8003200 <Parse_number>

	ST7735_WriteString(25, 6, "                ", Font_7x10, WHITE, BLACK);
 8003136:	4b2c      	ldr	r3, [pc, #176]	; (80031e8 <ESP_fetchWeatherData+0x19c>)
 8003138:	482c      	ldr	r0, [pc, #176]	; (80031ec <ESP_fetchWeatherData+0x1a0>)
 800313a:	2200      	movs	r2, #0
 800313c:	9202      	str	r2, [sp, #8]
 800313e:	4a2c      	ldr	r2, [pc, #176]	; (80031f0 <ESP_fetchWeatherData+0x1a4>)
 8003140:	9201      	str	r2, [sp, #4]
 8003142:	466a      	mov	r2, sp
 8003144:	6859      	ldr	r1, [r3, #4]
 8003146:	6011      	str	r1, [r2, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	0002      	movs	r2, r0
 800314c:	2106      	movs	r1, #6
 800314e:	2019      	movs	r0, #25
 8003150:	f000 fff8 	bl	8004144 <ST7735_WriteString>
	ST7735_WriteString(25, 6, date, Font_7x10, ORANGE, BLACK);
 8003154:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <ESP_fetchWeatherData+0x19c>)
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	9202      	str	r2, [sp, #8]
 800315c:	4a25      	ldr	r2, [pc, #148]	; (80031f4 <ESP_fetchWeatherData+0x1a8>)
 800315e:	9201      	str	r2, [sp, #4]
 8003160:	466a      	mov	r2, sp
 8003162:	6859      	ldr	r1, [r3, #4]
 8003164:	6011      	str	r1, [r2, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	0002      	movs	r2, r0
 800316a:	2106      	movs	r1, #6
 800316c:	2019      	movs	r0, #25
 800316e:	f000 ffe9 	bl	8004144 <ST7735_WriteString>
	ST7735_WriteString(10, 82, "                         ", Font_7x10, WHITE, BLACK);
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <ESP_fetchWeatherData+0x19c>)
 8003174:	4820      	ldr	r0, [pc, #128]	; (80031f8 <ESP_fetchWeatherData+0x1ac>)
 8003176:	2200      	movs	r2, #0
 8003178:	9202      	str	r2, [sp, #8]
 800317a:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <ESP_fetchWeatherData+0x1a4>)
 800317c:	9201      	str	r2, [sp, #4]
 800317e:	466a      	mov	r2, sp
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	6011      	str	r1, [r2, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	0002      	movs	r2, r0
 8003188:	2152      	movs	r1, #82	; 0x52
 800318a:	200a      	movs	r0, #10
 800318c:	f000 ffda 	bl	8004144 <ST7735_WriteString>
	ST7735_WriteString(10, 82, weather_condition, Font_7x10, TURQUOISE, BLACK);
 8003190:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <ESP_fetchWeatherData+0x19c>)
 8003192:	1962      	adds	r2, r4, r5
 8003194:	19d2      	adds	r2, r2, r7
 8003196:	6810      	ldr	r0, [r2, #0]
 8003198:	2200      	movs	r2, #0
 800319a:	9202      	str	r2, [sp, #8]
 800319c:	4a17      	ldr	r2, [pc, #92]	; (80031fc <ESP_fetchWeatherData+0x1b0>)
 800319e:	9201      	str	r2, [sp, #4]
 80031a0:	466a      	mov	r2, sp
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	6011      	str	r1, [r2, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	0002      	movs	r2, r0
 80031aa:	2152      	movs	r1, #82	; 0x52
 80031ac:	200a      	movs	r0, #10
 80031ae:	f000 ffc9 	bl	8004144 <ST7735_WriteString>
	ESP_apiClose();
 80031b2:	f7ff ff29 	bl	8003008 <ESP_apiClose>
}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b044      	add	sp, #272	; 0x110
 80031bc:	bdb0      	pop	{r4, r5, r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	08012a9c 	.word	0x08012a9c
 80031c4:	08012aec 	.word	0x08012aec
 80031c8:	08012b1c 	.word	0x08012b1c
 80031cc:	20000b94 	.word	0x20000b94
 80031d0:	08012b2c 	.word	0x08012b2c
 80031d4:	08012b30 	.word	0x08012b30
 80031d8:	08012b40 	.word	0x08012b40
 80031dc:	08012b4c 	.word	0x08012b4c
 80031e0:	08012b58 	.word	0x08012b58
 80031e4:	08012b64 	.word	0x08012b64
 80031e8:	20000004 	.word	0x20000004
 80031ec:	08012b6c 	.word	0x08012b6c
 80031f0:	0000ffff 	.word	0x0000ffff
 80031f4:	0000fd20 	.word	0x0000fd20
 80031f8:	08012b80 	.word	0x08012b80
 80031fc:	0000471a 	.word	0x0000471a

08003200 <Parse_number>:

/**
 * @brief Parses a string to extract a number.
 * @param temp String containing the number to be parsed.
 */
void Parse_number(char *temp){
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	int j = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; temp[i] != '\0'; i++) {
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	e025      	b.n	800325e <Parse_number+0x5e>
		if (isdigit((unsigned char)temp[i]) || temp[i] == '.' || temp[i] == '-') {
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	18d3      	adds	r3, r2, r3
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	4b17      	ldr	r3, [pc, #92]	; (800327c <Parse_number+0x7c>)
 800321e:	18d3      	adds	r3, r2, r3
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	001a      	movs	r2, r3
 8003224:	2304      	movs	r3, #4
 8003226:	4013      	ands	r3, r2
 8003228:	d10b      	bne.n	8003242 <Parse_number+0x42>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	18d3      	adds	r3, r2, r3
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b2e      	cmp	r3, #46	; 0x2e
 8003234:	d005      	beq.n	8003242 <Parse_number+0x42>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	18d3      	adds	r3, r2, r3
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b2d      	cmp	r3, #45	; 0x2d
 8003240:	d10a      	bne.n	8003258 <Parse_number+0x58>
			temp[j++] = temp[i];
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	18d2      	adds	r2, r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1c59      	adds	r1, r3, #1
 800324c:	60f9      	str	r1, [r7, #12]
 800324e:	0019      	movs	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	185b      	adds	r3, r3, r1
 8003254:	7812      	ldrb	r2, [r2, #0]
 8003256:	701a      	strb	r2, [r3, #0]
	for (int i = 0; temp[i] != '\0'; i++) {
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	3301      	adds	r3, #1
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	18d3      	adds	r3, r2, r3
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1d3      	bne.n	8003212 <Parse_number+0x12>
		}
	}
	temp[j] = '\0';
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	18d3      	adds	r3, r2, r3
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b004      	add	sp, #16
 800327a:	bd80      	pop	{r7, pc}
 800327c:	08013b54 	.word	0x08013b54

08003280 <Parse_text>:

/**
 * @brief Parses a string to extract text within quotes.
 * @param text String containing the text to be parsed.
 */
void Parse_text(char *text){
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	int j = 0, in_quotes = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
	for(int i = 0; text[i] != '\0'; i++) {
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e01c      	b.n	80032d0 <Parse_text+0x50>
		if (text[i] == '\"') {
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	18d3      	adds	r3, r2, r3
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b22      	cmp	r3, #34	; 0x22
 80032a0:	d105      	bne.n	80032ae <Parse_text+0x2e>
			if (in_quotes) break;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d11a      	bne.n	80032de <Parse_text+0x5e>
			in_quotes = 1;
 80032a8:	2301      	movs	r3, #1
 80032aa:	613b      	str	r3, [r7, #16]
			continue;
 80032ac:	e00d      	b.n	80032ca <Parse_text+0x4a>
		}
		if (in_quotes) {
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <Parse_text+0x4a>
			text[j++] = text[i];
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	18d2      	adds	r2, r2, r3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	1c59      	adds	r1, r3, #1
 80032be:	6179      	str	r1, [r7, #20]
 80032c0:	0019      	movs	r1, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	185b      	adds	r3, r3, r1
 80032c6:	7812      	ldrb	r2, [r2, #0]
 80032c8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; text[i] != '\0'; i++) {
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3301      	adds	r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	18d3      	adds	r3, r2, r3
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1dc      	bne.n	8003296 <Parse_text+0x16>
 80032dc:	e000      	b.n	80032e0 <Parse_text+0x60>
			if (in_quotes) break;
 80032de:	46c0      	nop			; (mov r8, r8)
		}
	}
	text[j] = '\0';
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	18d3      	adds	r3, r2, r3
 80032e6:	2200      	movs	r2, #0
 80032e8:	701a      	strb	r2, [r3, #0]
}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b006      	add	sp, #24
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <drawPixel>:
extern uint8_t _rowstart;
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80032f2:	b590      	push	{r4, r7, lr}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	0004      	movs	r4, r0
 80032fa:	0008      	movs	r0, r1
 80032fc:	0011      	movs	r1, r2
 80032fe:	1dbb      	adds	r3, r7, #6
 8003300:	1c22      	adds	r2, r4, #0
 8003302:	801a      	strh	r2, [r3, #0]
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	1c02      	adds	r2, r0, #0
 8003308:	801a      	strh	r2, [r3, #0]
 800330a:	1cbb      	adds	r3, r7, #2
 800330c:	1c0a      	adds	r2, r1, #0
 800330e:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(x, y, color);
 8003310:	1dbb      	adds	r3, r7, #6
 8003312:	8818      	ldrh	r0, [r3, #0]
 8003314:	1d3b      	adds	r3, r7, #4
 8003316:	8819      	ldrh	r1, [r3, #0]
 8003318:	1cbb      	adds	r3, r7, #2
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	001a      	movs	r2, r3
 800331e:	f000 fe27 	bl	8003f70 <ST7735_DrawPixel>
}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b003      	add	sp, #12
 8003328:	bd90      	pop	{r4, r7, pc}

0800332a <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800332a:	b5b0      	push	{r4, r5, r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af02      	add	r7, sp, #8
 8003330:	0005      	movs	r5, r0
 8003332:	000c      	movs	r4, r1
 8003334:	0010      	movs	r0, r2
 8003336:	0019      	movs	r1, r3
 8003338:	1dbb      	adds	r3, r7, #6
 800333a:	1c2a      	adds	r2, r5, #0
 800333c:	801a      	strh	r2, [r3, #0]
 800333e:	1d3b      	adds	r3, r7, #4
 8003340:	1c22      	adds	r2, r4, #0
 8003342:	801a      	strh	r2, [r3, #0]
 8003344:	1cbb      	adds	r3, r7, #2
 8003346:	1c02      	adds	r2, r0, #0
 8003348:	801a      	strh	r2, [r3, #0]
 800334a:	003b      	movs	r3, r7
 800334c:	1c0a      	adds	r2, r1, #0
 800334e:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8003350:	1dbb      	adds	r3, r7, #6
 8003352:	8818      	ldrh	r0, [r3, #0]
 8003354:	1d3b      	adds	r3, r7, #4
 8003356:	8819      	ldrh	r1, [r3, #0]
 8003358:	1cbb      	adds	r3, r7, #2
 800335a:	881a      	ldrh	r2, [r3, #0]
 800335c:	003b      	movs	r3, r7
 800335e:	881c      	ldrh	r4, [r3, #0]
 8003360:	2318      	movs	r3, #24
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	0023      	movs	r3, r4
 800336a:	f000 ff7d 	bl	8004268 <ST7735_FillRectangle>
}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	46bd      	mov	sp, r7
 8003372:	b002      	add	sp, #8
 8003374:	bdb0      	pop	{r4, r5, r7, pc}

08003376 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003376:	b590      	push	{r4, r7, lr}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	0004      	movs	r4, r0
 800337e:	0008      	movs	r0, r1
 8003380:	0011      	movs	r1, r2
 8003382:	1dbb      	adds	r3, r7, #6
 8003384:	1c22      	adds	r2, r4, #0
 8003386:	801a      	strh	r2, [r3, #0]
 8003388:	1d3b      	adds	r3, r7, #4
 800338a:	1c02      	adds	r2, r0, #0
 800338c:	801a      	strh	r2, [r3, #0]
 800338e:	1cbb      	adds	r3, r7, #2
 8003390:	1c0a      	adds	r2, r1, #0
 8003392:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8003394:	1cbb      	adds	r3, r7, #2
 8003396:	881a      	ldrh	r2, [r3, #0]
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	2100      	movs	r1, #0
 800339c:	5e59      	ldrsh	r1, [r3, r1]
 800339e:	1dbb      	adds	r3, r7, #6
 80033a0:	2000      	movs	r0, #0
 80033a2:	5e1b      	ldrsh	r3, [r3, r0]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f7ff ffa4 	bl	80032f2 <drawPixel>
}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b003      	add	sp, #12
 80033b0:	bd90      	pop	{r4, r7, pc}

080033b2 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80033b2:	b5b0      	push	{r4, r5, r7, lr}
 80033b4:	b088      	sub	sp, #32
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	0005      	movs	r5, r0
 80033ba:	000c      	movs	r4, r1
 80033bc:	0010      	movs	r0, r2
 80033be:	0019      	movs	r1, r3
 80033c0:	1dbb      	adds	r3, r7, #6
 80033c2:	1c2a      	adds	r2, r5, #0
 80033c4:	801a      	strh	r2, [r3, #0]
 80033c6:	1d3b      	adds	r3, r7, #4
 80033c8:	1c22      	adds	r2, r4, #0
 80033ca:	801a      	strh	r2, [r3, #0]
 80033cc:	1cbb      	adds	r3, r7, #2
 80033ce:	1c02      	adds	r2, r0, #0
 80033d0:	801a      	strh	r2, [r3, #0]
 80033d2:	003b      	movs	r3, r7
 80033d4:	1c0a      	adds	r2, r1, #0
 80033d6:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80033d8:	003b      	movs	r3, r7
 80033da:	2200      	movs	r2, #0
 80033dc:	5e9a      	ldrsh	r2, [r3, r2]
 80033de:	1d3b      	adds	r3, r7, #4
 80033e0:	2100      	movs	r1, #0
 80033e2:	5e5b      	ldrsh	r3, [r3, r1]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	17d9      	asrs	r1, r3, #31
 80033e8:	185a      	adds	r2, r3, r1
 80033ea:	404a      	eors	r2, r1
 80033ec:	1cbb      	adds	r3, r7, #2
 80033ee:	2100      	movs	r1, #0
 80033f0:	5e59      	ldrsh	r1, [r3, r1]
 80033f2:	1dbb      	adds	r3, r7, #6
 80033f4:	2000      	movs	r0, #0
 80033f6:	5e1b      	ldrsh	r3, [r3, r0]
 80033f8:	1acb      	subs	r3, r1, r3
 80033fa:	17d9      	asrs	r1, r3, #31
 80033fc:	185b      	adds	r3, r3, r1
 80033fe:	404b      	eors	r3, r1
 8003400:	2101      	movs	r1, #1
 8003402:	429a      	cmp	r2, r3
 8003404:	dc01      	bgt.n	800340a <writeLine+0x58>
 8003406:	2300      	movs	r3, #0
 8003408:	1c19      	adds	r1, r3, #0
 800340a:	b2ca      	uxtb	r2, r1
 800340c:	211a      	movs	r1, #26
 800340e:	187b      	adds	r3, r7, r1
 8003410:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8003412:	187b      	adds	r3, r7, r1
 8003414:	2200      	movs	r2, #0
 8003416:	5e9b      	ldrsh	r3, [r3, r2]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d019      	beq.n	8003450 <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 800341c:	2118      	movs	r1, #24
 800341e:	187b      	adds	r3, r7, r1
 8003420:	1dba      	adds	r2, r7, #6
 8003422:	8812      	ldrh	r2, [r2, #0]
 8003424:	801a      	strh	r2, [r3, #0]
 8003426:	1dbb      	adds	r3, r7, #6
 8003428:	1d3a      	adds	r2, r7, #4
 800342a:	8812      	ldrh	r2, [r2, #0]
 800342c:	801a      	strh	r2, [r3, #0]
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	187a      	adds	r2, r7, r1
 8003432:	8812      	ldrh	r2, [r2, #0]
 8003434:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8003436:	2116      	movs	r1, #22
 8003438:	187b      	adds	r3, r7, r1
 800343a:	1cba      	adds	r2, r7, #2
 800343c:	8812      	ldrh	r2, [r2, #0]
 800343e:	801a      	strh	r2, [r3, #0]
 8003440:	1cbb      	adds	r3, r7, #2
 8003442:	003a      	movs	r2, r7
 8003444:	8812      	ldrh	r2, [r2, #0]
 8003446:	801a      	strh	r2, [r3, #0]
 8003448:	003b      	movs	r3, r7
 800344a:	187a      	adds	r2, r7, r1
 800344c:	8812      	ldrh	r2, [r2, #0]
 800344e:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 8003450:	1dba      	adds	r2, r7, #6
 8003452:	1cbb      	adds	r3, r7, #2
 8003454:	2100      	movs	r1, #0
 8003456:	5e52      	ldrsh	r2, [r2, r1]
 8003458:	2100      	movs	r1, #0
 800345a:	5e5b      	ldrsh	r3, [r3, r1]
 800345c:	429a      	cmp	r2, r3
 800345e:	dd19      	ble.n	8003494 <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 8003460:	2114      	movs	r1, #20
 8003462:	187b      	adds	r3, r7, r1
 8003464:	1dba      	adds	r2, r7, #6
 8003466:	8812      	ldrh	r2, [r2, #0]
 8003468:	801a      	strh	r2, [r3, #0]
 800346a:	1dbb      	adds	r3, r7, #6
 800346c:	1cba      	adds	r2, r7, #2
 800346e:	8812      	ldrh	r2, [r2, #0]
 8003470:	801a      	strh	r2, [r3, #0]
 8003472:	1cbb      	adds	r3, r7, #2
 8003474:	187a      	adds	r2, r7, r1
 8003476:	8812      	ldrh	r2, [r2, #0]
 8003478:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 800347a:	2112      	movs	r1, #18
 800347c:	187b      	adds	r3, r7, r1
 800347e:	1d3a      	adds	r2, r7, #4
 8003480:	8812      	ldrh	r2, [r2, #0]
 8003482:	801a      	strh	r2, [r3, #0]
 8003484:	1d3b      	adds	r3, r7, #4
 8003486:	003a      	movs	r2, r7
 8003488:	8812      	ldrh	r2, [r2, #0]
 800348a:	801a      	strh	r2, [r3, #0]
 800348c:	003b      	movs	r3, r7
 800348e:	187a      	adds	r2, r7, r1
 8003490:	8812      	ldrh	r2, [r2, #0]
 8003492:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8003494:	1cbb      	adds	r3, r7, #2
 8003496:	881a      	ldrh	r2, [r3, #0]
 8003498:	1dbb      	adds	r3, r7, #6
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	b29a      	uxth	r2, r3
 80034a0:	2010      	movs	r0, #16
 80034a2:	183b      	adds	r3, r7, r0
 80034a4:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 80034a6:	003b      	movs	r3, r7
 80034a8:	2200      	movs	r2, #0
 80034aa:	5e9a      	ldrsh	r2, [r3, r2]
 80034ac:	1d3b      	adds	r3, r7, #4
 80034ae:	2100      	movs	r1, #0
 80034b0:	5e5b      	ldrsh	r3, [r3, r1]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	17d9      	asrs	r1, r3, #31
 80034b6:	185a      	adds	r2, r3, r1
 80034b8:	404a      	eors	r2, r1
 80034ba:	230e      	movs	r3, #14
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 80034c0:	231e      	movs	r3, #30
 80034c2:	18fa      	adds	r2, r7, r3
 80034c4:	183b      	adds	r3, r7, r0
 80034c6:	2100      	movs	r1, #0
 80034c8:	5e5b      	ldrsh	r3, [r3, r1]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	da00      	bge.n	80034d0 <writeLine+0x11e>
 80034ce:	3301      	adds	r3, #1
 80034d0:	105b      	asrs	r3, r3, #1
 80034d2:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 80034d4:	1d3a      	adds	r2, r7, #4
 80034d6:	003b      	movs	r3, r7
 80034d8:	2100      	movs	r1, #0
 80034da:	5e52      	ldrsh	r2, [r2, r1]
 80034dc:	2100      	movs	r1, #0
 80034de:	5e5b      	ldrsh	r3, [r3, r1]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	da04      	bge.n	80034ee <writeLine+0x13c>
        ystep = 1;
 80034e4:	231c      	movs	r3, #28
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	2201      	movs	r2, #1
 80034ea:	801a      	strh	r2, [r3, #0]
 80034ec:	e04d      	b.n	800358a <writeLine+0x1d8>
    } else {
        ystep = -1;
 80034ee:	231c      	movs	r3, #28
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	2201      	movs	r2, #1
 80034f4:	4252      	negs	r2, r2
 80034f6:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 80034f8:	e047      	b.n	800358a <writeLine+0x1d8>
        if (steep) {
 80034fa:	231a      	movs	r3, #26
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	2200      	movs	r2, #0
 8003500:	5e9b      	ldrsh	r3, [r3, r2]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00c      	beq.n	8003520 <writeLine+0x16e>
            writePixel(y0, x0, color);
 8003506:	2330      	movs	r3, #48	; 0x30
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	881a      	ldrh	r2, [r3, #0]
 800350c:	1dbb      	adds	r3, r7, #6
 800350e:	2100      	movs	r1, #0
 8003510:	5e59      	ldrsh	r1, [r3, r1]
 8003512:	1d3b      	adds	r3, r7, #4
 8003514:	2000      	movs	r0, #0
 8003516:	5e1b      	ldrsh	r3, [r3, r0]
 8003518:	0018      	movs	r0, r3
 800351a:	f7ff ff2c 	bl	8003376 <writePixel>
 800351e:	e00b      	b.n	8003538 <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 8003520:	2330      	movs	r3, #48	; 0x30
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	881a      	ldrh	r2, [r3, #0]
 8003526:	1d3b      	adds	r3, r7, #4
 8003528:	2100      	movs	r1, #0
 800352a:	5e59      	ldrsh	r1, [r3, r1]
 800352c:	1dbb      	adds	r3, r7, #6
 800352e:	2000      	movs	r0, #0
 8003530:	5e1b      	ldrsh	r3, [r3, r0]
 8003532:	0018      	movs	r0, r3
 8003534:	f7ff ff1f 	bl	8003376 <writePixel>
        }
        err -= dy;
 8003538:	211e      	movs	r1, #30
 800353a:	187b      	adds	r3, r7, r1
 800353c:	881a      	ldrh	r2, [r3, #0]
 800353e:	230e      	movs	r3, #14
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	b29a      	uxth	r2, r3
 8003548:	187b      	adds	r3, r7, r1
 800354a:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 800354c:	187b      	adds	r3, r7, r1
 800354e:	2200      	movs	r2, #0
 8003550:	5e9b      	ldrsh	r3, [r3, r2]
 8003552:	2b00      	cmp	r3, #0
 8003554:	da11      	bge.n	800357a <writeLine+0x1c8>
            y0 += ystep;
 8003556:	1d3b      	adds	r3, r7, #4
 8003558:	881a      	ldrh	r2, [r3, #0]
 800355a:	231c      	movs	r3, #28
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	18d3      	adds	r3, r2, r3
 8003562:	b29a      	uxth	r2, r3
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	801a      	strh	r2, [r3, #0]
            err += dx;
 8003568:	187b      	adds	r3, r7, r1
 800356a:	881a      	ldrh	r2, [r3, #0]
 800356c:	2310      	movs	r3, #16
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	18d3      	adds	r3, r2, r3
 8003574:	b29a      	uxth	r2, r3
 8003576:	187b      	adds	r3, r7, r1
 8003578:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 800357a:	1dbb      	adds	r3, r7, #6
 800357c:	2200      	movs	r2, #0
 800357e:	5e9b      	ldrsh	r3, [r3, r2]
 8003580:	b29b      	uxth	r3, r3
 8003582:	3301      	adds	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	1dbb      	adds	r3, r7, #6
 8003588:	801a      	strh	r2, [r3, #0]
 800358a:	1dba      	adds	r2, r7, #6
 800358c:	1cbb      	adds	r3, r7, #2
 800358e:	2100      	movs	r1, #0
 8003590:	5e52      	ldrsh	r2, [r2, r1]
 8003592:	2100      	movs	r1, #0
 8003594:	5e5b      	ldrsh	r3, [r3, r1]
 8003596:	429a      	cmp	r2, r3
 8003598:	ddaf      	ble.n	80034fa <writeLine+0x148>
        }
    }
}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b008      	add	sp, #32
 80035a2:	bdb0      	pop	{r4, r5, r7, pc}

080035a4 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80035a4:	b5b0      	push	{r4, r5, r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	0005      	movs	r5, r0
 80035ac:	000c      	movs	r4, r1
 80035ae:	0010      	movs	r0, r2
 80035b0:	0019      	movs	r1, r3
 80035b2:	1dbb      	adds	r3, r7, #6
 80035b4:	1c2a      	adds	r2, r5, #0
 80035b6:	801a      	strh	r2, [r3, #0]
 80035b8:	1d3b      	adds	r3, r7, #4
 80035ba:	1c22      	adds	r2, r4, #0
 80035bc:	801a      	strh	r2, [r3, #0]
 80035be:	1cbb      	adds	r3, r7, #2
 80035c0:	1c02      	adds	r2, r0, #0
 80035c2:	801a      	strh	r2, [r3, #0]
 80035c4:	003b      	movs	r3, r7
 80035c6:	1c0a      	adds	r2, r1, #0
 80035c8:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 80035ca:	1d3b      	adds	r3, r7, #4
 80035cc:	881a      	ldrh	r2, [r3, #0]
 80035ce:	1cbb      	adds	r3, r7, #2
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	18d3      	adds	r3, r2, r3
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29b      	uxth	r3, r3
 80035da:	b21c      	sxth	r4, r3
 80035dc:	1dbb      	adds	r3, r7, #6
 80035de:	2200      	movs	r2, #0
 80035e0:	5e9a      	ldrsh	r2, [r3, r2]
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	2100      	movs	r1, #0
 80035e6:	5e59      	ldrsh	r1, [r3, r1]
 80035e8:	1dbb      	adds	r3, r7, #6
 80035ea:	2000      	movs	r0, #0
 80035ec:	5e18      	ldrsh	r0, [r3, r0]
 80035ee:	003b      	movs	r3, r7
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	0023      	movs	r3, r4
 80035f6:	f7ff fedc 	bl	80033b2 <writeLine>
}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b002      	add	sp, #8
 8003600:	bdb0      	pop	{r4, r5, r7, pc}

08003602 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003602:	b5b0      	push	{r4, r5, r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af02      	add	r7, sp, #8
 8003608:	0005      	movs	r5, r0
 800360a:	000c      	movs	r4, r1
 800360c:	0010      	movs	r0, r2
 800360e:	0019      	movs	r1, r3
 8003610:	1dbb      	adds	r3, r7, #6
 8003612:	1c2a      	adds	r2, r5, #0
 8003614:	801a      	strh	r2, [r3, #0]
 8003616:	1d3b      	adds	r3, r7, #4
 8003618:	1c22      	adds	r2, r4, #0
 800361a:	801a      	strh	r2, [r3, #0]
 800361c:	1cbb      	adds	r3, r7, #2
 800361e:	1c02      	adds	r2, r0, #0
 8003620:	801a      	strh	r2, [r3, #0]
 8003622:	003b      	movs	r3, r7
 8003624:	1c0a      	adds	r2, r1, #0
 8003626:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 8003628:	1dbb      	adds	r3, r7, #6
 800362a:	881a      	ldrh	r2, [r3, #0]
 800362c:	1cbb      	adds	r3, r7, #2
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	18d3      	adds	r3, r2, r3
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29b      	uxth	r3, r3
 8003638:	b21a      	sxth	r2, r3
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	2400      	movs	r4, #0
 800363e:	5f1c      	ldrsh	r4, [r3, r4]
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	2100      	movs	r1, #0
 8003644:	5e59      	ldrsh	r1, [r3, r1]
 8003646:	1dbb      	adds	r3, r7, #6
 8003648:	2000      	movs	r0, #0
 800364a:	5e18      	ldrsh	r0, [r3, r0]
 800364c:	003b      	movs	r3, r7
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	0023      	movs	r3, r4
 8003654:	f7ff fead 	bl	80033b2 <writeLine>
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	b002      	add	sp, #8
 800365e:	bdb0      	pop	{r4, r5, r7, pc}

08003660 <drawCircle>:
        writeLine(x0, y0, x1, y1, color);
    }
}

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8003660:	b5b0      	push	{r4, r5, r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	0005      	movs	r5, r0
 8003668:	000c      	movs	r4, r1
 800366a:	0010      	movs	r0, r2
 800366c:	0019      	movs	r1, r3
 800366e:	1dbb      	adds	r3, r7, #6
 8003670:	1c2a      	adds	r2, r5, #0
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	1c22      	adds	r2, r4, #0
 8003678:	801a      	strh	r2, [r3, #0]
 800367a:	1cbb      	adds	r3, r7, #2
 800367c:	1c02      	adds	r2, r0, #0
 800367e:	801a      	strh	r2, [r3, #0]
 8003680:	003b      	movs	r3, r7
 8003682:	1c0a      	adds	r2, r1, #0
 8003684:	801a      	strh	r2, [r3, #0]
    int16_t f = 1 - r;
 8003686:	1cbb      	adds	r3, r7, #2
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	2201      	movs	r2, #1
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	b29a      	uxth	r2, r3
 8003690:	2316      	movs	r3, #22
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 8003696:	2314      	movs	r3, #20
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	2201      	movs	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 800369e:	1cbb      	adds	r3, r7, #2
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	1c1a      	adds	r2, r3, #0
 80036a4:	03d2      	lsls	r2, r2, #15
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	18db      	adds	r3, r3, r3
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	2312      	movs	r3, #18
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	801a      	strh	r2, [r3, #0]
    int16_t x = 0;
 80036b2:	2310      	movs	r3, #16
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	2200      	movs	r2, #0
 80036b8:	801a      	strh	r2, [r3, #0]
    int16_t y = r;
 80036ba:	230e      	movs	r3, #14
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	1cba      	adds	r2, r7, #2
 80036c0:	8812      	ldrh	r2, [r2, #0]
 80036c2:	801a      	strh	r2, [r3, #0]

    writePixel(x0  , y0+r, color);
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	881a      	ldrh	r2, [r3, #0]
 80036c8:	1cbb      	adds	r3, r7, #2
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	18d3      	adds	r3, r2, r3
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	b219      	sxth	r1, r3
 80036d2:	003b      	movs	r3, r7
 80036d4:	881a      	ldrh	r2, [r3, #0]
 80036d6:	1dbb      	adds	r3, r7, #6
 80036d8:	2000      	movs	r0, #0
 80036da:	5e1b      	ldrsh	r3, [r3, r0]
 80036dc:	0018      	movs	r0, r3
 80036de:	f7ff fe4a 	bl	8003376 <writePixel>
    writePixel(x0  , y0-r, color);
 80036e2:	1d3b      	adds	r3, r7, #4
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	1cbb      	adds	r3, r7, #2
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	b219      	sxth	r1, r3
 80036f0:	003b      	movs	r3, r7
 80036f2:	881a      	ldrh	r2, [r3, #0]
 80036f4:	1dbb      	adds	r3, r7, #6
 80036f6:	2000      	movs	r0, #0
 80036f8:	5e1b      	ldrsh	r3, [r3, r0]
 80036fa:	0018      	movs	r0, r3
 80036fc:	f7ff fe3b 	bl	8003376 <writePixel>
    writePixel(x0+r, y0  , color);
 8003700:	1dbb      	adds	r3, r7, #6
 8003702:	881a      	ldrh	r2, [r3, #0]
 8003704:	1cbb      	adds	r3, r7, #2
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	18d3      	adds	r3, r2, r3
 800370a:	b29b      	uxth	r3, r3
 800370c:	b218      	sxth	r0, r3
 800370e:	003b      	movs	r3, r7
 8003710:	881a      	ldrh	r2, [r3, #0]
 8003712:	1d3b      	adds	r3, r7, #4
 8003714:	2100      	movs	r1, #0
 8003716:	5e5b      	ldrsh	r3, [r3, r1]
 8003718:	0019      	movs	r1, r3
 800371a:	f7ff fe2c 	bl	8003376 <writePixel>
    writePixel(x0-r, y0  , color);
 800371e:	1dbb      	adds	r3, r7, #6
 8003720:	881a      	ldrh	r2, [r3, #0]
 8003722:	1cbb      	adds	r3, r7, #2
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	b29b      	uxth	r3, r3
 800372a:	b218      	sxth	r0, r3
 800372c:	003b      	movs	r3, r7
 800372e:	881a      	ldrh	r2, [r3, #0]
 8003730:	1d3b      	adds	r3, r7, #4
 8003732:	2100      	movs	r1, #0
 8003734:	5e5b      	ldrsh	r3, [r3, r1]
 8003736:	0019      	movs	r1, r3
 8003738:	f7ff fe1d 	bl	8003376 <writePixel>

    while (x<y) {
 800373c:	e0d0      	b.n	80038e0 <drawCircle+0x280>
        if (f >= 0) {
 800373e:	2116      	movs	r1, #22
 8003740:	187b      	adds	r3, r7, r1
 8003742:	2200      	movs	r2, #0
 8003744:	5e9b      	ldrsh	r3, [r3, r2]
 8003746:	2b00      	cmp	r3, #0
 8003748:	db17      	blt.n	800377a <drawCircle+0x11a>
            y--;
 800374a:	200e      	movs	r0, #14
 800374c:	183b      	adds	r3, r7, r0
 800374e:	2200      	movs	r2, #0
 8003750:	5e9b      	ldrsh	r3, [r3, r2]
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	183b      	adds	r3, r7, r0
 800375a:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 800375c:	2012      	movs	r0, #18
 800375e:	183b      	adds	r3, r7, r0
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	3302      	adds	r3, #2
 8003764:	b29a      	uxth	r2, r3
 8003766:	183b      	adds	r3, r7, r0
 8003768:	801a      	strh	r2, [r3, #0]
            f += ddF_y;
 800376a:	187b      	adds	r3, r7, r1
 800376c:	881a      	ldrh	r2, [r3, #0]
 800376e:	183b      	adds	r3, r7, r0
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	18d3      	adds	r3, r2, r3
 8003774:	b29a      	uxth	r2, r3
 8003776:	187b      	adds	r3, r7, r1
 8003778:	801a      	strh	r2, [r3, #0]
        }
        x++;
 800377a:	2110      	movs	r1, #16
 800377c:	187b      	adds	r3, r7, r1
 800377e:	2200      	movs	r2, #0
 8003780:	5e9b      	ldrsh	r3, [r3, r2]
 8003782:	b29b      	uxth	r3, r3
 8003784:	3301      	adds	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	187b      	adds	r3, r7, r1
 800378a:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 800378c:	2014      	movs	r0, #20
 800378e:	183b      	adds	r3, r7, r0
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	3302      	adds	r3, #2
 8003794:	b29a      	uxth	r2, r3
 8003796:	183b      	adds	r3, r7, r0
 8003798:	801a      	strh	r2, [r3, #0]
        f += ddF_x;
 800379a:	2416      	movs	r4, #22
 800379c:	193b      	adds	r3, r7, r4
 800379e:	881a      	ldrh	r2, [r3, #0]
 80037a0:	183b      	adds	r3, r7, r0
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	18d3      	adds	r3, r2, r3
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	193b      	adds	r3, r7, r4
 80037aa:	801a      	strh	r2, [r3, #0]

        writePixel(x0 + x, y0 + y, color);
 80037ac:	1dbb      	adds	r3, r7, #6
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	000c      	movs	r4, r1
 80037b2:	193b      	adds	r3, r7, r4
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	18d3      	adds	r3, r2, r3
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	b218      	sxth	r0, r3
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	881a      	ldrh	r2, [r3, #0]
 80037c0:	250e      	movs	r5, #14
 80037c2:	197b      	adds	r3, r7, r5
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	18d3      	adds	r3, r2, r3
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	b219      	sxth	r1, r3
 80037cc:	003b      	movs	r3, r7
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	001a      	movs	r2, r3
 80037d2:	f7ff fdd0 	bl	8003376 <writePixel>
        writePixel(x0 - x, y0 + y, color);
 80037d6:	1dbb      	adds	r3, r7, #6
 80037d8:	881a      	ldrh	r2, [r3, #0]
 80037da:	193b      	adds	r3, r7, r4
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	b218      	sxth	r0, r3
 80037e4:	1d3b      	adds	r3, r7, #4
 80037e6:	881a      	ldrh	r2, [r3, #0]
 80037e8:	197b      	adds	r3, r7, r5
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	18d3      	adds	r3, r2, r3
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	b219      	sxth	r1, r3
 80037f2:	003b      	movs	r3, r7
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	001a      	movs	r2, r3
 80037f8:	f7ff fdbd 	bl	8003376 <writePixel>
        writePixel(x0 + x, y0 - y, color);
 80037fc:	1dbb      	adds	r3, r7, #6
 80037fe:	881a      	ldrh	r2, [r3, #0]
 8003800:	193b      	adds	r3, r7, r4
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	18d3      	adds	r3, r2, r3
 8003806:	b29b      	uxth	r3, r3
 8003808:	b218      	sxth	r0, r3
 800380a:	1d3b      	adds	r3, r7, #4
 800380c:	881a      	ldrh	r2, [r3, #0]
 800380e:	197b      	adds	r3, r7, r5
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	b29b      	uxth	r3, r3
 8003816:	b219      	sxth	r1, r3
 8003818:	003b      	movs	r3, r7
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	001a      	movs	r2, r3
 800381e:	f7ff fdaa 	bl	8003376 <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8003822:	1dbb      	adds	r3, r7, #6
 8003824:	881a      	ldrh	r2, [r3, #0]
 8003826:	193b      	adds	r3, r7, r4
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	b29b      	uxth	r3, r3
 800382e:	b218      	sxth	r0, r3
 8003830:	1d3b      	adds	r3, r7, #4
 8003832:	881a      	ldrh	r2, [r3, #0]
 8003834:	197b      	adds	r3, r7, r5
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	b29b      	uxth	r3, r3
 800383c:	b219      	sxth	r1, r3
 800383e:	003b      	movs	r3, r7
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	001a      	movs	r2, r3
 8003844:	f7ff fd97 	bl	8003376 <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8003848:	1dbb      	adds	r3, r7, #6
 800384a:	881a      	ldrh	r2, [r3, #0]
 800384c:	197b      	adds	r3, r7, r5
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	18d3      	adds	r3, r2, r3
 8003852:	b29b      	uxth	r3, r3
 8003854:	b218      	sxth	r0, r3
 8003856:	1d3b      	adds	r3, r7, #4
 8003858:	881a      	ldrh	r2, [r3, #0]
 800385a:	193b      	adds	r3, r7, r4
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	18d3      	adds	r3, r2, r3
 8003860:	b29b      	uxth	r3, r3
 8003862:	b219      	sxth	r1, r3
 8003864:	003b      	movs	r3, r7
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	001a      	movs	r2, r3
 800386a:	f7ff fd84 	bl	8003376 <writePixel>
        writePixel(x0 - y, y0 + x, color);
 800386e:	1dbb      	adds	r3, r7, #6
 8003870:	881a      	ldrh	r2, [r3, #0]
 8003872:	197b      	adds	r3, r7, r5
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	b29b      	uxth	r3, r3
 800387a:	b218      	sxth	r0, r3
 800387c:	1d3b      	adds	r3, r7, #4
 800387e:	881a      	ldrh	r2, [r3, #0]
 8003880:	193b      	adds	r3, r7, r4
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	18d3      	adds	r3, r2, r3
 8003886:	b29b      	uxth	r3, r3
 8003888:	b219      	sxth	r1, r3
 800388a:	003b      	movs	r3, r7
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	001a      	movs	r2, r3
 8003890:	f7ff fd71 	bl	8003376 <writePixel>
        writePixel(x0 + y, y0 - x, color);
 8003894:	1dbb      	adds	r3, r7, #6
 8003896:	881a      	ldrh	r2, [r3, #0]
 8003898:	197b      	adds	r3, r7, r5
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	18d3      	adds	r3, r2, r3
 800389e:	b29b      	uxth	r3, r3
 80038a0:	b218      	sxth	r0, r3
 80038a2:	1d3b      	adds	r3, r7, #4
 80038a4:	881a      	ldrh	r2, [r3, #0]
 80038a6:	193b      	adds	r3, r7, r4
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	b219      	sxth	r1, r3
 80038b0:	003b      	movs	r3, r7
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	001a      	movs	r2, r3
 80038b6:	f7ff fd5e 	bl	8003376 <writePixel>
        writePixel(x0 - y, y0 - x, color);
 80038ba:	1dbb      	adds	r3, r7, #6
 80038bc:	881a      	ldrh	r2, [r3, #0]
 80038be:	197b      	adds	r3, r7, r5
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	b218      	sxth	r0, r3
 80038c8:	1d3b      	adds	r3, r7, #4
 80038ca:	881a      	ldrh	r2, [r3, #0]
 80038cc:	193b      	adds	r3, r7, r4
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	b219      	sxth	r1, r3
 80038d6:	003b      	movs	r3, r7
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	001a      	movs	r2, r3
 80038dc:	f7ff fd4b 	bl	8003376 <writePixel>
    while (x<y) {
 80038e0:	2310      	movs	r3, #16
 80038e2:	18fa      	adds	r2, r7, r3
 80038e4:	230e      	movs	r3, #14
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	2100      	movs	r1, #0
 80038ea:	5e52      	ldrsh	r2, [r2, r1]
 80038ec:	2100      	movs	r1, #0
 80038ee:	5e5b      	ldrsh	r3, [r3, r1]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	da00      	bge.n	80038f6 <drawCircle+0x296>
 80038f4:	e723      	b.n	800373e <drawCircle+0xde>
    }
}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	46c0      	nop			; (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b006      	add	sp, #24
 80038fe:	bdb0      	pop	{r4, r5, r7, pc}

08003900 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af02      	add	r7, sp, #8
 8003906:	0002      	movs	r2, r0
 8003908:	1dbb      	adds	r3, r7, #6
 800390a:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <fillScreen+0x30>)
 800390e:	2200      	movs	r2, #0
 8003910:	5e9a      	ldrsh	r2, [r3, r2]
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <fillScreen+0x34>)
 8003914:	2100      	movs	r1, #0
 8003916:	5e59      	ldrsh	r1, [r3, r1]
 8003918:	1dbb      	adds	r3, r7, #6
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	000b      	movs	r3, r1
 8003920:	2100      	movs	r1, #0
 8003922:	2000      	movs	r0, #0
 8003924:	f7ff fd01 	bl	800332a <fillRect>
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20000210 	.word	0x20000210
 8003934:	20000212 	.word	0x20000212

08003938 <drawTechyInterface>:

/**
 * @brief  Draw initial interface in which data is displayed
 * @retval None
 */
void drawTechyInterface() {
 8003938:	b5b0      	push	{r4, r5, r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af04      	add	r7, sp, #16
	fillScreen(CYAN);
 800393e:	4b53      	ldr	r3, [pc, #332]	; (8003a8c <drawTechyInterface+0x154>)
 8003940:	0018      	movs	r0, r3
 8003942:	f7ff ffdd 	bl	8003900 <fillScreen>
	fillScreen(BLACK);
 8003946:	2000      	movs	r0, #0
 8003948:	f7ff ffda 	bl	8003900 <fillScreen>
    // Draw some static lines for a techy look
    drawFastHLine(0, 20, _width, CYAN);
 800394c:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <drawTechyInterface+0x158>)
 800394e:	2200      	movs	r2, #0
 8003950:	5e9a      	ldrsh	r2, [r3, r2]
 8003952:	4b4e      	ldr	r3, [pc, #312]	; (8003a8c <drawTechyInterface+0x154>)
 8003954:	2114      	movs	r1, #20
 8003956:	2000      	movs	r0, #0
 8003958:	f7ff fe53 	bl	8003602 <drawFastHLine>
    drawFastHLine(0, _height - 20, _width, CYAN);
 800395c:	4b4d      	ldr	r3, [pc, #308]	; (8003a94 <drawTechyInterface+0x15c>)
 800395e:	2200      	movs	r2, #0
 8003960:	5e9b      	ldrsh	r3, [r3, r2]
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b14      	subs	r3, #20
 8003966:	b29b      	uxth	r3, r3
 8003968:	b219      	sxth	r1, r3
 800396a:	4b49      	ldr	r3, [pc, #292]	; (8003a90 <drawTechyInterface+0x158>)
 800396c:	2200      	movs	r2, #0
 800396e:	5e9a      	ldrsh	r2, [r3, r2]
 8003970:	4b46      	ldr	r3, [pc, #280]	; (8003a8c <drawTechyInterface+0x154>)
 8003972:	2000      	movs	r0, #0
 8003974:	f7ff fe45 	bl	8003602 <drawFastHLine>
    drawFastVLine(_width / 2, 20, _height - 80, CYAN);
 8003978:	4b45      	ldr	r3, [pc, #276]	; (8003a90 <drawTechyInterface+0x158>)
 800397a:	2200      	movs	r2, #0
 800397c:	5e9b      	ldrsh	r3, [r3, r2]
 800397e:	2b00      	cmp	r3, #0
 8003980:	da00      	bge.n	8003984 <drawTechyInterface+0x4c>
 8003982:	3301      	adds	r3, #1
 8003984:	105b      	asrs	r3, r3, #1
 8003986:	b218      	sxth	r0, r3
 8003988:	4b42      	ldr	r3, [pc, #264]	; (8003a94 <drawTechyInterface+0x15c>)
 800398a:	2200      	movs	r2, #0
 800398c:	5e9b      	ldrsh	r3, [r3, r2]
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b50      	subs	r3, #80	; 0x50
 8003992:	b29b      	uxth	r3, r3
 8003994:	b21a      	sxth	r2, r3
 8003996:	4b3d      	ldr	r3, [pc, #244]	; (8003a8c <drawTechyInterface+0x154>)
 8003998:	2114      	movs	r1, #20
 800399a:	f7ff fe03 	bl	80035a4 <drawFastVLine>
    drawFastHLine(0, _height - 60, _width, CYAN);
 800399e:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <drawTechyInterface+0x15c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	5e9b      	ldrsh	r3, [r3, r2]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b3c      	subs	r3, #60	; 0x3c
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	b219      	sxth	r1, r3
 80039ac:	4b38      	ldr	r3, [pc, #224]	; (8003a90 <drawTechyInterface+0x158>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	5e9a      	ldrsh	r2, [r3, r2]
 80039b2:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <drawTechyInterface+0x154>)
 80039b4:	2000      	movs	r0, #0
 80039b6:	f7ff fe24 	bl	8003602 <drawFastHLine>

    // Additional design elements
    drawCircle(10, 10, 8, YELLOW);
 80039ba:	4b37      	ldr	r3, [pc, #220]	; (8003a98 <drawTechyInterface+0x160>)
 80039bc:	2208      	movs	r2, #8
 80039be:	210a      	movs	r1, #10
 80039c0:	200a      	movs	r0, #10
 80039c2:	f7ff fe4d 	bl	8003660 <drawCircle>
    drawCircle(_width - 10, 10, 8, YELLOW);
 80039c6:	4b32      	ldr	r3, [pc, #200]	; (8003a90 <drawTechyInterface+0x158>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	5e9b      	ldrsh	r3, [r3, r2]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b0a      	subs	r3, #10
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	b218      	sxth	r0, r3
 80039d4:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <drawTechyInterface+0x160>)
 80039d6:	2208      	movs	r2, #8
 80039d8:	210a      	movs	r1, #10
 80039da:	f7ff fe41 	bl	8003660 <drawCircle>
    drawCircle(10, _height - 10, 8, YELLOW);
 80039de:	4b2d      	ldr	r3, [pc, #180]	; (8003a94 <drawTechyInterface+0x15c>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	5e9b      	ldrsh	r3, [r3, r2]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b0a      	subs	r3, #10
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	b219      	sxth	r1, r3
 80039ec:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <drawTechyInterface+0x160>)
 80039ee:	2208      	movs	r2, #8
 80039f0:	200a      	movs	r0, #10
 80039f2:	f7ff fe35 	bl	8003660 <drawCircle>
    drawCircle(_width - 10, _height - 10, 8, YELLOW);
 80039f6:	4b26      	ldr	r3, [pc, #152]	; (8003a90 <drawTechyInterface+0x158>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	5e9b      	ldrsh	r3, [r3, r2]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b0a      	subs	r3, #10
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	b218      	sxth	r0, r3
 8003a04:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <drawTechyInterface+0x15c>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	5e9b      	ldrsh	r3, [r3, r2]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b0a      	subs	r3, #10
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	b219      	sxth	r1, r3
 8003a12:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <drawTechyInterface+0x160>)
 8003a14:	2208      	movs	r2, #8
 8003a16:	f7ff fe23 	bl	8003660 <drawCircle>

    // Display "Temp:" and "Humid:" labels
    int tempX = 10;
 8003a1a:	230a      	movs	r3, #10
 8003a1c:	60fb      	str	r3, [r7, #12]
	int humidX = _width / 2 + 10;
 8003a1e:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <drawTechyInterface+0x158>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	5e9b      	ldrsh	r3, [r3, r2]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	da00      	bge.n	8003a2a <drawTechyInterface+0xf2>
 8003a28:	3301      	adds	r3, #1
 8003a2a:	105b      	asrs	r3, r3, #1
 8003a2c:	b21b      	sxth	r3, r3
 8003a2e:	330a      	adds	r3, #10
 8003a30:	60bb      	str	r3, [r7, #8]
	int labelY = 30;
 8003a32:	231e      	movs	r3, #30
 8003a34:	607b      	str	r3, [r7, #4]
    ST7735_WriteString(tempX, labelY, "Temp:", Font_7x10, GREEN, BLACK);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	b298      	uxth	r0, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	b29c      	uxth	r4, r3
 8003a3e:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <drawTechyInterface+0x164>)
 8003a40:	4d17      	ldr	r5, [pc, #92]	; (8003aa0 <drawTechyInterface+0x168>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	9202      	str	r2, [sp, #8]
 8003a46:	22fc      	movs	r2, #252	; 0xfc
 8003a48:	00d2      	lsls	r2, r2, #3
 8003a4a:	9201      	str	r2, [sp, #4]
 8003a4c:	466a      	mov	r2, sp
 8003a4e:	6859      	ldr	r1, [r3, #4]
 8003a50:	6011      	str	r1, [r2, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	002a      	movs	r2, r5
 8003a56:	0021      	movs	r1, r4
 8003a58:	f000 fb74 	bl	8004144 <ST7735_WriteString>
	ST7735_WriteString(humidX, labelY, "Humid:", Font_7x10, GREEN, BLACK);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	b298      	uxth	r0, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	b29c      	uxth	r4, r3
 8003a64:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <drawTechyInterface+0x164>)
 8003a66:	4d0f      	ldr	r5, [pc, #60]	; (8003aa4 <drawTechyInterface+0x16c>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	9202      	str	r2, [sp, #8]
 8003a6c:	22fc      	movs	r2, #252	; 0xfc
 8003a6e:	00d2      	lsls	r2, r2, #3
 8003a70:	9201      	str	r2, [sp, #4]
 8003a72:	466a      	mov	r2, sp
 8003a74:	6859      	ldr	r1, [r3, #4]
 8003a76:	6011      	str	r1, [r2, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	002a      	movs	r2, r5
 8003a7c:	0021      	movs	r1, r4
 8003a7e:	f000 fb61 	bl	8004144 <ST7735_WriteString>
}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b004      	add	sp, #16
 8003a88:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	000007ff 	.word	0x000007ff
 8003a90:	20000210 	.word	0x20000210
 8003a94:	20000212 	.word	0x20000212
 8003a98:	0000ffe0 	.word	0x0000ffe0
 8003a9c:	20000004 	.word	0x20000004
 8003aa0:	08012ba8 	.word	0x08012ba8
 8003aa4:	08012bb0 	.word	0x08012bb0

08003aa8 <updateTemperatureAndHumidity>:
 * @brief  Updates the temperature and humidity display values.
 * @param  temp: The new temperature value to display.
 * @param  humid: The new humidity value to display.
 * @retval None
 */
void updateTemperatureAndHumidity(float temp, float humid) {
 8003aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aaa:	b093      	sub	sp, #76	; 0x4c
 8003aac:	af04      	add	r7, sp, #16
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
    char buffer[32]; // Buffer to hold text for temperature and humidity
    // Coordinates and size for the temperature and humidity update areas
    int labelY = 30; // Y-coordinate for labels
 8003ab2:	231e      	movs	r3, #30
 8003ab4:	637b      	str	r3, [r7, #52]	; 0x34
    int valueY = labelY + 20; // Y-coordinate for values, adjusted to be below labels
 8003ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab8:	3314      	adds	r3, #20
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30
    int tempX = 10;
 8003abc:	230a      	movs	r3, #10
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    int humidX = _width / 2 + 10;
 8003ac0:	4b34      	ldr	r3, [pc, #208]	; (8003b94 <updateTemperatureAndHumidity+0xec>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	5e9b      	ldrsh	r3, [r3, r2]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	da00      	bge.n	8003acc <updateTemperatureAndHumidity+0x24>
 8003aca:	3301      	adds	r3, #1
 8003acc:	105b      	asrs	r3, r3, #1
 8003ace:	b21b      	sxth	r3, r3
 8003ad0:	330a      	adds	r3, #10
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28

    // Update Temperature value
    ST7735_WriteString(tempX, valueY, "       ", Font_7x10, WHITE, BLACK);
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	b298      	uxth	r0, r3
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	b29c      	uxth	r4, r3
 8003adc:	4b2e      	ldr	r3, [pc, #184]	; (8003b98 <updateTemperatureAndHumidity+0xf0>)
 8003ade:	4d2f      	ldr	r5, [pc, #188]	; (8003b9c <updateTemperatureAndHumidity+0xf4>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	9202      	str	r2, [sp, #8]
 8003ae4:	4a2e      	ldr	r2, [pc, #184]	; (8003ba0 <updateTemperatureAndHumidity+0xf8>)
 8003ae6:	9201      	str	r2, [sp, #4]
 8003ae8:	466a      	mov	r2, sp
 8003aea:	6859      	ldr	r1, [r3, #4]
 8003aec:	6011      	str	r1, [r2, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	002a      	movs	r2, r5
 8003af2:	0021      	movs	r1, r4
 8003af4:	f000 fb26 	bl	8004144 <ST7735_WriteString>
    sprintf(buffer, "%.2fC", temp);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff f8f7 	bl	8002cec <__aeabi_f2d>
 8003afe:	0002      	movs	r2, r0
 8003b00:	000b      	movs	r3, r1
 8003b02:	4928      	ldr	r1, [pc, #160]	; (8003ba4 <updateTemperatureAndHumidity+0xfc>)
 8003b04:	2608      	movs	r6, #8
 8003b06:	19b8      	adds	r0, r7, r6
 8003b08:	f00b f9d4 	bl	800eeb4 <siprintf>
    ST7735_WriteString(tempX, valueY, buffer, Font_7x10, WHITE, BLACK);
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	b298      	uxth	r0, r3
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	b29c      	uxth	r4, r3
 8003b14:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <updateTemperatureAndHumidity+0xf0>)
 8003b16:	19bd      	adds	r5, r7, r6
 8003b18:	2200      	movs	r2, #0
 8003b1a:	9202      	str	r2, [sp, #8]
 8003b1c:	4a20      	ldr	r2, [pc, #128]	; (8003ba0 <updateTemperatureAndHumidity+0xf8>)
 8003b1e:	9201      	str	r2, [sp, #4]
 8003b20:	466a      	mov	r2, sp
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	6011      	str	r1, [r2, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	002a      	movs	r2, r5
 8003b2a:	0021      	movs	r1, r4
 8003b2c:	f000 fb0a 	bl	8004144 <ST7735_WriteString>

    // Update Humidity value
    ST7735_WriteString(humidX, valueY, "       ", Font_7x10, WHITE, BLACK);
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	b298      	uxth	r0, r3
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	b29c      	uxth	r4, r3
 8003b38:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <updateTemperatureAndHumidity+0xf0>)
 8003b3a:	4d18      	ldr	r5, [pc, #96]	; (8003b9c <updateTemperatureAndHumidity+0xf4>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	9202      	str	r2, [sp, #8]
 8003b40:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <updateTemperatureAndHumidity+0xf8>)
 8003b42:	9201      	str	r2, [sp, #4]
 8003b44:	466a      	mov	r2, sp
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	6011      	str	r1, [r2, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	002a      	movs	r2, r5
 8003b4e:	0021      	movs	r1, r4
 8003b50:	f000 faf8 	bl	8004144 <ST7735_WriteString>
    sprintf(buffer, "%.2f%%", humid);
 8003b54:	6838      	ldr	r0, [r7, #0]
 8003b56:	f7ff f8c9 	bl	8002cec <__aeabi_f2d>
 8003b5a:	0002      	movs	r2, r0
 8003b5c:	000b      	movs	r3, r1
 8003b5e:	4912      	ldr	r1, [pc, #72]	; (8003ba8 <updateTemperatureAndHumidity+0x100>)
 8003b60:	19b8      	adds	r0, r7, r6
 8003b62:	f00b f9a7 	bl	800eeb4 <siprintf>
    ST7735_WriteString(humidX, valueY, buffer, Font_7x10, WHITE, BLACK);
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	b298      	uxth	r0, r3
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	b29c      	uxth	r4, r3
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <updateTemperatureAndHumidity+0xf0>)
 8003b70:	19bd      	adds	r5, r7, r6
 8003b72:	2200      	movs	r2, #0
 8003b74:	9202      	str	r2, [sp, #8]
 8003b76:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <updateTemperatureAndHumidity+0xf8>)
 8003b78:	9201      	str	r2, [sp, #4]
 8003b7a:	466a      	mov	r2, sp
 8003b7c:	6859      	ldr	r1, [r3, #4]
 8003b7e:	6011      	str	r1, [r2, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	002a      	movs	r2, r5
 8003b84:	0021      	movs	r1, r4
 8003b86:	f000 fadd 	bl	8004144 <ST7735_WriteString>
}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b00f      	add	sp, #60	; 0x3c
 8003b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	20000210 	.word	0x20000210
 8003b98:	20000004 	.word	0x20000004
 8003b9c:	08012bb8 	.word	0x08012bb8
 8003ba0:	0000ffff 	.word	0x0000ffff
 8003ba4:	08012bc0 	.word	0x08012bc0
 8003ba8:	08012bc8 	.word	0x08012bc8

08003bac <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003bb0:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <ST7735_Select+0x18>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2140      	movs	r1, #64	; 0x40
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f003 f912 	bl	8006de0 <HAL_GPIO_WritePin>
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	50000400 	.word	0x50000400

08003bc8 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <ST7735_Unselect+0x18>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	2140      	movs	r1, #64	; 0x40
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f003 f904 	bl	8006de0 <HAL_GPIO_WritePin>
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	50000400 	.word	0x50000400

08003be4 <ST7735_Reset>:

void ST7735_Reset()
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <ST7735_Reset+0x28>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	2180      	movs	r1, #128	; 0x80
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f003 f8f6 	bl	8006de0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8003bf4:	2005      	movs	r0, #5
 8003bf6:	f002 fdeb 	bl	80067d0 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8003bfa:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <ST7735_Reset+0x28>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	2180      	movs	r1, #128	; 0x80
 8003c00:	0018      	movs	r0, r3
 8003c02:	f003 f8ed 	bl	8006de0 <HAL_GPIO_WritePin>
}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	50000800 	.word	0x50000800

08003c10 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	0002      	movs	r2, r0
 8003c18:	1dfb      	adds	r3, r7, #7
 8003c1a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	0059      	lsls	r1, r3, #1
 8003c20:	23a0      	movs	r3, #160	; 0xa0
 8003c22:	05db      	lsls	r3, r3, #23
 8003c24:	2200      	movs	r2, #0
 8003c26:	0018      	movs	r0, r3
 8003c28:	f003 f8da 	bl	8006de0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	425b      	negs	r3, r3
 8003c30:	1df9      	adds	r1, r7, #7
 8003c32:	4804      	ldr	r0, [pc, #16]	; (8003c44 <ST7735_WriteCommand+0x34>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	f004 ff0f 	bl	8008a58 <HAL_SPI_Transmit>
}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b002      	add	sp, #8
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	20000aa4 	.word	0x20000aa4

08003c48 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	0059      	lsls	r1, r3, #1
 8003c56:	23a0      	movs	r3, #160	; 0xa0
 8003c58:	05db      	lsls	r3, r3, #23
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f003 f8bf 	bl	8006de0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	2301      	movs	r3, #1
 8003c68:	425b      	negs	r3, r3
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4803      	ldr	r0, [pc, #12]	; (8003c7c <ST7735_WriteData+0x34>)
 8003c6e:	f004 fef3 	bl	8008a58 <HAL_SPI_Transmit>
}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b002      	add	sp, #8
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	20000aa4 	.word	0x20000aa4

08003c80 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8003c80:	b590      	push	{r4, r7, lr}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	220f      	movs	r2, #15
 8003c90:	18ba      	adds	r2, r7, r2
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8003c96:	e04a      	b.n	8003d2e <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	607a      	str	r2, [r7, #4]
 8003c9e:	210b      	movs	r1, #11
 8003ca0:	187a      	adds	r2, r7, r1
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8003ca6:	187b      	adds	r3, r7, r1
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	0018      	movs	r0, r3
 8003cac:	f7ff ffb0 	bl	8003c10 <ST7735_WriteCommand>

        numArgs = *addr++;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	200a      	movs	r0, #10
 8003cb8:	183a      	adds	r2, r7, r0
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003cbe:	183b      	adds	r3, r7, r0
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	230c      	movs	r3, #12
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	2180      	movs	r1, #128	; 0x80
 8003cca:	400a      	ands	r2, r1
 8003ccc:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8003cce:	183b      	adds	r3, r7, r0
 8003cd0:	183a      	adds	r2, r7, r0
 8003cd2:	7812      	ldrb	r2, [r2, #0]
 8003cd4:	217f      	movs	r1, #127	; 0x7f
 8003cd6:	400a      	ands	r2, r1
 8003cd8:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8003cda:	183b      	adds	r3, r7, r0
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00c      	beq.n	8003cfc <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8003ce2:	0004      	movs	r4, r0
 8003ce4:	183b      	adds	r3, r7, r0
 8003ce6:	781a      	ldrb	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	0011      	movs	r1, r2
 8003cec:	0018      	movs	r0, r3
 8003cee:	f7ff ffab 	bl	8003c48 <ST7735_WriteData>
            addr += numArgs;
 8003cf2:	193b      	adds	r3, r7, r4
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	18d3      	adds	r3, r2, r3
 8003cfa:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8003cfc:	210c      	movs	r1, #12
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d013      	beq.n	8003d2e <DisplayInit+0xae>
            ms = *addr++;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	187b      	adds	r3, r7, r1
 8003d10:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	2bff      	cmp	r3, #255	; 0xff
 8003d18:	d103      	bne.n	8003d22 <DisplayInit+0xa2>
 8003d1a:	187b      	adds	r3, r7, r1
 8003d1c:	22fa      	movs	r2, #250	; 0xfa
 8003d1e:	0052      	lsls	r2, r2, #1
 8003d20:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8003d22:	230c      	movs	r3, #12
 8003d24:	18fb      	adds	r3, r7, r3
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f002 fd51 	bl	80067d0 <HAL_Delay>
    while(numCommands--) {
 8003d2e:	220f      	movs	r2, #15
 8003d30:	18bb      	adds	r3, r7, r2
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	18ba      	adds	r2, r7, r2
 8003d36:	1e59      	subs	r1, r3, #1
 8003d38:	7011      	strb	r1, [r2, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1ac      	bne.n	8003c98 <DisplayInit+0x18>
        }
    }
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	46c0      	nop			; (mov r8, r8)
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b005      	add	sp, #20
 8003d46:	bd90      	pop	{r4, r7, pc}

08003d48 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8003d48:	b5b0      	push	{r4, r5, r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	0005      	movs	r5, r0
 8003d50:	000c      	movs	r4, r1
 8003d52:	0010      	movs	r0, r2
 8003d54:	0019      	movs	r1, r3
 8003d56:	1dfb      	adds	r3, r7, #7
 8003d58:	1c2a      	adds	r2, r5, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	1dbb      	adds	r3, r7, #6
 8003d5e:	1c22      	adds	r2, r4, #0
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	1d7b      	adds	r3, r7, #5
 8003d64:	1c02      	adds	r2, r0, #0
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	1c0a      	adds	r2, r1, #0
 8003d6c:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003d6e:	202a      	movs	r0, #42	; 0x2a
 8003d70:	f7ff ff4e 	bl	8003c10 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8003d74:	210c      	movs	r1, #12
 8003d76:	187b      	adds	r3, r7, r1
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <ST7735_SetAddressWindow+0xa8>)
 8003d7e:	781a      	ldrb	r2, [r3, #0]
 8003d80:	1dfb      	adds	r3, r7, #7
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	18d3      	adds	r3, r2, r3
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	187b      	adds	r3, r7, r1
 8003d8a:	705a      	strb	r2, [r3, #1]
 8003d8c:	187b      	adds	r3, r7, r1
 8003d8e:	2200      	movs	r2, #0
 8003d90:	709a      	strb	r2, [r3, #2]
 8003d92:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <ST7735_SetAddressWindow+0xa8>)
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	1d7b      	adds	r3, r7, #5
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	18d3      	adds	r3, r2, r3
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	187b      	adds	r3, r7, r1
 8003da0:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003da2:	000c      	movs	r4, r1
 8003da4:	187b      	adds	r3, r7, r1
 8003da6:	2104      	movs	r1, #4
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7ff ff4d 	bl	8003c48 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003dae:	202b      	movs	r0, #43	; 0x2b
 8003db0:	f7ff ff2e 	bl	8003c10 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8003db4:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <ST7735_SetAddressWindow+0xac>)
 8003db6:	781a      	ldrb	r2, [r3, #0]
 8003db8:	1dbb      	adds	r3, r7, #6
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	18d3      	adds	r3, r2, r3
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	0021      	movs	r1, r4
 8003dc2:	187b      	adds	r3, r7, r1
 8003dc4:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <ST7735_SetAddressWindow+0xac>)
 8003dc8:	781a      	ldrb	r2, [r3, #0]
 8003dca:	1d3b      	adds	r3, r7, #4
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	18d3      	adds	r3, r2, r3
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	187b      	adds	r3, r7, r1
 8003dd4:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003dd6:	187b      	adds	r3, r7, r1
 8003dd8:	2104      	movs	r1, #4
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f7ff ff34 	bl	8003c48 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8003de0:	202c      	movs	r0, #44	; 0x2c
 8003de2:	f7ff ff15 	bl	8003c10 <ST7735_WriteCommand>
}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b004      	add	sp, #16
 8003dec:	bdb0      	pop	{r4, r5, r7, pc}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	20000217 	.word	0x20000217
 8003df4:	20000218 	.word	0x20000218

08003df8 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	0002      	movs	r2, r0
 8003e00:	1dfb      	adds	r3, r7, #7
 8003e02:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8003e04:	f7ff fed2 	bl	8003bac <ST7735_Select>
    ST7735_Reset();
 8003e08:	f7ff feec 	bl	8003be4 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8003e0c:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <ST7735_Init+0x50>)
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7ff ff36 	bl	8003c80 <DisplayInit>
    DisplayInit(init_cmds2);
 8003e14:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <ST7735_Init+0x54>)
 8003e16:	0018      	movs	r0, r3
 8003e18:	f7ff ff32 	bl	8003c80 <DisplayInit>
    DisplayInit(init_cmds3);
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <ST7735_Init+0x58>)
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f7ff ff2e 	bl	8003c80 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 2;
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <ST7735_Init+0x5c>)
 8003e26:	2202      	movs	r2, #2
 8003e28:	701a      	strb	r2, [r3, #0]
    _rowstart = 1;
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <ST7735_Init+0x60>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8003e30:	1dfb      	adds	r3, r7, #7
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	0018      	movs	r0, r3
 8003e36:	f000 f811 	bl	8003e5c <ST7735_SetRotation>
    ST7735_Unselect();
 8003e3a:	f7ff fec5 	bl	8003bc8 <ST7735_Unselect>

}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b002      	add	sp, #8
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	08012e6c 	.word	0x08012e6c
 8003e4c:	08012ea4 	.word	0x08012ea4
 8003e50:	08012eb4 	.word	0x08012eb4
 8003e54:	20000215 	.word	0x20000215
 8003e58:	20000216 	.word	0x20000216

08003e5c <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	0002      	movs	r2, r0
 8003e64:	1dfb      	adds	r3, r7, #7
 8003e66:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8003e68:	230f      	movs	r3, #15
 8003e6a:	18fb      	adds	r3, r7, r3
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8003e70:	1dfb      	adds	r3, r7, #7
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2203      	movs	r2, #3
 8003e76:	4013      	ands	r3, r2
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <ST7735_SetRotation+0xf8>)
 8003e7c:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8003e7e:	4b35      	ldr	r3, [pc, #212]	; (8003f54 <ST7735_SetRotation+0xf8>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d041      	beq.n	8003f0a <ST7735_SetRotation+0xae>
 8003e86:	dc53      	bgt.n	8003f30 <ST7735_SetRotation+0xd4>
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d02b      	beq.n	8003ee4 <ST7735_SetRotation+0x88>
 8003e8c:	dc50      	bgt.n	8003f30 <ST7735_SetRotation+0xd4>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <ST7735_SetRotation+0x3c>
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d013      	beq.n	8003ebe <ST7735_SetRotation+0x62>
 8003e96:	e04b      	b.n	8003f30 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8003e98:	230f      	movs	r3, #15
 8003e9a:	18fb      	adds	r3, r7, r3
 8003e9c:	22c0      	movs	r2, #192	; 0xc0
 8003e9e:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8003ea0:	4b2d      	ldr	r3, [pc, #180]	; (8003f58 <ST7735_SetRotation+0xfc>)
 8003ea2:	22a0      	movs	r2, #160	; 0xa0
 8003ea4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003ea6:	4b2d      	ldr	r3, [pc, #180]	; (8003f5c <ST7735_SetRotation+0x100>)
 8003ea8:	2280      	movs	r2, #128	; 0x80
 8003eaa:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8003eac:	4b2c      	ldr	r3, [pc, #176]	; (8003f60 <ST7735_SetRotation+0x104>)
 8003eae:	781a      	ldrb	r2, [r3, #0]
 8003eb0:	4b2c      	ldr	r3, [pc, #176]	; (8003f64 <ST7735_SetRotation+0x108>)
 8003eb2:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8003eb4:	4b2c      	ldr	r3, [pc, #176]	; (8003f68 <ST7735_SetRotation+0x10c>)
 8003eb6:	781a      	ldrb	r2, [r3, #0]
 8003eb8:	4b2c      	ldr	r3, [pc, #176]	; (8003f6c <ST7735_SetRotation+0x110>)
 8003eba:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003ebc:	e038      	b.n	8003f30 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8003ebe:	230f      	movs	r3, #15
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	22a0      	movs	r2, #160	; 0xa0
 8003ec4:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8003ec6:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <ST7735_SetRotation+0x100>)
 8003ec8:	22a0      	movs	r2, #160	; 0xa0
 8003eca:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8003ecc:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <ST7735_SetRotation+0xfc>)
 8003ece:	2280      	movs	r2, #128	; 0x80
 8003ed0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8003ed2:	4b23      	ldr	r3, [pc, #140]	; (8003f60 <ST7735_SetRotation+0x104>)
 8003ed4:	781a      	ldrb	r2, [r3, #0]
 8003ed6:	4b25      	ldr	r3, [pc, #148]	; (8003f6c <ST7735_SetRotation+0x110>)
 8003ed8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8003eda:	4b23      	ldr	r3, [pc, #140]	; (8003f68 <ST7735_SetRotation+0x10c>)
 8003edc:	781a      	ldrb	r2, [r3, #0]
 8003ede:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <ST7735_SetRotation+0x108>)
 8003ee0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003ee2:	e025      	b.n	8003f30 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8003ee4:	230f      	movs	r3, #15
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8003eec:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <ST7735_SetRotation+0xfc>)
 8003eee:	22a0      	movs	r2, #160	; 0xa0
 8003ef0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003ef2:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <ST7735_SetRotation+0x100>)
 8003ef4:	2280      	movs	r2, #128	; 0x80
 8003ef6:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8003ef8:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <ST7735_SetRotation+0x104>)
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	4b19      	ldr	r3, [pc, #100]	; (8003f64 <ST7735_SetRotation+0x108>)
 8003efe:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8003f00:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <ST7735_SetRotation+0x10c>)
 8003f02:	781a      	ldrb	r2, [r3, #0]
 8003f04:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <ST7735_SetRotation+0x110>)
 8003f06:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003f08:	e012      	b.n	8003f30 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8003f0a:	230f      	movs	r3, #15
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	2260      	movs	r2, #96	; 0x60
 8003f10:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8003f12:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <ST7735_SetRotation+0x100>)
 8003f14:	22a0      	movs	r2, #160	; 0xa0
 8003f16:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8003f18:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <ST7735_SetRotation+0xfc>)
 8003f1a:	2280      	movs	r2, #128	; 0x80
 8003f1c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8003f1e:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <ST7735_SetRotation+0x104>)
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <ST7735_SetRotation+0x110>)
 8003f24:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <ST7735_SetRotation+0x10c>)
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <ST7735_SetRotation+0x108>)
 8003f2c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003f2e:	46c0      	nop			; (mov r8, r8)
  }
  ST7735_Select();
 8003f30:	f7ff fe3c 	bl	8003bac <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8003f34:	2036      	movs	r0, #54	; 0x36
 8003f36:	f7ff fe6b 	bl	8003c10 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8003f3a:	230f      	movs	r3, #15
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	2101      	movs	r1, #1
 8003f40:	0018      	movs	r0, r3
 8003f42:	f7ff fe81 	bl	8003c48 <ST7735_WriteData>
  ST7735_Unselect();
 8003f46:	f7ff fe3f 	bl	8003bc8 <ST7735_Unselect>
}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b004      	add	sp, #16
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	20000214 	.word	0x20000214
 8003f58:	20000212 	.word	0x20000212
 8003f5c:	20000210 	.word	0x20000210
 8003f60:	20000215 	.word	0x20000215
 8003f64:	20000217 	.word	0x20000217
 8003f68:	20000216 	.word	0x20000216
 8003f6c:	20000218 	.word	0x20000218

08003f70 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8003f70:	b590      	push	{r4, r7, lr}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	0004      	movs	r4, r0
 8003f78:	0008      	movs	r0, r1
 8003f7a:	0011      	movs	r1, r2
 8003f7c:	1dbb      	adds	r3, r7, #6
 8003f7e:	1c22      	adds	r2, r4, #0
 8003f80:	801a      	strh	r2, [r3, #0]
 8003f82:	1d3b      	adds	r3, r7, #4
 8003f84:	1c02      	adds	r2, r0, #0
 8003f86:	801a      	strh	r2, [r3, #0]
 8003f88:	1cbb      	adds	r3, r7, #2
 8003f8a:	1c0a      	adds	r2, r1, #0
 8003f8c:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8003f8e:	1dbb      	adds	r3, r7, #6
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	4a1c      	ldr	r2, [pc, #112]	; (8004004 <ST7735_DrawPixel+0x94>)
 8003f94:	2100      	movs	r1, #0
 8003f96:	5e52      	ldrsh	r2, [r2, r1]
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	da2f      	bge.n	8003ffc <ST7735_DrawPixel+0x8c>
 8003f9c:	1d3b      	adds	r3, r7, #4
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	4a19      	ldr	r2, [pc, #100]	; (8004008 <ST7735_DrawPixel+0x98>)
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	5e52      	ldrsh	r2, [r2, r1]
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	da28      	bge.n	8003ffc <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8003faa:	f7ff fdff 	bl	8003bac <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8003fae:	1dbb      	adds	r3, r7, #6
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	b2d8      	uxtb	r0, r3
 8003fb4:	1d3b      	adds	r3, r7, #4
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	b2d9      	uxtb	r1, r3
 8003fba:	1dbb      	adds	r3, r7, #6
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	3301      	adds	r3, #1
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	f7ff febb 	bl	8003d48 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8003fd2:	1cbb      	adds	r3, r7, #2
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	210c      	movs	r1, #12
 8003fde:	187b      	adds	r3, r7, r1
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	1cbb      	adds	r3, r7, #2
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	187b      	adds	r3, r7, r1
 8003fea:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	2102      	movs	r1, #2
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7ff fe29 	bl	8003c48 <ST7735_WriteData>

    ST7735_Unselect();
 8003ff6:	f7ff fde7 	bl	8003bc8 <ST7735_Unselect>
 8003ffa:	e000      	b.n	8003ffe <ST7735_DrawPixel+0x8e>
        return;
 8003ffc:	46c0      	nop			; (mov r8, r8)
}
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b005      	add	sp, #20
 8004002:	bd90      	pop	{r4, r7, pc}
 8004004:	20000210 	.word	0x20000210
 8004008:	20000212 	.word	0x20000212

0800400c <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800400c:	b082      	sub	sp, #8
 800400e:	b5b0      	push	{r4, r5, r7, lr}
 8004010:	b088      	sub	sp, #32
 8004012:	af00      	add	r7, sp, #0
 8004014:	0004      	movs	r4, r0
 8004016:	0008      	movs	r0, r1
 8004018:	0011      	movs	r1, r2
 800401a:	2204      	movs	r2, #4
 800401c:	2530      	movs	r5, #48	; 0x30
 800401e:	1952      	adds	r2, r2, r5
 8004020:	19d2      	adds	r2, r2, r7
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	1dbb      	adds	r3, r7, #6
 8004026:	1c22      	adds	r2, r4, #0
 8004028:	801a      	strh	r2, [r3, #0]
 800402a:	1d3b      	adds	r3, r7, #4
 800402c:	1c02      	adds	r2, r0, #0
 800402e:	801a      	strh	r2, [r3, #0]
 8004030:	1cfb      	adds	r3, r7, #3
 8004032:	1c0a      	adds	r2, r1, #0
 8004034:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8004036:	1dbb      	adds	r3, r7, #6
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	b2d8      	uxtb	r0, r3
 800403c:	1d3b      	adds	r3, r7, #4
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	b2d9      	uxtb	r1, r3
 8004042:	1dbb      	adds	r3, r7, #6
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b2da      	uxtb	r2, r3
 8004048:	2304      	movs	r3, #4
 800404a:	195b      	adds	r3, r3, r5
 800404c:	19db      	adds	r3, r3, r7
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	18d3      	adds	r3, r2, r3
 8004052:	b2db      	uxtb	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b2dc      	uxtb	r4, r3
 8004058:	1d3b      	adds	r3, r7, #4
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	2304      	movs	r3, #4
 8004060:	195b      	adds	r3, r3, r5
 8004062:	19db      	adds	r3, r3, r7
 8004064:	785b      	ldrb	r3, [r3, #1]
 8004066:	18d3      	adds	r3, r2, r3
 8004068:	b2db      	uxtb	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b2db      	uxtb	r3, r3
 800406e:	0022      	movs	r2, r4
 8004070:	f7ff fe6a 	bl	8003d48 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	e053      	b.n	8004122 <ST7735_WriteChar+0x116>
        b = font.data[(ch - 32) * font.height + i];
 800407a:	2304      	movs	r3, #4
 800407c:	2030      	movs	r0, #48	; 0x30
 800407e:	181b      	adds	r3, r3, r0
 8004080:	19db      	adds	r3, r3, r7
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	1cfb      	adds	r3, r7, #3
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	3b20      	subs	r3, #32
 800408a:	2104      	movs	r1, #4
 800408c:	1809      	adds	r1, r1, r0
 800408e:	19c9      	adds	r1, r1, r7
 8004090:	7849      	ldrb	r1, [r1, #1]
 8004092:	434b      	muls	r3, r1
 8004094:	0019      	movs	r1, r3
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	18cb      	adds	r3, r1, r3
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	18d3      	adds	r3, r2, r3
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80040a2:	2300      	movs	r3, #0
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	e030      	b.n	800410a <ST7735_WriteChar+0xfe>
            if((b << j) & 0x8000)  {
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	409a      	lsls	r2, r3
 80040ae:	2380      	movs	r3, #128	; 0x80
 80040b0:	021b      	lsls	r3, r3, #8
 80040b2:	4013      	ands	r3, r2
 80040b4:	d013      	beq.n	80040de <ST7735_WriteChar+0xd2>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80040b6:	203c      	movs	r0, #60	; 0x3c
 80040b8:	183b      	adds	r3, r7, r0
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	0a1b      	lsrs	r3, r3, #8
 80040be:	b29b      	uxth	r3, r3
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	2110      	movs	r1, #16
 80040c4:	187b      	adds	r3, r7, r1
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	183b      	adds	r3, r7, r0
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	187b      	adds	r3, r7, r1
 80040d0:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 80040d2:	187b      	adds	r3, r7, r1
 80040d4:	2102      	movs	r1, #2
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7ff fdb6 	bl	8003c48 <ST7735_WriteData>
 80040dc:	e012      	b.n	8004104 <ST7735_WriteChar+0xf8>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80040de:	2040      	movs	r0, #64	; 0x40
 80040e0:	183b      	adds	r3, r7, r0
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	0a1b      	lsrs	r3, r3, #8
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	210c      	movs	r1, #12
 80040ec:	187b      	adds	r3, r7, r1
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	183b      	adds	r3, r7, r0
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	187b      	adds	r3, r7, r1
 80040f8:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 80040fa:	187b      	adds	r3, r7, r1
 80040fc:	2102      	movs	r1, #2
 80040fe:	0018      	movs	r0, r3
 8004100:	f7ff fda2 	bl	8003c48 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	3301      	adds	r3, #1
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	2304      	movs	r3, #4
 800410c:	2230      	movs	r2, #48	; 0x30
 800410e:	189b      	adds	r3, r3, r2
 8004110:	19db      	adds	r3, r3, r7
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	001a      	movs	r2, r3
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	4293      	cmp	r3, r2
 800411a:	d3c5      	bcc.n	80040a8 <ST7735_WriteChar+0x9c>
    for(i = 0; i < font.height; i++) {
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	3301      	adds	r3, #1
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	2304      	movs	r3, #4
 8004124:	2230      	movs	r2, #48	; 0x30
 8004126:	189b      	adds	r3, r3, r2
 8004128:	19db      	adds	r3, r3, r7
 800412a:	785b      	ldrb	r3, [r3, #1]
 800412c:	001a      	movs	r2, r3
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	4293      	cmp	r3, r2
 8004132:	d3a2      	bcc.n	800407a <ST7735_WriteChar+0x6e>
            }
        }
    }
}
 8004134:	46c0      	nop			; (mov r8, r8)
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	46bd      	mov	sp, r7
 800413a:	b008      	add	sp, #32
 800413c:	bcb0      	pop	{r4, r5, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	b002      	add	sp, #8
 8004142:	4718      	bx	r3

08004144 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8004144:	b082      	sub	sp, #8
 8004146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004148:	b087      	sub	sp, #28
 800414a:	af04      	add	r7, sp, #16
 800414c:	603a      	str	r2, [r7, #0]
 800414e:	2204      	movs	r2, #4
 8004150:	2418      	movs	r4, #24
 8004152:	1912      	adds	r2, r2, r4
 8004154:	2408      	movs	r4, #8
 8004156:	46a4      	mov	ip, r4
 8004158:	44bc      	add	ip, r7
 800415a:	4462      	add	r2, ip
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	1dbb      	adds	r3, r7, #6
 8004160:	1c02      	adds	r2, r0, #0
 8004162:	801a      	strh	r2, [r3, #0]
 8004164:	1d3b      	adds	r3, r7, #4
 8004166:	1c0a      	adds	r2, r1, #0
 8004168:	801a      	strh	r2, [r3, #0]
    ST7735_Select();
 800416a:	f7ff fd1f 	bl	8003bac <ST7735_Select>

    while(*str) {
 800416e:	e067      	b.n	8004240 <ST7735_WriteString+0xfc>
        if(x + font.width >= _width) {
 8004170:	1dbb      	adds	r3, r7, #6
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	2204      	movs	r2, #4
 8004176:	2118      	movs	r1, #24
 8004178:	1852      	adds	r2, r2, r1
 800417a:	2008      	movs	r0, #8
 800417c:	4684      	mov	ip, r0
 800417e:	44bc      	add	ip, r7
 8004180:	4462      	add	r2, ip
 8004182:	7812      	ldrb	r2, [r2, #0]
 8004184:	189b      	adds	r3, r3, r2
 8004186:	4a36      	ldr	r2, [pc, #216]	; (8004260 <ST7735_WriteString+0x11c>)
 8004188:	2000      	movs	r0, #0
 800418a:	5e12      	ldrsh	r2, [r2, r0]
 800418c:	4293      	cmp	r3, r2
 800418e:	db27      	blt.n	80041e0 <ST7735_WriteString+0x9c>
            x = 0;
 8004190:	1dbb      	adds	r3, r7, #6
 8004192:	2200      	movs	r2, #0
 8004194:	801a      	strh	r2, [r3, #0]
            y += font.height;
 8004196:	2304      	movs	r3, #4
 8004198:	0008      	movs	r0, r1
 800419a:	185b      	adds	r3, r3, r1
 800419c:	2208      	movs	r2, #8
 800419e:	4694      	mov	ip, r2
 80041a0:	44bc      	add	ip, r7
 80041a2:	4463      	add	r3, ip
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	b299      	uxth	r1, r3
 80041a8:	1d3b      	adds	r3, r7, #4
 80041aa:	1d3a      	adds	r2, r7, #4
 80041ac:	8812      	ldrh	r2, [r2, #0]
 80041ae:	188a      	adds	r2, r1, r2
 80041b0:	801a      	strh	r2, [r3, #0]
            if(y + font.height >= _height) {
 80041b2:	1d3b      	adds	r3, r7, #4
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	2204      	movs	r2, #4
 80041b8:	1812      	adds	r2, r2, r0
 80041ba:	2108      	movs	r1, #8
 80041bc:	468c      	mov	ip, r1
 80041be:	44bc      	add	ip, r7
 80041c0:	4462      	add	r2, ip
 80041c2:	7852      	ldrb	r2, [r2, #1]
 80041c4:	189b      	adds	r3, r3, r2
 80041c6:	4a27      	ldr	r2, [pc, #156]	; (8004264 <ST7735_WriteString+0x120>)
 80041c8:	2100      	movs	r1, #0
 80041ca:	5e52      	ldrsh	r2, [r2, r1]
 80041cc:	4293      	cmp	r3, r2
 80041ce:	da3c      	bge.n	800424a <ST7735_WriteString+0x106>
                break;
            }

            if(*str == ' ') {
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d103      	bne.n	80041e0 <ST7735_WriteString+0x9c>
                // skip spaces in the beginning of the new line
                str++;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	3301      	adds	r3, #1
 80041dc:	603b      	str	r3, [r7, #0]
                continue;
 80041de:	e02f      	b.n	8004240 <ST7735_WriteString+0xfc>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781d      	ldrb	r5, [r3, #0]
 80041e4:	2304      	movs	r3, #4
 80041e6:	2618      	movs	r6, #24
 80041e8:	199b      	adds	r3, r3, r6
 80041ea:	2208      	movs	r2, #8
 80041ec:	4694      	mov	ip, r2
 80041ee:	44bc      	add	ip, r7
 80041f0:	4463      	add	r3, ip
 80041f2:	1d3a      	adds	r2, r7, #4
 80041f4:	8814      	ldrh	r4, [r2, #0]
 80041f6:	1dba      	adds	r2, r7, #6
 80041f8:	8810      	ldrh	r0, [r2, #0]
 80041fa:	2228      	movs	r2, #40	; 0x28
 80041fc:	2108      	movs	r1, #8
 80041fe:	1852      	adds	r2, r2, r1
 8004200:	19d2      	adds	r2, r2, r7
 8004202:	8812      	ldrh	r2, [r2, #0]
 8004204:	9202      	str	r2, [sp, #8]
 8004206:	2224      	movs	r2, #36	; 0x24
 8004208:	1852      	adds	r2, r2, r1
 800420a:	19d2      	adds	r2, r2, r7
 800420c:	8812      	ldrh	r2, [r2, #0]
 800420e:	9201      	str	r2, [sp, #4]
 8004210:	466a      	mov	r2, sp
 8004212:	6859      	ldr	r1, [r3, #4]
 8004214:	6011      	str	r1, [r2, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	002a      	movs	r2, r5
 800421a:	0021      	movs	r1, r4
 800421c:	f7ff fef6 	bl	800400c <ST7735_WriteChar>
        x += font.width;
 8004220:	2304      	movs	r3, #4
 8004222:	199b      	adds	r3, r3, r6
 8004224:	2208      	movs	r2, #8
 8004226:	4694      	mov	ip, r2
 8004228:	44bc      	add	ip, r7
 800422a:	4463      	add	r3, ip
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	b299      	uxth	r1, r3
 8004230:	1dbb      	adds	r3, r7, #6
 8004232:	1dba      	adds	r2, r7, #6
 8004234:	8812      	ldrh	r2, [r2, #0]
 8004236:	188a      	adds	r2, r1, r2
 8004238:	801a      	strh	r2, [r3, #0]
        str++;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	3301      	adds	r3, #1
 800423e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d193      	bne.n	8004170 <ST7735_WriteString+0x2c>
 8004248:	e000      	b.n	800424c <ST7735_WriteString+0x108>
                break;
 800424a:	46c0      	nop			; (mov r8, r8)
    }

    ST7735_Unselect();
 800424c:	f7ff fcbc 	bl	8003bc8 <ST7735_Unselect>
}
 8004250:	46c0      	nop			; (mov r8, r8)
 8004252:	46bd      	mov	sp, r7
 8004254:	b003      	add	sp, #12
 8004256:	bcf0      	pop	{r4, r5, r6, r7}
 8004258:	bc08      	pop	{r3}
 800425a:	b002      	add	sp, #8
 800425c:	4718      	bx	r3
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	20000210 	.word	0x20000210
 8004264:	20000212 	.word	0x20000212

08004268 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8004268:	b5b0      	push	{r4, r5, r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	0005      	movs	r5, r0
 8004270:	000c      	movs	r4, r1
 8004272:	0010      	movs	r0, r2
 8004274:	0019      	movs	r1, r3
 8004276:	1dbb      	adds	r3, r7, #6
 8004278:	1c2a      	adds	r2, r5, #0
 800427a:	801a      	strh	r2, [r3, #0]
 800427c:	1d3b      	adds	r3, r7, #4
 800427e:	1c22      	adds	r2, r4, #0
 8004280:	801a      	strh	r2, [r3, #0]
 8004282:	1cbb      	adds	r3, r7, #2
 8004284:	1c02      	adds	r2, r0, #0
 8004286:	801a      	strh	r2, [r3, #0]
 8004288:	003b      	movs	r3, r7
 800428a:	1c0a      	adds	r2, r1, #0
 800428c:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 800428e:	1dbb      	adds	r3, r7, #6
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	4a4a      	ldr	r2, [pc, #296]	; (80043bc <ST7735_FillRectangle+0x154>)
 8004294:	2100      	movs	r1, #0
 8004296:	5e52      	ldrsh	r2, [r2, r1]
 8004298:	4293      	cmp	r3, r2
 800429a:	db00      	blt.n	800429e <ST7735_FillRectangle+0x36>
 800429c:	e089      	b.n	80043b2 <ST7735_FillRectangle+0x14a>
 800429e:	1d3b      	adds	r3, r7, #4
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	4a47      	ldr	r2, [pc, #284]	; (80043c0 <ST7735_FillRectangle+0x158>)
 80042a4:	2100      	movs	r1, #0
 80042a6:	5e52      	ldrsh	r2, [r2, r1]
 80042a8:	4293      	cmp	r3, r2
 80042aa:	db00      	blt.n	80042ae <ST7735_FillRectangle+0x46>
 80042ac:	e081      	b.n	80043b2 <ST7735_FillRectangle+0x14a>
    if((x + w - 1) >= _width) w = _width - x;
 80042ae:	1dbb      	adds	r3, r7, #6
 80042b0:	881a      	ldrh	r2, [r3, #0]
 80042b2:	1cbb      	adds	r3, r7, #2
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	18d3      	adds	r3, r2, r3
 80042b8:	4a40      	ldr	r2, [pc, #256]	; (80043bc <ST7735_FillRectangle+0x154>)
 80042ba:	2100      	movs	r1, #0
 80042bc:	5e52      	ldrsh	r2, [r2, r1]
 80042be:	4293      	cmp	r3, r2
 80042c0:	dd08      	ble.n	80042d4 <ST7735_FillRectangle+0x6c>
 80042c2:	4b3e      	ldr	r3, [pc, #248]	; (80043bc <ST7735_FillRectangle+0x154>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	5e9b      	ldrsh	r3, [r3, r2]
 80042c8:	b299      	uxth	r1, r3
 80042ca:	1cbb      	adds	r3, r7, #2
 80042cc:	1dba      	adds	r2, r7, #6
 80042ce:	8812      	ldrh	r2, [r2, #0]
 80042d0:	1a8a      	subs	r2, r1, r2
 80042d2:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 80042d4:	1d3b      	adds	r3, r7, #4
 80042d6:	881a      	ldrh	r2, [r3, #0]
 80042d8:	003b      	movs	r3, r7
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	18d3      	adds	r3, r2, r3
 80042de:	4a38      	ldr	r2, [pc, #224]	; (80043c0 <ST7735_FillRectangle+0x158>)
 80042e0:	2100      	movs	r1, #0
 80042e2:	5e52      	ldrsh	r2, [r2, r1]
 80042e4:	4293      	cmp	r3, r2
 80042e6:	dd08      	ble.n	80042fa <ST7735_FillRectangle+0x92>
 80042e8:	4b35      	ldr	r3, [pc, #212]	; (80043c0 <ST7735_FillRectangle+0x158>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	5e9b      	ldrsh	r3, [r3, r2]
 80042ee:	b299      	uxth	r1, r3
 80042f0:	003b      	movs	r3, r7
 80042f2:	1d3a      	adds	r2, r7, #4
 80042f4:	8812      	ldrh	r2, [r2, #0]
 80042f6:	1a8a      	subs	r2, r1, r2
 80042f8:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 80042fa:	f7ff fc57 	bl	8003bac <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80042fe:	1dbb      	adds	r3, r7, #6
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b2d8      	uxtb	r0, r3
 8004304:	1d3b      	adds	r3, r7, #4
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b2d9      	uxtb	r1, r3
 800430a:	1dbb      	adds	r3, r7, #6
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b2da      	uxtb	r2, r3
 8004310:	1cbb      	adds	r3, r7, #2
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	18d3      	adds	r3, r2, r3
 8004318:	b2db      	uxtb	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b2dc      	uxtb	r4, r3
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b2da      	uxtb	r2, r3
 8004324:	003b      	movs	r3, r7
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	18d3      	adds	r3, r2, r3
 800432c:	b2db      	uxtb	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	0022      	movs	r2, r4
 8004334:	f7ff fd08 	bl	8003d48 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8004338:	2120      	movs	r1, #32
 800433a:	187b      	adds	r3, r7, r1
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	0a1b      	lsrs	r3, r3, #8
 8004340:	b29b      	uxth	r3, r3
 8004342:	b2da      	uxtb	r2, r3
 8004344:	200c      	movs	r0, #12
 8004346:	183b      	adds	r3, r7, r0
 8004348:	701a      	strb	r2, [r3, #0]
 800434a:	187b      	adds	r3, r7, r1
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	183b      	adds	r3, r7, r0
 8004352:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	0059      	lsls	r1, r3, #1
 8004358:	23a0      	movs	r3, #160	; 0xa0
 800435a:	05db      	lsls	r3, r3, #23
 800435c:	2201      	movs	r2, #1
 800435e:	0018      	movs	r0, r3
 8004360:	f002 fd3e 	bl	8006de0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8004364:	1d3b      	adds	r3, r7, #4
 8004366:	003a      	movs	r2, r7
 8004368:	8812      	ldrh	r2, [r2, #0]
 800436a:	801a      	strh	r2, [r3, #0]
 800436c:	e01a      	b.n	80043a4 <ST7735_FillRectangle+0x13c>
        for(x = w; x > 0; x--) {
 800436e:	1dbb      	adds	r3, r7, #6
 8004370:	1cba      	adds	r2, r7, #2
 8004372:	8812      	ldrh	r2, [r2, #0]
 8004374:	801a      	strh	r2, [r3, #0]
 8004376:	e00c      	b.n	8004392 <ST7735_FillRectangle+0x12a>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8004378:	2301      	movs	r3, #1
 800437a:	425b      	negs	r3, r3
 800437c:	220c      	movs	r2, #12
 800437e:	18b9      	adds	r1, r7, r2
 8004380:	4810      	ldr	r0, [pc, #64]	; (80043c4 <ST7735_FillRectangle+0x15c>)
 8004382:	2202      	movs	r2, #2
 8004384:	f004 fb68 	bl	8008a58 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8004388:	1dbb      	adds	r3, r7, #6
 800438a:	881a      	ldrh	r2, [r3, #0]
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	3a01      	subs	r2, #1
 8004390:	801a      	strh	r2, [r3, #0]
 8004392:	1dbb      	adds	r3, r7, #6
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1ee      	bne.n	8004378 <ST7735_FillRectangle+0x110>
    for(y = h; y > 0; y--) {
 800439a:	1d3b      	adds	r3, r7, #4
 800439c:	881a      	ldrh	r2, [r3, #0]
 800439e:	1d3b      	adds	r3, r7, #4
 80043a0:	3a01      	subs	r2, #1
 80043a2:	801a      	strh	r2, [r3, #0]
 80043a4:	1d3b      	adds	r3, r7, #4
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e0      	bne.n	800436e <ST7735_FillRectangle+0x106>
        }
    }

    ST7735_Unselect();
 80043ac:	f7ff fc0c 	bl	8003bc8 <ST7735_Unselect>
 80043b0:	e000      	b.n	80043b4 <ST7735_FillRectangle+0x14c>
    if((x >= _width) || (y >= _height)) return;
 80043b2:	46c0      	nop			; (mov r8, r8)
}
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b004      	add	sp, #16
 80043b8:	bdb0      	pop	{r4, r5, r7, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	20000210 	.word	0x20000210
 80043c0:	20000212 	.word	0x20000212
 80043c4:	20000aa4 	.word	0x20000aa4

080043c8 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 80043cc:	4b17      	ldr	r3, [pc, #92]	; (800442c <Ringbuf_init+0x64>)
 80043ce:	4a18      	ldr	r2, [pc, #96]	; (8004430 <Ringbuf_init+0x68>)
 80043d0:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 80043d2:	4b18      	ldr	r3, [pc, #96]	; (8004434 <Ringbuf_init+0x6c>)
 80043d4:	4a18      	ldr	r2, [pc, #96]	; (8004438 <Ringbuf_init+0x70>)
 80043d6:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 80043d8:	4b18      	ldr	r3, [pc, #96]	; (800443c <Ringbuf_init+0x74>)
 80043da:	4a19      	ldr	r2, [pc, #100]	; (8004440 <Ringbuf_init+0x78>)
 80043dc:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 80043de:	4b19      	ldr	r3, [pc, #100]	; (8004444 <Ringbuf_init+0x7c>)
 80043e0:	4a19      	ldr	r2, [pc, #100]	; (8004448 <Ringbuf_init+0x80>)
 80043e2:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 80043e4:	4b19      	ldr	r3, [pc, #100]	; (800444c <Ringbuf_init+0x84>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	4b18      	ldr	r3, [pc, #96]	; (800444c <Ringbuf_init+0x84>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2101      	movs	r1, #1
 80043f0:	430a      	orrs	r2, r1
 80043f2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 80043f4:	4b16      	ldr	r3, [pc, #88]	; (8004450 <Ringbuf_init+0x88>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	4b15      	ldr	r3, [pc, #84]	; (8004450 <Ringbuf_init+0x88>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2101      	movs	r1, #1
 8004400:	430a      	orrs	r2, r1
 8004402:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8004404:	4b11      	ldr	r3, [pc, #68]	; (800444c <Ringbuf_init+0x84>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	4b10      	ldr	r3, [pc, #64]	; (800444c <Ringbuf_init+0x84>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2120      	movs	r1, #32
 8004410:	430a      	orrs	r2, r1
 8004412:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8004414:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <Ringbuf_init+0x88>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <Ringbuf_init+0x88>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2120      	movs	r1, #32
 8004420:	430a      	orrs	r2, r1
 8004422:	601a      	str	r2, [r3, #0]
}
 8004424:	46c0      	nop			; (mov r8, r8)
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	20000a3c 	.word	0x20000a3c
 8004430:	2000021c 	.word	0x2000021c
 8004434:	20000a40 	.word	0x20000a40
 8004438:	20000424 	.word	0x20000424
 800443c:	20000a44 	.word	0x20000a44
 8004440:	2000062c 	.word	0x2000062c
 8004444:	20000a48 	.word	0x20000a48
 8004448:	20000834 	.word	0x20000834
 800444c:	20000b94 	.word	0x20000b94
 8004450:	20000c1c 	.word	0x20000c1c

08004454 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	0002      	movs	r2, r0
 800445c:	6039      	str	r1, [r7, #0]
 800445e:	1dfb      	adds	r3, r7, #7
 8004460:	701a      	strb	r2, [r3, #0]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	58d3      	ldr	r3, [r2, r3]
 800446a:	3301      	adds	r3, #1
 800446c:	05db      	lsls	r3, r3, #23
 800446e:	0ddb      	lsrs	r3, r3, #23
 8004470:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	2381      	movs	r3, #129	; 0x81
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	58d2      	ldr	r2, [r2, r3]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	429a      	cmp	r2, r3
 800447e:	d00c      	beq.n	800449a <store_char+0x46>
    buffer->buffer[buffer->head] = c;
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	58d3      	ldr	r3, [r2, r3]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	1df9      	adds	r1, r7, #7
 800448c:	7809      	ldrb	r1, [r1, #0]
 800448e:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8004490:	68f9      	ldr	r1, [r7, #12]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	50d1      	str	r1, [r2, r3]
  }
}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	46bd      	mov	sp, r7
 800449e:	b004      	add	sp, #16
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <Uart_peek>:
	}
}


int Uart_peek(UART_HandleTypeDef *uart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <Uart_peek+0x84>)
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d117      	bne.n	80044e4 <Uart_peek+0x40>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 80044b4:	4b1d      	ldr	r3, [pc, #116]	; (800452c <Uart_peek+0x88>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	2380      	movs	r3, #128	; 0x80
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	58d2      	ldr	r2, [r2, r3]
 80044be:	4b1b      	ldr	r3, [pc, #108]	; (800452c <Uart_peek+0x88>)
 80044c0:	6819      	ldr	r1, [r3, #0]
 80044c2:	2381      	movs	r3, #129	; 0x81
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	58cb      	ldr	r3, [r1, r3]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d102      	bne.n	80044d2 <Uart_peek+0x2e>
		  {
		    return -1;
 80044cc:	2301      	movs	r3, #1
 80044ce:	425b      	negs	r3, r3
 80044d0:	e026      	b.n	8004520 <Uart_peek+0x7c>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 80044d2:	4b16      	ldr	r3, [pc, #88]	; (800452c <Uart_peek+0x88>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4b15      	ldr	r3, [pc, #84]	; (800452c <Uart_peek+0x88>)
 80044d8:	6819      	ldr	r1, [r3, #0]
 80044da:	2381      	movs	r3, #129	; 0x81
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	58cb      	ldr	r3, [r1, r3]
 80044e0:	5cd3      	ldrb	r3, [r2, r3]
 80044e2:	e01d      	b.n	8004520 <Uart_peek+0x7c>
		  }
	}

	else if (uart == pc_uart)
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	4b12      	ldr	r3, [pc, #72]	; (8004530 <Uart_peek+0x8c>)
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d117      	bne.n	800451c <Uart_peek+0x78>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80044ec:	4b11      	ldr	r3, [pc, #68]	; (8004534 <Uart_peek+0x90>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	2380      	movs	r3, #128	; 0x80
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	58d2      	ldr	r2, [r2, r3]
 80044f6:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <Uart_peek+0x90>)
 80044f8:	6819      	ldr	r1, [r3, #0]
 80044fa:	2381      	movs	r3, #129	; 0x81
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	58cb      	ldr	r3, [r1, r3]
 8004500:	429a      	cmp	r2, r3
 8004502:	d102      	bne.n	800450a <Uart_peek+0x66>
		  {
		    return -1;
 8004504:	2301      	movs	r3, #1
 8004506:	425b      	negs	r3, r3
 8004508:	e00a      	b.n	8004520 <Uart_peek+0x7c>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 800450a:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <Uart_peek+0x90>)
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4b09      	ldr	r3, [pc, #36]	; (8004534 <Uart_peek+0x90>)
 8004510:	6819      	ldr	r1, [r3, #0]
 8004512:	2381      	movs	r3, #129	; 0x81
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	58cb      	ldr	r3, [r1, r3]
 8004518:	5cd3      	ldrb	r3, [r2, r3]
 800451a:	e001      	b.n	8004520 <Uart_peek+0x7c>
		  }
	}

	return -1;
 800451c:	2301      	movs	r3, #1
 800451e:	425b      	negs	r3, r3
}
 8004520:	0018      	movs	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	b002      	add	sp, #8
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20000b94 	.word	0x20000b94
 800452c:	20000a3c 	.word	0x20000a3c
 8004530:	20000c1c 	.word	0x20000c1c
 8004534:	20000a44 	.word	0x20000a44

08004538 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	4b30      	ldr	r3, [pc, #192]	; (8004604 <Uart_read+0xcc>)
 8004544:	429a      	cmp	r2, r3
 8004546:	d129      	bne.n	800459c <Uart_read+0x64>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8004548:	4b2f      	ldr	r3, [pc, #188]	; (8004608 <Uart_read+0xd0>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	2380      	movs	r3, #128	; 0x80
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	58d2      	ldr	r2, [r2, r3]
 8004552:	4b2d      	ldr	r3, [pc, #180]	; (8004608 <Uart_read+0xd0>)
 8004554:	6819      	ldr	r1, [r3, #0]
 8004556:	2381      	movs	r3, #129	; 0x81
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	58cb      	ldr	r3, [r1, r3]
 800455c:	429a      	cmp	r2, r3
 800455e:	d102      	bne.n	8004566 <Uart_read+0x2e>
		  {
		    return -1;
 8004560:	2301      	movs	r3, #1
 8004562:	425b      	negs	r3, r3
 8004564:	e04a      	b.n	80045fc <Uart_read+0xc4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8004566:	4b28      	ldr	r3, [pc, #160]	; (8004608 <Uart_read+0xd0>)
 8004568:	6819      	ldr	r1, [r3, #0]
 800456a:	4b27      	ldr	r3, [pc, #156]	; (8004608 <Uart_read+0xd0>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	2381      	movs	r3, #129	; 0x81
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	58d2      	ldr	r2, [r2, r3]
 8004574:	200e      	movs	r0, #14
 8004576:	183b      	adds	r3, r7, r0
 8004578:	5c8a      	ldrb	r2, [r1, r2]
 800457a:	701a      	strb	r2, [r3, #0]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800457c:	4b22      	ldr	r3, [pc, #136]	; (8004608 <Uart_read+0xd0>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	2381      	movs	r3, #129	; 0x81
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	58d3      	ldr	r3, [r2, r3]
 8004586:	1c59      	adds	r1, r3, #1
 8004588:	4b1f      	ldr	r3, [pc, #124]	; (8004608 <Uart_read+0xd0>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	05cb      	lsls	r3, r1, #23
 800458e:	0dd9      	lsrs	r1, r3, #23
 8004590:	2381      	movs	r3, #129	; 0x81
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	50d1      	str	r1, [r2, r3]
		    return c;
 8004596:	183b      	adds	r3, r7, r0
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	e02f      	b.n	80045fc <Uart_read+0xc4>
		  }
	}

	else if (uart == pc_uart)
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	4b1b      	ldr	r3, [pc, #108]	; (800460c <Uart_read+0xd4>)
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d129      	bne.n	80045f8 <Uart_read+0xc0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80045a4:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <Uart_read+0xd8>)
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	58d2      	ldr	r2, [r2, r3]
 80045ae:	4b18      	ldr	r3, [pc, #96]	; (8004610 <Uart_read+0xd8>)
 80045b0:	6819      	ldr	r1, [r3, #0]
 80045b2:	2381      	movs	r3, #129	; 0x81
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	58cb      	ldr	r3, [r1, r3]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d102      	bne.n	80045c2 <Uart_read+0x8a>
		  {
		    return -1;
 80045bc:	2301      	movs	r3, #1
 80045be:	425b      	negs	r3, r3
 80045c0:	e01c      	b.n	80045fc <Uart_read+0xc4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 80045c2:	4b13      	ldr	r3, [pc, #76]	; (8004610 <Uart_read+0xd8>)
 80045c4:	6819      	ldr	r1, [r3, #0]
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <Uart_read+0xd8>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	2381      	movs	r3, #129	; 0x81
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	58d2      	ldr	r2, [r2, r3]
 80045d0:	200f      	movs	r0, #15
 80045d2:	183b      	adds	r3, r7, r0
 80045d4:	5c8a      	ldrb	r2, [r1, r2]
 80045d6:	701a      	strb	r2, [r3, #0]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 80045d8:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <Uart_read+0xd8>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	2381      	movs	r3, #129	; 0x81
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	58d3      	ldr	r3, [r2, r3]
 80045e2:	1c59      	adds	r1, r3, #1
 80045e4:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <Uart_read+0xd8>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	05cb      	lsls	r3, r1, #23
 80045ea:	0dd9      	lsrs	r1, r3, #23
 80045ec:	2381      	movs	r3, #129	; 0x81
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	50d1      	str	r1, [r2, r3]
		    return c;
 80045f2:	183b      	adds	r3, r7, r0
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	e001      	b.n	80045fc <Uart_read+0xc4>
		  }
	}

	else return -1;
 80045f8:	2301      	movs	r3, #1
 80045fa:	425b      	negs	r3, r3
}
 80045fc:	0018      	movs	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	b004      	add	sp, #16
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000b94 	.word	0x20000b94
 8004608:	20000a3c 	.word	0x20000a3c
 800460c:	20000c1c 	.word	0x20000c1c
 8004610:	20000a44 	.word	0x20000a44

08004614 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
	if (c>=0)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	db5c      	blt.n	80046de <Uart_write+0xca>
	{
		if (uart == device_uart){
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	4b30      	ldr	r3, [pc, #192]	; (80046e8 <Uart_write+0xd4>)
 8004628:	429a      	cmp	r2, r3
 800462a:	d12a      	bne.n	8004682 <Uart_write+0x6e>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 800462c:	4b2f      	ldr	r3, [pc, #188]	; (80046ec <Uart_write+0xd8>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	2380      	movs	r3, #128	; 0x80
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	58d3      	ldr	r3, [r2, r3]
 8004636:	3301      	adds	r3, #1
 8004638:	05db      	lsls	r3, r3, #23
 800463a:	0ddb      	lsrs	r3, r3, #23
 800463c:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	4b2a      	ldr	r3, [pc, #168]	; (80046ec <Uart_write+0xd8>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	2381      	movs	r3, #129	; 0x81
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	58d2      	ldr	r2, [r2, r3]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	429a      	cmp	r2, r3
 800464e:	d0f7      	beq.n	8004640 <Uart_write+0x2c>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8004650:	4b26      	ldr	r3, [pc, #152]	; (80046ec <Uart_write+0xd8>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b25      	ldr	r3, [pc, #148]	; (80046ec <Uart_write+0xd8>)
 8004656:	6819      	ldr	r1, [r3, #0]
 8004658:	2380      	movs	r3, #128	; 0x80
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	58cb      	ldr	r3, [r1, r3]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	b2c9      	uxtb	r1, r1
 8004662:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8004664:	4b21      	ldr	r3, [pc, #132]	; (80046ec <Uart_write+0xd8>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	50d1      	str	r1, [r2, r3]

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8004670:	4b1d      	ldr	r3, [pc, #116]	; (80046e8 <Uart_write+0xd4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <Uart_write+0xd4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2180      	movs	r1, #128	; 0x80
 800467c:	430a      	orrs	r2, r1
 800467e:	601a      	str	r2, [r3, #0]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8004680:	e02d      	b.n	80046de <Uart_write+0xca>
		else if (uart == pc_uart){
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <Uart_write+0xdc>)
 8004686:	429a      	cmp	r2, r3
 8004688:	d129      	bne.n	80046de <Uart_write+0xca>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 800468a:	4b1a      	ldr	r3, [pc, #104]	; (80046f4 <Uart_write+0xe0>)
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	58d3      	ldr	r3, [r2, r3]
 8004694:	3301      	adds	r3, #1
 8004696:	05db      	lsls	r3, r3, #23
 8004698:	0ddb      	lsrs	r3, r3, #23
 800469a:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 800469c:	46c0      	nop			; (mov r8, r8)
 800469e:	4b15      	ldr	r3, [pc, #84]	; (80046f4 <Uart_write+0xe0>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	2381      	movs	r3, #129	; 0x81
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	58d2      	ldr	r2, [r2, r3]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d0f7      	beq.n	800469e <Uart_write+0x8a>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 80046ae:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <Uart_write+0xe0>)
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <Uart_write+0xe0>)
 80046b4:	6819      	ldr	r1, [r3, #0]
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	58cb      	ldr	r3, [r1, r3]
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	b2c9      	uxtb	r1, r1
 80046c0:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 80046c2:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <Uart_write+0xe0>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68f9      	ldr	r1, [r7, #12]
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	50d1      	str	r1, [r2, r3]
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 80046ce:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <Uart_write+0xdc>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <Uart_write+0xdc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2180      	movs	r1, #128	; 0x80
 80046da:	430a      	orrs	r2, r1
 80046dc:	601a      	str	r2, [r3, #0]
}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b004      	add	sp, #16
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	20000b94 	.word	0x20000b94
 80046ec:	20000a40 	.word	0x20000a40
 80046f0:	20000c1c 	.word	0x20000c1c
 80046f4:	20000a48 	.word	0x20000a48

080046f8 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <IsDataAvailable+0x7c>)
 8004704:	429a      	cmp	r2, r3
 8004706:	d115      	bne.n	8004734 <IsDataAvailable+0x3c>
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <IsDataAvailable+0x80>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	58d3      	ldr	r3, [r2, r3]
 8004712:	b29a      	uxth	r2, r3
 8004714:	4b18      	ldr	r3, [pc, #96]	; (8004778 <IsDataAvailable+0x80>)
 8004716:	6819      	ldr	r1, [r3, #0]
 8004718:	2381      	movs	r3, #129	; 0x81
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	58cb      	ldr	r3, [r1, r3]
 800471e:	b29b      	uxth	r3, r3
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	b29b      	uxth	r3, r3
 8004724:	2280      	movs	r2, #128	; 0x80
 8004726:	0092      	lsls	r2, r2, #2
 8004728:	4694      	mov	ip, r2
 800472a:	4463      	add	r3, ip
 800472c:	b29b      	uxth	r3, r3
 800472e:	05db      	lsls	r3, r3, #23
 8004730:	0ddb      	lsrs	r3, r3, #23
 8004732:	e01b      	b.n	800476c <IsDataAvailable+0x74>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	4b11      	ldr	r3, [pc, #68]	; (800477c <IsDataAvailable+0x84>)
 8004738:	429a      	cmp	r2, r3
 800473a:	d115      	bne.n	8004768 <IsDataAvailable+0x70>
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <IsDataAvailable+0x88>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	58d3      	ldr	r3, [r2, r3]
 8004746:	b29a      	uxth	r2, r3
 8004748:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <IsDataAvailable+0x88>)
 800474a:	6819      	ldr	r1, [r3, #0]
 800474c:	2381      	movs	r3, #129	; 0x81
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	58cb      	ldr	r3, [r1, r3]
 8004752:	b29b      	uxth	r3, r3
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	b29b      	uxth	r3, r3
 8004758:	2280      	movs	r2, #128	; 0x80
 800475a:	0092      	lsls	r2, r2, #2
 800475c:	4694      	mov	ip, r2
 800475e:	4463      	add	r3, ip
 8004760:	b29b      	uxth	r3, r3
 8004762:	05db      	lsls	r3, r3, #23
 8004764:	0ddb      	lsrs	r3, r3, #23
 8004766:	e001      	b.n	800476c <IsDataAvailable+0x74>
	return -1;
 8004768:	2301      	movs	r3, #1
 800476a:	425b      	negs	r3, r3
}
 800476c:	0018      	movs	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	b002      	add	sp, #8
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000b94 	.word	0x20000b94
 8004778:	20000a3c 	.word	0x20000a3c
 800477c:	20000c1c 	.word	0x20000c1c
 8004780:	20000a44 	.word	0x20000a44

08004784 <Get_after>:



int Get_after (char *string, uint16_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	230a      	movs	r3, #10
 8004792:	18fb      	adds	r3, r7, r3
 8004794:	1c0a      	adds	r2, r1, #0
 8004796:	801a      	strh	r2, [r3, #0]

	while (Wait_for(string, uart) != 1);
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	0011      	movs	r1, r2
 80047a0:	0018      	movs	r0, r3
 80047a2:	f000 f83f 	bl	8004824 <Wait_for>
 80047a6:	0003      	movs	r3, r0
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d1f6      	bne.n	800479a <Get_after+0x16>
	for (int indx=0; indx<numberofchars; indx++)
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	e013      	b.n	80047da <Get_after+0x56>
	{
		while (!(IsDataAvailable(uart)));
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	0018      	movs	r0, r3
 80047b8:	f7ff ff9e 	bl	80046f8 <IsDataAvailable>
 80047bc:	1e03      	subs	r3, r0, #0
 80047be:	d0f9      	beq.n	80047b4 <Get_after+0x30>
		buffertosave[indx] = Uart_read(uart);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	0018      	movs	r0, r3
 80047c4:	f7ff feb8 	bl	8004538 <Uart_read>
 80047c8:	0001      	movs	r1, r0
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	18d3      	adds	r3, r2, r3
 80047d0:	b2ca      	uxtb	r2, r1
 80047d2:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	3301      	adds	r3, #1
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	230a      	movs	r3, #10
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	dbe5      	blt.n	80047b2 <Get_after+0x2e>
	}
	return 1;
 80047e6:	2301      	movs	r3, #1
}
 80047e8:	0018      	movs	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b006      	add	sp, #24
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 80047fa:	e009      	b.n	8004810 <Uart_sendstring+0x20>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	001a      	movs	r2, r3
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	0019      	movs	r1, r3
 800480a:	0010      	movs	r0, r2
 800480c:	f7ff ff02 	bl	8004614 <Uart_write>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f1      	bne.n	80047fc <Uart_sendstring+0xc>
}
 8004818:	46c0      	nop			; (mov r8, r8)
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	46bd      	mov	sp, r7
 800481e:	b002      	add	sp, #8
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <Wait_for>:

}


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	0018      	movs	r0, r3
 8004836:	f7fb fc67 	bl	8000108 <strlen>
 800483a:	0003      	movs	r3, r0
 800483c:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	0018      	movs	r0, r3
 8004844:	f7ff ff58 	bl	80046f8 <IsDataAvailable>
 8004848:	1e03      	subs	r3, r0, #0
 800484a:	d0f9      	beq.n	8004840 <Wait_for+0x1c>
	if (Uart_peek(uart) != string[so_far])
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	0018      	movs	r0, r3
 8004850:	f7ff fe28 	bl	80044a4 <Uart_peek>
 8004854:	0001      	movs	r1, r0
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	18d3      	adds	r3, r2, r3
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	4299      	cmp	r1, r3
 8004860:	d021      	beq.n	80048a6 <Wait_for+0x82>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8004862:	4b20      	ldr	r3, [pc, #128]	; (80048e4 <Wait_for+0xc0>)
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	2381      	movs	r3, #129	; 0x81
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	58d3      	ldr	r3, [r2, r3]
 800486c:	1c59      	adds	r1, r3, #1
 800486e:	4b1d      	ldr	r3, [pc, #116]	; (80048e4 <Wait_for+0xc0>)
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	05cb      	lsls	r3, r1, #23
 8004874:	0dd9      	lsrs	r1, r3, #23
 8004876:	2381      	movs	r3, #129	; 0x81
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	50d1      	str	r1, [r2, r3]
		goto again_device;
 800487c:	e7df      	b.n	800483e <Wait_for+0x1a>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3301      	adds	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	0018      	movs	r0, r3
 8004888:	f7ff fe56 	bl	8004538 <Uart_read>
		if (so_far == len) return 1;
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	429a      	cmp	r2, r3
 8004892:	d101      	bne.n	8004898 <Wait_for+0x74>
 8004894:	2301      	movs	r3, #1
 8004896:	e020      	b.n	80048da <Wait_for+0xb6>
		while (!IsDataAvailable(uart));
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	0018      	movs	r0, r3
 800489e:	f7ff ff2b 	bl	80046f8 <IsDataAvailable>
 80048a2:	1e03      	subs	r3, r0, #0
 80048a4:	d0f9      	beq.n	800489a <Wait_for+0x76>
	while (Uart_peek(uart) == string [so_far])
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	0018      	movs	r0, r3
 80048aa:	f7ff fdfb 	bl	80044a4 <Uart_peek>
 80048ae:	0001      	movs	r1, r0
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	18d3      	adds	r3, r2, r3
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	4299      	cmp	r1, r3
 80048ba:	d0e0      	beq.n	800487e <Wait_for+0x5a>
	}

	if (so_far != len)
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d002      	beq.n	80048ca <Wait_for+0xa6>
	{
		so_far = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
		goto again_device;
 80048c8:	e7b9      	b.n	800483e <Wait_for+0x1a>
	}

	if (so_far == len) return 1;
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d101      	bne.n	80048d6 <Wait_for+0xb2>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e001      	b.n	80048da <Wait_for+0xb6>
	else return -1;
 80048d6:	2301      	movs	r3, #1
 80048d8:	425b      	negs	r3, r3
}
 80048da:	0018      	movs	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	b004      	add	sp, #16
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	20000a3c 	.word	0x20000a3c

080048e8 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2220      	movs	r2, #32
 8004904:	4013      	ands	r3, r2
 8004906:	d028      	beq.n	800495a <Uart_isr+0x72>
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	2220      	movs	r2, #32
 800490c:	4013      	ands	r3, r2
 800490e:	d024      	beq.n	800495a <Uart_isr+0x72>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800491c:	210f      	movs	r1, #15
 800491e:	187b      	adds	r3, r7, r1
 8004920:	701a      	strb	r2, [r3, #0]
        if (huart == device_uart)
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4b48      	ldr	r3, [pc, #288]	; (8004a48 <Uart_isr+0x160>)
 8004926:	429a      	cmp	r2, r3
 8004928:	d108      	bne.n	800493c <Uart_isr+0x54>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 800492a:	4b48      	ldr	r3, [pc, #288]	; (8004a4c <Uart_isr+0x164>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	187b      	adds	r3, r7, r1
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	0011      	movs	r1, r2
 8004934:	0018      	movs	r0, r3
 8004936:	f7ff fd8d 	bl	8004454 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 800493a:	e07e      	b.n	8004a3a <Uart_isr+0x152>
        else if (huart == pc_uart)
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	4b44      	ldr	r3, [pc, #272]	; (8004a50 <Uart_isr+0x168>)
 8004940:	429a      	cmp	r2, r3
 8004942:	d000      	beq.n	8004946 <Uart_isr+0x5e>
 8004944:	e079      	b.n	8004a3a <Uart_isr+0x152>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8004946:	4b43      	ldr	r3, [pc, #268]	; (8004a54 <Uart_isr+0x16c>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	230f      	movs	r3, #15
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	0011      	movs	r1, r2
 8004952:	0018      	movs	r0, r3
 8004954:	f7ff fd7e 	bl	8004454 <store_char>
        return;
 8004958:	e06f      	b.n	8004a3a <Uart_isr+0x152>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2280      	movs	r2, #128	; 0x80
 800495e:	4013      	ands	r3, r2
 8004960:	d06e      	beq.n	8004a40 <Uart_isr+0x158>
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2280      	movs	r2, #128	; 0x80
 8004966:	4013      	ands	r3, r2
 8004968:	d06a      	beq.n	8004a40 <Uart_isr+0x158>
    {
    	if (huart == device_uart){
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <Uart_isr+0x160>)
 800496e:	429a      	cmp	r2, r3
 8004970:	d12f      	bne.n	80049d2 <Uart_isr+0xea>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8004972:	4a39      	ldr	r2, [pc, #228]	; (8004a58 <Uart_isr+0x170>)
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	58d2      	ldr	r2, [r2, r3]
 800497a:	4937      	ldr	r1, [pc, #220]	; (8004a58 <Uart_isr+0x170>)
 800497c:	2381      	movs	r3, #129	; 0x81
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	58cb      	ldr	r3, [r1, r3]
 8004982:	429a      	cmp	r2, r3
 8004984:	d108      	bne.n	8004998 <Uart_isr+0xb0>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2180      	movs	r1, #128	; 0x80
 8004992:	438a      	bics	r2, r1
 8004994:	601a      	str	r2, [r3, #0]
        	      huart->Instance->ISR;
        	      huart->Instance->TDR = c;

        	    }
        	}
    	return;
 8004996:	e052      	b.n	8004a3e <Uart_isr+0x156>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8004998:	4a2f      	ldr	r2, [pc, #188]	; (8004a58 <Uart_isr+0x170>)
 800499a:	2381      	movs	r3, #129	; 0x81
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	58d2      	ldr	r2, [r2, r3]
 80049a0:	200d      	movs	r0, #13
 80049a2:	183b      	adds	r3, r7, r0
 80049a4:	492c      	ldr	r1, [pc, #176]	; (8004a58 <Uart_isr+0x170>)
 80049a6:	5c8a      	ldrb	r2, [r1, r2]
 80049a8:	701a      	strb	r2, [r3, #0]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 80049aa:	4a2b      	ldr	r2, [pc, #172]	; (8004a58 <Uart_isr+0x170>)
 80049ac:	2381      	movs	r3, #129	; 0x81
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	58d3      	ldr	r3, [r2, r3]
 80049b2:	3301      	adds	r3, #1
 80049b4:	05db      	lsls	r3, r3, #23
 80049b6:	0dd9      	lsrs	r1, r3, #23
 80049b8:	4a27      	ldr	r2, [pc, #156]	; (8004a58 <Uart_isr+0x170>)
 80049ba:	2381      	movs	r3, #129	; 0x81
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	50d1      	str	r1, [r2, r3]
    	      huart->Instance->ISR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->TDR = c;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	183a      	adds	r2, r7, r0
 80049cc:	7812      	ldrb	r2, [r2, #0]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 80049d0:	e035      	b.n	8004a3e <Uart_isr+0x156>
    	else if (huart == pc_uart){
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <Uart_isr+0x168>)
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d131      	bne.n	8004a3e <Uart_isr+0x156>
        	if(tx_buffer2.head == tx_buffer2.tail)
 80049da:	4a20      	ldr	r2, [pc, #128]	; (8004a5c <Uart_isr+0x174>)
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	58d2      	ldr	r2, [r2, r3]
 80049e2:	491e      	ldr	r1, [pc, #120]	; (8004a5c <Uart_isr+0x174>)
 80049e4:	2381      	movs	r3, #129	; 0x81
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	58cb      	ldr	r3, [r1, r3]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d108      	bne.n	8004a00 <Uart_isr+0x118>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2180      	movs	r1, #128	; 0x80
 80049fa:	438a      	bics	r2, r1
 80049fc:	601a      	str	r2, [r3, #0]
    	return;
 80049fe:	e01e      	b.n	8004a3e <Uart_isr+0x156>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8004a00:	4a16      	ldr	r2, [pc, #88]	; (8004a5c <Uart_isr+0x174>)
 8004a02:	2381      	movs	r3, #129	; 0x81
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	58d2      	ldr	r2, [r2, r3]
 8004a08:	200e      	movs	r0, #14
 8004a0a:	183b      	adds	r3, r7, r0
 8004a0c:	4913      	ldr	r1, [pc, #76]	; (8004a5c <Uart_isr+0x174>)
 8004a0e:	5c8a      	ldrb	r2, [r1, r2]
 8004a10:	701a      	strb	r2, [r3, #0]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8004a12:	4a12      	ldr	r2, [pc, #72]	; (8004a5c <Uart_isr+0x174>)
 8004a14:	2381      	movs	r3, #129	; 0x81
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	58d3      	ldr	r3, [r2, r3]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	05db      	lsls	r3, r3, #23
 8004a1e:	0dd9      	lsrs	r1, r3, #23
 8004a20:	4a0e      	ldr	r2, [pc, #56]	; (8004a5c <Uart_isr+0x174>)
 8004a22:	2381      	movs	r3, #129	; 0x81
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	50d1      	str	r1, [r2, r3]
        	      huart->Instance->ISR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	69db      	ldr	r3, [r3, #28]
        	      huart->Instance->TDR = c;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	183a      	adds	r2, r7, r0
 8004a34:	7812      	ldrb	r2, [r2, #0]
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8004a38:	e001      	b.n	8004a3e <Uart_isr+0x156>
        return;
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	e000      	b.n	8004a40 <Uart_isr+0x158>
    	return;
 8004a3e:	46c0      	nop			; (mov r8, r8)
    }
}
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b006      	add	sp, #24
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	20000b94 	.word	0x20000b94
 8004a4c:	20000a3c 	.word	0x20000a3c
 8004a50:	20000c1c 	.word	0x20000c1c
 8004a54:	20000a44 	.word	0x20000a44
 8004a58:	20000424 	.word	0x20000424
 8004a5c:	20000834 	.word	0x20000834

08004a60 <AHT20_init>:
 * @brief Initializes the AHT20 sensor.
 *
 * This function initializes the AHT20 temperature and humidity sensor.
 * It checks the sensor status and, if necessary, sends a calibration command.
 */
void AHT20_init(){
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af02      	add	r7, sp, #8
	uint8_t readBufer;
	HAL_Delay(40);
 8004a66:	2028      	movs	r0, #40	; 0x28
 8004a68:	f001 feb2 	bl	80067d0 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDR, &readBufer, 1, 100);
 8004a6c:	1dfa      	adds	r2, r7, #7
 8004a6e:	480f      	ldr	r0, [pc, #60]	; (8004aac <AHT20_init+0x4c>)
 8004a70:	2364      	movs	r3, #100	; 0x64
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	2301      	movs	r3, #1
 8004a76:	2170      	movs	r1, #112	; 0x70
 8004a78:	f002 fb6e 	bl	8007158 <HAL_I2C_Master_Receive>
	if((readBufer & 0x08) == 0x00){
 8004a7c:	1dfb      	adds	r3, r7, #7
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	001a      	movs	r2, r3
 8004a82:	2308      	movs	r3, #8
 8004a84:	4013      	ands	r3, r2
 8004a86:	d10d      	bne.n	8004aa4 <AHT20_init+0x44>
		uint8_t sendBuffer[3]={0xBE, 0x08, 0x00};
 8004a88:	1d3b      	adds	r3, r7, #4
 8004a8a:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <AHT20_init+0x50>)
 8004a8c:	8811      	ldrh	r1, [r2, #0]
 8004a8e:	8019      	strh	r1, [r3, #0]
 8004a90:	7892      	ldrb	r2, [r2, #2]
 8004a92:	709a      	strb	r2, [r3, #2]
		HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDR, sendBuffer, 3, 100);
 8004a94:	1d3a      	adds	r2, r7, #4
 8004a96:	4805      	ldr	r0, [pc, #20]	; (8004aac <AHT20_init+0x4c>)
 8004a98:	2364      	movs	r3, #100	; 0x64
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	2170      	movs	r1, #112	; 0x70
 8004aa0:	f002 fa52 	bl	8006f48 <HAL_I2C_Master_Transmit>
	}
}
 8004aa4:	46c0      	nop			; (mov r8, r8)
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b002      	add	sp, #8
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20000a50 	.word	0x20000a50
 8004ab0:	08012bd0 	.word	0x08012bd0

08004ab4 <AHT20_read>:
 * human-readable format and stores them in the provided float pointers.
 *
 * @param temp Pointer to a float where the temperature value will be stored.
 * @param humid Pointer to a float where the humidity value will be stored.
 */
void AHT20_read(float *temp, float *humid){
 8004ab4:	b590      	push	{r4, r7, lr}
 8004ab6:	b089      	sub	sp, #36	; 0x24
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
	uint8_t sendBuffer[3]={0xAC, 0x33, 0x00};
 8004abe:	2010      	movs	r0, #16
 8004ac0:	183b      	adds	r3, r7, r0
 8004ac2:	4a34      	ldr	r2, [pc, #208]	; (8004b94 <AHT20_read+0xe0>)
 8004ac4:	8811      	ldrh	r1, [r2, #0]
 8004ac6:	8019      	strh	r1, [r3, #0]
 8004ac8:	7892      	ldrb	r2, [r2, #2]
 8004aca:	709a      	strb	r2, [r3, #2]
	uint8_t readBuffer[6];
	HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDR, sendBuffer, 3, 100);
 8004acc:	183a      	adds	r2, r7, r0
 8004ace:	4832      	ldr	r0, [pc, #200]	; (8004b98 <AHT20_read+0xe4>)
 8004ad0:	2364      	movs	r3, #100	; 0x64
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	2170      	movs	r1, #112	; 0x70
 8004ad8:	f002 fa36 	bl	8006f48 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 8004adc:	2050      	movs	r0, #80	; 0x50
 8004ade:	f001 fe77 	bl	80067d0 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDR, readBuffer, 6, 100);
 8004ae2:	2408      	movs	r4, #8
 8004ae4:	193a      	adds	r2, r7, r4
 8004ae6:	482c      	ldr	r0, [pc, #176]	; (8004b98 <AHT20_read+0xe4>)
 8004ae8:	2364      	movs	r3, #100	; 0x64
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	2306      	movs	r3, #6
 8004aee:	2170      	movs	r1, #112	; 0x70
 8004af0:	f002 fb32 	bl	8007158 <HAL_I2C_Master_Receive>
	if((readBuffer[0] & 0x80)==0x00){
 8004af4:	193b      	adds	r3, r7, r4
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	b25b      	sxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	db46      	blt.n	8004b8c <AHT20_read+0xd8>
		uint32_t data=0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
		data = ((uint32_t)readBuffer[3]>>4) + ((uint32_t)readBuffer[2]<<4) + ((uint32_t)readBuffer[1]<<12);
 8004b02:	193b      	adds	r3, r7, r4
 8004b04:	78db      	ldrb	r3, [r3, #3]
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	001a      	movs	r2, r3
 8004b0c:	193b      	adds	r3, r7, r4
 8004b0e:	789b      	ldrb	r3, [r3, #2]
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	18d2      	adds	r2, r2, r3
 8004b14:	193b      	adds	r3, r7, r4
 8004b16:	785b      	ldrb	r3, [r3, #1]
 8004b18:	031b      	lsls	r3, r3, #12
 8004b1a:	18d3      	adds	r3, r2, r3
 8004b1c:	617b      	str	r3, [r7, #20]
		*humid = data*100.0f/(1<<20);
 8004b1e:	6978      	ldr	r0, [r7, #20]
 8004b20:	f7fc fa54 	bl	8000fcc <__aeabi_ui2f>
 8004b24:	1c03      	adds	r3, r0, #0
 8004b26:	491d      	ldr	r1, [pc, #116]	; (8004b9c <AHT20_read+0xe8>)
 8004b28:	1c18      	adds	r0, r3, #0
 8004b2a:	f7fb ff61 	bl	80009f0 <__aeabi_fmul>
 8004b2e:	1c03      	adds	r3, r0, #0
 8004b30:	2193      	movs	r1, #147	; 0x93
 8004b32:	05c9      	lsls	r1, r1, #23
 8004b34:	1c18      	adds	r0, r3, #0
 8004b36:	f7fb fe41 	bl	80007bc <__aeabi_fdiv>
 8004b3a:	1c03      	adds	r3, r0, #0
 8004b3c:	1c1a      	adds	r2, r3, #0
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	601a      	str	r2, [r3, #0]

		data = (((uint32_t)readBuffer[3] & 0x0F) <<16) + ((uint32_t)readBuffer[4]<<8) + ((uint32_t)readBuffer[5]);
 8004b42:	193b      	adds	r3, r7, r4
 8004b44:	78db      	ldrb	r3, [r3, #3]
 8004b46:	041a      	lsls	r2, r3, #16
 8004b48:	23f0      	movs	r3, #240	; 0xf0
 8004b4a:	031b      	lsls	r3, r3, #12
 8004b4c:	401a      	ands	r2, r3
 8004b4e:	193b      	adds	r3, r7, r4
 8004b50:	791b      	ldrb	r3, [r3, #4]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	18d3      	adds	r3, r2, r3
 8004b56:	193a      	adds	r2, r7, r4
 8004b58:	7952      	ldrb	r2, [r2, #5]
 8004b5a:	189b      	adds	r3, r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]
		*temp = data*200.0f/(1<<20)-50;
 8004b5e:	6978      	ldr	r0, [r7, #20]
 8004b60:	f7fc fa34 	bl	8000fcc <__aeabi_ui2f>
 8004b64:	1c03      	adds	r3, r0, #0
 8004b66:	490e      	ldr	r1, [pc, #56]	; (8004ba0 <AHT20_read+0xec>)
 8004b68:	1c18      	adds	r0, r3, #0
 8004b6a:	f7fb ff41 	bl	80009f0 <__aeabi_fmul>
 8004b6e:	1c03      	adds	r3, r0, #0
 8004b70:	2193      	movs	r1, #147	; 0x93
 8004b72:	05c9      	lsls	r1, r1, #23
 8004b74:	1c18      	adds	r0, r3, #0
 8004b76:	f7fb fe21 	bl	80007bc <__aeabi_fdiv>
 8004b7a:	1c03      	adds	r3, r0, #0
 8004b7c:	4909      	ldr	r1, [pc, #36]	; (8004ba4 <AHT20_read+0xf0>)
 8004b7e:	1c18      	adds	r0, r3, #0
 8004b80:	f7fc f884 	bl	8000c8c <__aeabi_fsub>
 8004b84:	1c03      	adds	r3, r0, #0
 8004b86:	1c1a      	adds	r2, r3, #0
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	601a      	str	r2, [r3, #0]
	}
}
 8004b8c:	46c0      	nop			; (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b007      	add	sp, #28
 8004b92:	bd90      	pop	{r4, r7, pc}
 8004b94:	08012bd4 	.word	0x08012bd4
 8004b98:	20000a50 	.word	0x20000a50
 8004b9c:	42c80000 	.word	0x42c80000
 8004ba0:	43480000 	.word	0x43480000
 8004ba4:	42480000 	.word	0x42480000

08004ba8 <sendUart>:
 * @brief Sends a string over UART.
 * @param string The string to be sent.
 * @param huart The UART handle.
 */
void sendUart (char *string, UART_HandleTypeDef huart)
{
 8004ba8:	b084      	sub	sp, #16
 8004baa:	b590      	push	{r4, r7, lr}
 8004bac:	b085      	sub	sp, #20
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	2004      	movs	r0, #4
 8004bb4:	2418      	movs	r4, #24
 8004bb6:	1900      	adds	r0, r0, r4
 8004bb8:	2408      	movs	r4, #8
 8004bba:	46a4      	mov	ip, r4
 8004bbc:	44bc      	add	ip, r7
 8004bbe:	4460      	add	r0, ip
 8004bc0:	6001      	str	r1, [r0, #0]
 8004bc2:	6042      	str	r2, [r0, #4]
 8004bc4:	6083      	str	r3, [r0, #8]
	uint8_t len = strlen (string);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7fb fa9d 	bl	8000108 <strlen>
 8004bce:	0002      	movs	r2, r0
 8004bd0:	210f      	movs	r1, #15
 8004bd2:	187b      	adds	r3, r7, r1
 8004bd4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart, (uint8_t *) string, len, 2000);
 8004bd6:	187b      	adds	r3, r7, r1
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	23fa      	movs	r3, #250	; 0xfa
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	201c      	movs	r0, #28
 8004be4:	2408      	movs	r4, #8
 8004be6:	1900      	adds	r0, r0, r4
 8004be8:	19c0      	adds	r0, r0, r7
 8004bea:	f004 fddb 	bl	80097a4 <HAL_UART_Transmit>
}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b005      	add	sp, #20
 8004bf4:	bc90      	pop	{r4, r7}
 8004bf6:	bc08      	pop	{r3}
 8004bf8:	b004      	add	sp, #16
 8004bfa:	4718      	bx	r3

08004bfc <bufClear>:
/**
 * @brief Clears a buffer by setting all its elements to '\0'.
 * @param buf The buffer to be cleared.
 */
void bufClear (char *buf)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < SD_BUFFSIZE; i++)
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	e007      	b.n	8004c1a <bufClear+0x1e>
		buf[i] = '\0';
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	18d3      	adds	r3, r2, r3
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SD_BUFFSIZE; i++)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	2380      	movs	r3, #128	; 0x80
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	429a      	cmp	r2, r3
 8004c22:	dbf2      	blt.n	8004c0a <bufClear+0xe>
}
 8004c24:	46c0      	nop			; (mov r8, r8)
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	b004      	add	sp, #16
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <SD_init>:
/**
 * @brief Initializes the SD card and mounts the file system.
 * @param fil Pointer to the file object.
 */
void SD_init(FIL *fil)
{
 8004c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c32:	4c72      	ldr	r4, [pc, #456]	; (8004dfc <SD_init+0x1cc>)
 8004c34:	44a5      	add	sp, r4
 8004c36:	af20      	add	r7, sp, #128	; 0x80
 8004c38:	6078      	str	r0, [r7, #4]
	char buffer[SD_BUFFSIZE];

	FATFS *pfs;
	DWORD free_cluster;
	uint32_t total, free_space;
	fresult = f_mount(&fs, "/", 1);
 8004c3a:	4d71      	ldr	r5, [pc, #452]	; (8004e00 <SD_init+0x1d0>)
 8004c3c:	197c      	adds	r4, r7, r5
 8004c3e:	4971      	ldr	r1, [pc, #452]	; (8004e04 <SD_init+0x1d4>)
 8004c40:	4b71      	ldr	r3, [pc, #452]	; (8004e08 <SD_init+0x1d8>)
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	2201      	movs	r2, #1
 8004c46:	0018      	movs	r0, r3
 8004c48:	f008 fa4c 	bl	800d0e4 <f_mount>
 8004c4c:	0003      	movs	r3, r0
 8004c4e:	7023      	strb	r3, [r4, #0]
	if (fresult != FR_OK) sendUart ("ERROR!!! in mounting SD CARD...\r\n\n", huart2);
 8004c50:	197b      	adds	r3, r7, r5
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d010      	beq.n	8004c7a <SD_init+0x4a>
 8004c58:	4c6c      	ldr	r4, [pc, #432]	; (8004e0c <SD_init+0x1dc>)
 8004c5a:	4d6d      	ldr	r5, [pc, #436]	; (8004e10 <SD_init+0x1e0>)
 8004c5c:	466b      	mov	r3, sp
 8004c5e:	0018      	movs	r0, r3
 8004c60:	0023      	movs	r3, r4
 8004c62:	330c      	adds	r3, #12
 8004c64:	227c      	movs	r2, #124	; 0x7c
 8004c66:	0019      	movs	r1, r3
 8004c68:	f00a fa22 	bl	800f0b0 <memcpy>
 8004c6c:	6821      	ldr	r1, [r4, #0]
 8004c6e:	6862      	ldr	r2, [r4, #4]
 8004c70:	68a3      	ldr	r3, [r4, #8]
 8004c72:	0028      	movs	r0, r5
 8004c74:	f7ff ff98 	bl	8004ba8 <sendUart>
 8004c78:	e00f      	b.n	8004c9a <SD_init+0x6a>
	else sendUart("SD CARD mounted successfully...\r\n\n", huart2);
 8004c7a:	4c64      	ldr	r4, [pc, #400]	; (8004e0c <SD_init+0x1dc>)
 8004c7c:	4d65      	ldr	r5, [pc, #404]	; (8004e14 <SD_init+0x1e4>)
 8004c7e:	466b      	mov	r3, sp
 8004c80:	0018      	movs	r0, r3
 8004c82:	0023      	movs	r3, r4
 8004c84:	330c      	adds	r3, #12
 8004c86:	227c      	movs	r2, #124	; 0x7c
 8004c88:	0019      	movs	r1, r3
 8004c8a:	f00a fa11 	bl	800f0b0 <memcpy>
 8004c8e:	6821      	ldr	r1, [r4, #0]
 8004c90:	6862      	ldr	r2, [r4, #4]
 8004c92:	68a3      	ldr	r3, [r4, #8]
 8004c94:	0028      	movs	r0, r5
 8004c96:	f7ff ff87 	bl	8004ba8 <sendUart>
	/*************** Card capacity details ********************/
	/* Check free space */
	f_getfree("", &free_cluster, &pfs);
 8004c9a:	2310      	movs	r3, #16
 8004c9c:	18fa      	adds	r2, r7, r3
 8004c9e:	230c      	movs	r3, #12
 8004ca0:	18f9      	adds	r1, r7, r3
 8004ca2:	4b5d      	ldr	r3, [pc, #372]	; (8004e18 <SD_init+0x1e8>)
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f008 fec6 	bl	800da36 <f_getfree>
	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	3b02      	subs	r3, #2
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	8952      	ldrh	r2, [r2, #10]
 8004cb4:	4353      	muls	r3, r2
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f7fd fff2 	bl	8002ca0 <__aeabi_ui2d>
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	4b57      	ldr	r3, [pc, #348]	; (8004e1c <SD_init+0x1ec>)
 8004cc0:	f7fd f926 	bl	8001f10 <__aeabi_dmul>
 8004cc4:	0002      	movs	r2, r0
 8004cc6:	000b      	movs	r3, r1
 8004cc8:	0010      	movs	r0, r2
 8004cca:	0019      	movs	r1, r3
 8004ccc:	f7fb fc3a 	bl	8000544 <__aeabi_d2uiz>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	4a53      	ldr	r2, [pc, #332]	; (8004e20 <SD_init+0x1f0>)
 8004cd4:	18b9      	adds	r1, r7, r2
 8004cd6:	600b      	str	r3, [r1, #0]
	sprintf (buffer, "SD CARD Total Size: \t%lu\r\n",total);
 8004cd8:	18bb      	adds	r3, r7, r2
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	4951      	ldr	r1, [pc, #324]	; (8004e24 <SD_init+0x1f4>)
 8004cde:	2614      	movs	r6, #20
 8004ce0:	19bb      	adds	r3, r7, r6
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f00a f8e6 	bl	800eeb4 <siprintf>
	sendUart(buffer, huart2);
 8004ce8:	4c48      	ldr	r4, [pc, #288]	; (8004e0c <SD_init+0x1dc>)
 8004cea:	19bd      	adds	r5, r7, r6
 8004cec:	466b      	mov	r3, sp
 8004cee:	0018      	movs	r0, r3
 8004cf0:	0023      	movs	r3, r4
 8004cf2:	330c      	adds	r3, #12
 8004cf4:	227c      	movs	r2, #124	; 0x7c
 8004cf6:	0019      	movs	r1, r3
 8004cf8:	f00a f9da 	bl	800f0b0 <memcpy>
 8004cfc:	6821      	ldr	r1, [r4, #0]
 8004cfe:	6862      	ldr	r2, [r4, #4]
 8004d00:	68a3      	ldr	r3, [r4, #8]
 8004d02:	0028      	movs	r0, r5
 8004d04:	f7ff ff50 	bl	8004ba8 <sendUart>
	bufClear(buffer);
 8004d08:	0034      	movs	r4, r6
 8004d0a:	193b      	adds	r3, r7, r4
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f7ff ff75 	bl	8004bfc <bufClear>
	free_space = (uint32_t)(free_cluster * pfs->csize * 0.5);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	895b      	ldrh	r3, [r3, #10]
 8004d16:	001a      	movs	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4353      	muls	r3, r2
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f7fd ffbf 	bl	8002ca0 <__aeabi_ui2d>
 8004d22:	2200      	movs	r2, #0
 8004d24:	4b3d      	ldr	r3, [pc, #244]	; (8004e1c <SD_init+0x1ec>)
 8004d26:	f7fd f8f3 	bl	8001f10 <__aeabi_dmul>
 8004d2a:	0002      	movs	r2, r0
 8004d2c:	000b      	movs	r3, r1
 8004d2e:	0010      	movs	r0, r2
 8004d30:	0019      	movs	r1, r3
 8004d32:	f7fb fc07 	bl	8000544 <__aeabi_d2uiz>
 8004d36:	0003      	movs	r3, r0
 8004d38:	4a3b      	ldr	r2, [pc, #236]	; (8004e28 <SD_init+0x1f8>)
 8004d3a:	18b9      	adds	r1, r7, r2
 8004d3c:	600b      	str	r3, [r1, #0]
	sprintf (buffer, "SD CARD Free Space: \t%lu\r\n\n",free_space);
 8004d3e:	18bb      	adds	r3, r7, r2
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	493a      	ldr	r1, [pc, #232]	; (8004e2c <SD_init+0x1fc>)
 8004d44:	0026      	movs	r6, r4
 8004d46:	19bb      	adds	r3, r7, r6
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f00a f8b3 	bl	800eeb4 <siprintf>
	sendUart(buffer, huart2);
 8004d4e:	4c2f      	ldr	r4, [pc, #188]	; (8004e0c <SD_init+0x1dc>)
 8004d50:	19bd      	adds	r5, r7, r6
 8004d52:	466b      	mov	r3, sp
 8004d54:	0018      	movs	r0, r3
 8004d56:	0023      	movs	r3, r4
 8004d58:	330c      	adds	r3, #12
 8004d5a:	227c      	movs	r2, #124	; 0x7c
 8004d5c:	0019      	movs	r1, r3
 8004d5e:	f00a f9a7 	bl	800f0b0 <memcpy>
 8004d62:	6821      	ldr	r1, [r4, #0]
 8004d64:	6862      	ldr	r2, [r4, #4]
 8004d66:	68a3      	ldr	r3, [r4, #8]
 8004d68:	0028      	movs	r0, r5
 8004d6a:	f7ff ff1d 	bl	8004ba8 <sendUart>
	bufClear(buffer);
 8004d6e:	19bb      	adds	r3, r7, r6
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7ff ff43 	bl	8004bfc <bufClear>

	fresult = f_open(fil, "weather_data.txt", FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8004d76:	4d22      	ldr	r5, [pc, #136]	; (8004e00 <SD_init+0x1d0>)
 8004d78:	197c      	adds	r4, r7, r5
 8004d7a:	492d      	ldr	r1, [pc, #180]	; (8004e30 <SD_init+0x200>)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	220b      	movs	r2, #11
 8004d80:	0018      	movs	r0, r3
 8004d82:	f008 f9fb 	bl	800d17c <f_open>
 8004d86:	0003      	movs	r3, r0
 8004d88:	7023      	strb	r3, [r4, #0]
	if (fresult != FR_OK) sendUart("Failed to open (or create) 'weather_data.txt'!\r\n", huart2);
 8004d8a:	197b      	adds	r3, r7, r5
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00f      	beq.n	8004db2 <SD_init+0x182>
 8004d92:	4c1e      	ldr	r4, [pc, #120]	; (8004e0c <SD_init+0x1dc>)
 8004d94:	4d27      	ldr	r5, [pc, #156]	; (8004e34 <SD_init+0x204>)
 8004d96:	466b      	mov	r3, sp
 8004d98:	0018      	movs	r0, r3
 8004d9a:	0023      	movs	r3, r4
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	227c      	movs	r2, #124	; 0x7c
 8004da0:	0019      	movs	r1, r3
 8004da2:	f00a f985 	bl	800f0b0 <memcpy>
 8004da6:	6821      	ldr	r1, [r4, #0]
 8004da8:	6862      	ldr	r2, [r4, #4]
 8004daa:	68a3      	ldr	r3, [r4, #8]
 8004dac:	0028      	movs	r0, r5
 8004dae:	f7ff fefb 	bl	8004ba8 <sendUart>
	fresult = f_close(fil);
 8004db2:	4d13      	ldr	r5, [pc, #76]	; (8004e00 <SD_init+0x1d0>)
 8004db4:	197c      	adds	r4, r7, r5
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	0018      	movs	r0, r3
 8004dba:	f008 fe08 	bl	800d9ce <f_close>
 8004dbe:	0003      	movs	r3, r0
 8004dc0:	7023      	strb	r3, [r4, #0]
	if (fresult == FR_OK)sendUart ("weather_data.txt Successfully created!\r\n", huart2);
 8004dc2:	197b      	adds	r3, r7, r5
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10f      	bne.n	8004dea <SD_init+0x1ba>
 8004dca:	4c10      	ldr	r4, [pc, #64]	; (8004e0c <SD_init+0x1dc>)
 8004dcc:	4d1a      	ldr	r5, [pc, #104]	; (8004e38 <SD_init+0x208>)
 8004dce:	466b      	mov	r3, sp
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	0023      	movs	r3, r4
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	227c      	movs	r2, #124	; 0x7c
 8004dd8:	0019      	movs	r1, r3
 8004dda:	f00a f969 	bl	800f0b0 <memcpy>
 8004dde:	6821      	ldr	r1, [r4, #0]
 8004de0:	6862      	ldr	r2, [r4, #4]
 8004de2:	68a3      	ldr	r3, [r4, #8]
 8004de4:	0028      	movs	r0, r5
 8004de6:	f7ff fedf 	bl	8004ba8 <sendUart>
	SD_saveHeader(fil);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f000 f827 	bl	8004e40 <SD_saveHeader>
}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	46bd      	mov	sp, r7
 8004df6:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <SD_init+0x20c>)
 8004df8:	449d      	add	sp, r3
 8004dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dfc:	ffffeb24 	.word	0xffffeb24
 8004e00:	00001457 	.word	0x00001457
 8004e04:	08012bd8 	.word	0x08012bd8
 8004e08:	00000414 	.word	0x00000414
 8004e0c:	20000c1c 	.word	0x20000c1c
 8004e10:	08012bdc 	.word	0x08012bdc
 8004e14:	08012c00 	.word	0x08012c00
 8004e18:	08012c24 	.word	0x08012c24
 8004e1c:	3fe00000 	.word	0x3fe00000
 8004e20:	00001450 	.word	0x00001450
 8004e24:	08012c28 	.word	0x08012c28
 8004e28:	0000144c 	.word	0x0000144c
 8004e2c:	08012c44 	.word	0x08012c44
 8004e30:	08012c60 	.word	0x08012c60
 8004e34:	08012c74 	.word	0x08012c74
 8004e38:	08012ca8 	.word	0x08012ca8
 8004e3c:	0000145c 	.word	0x0000145c

08004e40 <SD_saveHeader>:
/**
 * @brief Saves a header line to the SD card file.
 * @param fil Pointer to the file object.
 */
void SD_saveHeader(FIL *fil)
{
 8004e40:	b5b0      	push	{r4, r5, r7, lr}
 8004e42:	b0c2      	sub	sp, #264	; 0x108
 8004e44:	af20      	add	r7, sp, #128	; 0x80
 8004e46:	6078      	str	r0, [r7, #4]
	char dataToWrite[128];
	sprintf(dataToWrite, "Date; AHT_temp; AHT_humid; Max_temp; Min_temp; Avg_temp; Weather_condition\r\n");
 8004e48:	4a16      	ldr	r2, [pc, #88]	; (8004ea4 <SD_saveHeader+0x64>)
 8004e4a:	2408      	movs	r4, #8
 8004e4c:	193b      	adds	r3, r7, r4
 8004e4e:	0011      	movs	r1, r2
 8004e50:	0018      	movs	r0, r3
 8004e52:	f00a f82f 	bl	800eeb4 <siprintf>
	if(f_open(fil, "weather_data.txt", FA_OPEN_APPEND | FA_WRITE) == FR_OK)
 8004e56:	4914      	ldr	r1, [pc, #80]	; (8004ea8 <SD_saveHeader+0x68>)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2232      	movs	r2, #50	; 0x32
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f008 f98d 	bl	800d17c <f_open>
 8004e62:	1e03      	subs	r3, r0, #0
 8004e64:	d10a      	bne.n	8004e7c <SD_saveHeader+0x3c>
	{
	  f_puts(dataToWrite, fil);
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	193b      	adds	r3, r7, r4
 8004e6a:	0011      	movs	r1, r2
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f008 ff17 	bl	800dca0 <f_puts>
	  f_close(fil);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	0018      	movs	r0, r3
 8004e76:	f008 fdaa 	bl	800d9ce <f_close>
	}
	else
	{
	  sendUart("Error opening file.\n", huart2);
	}
}
 8004e7a:	e00f      	b.n	8004e9c <SD_saveHeader+0x5c>
	  sendUart("Error opening file.\n", huart2);
 8004e7c:	4c0b      	ldr	r4, [pc, #44]	; (8004eac <SD_saveHeader+0x6c>)
 8004e7e:	4d0c      	ldr	r5, [pc, #48]	; (8004eb0 <SD_saveHeader+0x70>)
 8004e80:	466b      	mov	r3, sp
 8004e82:	0018      	movs	r0, r3
 8004e84:	0023      	movs	r3, r4
 8004e86:	330c      	adds	r3, #12
 8004e88:	227c      	movs	r2, #124	; 0x7c
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	f00a f910 	bl	800f0b0 <memcpy>
 8004e90:	6821      	ldr	r1, [r4, #0]
 8004e92:	6862      	ldr	r2, [r4, #4]
 8004e94:	68a3      	ldr	r3, [r4, #8]
 8004e96:	0028      	movs	r0, r5
 8004e98:	f7ff fe86 	bl	8004ba8 <sendUart>
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b022      	add	sp, #136	; 0x88
 8004ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ea4:	08012cd4 	.word	0x08012cd4
 8004ea8:	08012c60 	.word	0x08012c60
 8004eac:	20000c1c 	.word	0x20000c1c
 8004eb0:	08012d24 	.word	0x08012d24

08004eb4 <SD_saveData>:
 * @param avg_temp Average temperature from weather data.
 * @param weather_condition Weather condition string.
 * @param date Date string.
 */
void SD_saveData(FIL *fil, float aht_temp, float aht_humid, char *max_temp, char *min_temp, char *avg_temp, char *weather_condition, char *date)
{
 8004eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb6:	b0c5      	sub	sp, #276	; 0x114
 8004eb8:	af20      	add	r7, sp, #128	; 0x80
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
	char dataToWrite[128];
	sprintf(dataToWrite, "\"%s\"; %.2f; %.2f; %s; %s; %s; \"%s\"\r\n", date, aht_temp, aht_humid, max_temp, min_temp, avg_temp, weather_condition);
 8004ec2:	68b8      	ldr	r0, [r7, #8]
 8004ec4:	f7fd ff12 	bl	8002cec <__aeabi_f2d>
 8004ec8:	0004      	movs	r4, r0
 8004eca:	000d      	movs	r5, r1
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7fd ff0d 	bl	8002cec <__aeabi_f2d>
 8004ed2:	0002      	movs	r2, r0
 8004ed4:	000b      	movs	r3, r1
 8004ed6:	21b4      	movs	r1, #180	; 0xb4
 8004ed8:	1879      	adds	r1, r7, r1
 8004eda:	6809      	ldr	r1, [r1, #0]
 8004edc:	468c      	mov	ip, r1
 8004ede:	4e20      	ldr	r6, [pc, #128]	; (8004f60 <SD_saveData+0xac>)
 8004ee0:	2110      	movs	r1, #16
 8004ee2:	1878      	adds	r0, r7, r1
 8004ee4:	21b0      	movs	r1, #176	; 0xb0
 8004ee6:	1879      	adds	r1, r7, r1
 8004ee8:	6809      	ldr	r1, [r1, #0]
 8004eea:	9107      	str	r1, [sp, #28]
 8004eec:	21ac      	movs	r1, #172	; 0xac
 8004eee:	1879      	adds	r1, r7, r1
 8004ef0:	6809      	ldr	r1, [r1, #0]
 8004ef2:	9106      	str	r1, [sp, #24]
 8004ef4:	21a8      	movs	r1, #168	; 0xa8
 8004ef6:	1879      	adds	r1, r7, r1
 8004ef8:	6809      	ldr	r1, [r1, #0]
 8004efa:	9105      	str	r1, [sp, #20]
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	9104      	str	r1, [sp, #16]
 8004f00:	9202      	str	r2, [sp, #8]
 8004f02:	9303      	str	r3, [sp, #12]
 8004f04:	9400      	str	r4, [sp, #0]
 8004f06:	9501      	str	r5, [sp, #4]
 8004f08:	4662      	mov	r2, ip
 8004f0a:	0031      	movs	r1, r6
 8004f0c:	f009 ffd2 	bl	800eeb4 <siprintf>
	if(f_open(fil, "weather_data.txt", FA_OPEN_APPEND | FA_WRITE) == FR_OK)
 8004f10:	4914      	ldr	r1, [pc, #80]	; (8004f64 <SD_saveData+0xb0>)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2232      	movs	r2, #50	; 0x32
 8004f16:	0018      	movs	r0, r3
 8004f18:	f008 f930 	bl	800d17c <f_open>
 8004f1c:	1e03      	subs	r3, r0, #0
 8004f1e:	d10b      	bne.n	8004f38 <SD_saveData+0x84>
	{
	  f_puts(dataToWrite, fil);
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	2110      	movs	r1, #16
 8004f24:	187b      	adds	r3, r7, r1
 8004f26:	0011      	movs	r1, r2
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f008 feb9 	bl	800dca0 <f_puts>
	  f_close(fil);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	0018      	movs	r0, r3
 8004f32:	f008 fd4c 	bl	800d9ce <f_close>
	}
	else
	{
	  sendUart("Error opening file.\n", huart2);
	}
}
 8004f36:	e00f      	b.n	8004f58 <SD_saveData+0xa4>
	  sendUart("Error opening file.\n", huart2);
 8004f38:	4c0b      	ldr	r4, [pc, #44]	; (8004f68 <SD_saveData+0xb4>)
 8004f3a:	4d0c      	ldr	r5, [pc, #48]	; (8004f6c <SD_saveData+0xb8>)
 8004f3c:	466b      	mov	r3, sp
 8004f3e:	0018      	movs	r0, r3
 8004f40:	0023      	movs	r3, r4
 8004f42:	330c      	adds	r3, #12
 8004f44:	227c      	movs	r2, #124	; 0x7c
 8004f46:	0019      	movs	r1, r3
 8004f48:	f00a f8b2 	bl	800f0b0 <memcpy>
 8004f4c:	6821      	ldr	r1, [r4, #0]
 8004f4e:	6862      	ldr	r2, [r4, #4]
 8004f50:	68a3      	ldr	r3, [r4, #8]
 8004f52:	0028      	movs	r0, r5
 8004f54:	f7ff fe28 	bl	8004ba8 <sendUart>
}
 8004f58:	46c0      	nop			; (mov r8, r8)
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	b025      	add	sp, #148	; 0x94
 8004f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f60:	08012d3c 	.word	0x08012d3c
 8004f64:	08012c60 	.word	0x08012c60
 8004f68:	20000c1c 	.word	0x20000c1c
 8004f6c:	08012d24 	.word	0x08012d24

08004f70 <SELECT>:
/***************************************
 * SPI functions
 **************************************/

static void SELECT(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	015b      	lsls	r3, r3, #5
 8004f78:	4805      	ldr	r0, [pc, #20]	; (8004f90 <SELECT+0x20>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	0019      	movs	r1, r3
 8004f7e:	f001 ff2f 	bl	8006de0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004f82:	2001      	movs	r0, #1
 8004f84:	f001 fc24 	bl	80067d0 <HAL_Delay>
}
 8004f88:	46c0      	nop			; (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	50000400 	.word	0x50000400

08004f94 <DESELECT>:


static void DESELECT(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	015b      	lsls	r3, r3, #5
 8004f9c:	4805      	ldr	r0, [pc, #20]	; (8004fb4 <DESELECT+0x20>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	0019      	movs	r1, r3
 8004fa2:	f001 ff1d 	bl	8006de0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	f001 fc12 	bl	80067d0 <HAL_Delay>
}
 8004fac:	46c0      	nop			; (mov r8, r8)
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	50000400 	.word	0x50000400

08004fb8 <SPI_TxByte>:


static void SPI_TxByte(uint8_t data)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	0002      	movs	r2, r0
 8004fc0:	1dfb      	adds	r3, r7, #7
 8004fc2:	701a      	strb	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004fc4:	46c0      	nop			; (mov r8, r8)
 8004fc6:	4b08      	ldr	r3, [pc, #32]	; (8004fe8 <SPI_TxByte+0x30>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	4013      	ands	r3, r2
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d1f8      	bne.n	8004fc6 <SPI_TxByte+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8004fd4:	1df9      	adds	r1, r7, #7
 8004fd6:	4804      	ldr	r0, [pc, #16]	; (8004fe8 <SPI_TxByte+0x30>)
 8004fd8:	2364      	movs	r3, #100	; 0x64
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f003 fd3c 	bl	8008a58 <HAL_SPI_Transmit>
}
 8004fe0:	46c0      	nop			; (mov r8, r8)
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b002      	add	sp, #8
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	20000afc 	.word	0x20000afc

08004fec <SPI_TxBuffer>:

static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	000a      	movs	r2, r1
 8004ff6:	1cbb      	adds	r3, r7, #2
 8004ff8:	801a      	strh	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	4b08      	ldr	r3, [pc, #32]	; (8005020 <SPI_TxBuffer+0x34>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2202      	movs	r2, #2
 8005004:	4013      	ands	r3, r2
 8005006:	2b02      	cmp	r3, #2
 8005008:	d1f8      	bne.n	8004ffc <SPI_TxBuffer+0x10>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800500a:	1cbb      	adds	r3, r7, #2
 800500c:	881a      	ldrh	r2, [r3, #0]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4803      	ldr	r0, [pc, #12]	; (8005020 <SPI_TxBuffer+0x34>)
 8005012:	2364      	movs	r3, #100	; 0x64
 8005014:	f003 fd20 	bl	8008a58 <HAL_SPI_Transmit>
}
 8005018:	46c0      	nop			; (mov r8, r8)
 800501a:	46bd      	mov	sp, r7
 800501c:	b002      	add	sp, #8
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20000afc 	.word	0x20000afc

08005024 <SPI_RxByte>:

static uint8_t SPI_RxByte(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800502a:	1dfb      	adds	r3, r7, #7
 800502c:	22ff      	movs	r2, #255	; 0xff
 800502e:	701a      	strb	r2, [r3, #0]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005030:	46c0      	nop			; (mov r8, r8)
 8005032:	4b0a      	ldr	r3, [pc, #40]	; (800505c <SPI_RxByte+0x38>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2202      	movs	r2, #2
 800503a:	4013      	ands	r3, r2
 800503c:	2b02      	cmp	r3, #2
 800503e:	d1f8      	bne.n	8005032 <SPI_RxByte+0xe>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005040:	1dba      	adds	r2, r7, #6
 8005042:	1df9      	adds	r1, r7, #7
 8005044:	4805      	ldr	r0, [pc, #20]	; (800505c <SPI_RxByte+0x38>)
 8005046:	2364      	movs	r3, #100	; 0x64
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	2301      	movs	r3, #1
 800504c:	f003 fe61 	bl	8008d12 <HAL_SPI_TransmitReceive>

	return data;
 8005050:	1dbb      	adds	r3, r7, #6
 8005052:	781b      	ldrb	r3, [r3, #0]
}
 8005054:	0018      	movs	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	b002      	add	sp, #8
 800505a:	bd80      	pop	{r7, pc}
 800505c:	20000afc 	.word	0x20000afc

08005060 <SPI_RxBytePtr>:

static void SPI_RxBytePtr(uint8_t *buff) 
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8005068:	f7ff ffdc 	bl	8005024 <SPI_RxByte>
 800506c:	0003      	movs	r3, r0
 800506e:	001a      	movs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	701a      	strb	r2, [r3, #0]
}
 8005074:	46c0      	nop			; (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	b002      	add	sp, #8
 800507a:	bd80      	pop	{r7, pc}

0800507c <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/

static uint8_t SD_ReadyWait(void)
{
 800507c:	b590      	push	{r4, r7, lr}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8005082:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <SD_ReadyWait+0x38>)
 8005084:	22fa      	movs	r2, #250	; 0xfa
 8005086:	0052      	lsls	r2, r2, #1
 8005088:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800508a:	1dfc      	adds	r4, r7, #7
 800508c:	f7ff ffca 	bl	8005024 <SPI_RxByte>
 8005090:	0003      	movs	r3, r0
 8005092:	7023      	strb	r3, [r4, #0]
	} while ((res != 0xFF) && Timer2);
 8005094:	1dfb      	adds	r3, r7, #7
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2bff      	cmp	r3, #255	; 0xff
 800509a:	d004      	beq.n	80050a6 <SD_ReadyWait+0x2a>
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <SD_ReadyWait+0x38>)
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1f1      	bne.n	800508a <SD_ReadyWait+0xe>

	return res;
 80050a6:	1dfb      	adds	r3, r7, #7
 80050a8:	781b      	ldrb	r3, [r3, #0]
}
 80050aa:	0018      	movs	r0, r3
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b003      	add	sp, #12
 80050b0:	bd90      	pop	{r4, r7, pc}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	20000d38 	.word	0x20000d38

080050b8 <SD_PowerOn>:

static void SD_PowerOn(void) 
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80050be:	4b20      	ldr	r3, [pc, #128]	; (8005140 <SD_PowerOn+0x88>)
 80050c0:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80050c2:	f7ff ff67 	bl	8004f94 <DESELECT>
	for(int i = 0; i < 10; i++)
 80050c6:	2300      	movs	r3, #0
 80050c8:	60bb      	str	r3, [r7, #8]
 80050ca:	e005      	b.n	80050d8 <SD_PowerOn+0x20>
	{
		SPI_TxByte(0xFF);
 80050cc:	20ff      	movs	r0, #255	; 0xff
 80050ce:	f7ff ff73 	bl	8004fb8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	3301      	adds	r3, #1
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b09      	cmp	r3, #9
 80050dc:	ddf6      	ble.n	80050cc <SD_PowerOn+0x14>
	}

	/* slave select */
	SELECT();
 80050de:	f7ff ff47 	bl	8004f70 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80050e2:	003b      	movs	r3, r7
 80050e4:	2240      	movs	r2, #64	; 0x40
 80050e6:	701a      	strb	r2, [r3, #0]
	args[1] = 0;
 80050e8:	003b      	movs	r3, r7
 80050ea:	2200      	movs	r2, #0
 80050ec:	705a      	strb	r2, [r3, #1]
	args[2] = 0;
 80050ee:	003b      	movs	r3, r7
 80050f0:	2200      	movs	r2, #0
 80050f2:	709a      	strb	r2, [r3, #2]
	args[3] = 0;
 80050f4:	003b      	movs	r3, r7
 80050f6:	2200      	movs	r2, #0
 80050f8:	70da      	strb	r2, [r3, #3]
	args[4] = 0;
 80050fa:	003b      	movs	r3, r7
 80050fc:	2200      	movs	r2, #0
 80050fe:	711a      	strb	r2, [r3, #4]
	args[5] = 0x95;		/* CRC */
 8005100:	003b      	movs	r3, r7
 8005102:	2295      	movs	r2, #149	; 0x95
 8005104:	715a      	strb	r2, [r3, #5]

	SPI_TxBuffer(args, sizeof(args));
 8005106:	003b      	movs	r3, r7
 8005108:	2106      	movs	r1, #6
 800510a:	0018      	movs	r0, r3
 800510c:	f7ff ff6e 	bl	8004fec <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8005110:	e002      	b.n	8005118 <SD_PowerOn+0x60>
	{
		cnt--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3b01      	subs	r3, #1
 8005116:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8005118:	f7ff ff84 	bl	8005024 <SPI_RxByte>
 800511c:	0003      	movs	r3, r0
 800511e:	2b01      	cmp	r3, #1
 8005120:	d002      	beq.n	8005128 <SD_PowerOn+0x70>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1f4      	bne.n	8005112 <SD_PowerOn+0x5a>
	}

	DESELECT();
 8005128:	f7ff ff34 	bl	8004f94 <DESELECT>
	SPI_TxByte(0XFF);
 800512c:	20ff      	movs	r0, #255	; 0xff
 800512e:	f7ff ff43 	bl	8004fb8 <SPI_TxByte>

	PowerFlag = 1;
 8005132:	4b04      	ldr	r3, [pc, #16]	; (8005144 <SD_PowerOn+0x8c>)
 8005134:	2201      	movs	r2, #1
 8005136:	701a      	strb	r2, [r3, #0]
}
 8005138:	46c0      	nop			; (mov r8, r8)
 800513a:	46bd      	mov	sp, r7
 800513c:	b004      	add	sp, #16
 800513e:	bd80      	pop	{r7, pc}
 8005140:	00001fff 	.word	0x00001fff
 8005144:	20000a4d 	.word	0x20000a4d

08005148 <SD_PowerOff>:

static void SD_PowerOff(void) 
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800514c:	4b02      	ldr	r3, [pc, #8]	; (8005158 <SD_PowerOff+0x10>)
 800514e:	2200      	movs	r2, #0
 8005150:	701a      	strb	r2, [r3, #0]
}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000a4d 	.word	0x20000a4d

0800515c <SD_CheckPower>:


static uint8_t SD_CheckPower(void) 
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8005160:	4b02      	ldr	r3, [pc, #8]	; (800516c <SD_CheckPower+0x10>)
 8005162:	781b      	ldrb	r3, [r3, #0]
}
 8005164:	0018      	movs	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	20000a4d 	.word	0x20000a4d

08005170 <SD_RxDataBlock>:

static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8005170:	b5b0      	push	{r4, r5, r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800517a:	4b16      	ldr	r3, [pc, #88]	; (80051d4 <SD_RxDataBlock+0x64>)
 800517c:	22c8      	movs	r2, #200	; 0xc8
 800517e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8005180:	250f      	movs	r5, #15
 8005182:	197c      	adds	r4, r7, r5
 8005184:	f7ff ff4e 	bl	8005024 <SPI_RxByte>
 8005188:	0003      	movs	r3, r0
 800518a:	7023      	strb	r3, [r4, #0]
	} while((token == 0xFF) && Timer1);
 800518c:	197b      	adds	r3, r7, r5
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2bff      	cmp	r3, #255	; 0xff
 8005192:	d104      	bne.n	800519e <SD_RxDataBlock+0x2e>
 8005194:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <SD_RxDataBlock+0x64>)
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f0      	bne.n	8005180 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800519e:	230f      	movs	r3, #15
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2bfe      	cmp	r3, #254	; 0xfe
 80051a6:	d001      	beq.n	80051ac <SD_RxDataBlock+0x3c>
 80051a8:	2300      	movs	r3, #0
 80051aa:	e00f      	b.n	80051cc <SD_RxDataBlock+0x5c>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	607a      	str	r2, [r7, #4]
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7ff ff54 	bl	8005060 <SPI_RxBytePtr>
	} while(len--);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	1e5a      	subs	r2, r3, #1
 80051bc:	603a      	str	r2, [r7, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f4      	bne.n	80051ac <SD_RxDataBlock+0x3c>

	/* discard CRC */
	SPI_RxByte();
 80051c2:	f7ff ff2f 	bl	8005024 <SPI_RxByte>
	SPI_RxByte();
 80051c6:	f7ff ff2d 	bl	8005024 <SPI_RxByte>

	return TRUE;
 80051ca:	2301      	movs	r3, #1
}
 80051cc:	0018      	movs	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b004      	add	sp, #16
 80051d2:	bdb0      	pop	{r4, r5, r7, pc}
 80051d4:	20000d36 	.word	0x20000d36

080051d8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80051d8:	b5b0      	push	{r4, r5, r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	000a      	movs	r2, r1
 80051e2:	1cfb      	adds	r3, r7, #3
 80051e4:	701a      	strb	r2, [r3, #0]
	uint8_t resp;
	uint8_t i = 0;
 80051e6:	230e      	movs	r3, #14
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80051ee:	f7ff ff45 	bl	800507c <SD_ReadyWait>
 80051f2:	0003      	movs	r3, r0
 80051f4:	2bff      	cmp	r3, #255	; 0xff
 80051f6:	d001      	beq.n	80051fc <SD_TxDataBlock+0x24>
 80051f8:	2300      	movs	r3, #0
 80051fa:	e03c      	b.n	8005276 <SD_TxDataBlock+0x9e>

	/* transmit token */
	SPI_TxByte(token);
 80051fc:	1cfb      	adds	r3, r7, #3
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	0018      	movs	r0, r3
 8005202:	f7ff fed9 	bl	8004fb8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8005206:	1cfb      	adds	r3, r7, #3
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2bfd      	cmp	r3, #253	; 0xfd
 800520c:	d029      	beq.n	8005262 <SD_TxDataBlock+0x8a>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800520e:	2380      	movs	r3, #128	; 0x80
 8005210:	009a      	lsls	r2, r3, #2
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	0011      	movs	r1, r2
 8005216:	0018      	movs	r0, r3
 8005218:	f7ff fee8 	bl	8004fec <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800521c:	f7ff ff02 	bl	8005024 <SPI_RxByte>
		SPI_RxByte();
 8005220:	f7ff ff00 	bl	8005024 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8005224:	e011      	b.n	800524a <SD_TxDataBlock+0x72>
		{
			resp = SPI_RxByte();
 8005226:	250f      	movs	r5, #15
 8005228:	197c      	adds	r4, r7, r5
 800522a:	f7ff fefb 	bl	8005024 <SPI_RxByte>
 800522e:	0003      	movs	r3, r0
 8005230:	7023      	strb	r3, [r4, #0]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8005232:	197b      	adds	r3, r7, r5
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	221f      	movs	r2, #31
 8005238:	4013      	ands	r3, r2
 800523a:	2b05      	cmp	r3, #5
 800523c:	d00b      	beq.n	8005256 <SD_TxDataBlock+0x7e>
			i++;
 800523e:	210e      	movs	r1, #14
 8005240:	187b      	adds	r3, r7, r1
 8005242:	781a      	ldrb	r2, [r3, #0]
 8005244:	187b      	adds	r3, r7, r1
 8005246:	3201      	adds	r2, #1
 8005248:	701a      	strb	r2, [r3, #0]
		while (i <= 64)
 800524a:	230e      	movs	r3, #14
 800524c:	18fb      	adds	r3, r7, r3
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	d9e8      	bls.n	8005226 <SD_TxDataBlock+0x4e>
 8005254:	e000      	b.n	8005258 <SD_TxDataBlock+0x80>
			if ((resp & 0x1F) == 0x05) break;
 8005256:	46c0      	nop			; (mov r8, r8)
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8005258:	46c0      	nop			; (mov r8, r8)
 800525a:	f7ff fee3 	bl	8005024 <SPI_RxByte>
 800525e:	1e03      	subs	r3, r0, #0
 8005260:	d0fb      	beq.n	800525a <SD_TxDataBlock+0x82>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8005262:	230f      	movs	r3, #15
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	221f      	movs	r2, #31
 800526a:	4013      	ands	r3, r2
 800526c:	2b05      	cmp	r3, #5
 800526e:	d101      	bne.n	8005274 <SD_TxDataBlock+0x9c>
 8005270:	2301      	movs	r3, #1
 8005272:	e000      	b.n	8005276 <SD_TxDataBlock+0x9e>

	return FALSE;
 8005274:	2300      	movs	r3, #0
}
 8005276:	0018      	movs	r0, r3
 8005278:	46bd      	mov	sp, r7
 800527a:	b004      	add	sp, #16
 800527c:	bdb0      	pop	{r4, r5, r7, pc}

0800527e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800527e:	b5b0      	push	{r4, r5, r7, lr}
 8005280:	b084      	sub	sp, #16
 8005282:	af00      	add	r7, sp, #0
 8005284:	0002      	movs	r2, r0
 8005286:	6039      	str	r1, [r7, #0]
 8005288:	1dfb      	adds	r3, r7, #7
 800528a:	701a      	strb	r2, [r3, #0]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800528c:	f7ff fef6 	bl	800507c <SD_ReadyWait>
 8005290:	0003      	movs	r3, r0
 8005292:	2bff      	cmp	r3, #255	; 0xff
 8005294:	d001      	beq.n	800529a <SD_SendCmd+0x1c>
 8005296:	23ff      	movs	r3, #255	; 0xff
 8005298:	e059      	b.n	800534e <SD_SendCmd+0xd0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800529a:	1dfb      	adds	r3, r7, #7
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	0018      	movs	r0, r3
 80052a0:	f7ff fe8a 	bl	8004fb8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	0e1b      	lsrs	r3, r3, #24
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	0018      	movs	r0, r3
 80052ac:	f7ff fe84 	bl	8004fb8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	0c1b      	lsrs	r3, r3, #16
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	0018      	movs	r0, r3
 80052b8:	f7ff fe7e 	bl	8004fb8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	0a1b      	lsrs	r3, r3, #8
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	0018      	movs	r0, r3
 80052c4:	f7ff fe78 	bl	8004fb8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	0018      	movs	r0, r3
 80052ce:	f7ff fe73 	bl	8004fb8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80052d2:	1dfb      	adds	r3, r7, #7
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2b40      	cmp	r3, #64	; 0x40
 80052d8:	d104      	bne.n	80052e4 <SD_SendCmd+0x66>
 80052da:	230f      	movs	r3, #15
 80052dc:	18fb      	adds	r3, r7, r3
 80052de:	2295      	movs	r2, #149	; 0x95
 80052e0:	701a      	strb	r2, [r3, #0]
 80052e2:	e00c      	b.n	80052fe <SD_SendCmd+0x80>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80052e4:	1dfb      	adds	r3, r7, #7
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b48      	cmp	r3, #72	; 0x48
 80052ea:	d104      	bne.n	80052f6 <SD_SendCmd+0x78>
 80052ec:	230f      	movs	r3, #15
 80052ee:	18fb      	adds	r3, r7, r3
 80052f0:	2287      	movs	r2, #135	; 0x87
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	e003      	b.n	80052fe <SD_SendCmd+0x80>
	else crc = 1;
 80052f6:	230f      	movs	r3, #15
 80052f8:	18fb      	adds	r3, r7, r3
 80052fa:	2201      	movs	r2, #1
 80052fc:	701a      	strb	r2, [r3, #0]

	/* transmit CRC */
	SPI_TxByte(crc);
 80052fe:	230f      	movs	r3, #15
 8005300:	18fb      	adds	r3, r7, r3
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	0018      	movs	r0, r3
 8005306:	f7ff fe57 	bl	8004fb8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800530a:	1dfb      	adds	r3, r7, #7
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b4c      	cmp	r3, #76	; 0x4c
 8005310:	d101      	bne.n	8005316 <SD_SendCmd+0x98>
 8005312:	f7ff fe87 	bl	8005024 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8005316:	230e      	movs	r3, #14
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	220a      	movs	r2, #10
 800531c:	701a      	strb	r2, [r3, #0]
	do {
		res = SPI_RxByte();
 800531e:	250d      	movs	r5, #13
 8005320:	197c      	adds	r4, r7, r5
 8005322:	f7ff fe7f 	bl	8005024 <SPI_RxByte>
 8005326:	0003      	movs	r3, r0
 8005328:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 800532a:	197b      	adds	r3, r7, r5
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	b25b      	sxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	da09      	bge.n	8005348 <SD_SendCmd+0xca>
 8005334:	210e      	movs	r1, #14
 8005336:	187b      	adds	r3, r7, r1
 8005338:	187a      	adds	r2, r7, r1
 800533a:	7812      	ldrb	r2, [r2, #0]
 800533c:	3a01      	subs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	187b      	adds	r3, r7, r1
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1ea      	bne.n	800531e <SD_SendCmd+0xa0>

	return res;
 8005348:	230d      	movs	r3, #13
 800534a:	18fb      	adds	r3, r7, r3
 800534c:	781b      	ldrb	r3, [r3, #0]
}
 800534e:	0018      	movs	r0, r3
 8005350:	46bd      	mov	sp, r7
 8005352:	b004      	add	sp, #16
 8005354:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005358 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8005358:	b5b0      	push	{r4, r5, r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	0002      	movs	r2, r0
 8005360:	1dfb      	adds	r3, r7, #7
 8005362:	701a      	strb	r2, [r3, #0]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8005364:	1dfb      	adds	r3, r7, #7
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <SD_disk_initialize+0x18>
 800536c:	2301      	movs	r3, #1
 800536e:	e0f6      	b.n	800555e <SD_disk_initialize+0x206>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8005370:	4b7d      	ldr	r3, [pc, #500]	; (8005568 <SD_disk_initialize+0x210>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	001a      	movs	r2, r3
 8005378:	2302      	movs	r3, #2
 800537a:	4013      	ands	r3, r2
 800537c:	d003      	beq.n	8005386 <SD_disk_initialize+0x2e>
 800537e:	4b7a      	ldr	r3, [pc, #488]	; (8005568 <SD_disk_initialize+0x210>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	e0eb      	b.n	800555e <SD_disk_initialize+0x206>

	/* power on */
	SD_PowerOn();
 8005386:	f7ff fe97 	bl	80050b8 <SD_PowerOn>

	/* slave select */
	SELECT();
 800538a:	f7ff fdf1 	bl	8004f70 <SELECT>

	/* check disk type */
	type = 0;
 800538e:	230e      	movs	r3, #14
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	2200      	movs	r2, #0
 8005394:	701a      	strb	r2, [r3, #0]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8005396:	2100      	movs	r1, #0
 8005398:	2040      	movs	r0, #64	; 0x40
 800539a:	f7ff ff70 	bl	800527e <SD_SendCmd>
 800539e:	0003      	movs	r3, r0
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d000      	beq.n	80053a6 <SD_disk_initialize+0x4e>
 80053a4:	e0c0      	b.n	8005528 <SD_disk_initialize+0x1d0>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80053a6:	4b71      	ldr	r3, [pc, #452]	; (800556c <SD_disk_initialize+0x214>)
 80053a8:	22fa      	movs	r2, #250	; 0xfa
 80053aa:	0092      	lsls	r2, r2, #2
 80053ac:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80053ae:	23d5      	movs	r3, #213	; 0xd5
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	0019      	movs	r1, r3
 80053b4:	2048      	movs	r0, #72	; 0x48
 80053b6:	f7ff ff62 	bl	800527e <SD_SendCmd>
 80053ba:	0003      	movs	r3, r0
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d000      	beq.n	80053c2 <SD_disk_initialize+0x6a>
 80053c0:	e06d      	b.n	800549e <SD_disk_initialize+0x146>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80053c2:	230f      	movs	r3, #15
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	e00e      	b.n	80053ea <SD_disk_initialize+0x92>
			{
				ocr[n] = SPI_RxByte();
 80053cc:	250f      	movs	r5, #15
 80053ce:	197b      	adds	r3, r7, r5
 80053d0:	781c      	ldrb	r4, [r3, #0]
 80053d2:	f7ff fe27 	bl	8005024 <SPI_RxByte>
 80053d6:	0003      	movs	r3, r0
 80053d8:	001a      	movs	r2, r3
 80053da:	2308      	movs	r3, #8
 80053dc:	18fb      	adds	r3, r7, r3
 80053de:	551a      	strb	r2, [r3, r4]
			for (n = 0; n < 4; n++)
 80053e0:	197b      	adds	r3, r7, r5
 80053e2:	781a      	ldrb	r2, [r3, #0]
 80053e4:	197b      	adds	r3, r7, r5
 80053e6:	3201      	adds	r2, #1
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	230f      	movs	r3, #15
 80053ec:	18fb      	adds	r3, r7, r3
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d9eb      	bls.n	80053cc <SD_disk_initialize+0x74>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80053f4:	2208      	movs	r2, #8
 80053f6:	18bb      	adds	r3, r7, r2
 80053f8:	789b      	ldrb	r3, [r3, #2]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d000      	beq.n	8005400 <SD_disk_initialize+0xa8>
 80053fe:	e093      	b.n	8005528 <SD_disk_initialize+0x1d0>
 8005400:	18bb      	adds	r3, r7, r2
 8005402:	78db      	ldrb	r3, [r3, #3]
 8005404:	2baa      	cmp	r3, #170	; 0xaa
 8005406:	d000      	beq.n	800540a <SD_disk_initialize+0xb2>
 8005408:	e08e      	b.n	8005528 <SD_disk_initialize+0x1d0>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800540a:	2100      	movs	r1, #0
 800540c:	2077      	movs	r0, #119	; 0x77
 800540e:	f7ff ff36 	bl	800527e <SD_SendCmd>
 8005412:	0003      	movs	r3, r0
 8005414:	2b01      	cmp	r3, #1
 8005416:	d807      	bhi.n	8005428 <SD_disk_initialize+0xd0>
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	05db      	lsls	r3, r3, #23
 800541c:	0019      	movs	r1, r3
 800541e:	2069      	movs	r0, #105	; 0x69
 8005420:	f7ff ff2d 	bl	800527e <SD_SendCmd>
 8005424:	1e03      	subs	r3, r0, #0
 8005426:	d005      	beq.n	8005434 <SD_disk_initialize+0xdc>
				} while (Timer1);
 8005428:	4b50      	ldr	r3, [pc, #320]	; (800556c <SD_disk_initialize+0x214>)
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1eb      	bne.n	800540a <SD_disk_initialize+0xb2>
 8005432:	e000      	b.n	8005436 <SD_disk_initialize+0xde>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005434:	46c0      	nop			; (mov r8, r8)

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8005436:	4b4d      	ldr	r3, [pc, #308]	; (800556c <SD_disk_initialize+0x214>)
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d100      	bne.n	8005442 <SD_disk_initialize+0xea>
 8005440:	e072      	b.n	8005528 <SD_disk_initialize+0x1d0>
 8005442:	2100      	movs	r1, #0
 8005444:	207a      	movs	r0, #122	; 0x7a
 8005446:	f7ff ff1a 	bl	800527e <SD_SendCmd>
 800544a:	1e03      	subs	r3, r0, #0
 800544c:	d000      	beq.n	8005450 <SD_disk_initialize+0xf8>
 800544e:	e06b      	b.n	8005528 <SD_disk_initialize+0x1d0>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8005450:	230f      	movs	r3, #15
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	2200      	movs	r2, #0
 8005456:	701a      	strb	r2, [r3, #0]
 8005458:	e00e      	b.n	8005478 <SD_disk_initialize+0x120>
					{
						ocr[n] = SPI_RxByte();
 800545a:	250f      	movs	r5, #15
 800545c:	197b      	adds	r3, r7, r5
 800545e:	781c      	ldrb	r4, [r3, #0]
 8005460:	f7ff fde0 	bl	8005024 <SPI_RxByte>
 8005464:	0003      	movs	r3, r0
 8005466:	001a      	movs	r2, r3
 8005468:	2308      	movs	r3, #8
 800546a:	18fb      	adds	r3, r7, r3
 800546c:	551a      	strb	r2, [r3, r4]
					for (n = 0; n < 4; n++)
 800546e:	197b      	adds	r3, r7, r5
 8005470:	781a      	ldrb	r2, [r3, #0]
 8005472:	197b      	adds	r3, r7, r5
 8005474:	3201      	adds	r2, #1
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	230f      	movs	r3, #15
 800547a:	18fb      	adds	r3, r7, r3
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b03      	cmp	r3, #3
 8005480:	d9eb      	bls.n	800545a <SD_disk_initialize+0x102>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8005482:	2308      	movs	r3, #8
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	001a      	movs	r2, r3
 800548a:	2340      	movs	r3, #64	; 0x40
 800548c:	4013      	ands	r3, r2
 800548e:	d001      	beq.n	8005494 <SD_disk_initialize+0x13c>
 8005490:	220c      	movs	r2, #12
 8005492:	e000      	b.n	8005496 <SD_disk_initialize+0x13e>
 8005494:	2204      	movs	r2, #4
 8005496:	230e      	movs	r3, #14
 8005498:	18fb      	adds	r3, r7, r3
 800549a:	701a      	strb	r2, [r3, #0]
 800549c:	e044      	b.n	8005528 <SD_disk_initialize+0x1d0>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800549e:	2100      	movs	r1, #0
 80054a0:	2077      	movs	r0, #119	; 0x77
 80054a2:	f7ff feec 	bl	800527e <SD_SendCmd>
 80054a6:	0003      	movs	r3, r0
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d808      	bhi.n	80054be <SD_disk_initialize+0x166>
 80054ac:	2100      	movs	r1, #0
 80054ae:	2069      	movs	r0, #105	; 0x69
 80054b0:	f7ff fee5 	bl	800527e <SD_SendCmd>
 80054b4:	0003      	movs	r3, r0
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d801      	bhi.n	80054be <SD_disk_initialize+0x166>
 80054ba:	2202      	movs	r2, #2
 80054bc:	e000      	b.n	80054c0 <SD_disk_initialize+0x168>
 80054be:	2201      	movs	r2, #1
 80054c0:	230e      	movs	r3, #14
 80054c2:	18fb      	adds	r3, r7, r3
 80054c4:	701a      	strb	r2, [r3, #0]

			do
			{
				if (type == CT_SD1)
 80054c6:	230e      	movs	r3, #14
 80054c8:	18fb      	adds	r3, r7, r3
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d10d      	bne.n	80054ec <SD_disk_initialize+0x194>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80054d0:	2100      	movs	r1, #0
 80054d2:	2077      	movs	r0, #119	; 0x77
 80054d4:	f7ff fed3 	bl	800527e <SD_SendCmd>
 80054d8:	0003      	movs	r3, r0
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d80c      	bhi.n	80054f8 <SD_disk_initialize+0x1a0>
 80054de:	2100      	movs	r1, #0
 80054e0:	2069      	movs	r0, #105	; 0x69
 80054e2:	f7ff fecc 	bl	800527e <SD_SendCmd>
 80054e6:	1e03      	subs	r3, r0, #0
 80054e8:	d106      	bne.n	80054f8 <SD_disk_initialize+0x1a0>
 80054ea:	e00c      	b.n	8005506 <SD_disk_initialize+0x1ae>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80054ec:	2100      	movs	r1, #0
 80054ee:	2041      	movs	r0, #65	; 0x41
 80054f0:	f7ff fec5 	bl	800527e <SD_SendCmd>
 80054f4:	1e03      	subs	r3, r0, #0
 80054f6:	d005      	beq.n	8005504 <SD_disk_initialize+0x1ac>
				}

			} while (Timer1);
 80054f8:	4b1c      	ldr	r3, [pc, #112]	; (800556c <SD_disk_initialize+0x214>)
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e1      	bne.n	80054c6 <SD_disk_initialize+0x16e>
 8005502:	e000      	b.n	8005506 <SD_disk_initialize+0x1ae>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8005504:	46c0      	nop			; (mov r8, r8)

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8005506:	4b19      	ldr	r3, [pc, #100]	; (800556c <SD_disk_initialize+0x214>)
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d007      	beq.n	8005520 <SD_disk_initialize+0x1c8>
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	0019      	movs	r1, r3
 8005516:	2050      	movs	r0, #80	; 0x50
 8005518:	f7ff feb1 	bl	800527e <SD_SendCmd>
 800551c:	1e03      	subs	r3, r0, #0
 800551e:	d003      	beq.n	8005528 <SD_disk_initialize+0x1d0>
 8005520:	230e      	movs	r3, #14
 8005522:	18fb      	adds	r3, r7, r3
 8005524:	2200      	movs	r2, #0
 8005526:	701a      	strb	r2, [r3, #0]
		}
	}

	CardType = type;
 8005528:	4b11      	ldr	r3, [pc, #68]	; (8005570 <SD_disk_initialize+0x218>)
 800552a:	240e      	movs	r4, #14
 800552c:	193a      	adds	r2, r7, r4
 800552e:	7812      	ldrb	r2, [r2, #0]
 8005530:	701a      	strb	r2, [r3, #0]

	/* Idle */
	DESELECT();
 8005532:	f7ff fd2f 	bl	8004f94 <DESELECT>
	SPI_RxByte();
 8005536:	f7ff fd75 	bl	8005024 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800553a:	193b      	adds	r3, r7, r4
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d008      	beq.n	8005554 <SD_disk_initialize+0x1fc>
	{
		Stat &= ~STA_NOINIT;
 8005542:	4b09      	ldr	r3, [pc, #36]	; (8005568 <SD_disk_initialize+0x210>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2201      	movs	r2, #1
 800554a:	4393      	bics	r3, r2
 800554c:	b2da      	uxtb	r2, r3
 800554e:	4b06      	ldr	r3, [pc, #24]	; (8005568 <SD_disk_initialize+0x210>)
 8005550:	701a      	strb	r2, [r3, #0]
 8005552:	e001      	b.n	8005558 <SD_disk_initialize+0x200>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8005554:	f7ff fdf8 	bl	8005148 <SD_PowerOff>
	}

	return Stat;
 8005558:	4b03      	ldr	r3, [pc, #12]	; (8005568 <SD_disk_initialize+0x210>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	b2db      	uxtb	r3, r3
}
 800555e:	0018      	movs	r0, r3
 8005560:	46bd      	mov	sp, r7
 8005562:	b004      	add	sp, #16
 8005564:	bdb0      	pop	{r4, r5, r7, pc}
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	20000000 	.word	0x20000000
 800556c:	20000d36 	.word	0x20000d36
 8005570:	20000a4c 	.word	0x20000a4c

08005574 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	0002      	movs	r2, r0
 800557c:	1dfb      	adds	r3, r7, #7
 800557e:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;
 8005580:	1dfb      	adds	r3, r7, #7
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <SD_disk_status+0x18>
 8005588:	2301      	movs	r3, #1
 800558a:	e002      	b.n	8005592 <SD_disk_status+0x1e>
	return Stat;
 800558c:	4b03      	ldr	r3, [pc, #12]	; (800559c <SD_disk_status+0x28>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	b2db      	uxtb	r3, r3
}
 8005592:	0018      	movs	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	b002      	add	sp, #8
 8005598:	bd80      	pop	{r7, pc}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	20000000 	.word	0x20000000

080055a0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	607a      	str	r2, [r7, #4]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	210f      	movs	r1, #15
 80055ae:	187b      	adds	r3, r7, r1
 80055b0:	1c02      	adds	r2, r0, #0
 80055b2:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80055b4:	187b      	adds	r3, r7, r1
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d102      	bne.n	80055c2 <SD_disk_read+0x22>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <SD_disk_read+0x26>
 80055c2:	2304      	movs	r3, #4
 80055c4:	e053      	b.n	800566e <SD_disk_read+0xce>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80055c6:	4b2c      	ldr	r3, [pc, #176]	; (8005678 <SD_disk_read+0xd8>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	001a      	movs	r2, r3
 80055ce:	2301      	movs	r3, #1
 80055d0:	4013      	ands	r3, r2
 80055d2:	d001      	beq.n	80055d8 <SD_disk_read+0x38>
 80055d4:	2303      	movs	r3, #3
 80055d6:	e04a      	b.n	800566e <SD_disk_read+0xce>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80055d8:	4b28      	ldr	r3, [pc, #160]	; (800567c <SD_disk_read+0xdc>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	001a      	movs	r2, r3
 80055de:	2304      	movs	r3, #4
 80055e0:	4013      	ands	r3, r2
 80055e2:	d102      	bne.n	80055ea <SD_disk_read+0x4a>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	025b      	lsls	r3, r3, #9
 80055e8:	607b      	str	r3, [r7, #4]

	SELECT();
 80055ea:	f7ff fcc1 	bl	8004f70 <SELECT>

	if (count == 1)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d112      	bne.n	800561a <SD_disk_read+0x7a>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	0019      	movs	r1, r3
 80055f8:	2051      	movs	r0, #81	; 0x51
 80055fa:	f7ff fe40 	bl	800527e <SD_SendCmd>
 80055fe:	1e03      	subs	r3, r0, #0
 8005600:	d12d      	bne.n	800565e <SD_disk_read+0xbe>
 8005602:	2380      	movs	r3, #128	; 0x80
 8005604:	009a      	lsls	r2, r3, #2
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	0011      	movs	r1, r2
 800560a:	0018      	movs	r0, r3
 800560c:	f7ff fdb0 	bl	8005170 <SD_RxDataBlock>
 8005610:	1e03      	subs	r3, r0, #0
 8005612:	d024      	beq.n	800565e <SD_disk_read+0xbe>
 8005614:	2300      	movs	r3, #0
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	e021      	b.n	800565e <SD_disk_read+0xbe>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	0019      	movs	r1, r3
 800561e:	2052      	movs	r0, #82	; 0x52
 8005620:	f7ff fe2d 	bl	800527e <SD_SendCmd>
 8005624:	1e03      	subs	r3, r0, #0
 8005626:	d11a      	bne.n	800565e <SD_disk_read+0xbe>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8005628:	2380      	movs	r3, #128	; 0x80
 800562a:	009a      	lsls	r2, r3, #2
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	0011      	movs	r1, r2
 8005630:	0018      	movs	r0, r3
 8005632:	f7ff fd9d 	bl	8005170 <SD_RxDataBlock>
 8005636:	1e03      	subs	r3, r0, #0
 8005638:	d00c      	beq.n	8005654 <SD_disk_read+0xb4>
				buff += 512;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2280      	movs	r2, #128	; 0x80
 800563e:	0092      	lsls	r2, r2, #2
 8005640:	4694      	mov	ip, r2
 8005642:	4463      	add	r3, ip
 8005644:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	3b01      	subs	r3, #1
 800564a:	603b      	str	r3, [r7, #0]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1ea      	bne.n	8005628 <SD_disk_read+0x88>
 8005652:	e000      	b.n	8005656 <SD_disk_read+0xb6>
				if (!SD_RxDataBlock(buff, 512)) break;
 8005654:	46c0      	nop			; (mov r8, r8)

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8005656:	2100      	movs	r1, #0
 8005658:	204c      	movs	r0, #76	; 0x4c
 800565a:	f7ff fe10 	bl	800527e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800565e:	f7ff fc99 	bl	8004f94 <DESELECT>
	SPI_RxByte();
 8005662:	f7ff fcdf 	bl	8005024 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	1e5a      	subs	r2, r3, #1
 800566a:	4193      	sbcs	r3, r2
 800566c:	b2db      	uxtb	r3, r3
}
 800566e:	0018      	movs	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	b004      	add	sp, #16
 8005674:	bd80      	pop	{r7, pc}
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	20000000 	.word	0x20000000
 800567c:	20000a4c 	.word	0x20000a4c

08005680 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	210f      	movs	r1, #15
 800568e:	187b      	adds	r3, r7, r1
 8005690:	1c02      	adds	r2, r0, #0
 8005692:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8005694:	187b      	adds	r3, r7, r1
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <SD_disk_write+0x22>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <SD_disk_write+0x26>
 80056a2:	2304      	movs	r3, #4
 80056a4:	e06b      	b.n	800577e <SD_disk_write+0xfe>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80056a6:	4b38      	ldr	r3, [pc, #224]	; (8005788 <SD_disk_write+0x108>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	001a      	movs	r2, r3
 80056ae:	2301      	movs	r3, #1
 80056b0:	4013      	ands	r3, r2
 80056b2:	d001      	beq.n	80056b8 <SD_disk_write+0x38>
 80056b4:	2303      	movs	r3, #3
 80056b6:	e062      	b.n	800577e <SD_disk_write+0xfe>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80056b8:	4b33      	ldr	r3, [pc, #204]	; (8005788 <SD_disk_write+0x108>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	001a      	movs	r2, r3
 80056c0:	2304      	movs	r3, #4
 80056c2:	4013      	ands	r3, r2
 80056c4:	d001      	beq.n	80056ca <SD_disk_write+0x4a>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e059      	b.n	800577e <SD_disk_write+0xfe>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80056ca:	4b30      	ldr	r3, [pc, #192]	; (800578c <SD_disk_write+0x10c>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	001a      	movs	r2, r3
 80056d0:	2304      	movs	r3, #4
 80056d2:	4013      	ands	r3, r2
 80056d4:	d102      	bne.n	80056dc <SD_disk_write+0x5c>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	025b      	lsls	r3, r3, #9
 80056da:	607b      	str	r3, [r7, #4]

	SELECT();
 80056dc:	f7ff fc48 	bl	8004f70 <SELECT>

	if (count == 1)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d110      	bne.n	8005708 <SD_disk_write+0x88>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	0019      	movs	r1, r3
 80056ea:	2058      	movs	r0, #88	; 0x58
 80056ec:	f7ff fdc7 	bl	800527e <SD_SendCmd>
 80056f0:	1e03      	subs	r3, r0, #0
 80056f2:	d13c      	bne.n	800576e <SD_disk_write+0xee>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	21fe      	movs	r1, #254	; 0xfe
 80056f8:	0018      	movs	r0, r3
 80056fa:	f7ff fd6d 	bl	80051d8 <SD_TxDataBlock>
 80056fe:	1e03      	subs	r3, r0, #0
 8005700:	d035      	beq.n	800576e <SD_disk_write+0xee>
			count = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	603b      	str	r3, [r7, #0]
 8005706:	e032      	b.n	800576e <SD_disk_write+0xee>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8005708:	4b20      	ldr	r3, [pc, #128]	; (800578c <SD_disk_write+0x10c>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	001a      	movs	r2, r3
 800570e:	2302      	movs	r3, #2
 8005710:	4013      	ands	r3, r2
 8005712:	d008      	beq.n	8005726 <SD_disk_write+0xa6>
		{
			SD_SendCmd(CMD55, 0);
 8005714:	2100      	movs	r1, #0
 8005716:	2077      	movs	r0, #119	; 0x77
 8005718:	f7ff fdb1 	bl	800527e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	0019      	movs	r1, r3
 8005720:	2057      	movs	r0, #87	; 0x57
 8005722:	f7ff fdac 	bl	800527e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	0019      	movs	r1, r3
 800572a:	2059      	movs	r0, #89	; 0x59
 800572c:	f7ff fda7 	bl	800527e <SD_SendCmd>
 8005730:	1e03      	subs	r3, r0, #0
 8005732:	d11c      	bne.n	800576e <SD_disk_write+0xee>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	21fc      	movs	r1, #252	; 0xfc
 8005738:	0018      	movs	r0, r3
 800573a:	f7ff fd4d 	bl	80051d8 <SD_TxDataBlock>
 800573e:	1e03      	subs	r3, r0, #0
 8005740:	d00c      	beq.n	800575c <SD_disk_write+0xdc>
				buff += 512;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2280      	movs	r2, #128	; 0x80
 8005746:	0092      	lsls	r2, r2, #2
 8005748:	4694      	mov	ip, r2
 800574a:	4463      	add	r3, ip
 800574c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	3b01      	subs	r3, #1
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1ec      	bne.n	8005734 <SD_disk_write+0xb4>
 800575a:	e000      	b.n	800575e <SD_disk_write+0xde>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800575c:	46c0      	nop			; (mov r8, r8)

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800575e:	21fd      	movs	r1, #253	; 0xfd
 8005760:	2000      	movs	r0, #0
 8005762:	f7ff fd39 	bl	80051d8 <SD_TxDataBlock>
 8005766:	1e03      	subs	r3, r0, #0
 8005768:	d101      	bne.n	800576e <SD_disk_write+0xee>
			{
				count = 1;
 800576a:	2301      	movs	r3, #1
 800576c:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800576e:	f7ff fc11 	bl	8004f94 <DESELECT>
	SPI_RxByte();
 8005772:	f7ff fc57 	bl	8005024 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	1e5a      	subs	r2, r3, #1
 800577a:	4193      	sbcs	r3, r2
 800577c:	b2db      	uxtb	r3, r3
}
 800577e:	0018      	movs	r0, r3
 8005780:	46bd      	mov	sp, r7
 8005782:	b004      	add	sp, #16
 8005784:	bd80      	pop	{r7, pc}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	20000000 	.word	0x20000000
 800578c:	20000a4c 	.word	0x20000a4c

08005790 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8005790:	b590      	push	{r4, r7, lr}
 8005792:	b08b      	sub	sp, #44	; 0x2c
 8005794:	af00      	add	r7, sp, #0
 8005796:	603a      	str	r2, [r7, #0]
 8005798:	1dfb      	adds	r3, r7, #7
 800579a:	1c02      	adds	r2, r0, #0
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	1dbb      	adds	r3, r7, #6
 80057a0:	1c0a      	adds	r2, r1, #0
 80057a2:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80057a8:	1dfb      	adds	r3, r7, #7
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <SD_disk_ioctl+0x24>
 80057b0:	2304      	movs	r3, #4
 80057b2:	e11b      	b.n	80059ec <SD_disk_ioctl+0x25c>
	res = RES_ERROR;
 80057b4:	2327      	movs	r3, #39	; 0x27
 80057b6:	18fb      	adds	r3, r7, r3
 80057b8:	2201      	movs	r2, #1
 80057ba:	701a      	strb	r2, [r3, #0]

	if (ctrl == CTRL_POWER)
 80057bc:	1dbb      	adds	r3, r7, #6
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d127      	bne.n	8005814 <SD_disk_ioctl+0x84>
	{
		switch (*ptr)
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d013      	beq.n	80057f4 <SD_disk_ioctl+0x64>
 80057cc:	dc1d      	bgt.n	800580a <SD_disk_ioctl+0x7a>
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <SD_disk_ioctl+0x48>
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d007      	beq.n	80057e6 <SD_disk_ioctl+0x56>
 80057d6:	e018      	b.n	800580a <SD_disk_ioctl+0x7a>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80057d8:	f7ff fcb6 	bl	8005148 <SD_PowerOff>
			res = RES_OK;
 80057dc:	2327      	movs	r3, #39	; 0x27
 80057de:	18fb      	adds	r3, r7, r3
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
			break;
 80057e4:	e0ff      	b.n	80059e6 <SD_disk_ioctl+0x256>
		case 1:
			SD_PowerOn();		/* Power On */
 80057e6:	f7ff fc67 	bl	80050b8 <SD_PowerOn>
			res = RES_OK;
 80057ea:	2327      	movs	r3, #39	; 0x27
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
			break;
 80057f2:	e0f8      	b.n	80059e6 <SD_disk_ioctl+0x256>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	1c5c      	adds	r4, r3, #1
 80057f8:	f7ff fcb0 	bl	800515c <SD_CheckPower>
 80057fc:	0003      	movs	r3, r0
 80057fe:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8005800:	2327      	movs	r3, #39	; 0x27
 8005802:	18fb      	adds	r3, r7, r3
 8005804:	2200      	movs	r2, #0
 8005806:	701a      	strb	r2, [r3, #0]
			break;
 8005808:	e0ed      	b.n	80059e6 <SD_disk_ioctl+0x256>
		default:
			res = RES_PARERR;
 800580a:	2327      	movs	r3, #39	; 0x27
 800580c:	18fb      	adds	r3, r7, r3
 800580e:	2204      	movs	r2, #4
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	e0e8      	b.n	80059e6 <SD_disk_ioctl+0x256>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005814:	4b77      	ldr	r3, [pc, #476]	; (80059f4 <SD_disk_ioctl+0x264>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	001a      	movs	r2, r3
 800581c:	2301      	movs	r3, #1
 800581e:	4013      	ands	r3, r2
 8005820:	d001      	beq.n	8005826 <SD_disk_ioctl+0x96>
 8005822:	2303      	movs	r3, #3
 8005824:	e0e2      	b.n	80059ec <SD_disk_ioctl+0x25c>

		SELECT();
 8005826:	f7ff fba3 	bl	8004f70 <SELECT>

		switch (ctrl)
 800582a:	1dbb      	adds	r3, r7, #6
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b0d      	cmp	r3, #13
 8005830:	d900      	bls.n	8005834 <SD_disk_ioctl+0xa4>
 8005832:	e0c8      	b.n	80059c6 <SD_disk_ioctl+0x236>
 8005834:	009a      	lsls	r2, r3, #2
 8005836:	4b70      	ldr	r3, [pc, #448]	; (80059f8 <SD_disk_ioctl+0x268>)
 8005838:	18d3      	adds	r3, r2, r3
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	469f      	mov	pc, r3
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800583e:	2100      	movs	r1, #0
 8005840:	2049      	movs	r0, #73	; 0x49
 8005842:	f7ff fd1c 	bl	800527e <SD_SendCmd>
 8005846:	1e03      	subs	r3, r0, #0
 8005848:	d000      	beq.n	800584c <SD_disk_ioctl+0xbc>
 800584a:	e0c1      	b.n	80059d0 <SD_disk_ioctl+0x240>
 800584c:	240c      	movs	r4, #12
 800584e:	193b      	adds	r3, r7, r4
 8005850:	2110      	movs	r1, #16
 8005852:	0018      	movs	r0, r3
 8005854:	f7ff fc8c 	bl	8005170 <SD_RxDataBlock>
 8005858:	1e03      	subs	r3, r0, #0
 800585a:	d100      	bne.n	800585e <SD_disk_ioctl+0xce>
 800585c:	e0b8      	b.n	80059d0 <SD_disk_ioctl+0x240>
			{
				if ((csd[0] >> 6) == 1)
 800585e:	0022      	movs	r2, r4
 8005860:	18bb      	adds	r3, r7, r2
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	099b      	lsrs	r3, r3, #6
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	d114      	bne.n	8005896 <SD_disk_ioctl+0x106>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800586c:	0011      	movs	r1, r2
 800586e:	18bb      	adds	r3, r7, r2
 8005870:	7a5b      	ldrb	r3, [r3, #9]
 8005872:	b29a      	uxth	r2, r3
 8005874:	187b      	adds	r3, r7, r1
 8005876:	7a1b      	ldrb	r3, [r3, #8]
 8005878:	b29b      	uxth	r3, r3
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	b29b      	uxth	r3, r3
 800587e:	18d3      	adds	r3, r2, r3
 8005880:	b29a      	uxth	r2, r3
 8005882:	211e      	movs	r1, #30
 8005884:	187b      	adds	r3, r7, r1
 8005886:	3201      	adds	r2, #1
 8005888:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << 10;
 800588a:	187b      	adds	r3, r7, r1
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	029a      	lsls	r2, r3, #10
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	e03a      	b.n	800590c <SD_disk_ioctl+0x17c>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005896:	200c      	movs	r0, #12
 8005898:	183b      	adds	r3, r7, r0
 800589a:	795b      	ldrb	r3, [r3, #5]
 800589c:	220f      	movs	r2, #15
 800589e:	4013      	ands	r3, r2
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	183b      	adds	r3, r7, r0
 80058a4:	7a9b      	ldrb	r3, [r3, #10]
 80058a6:	09db      	lsrs	r3, r3, #7
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	18d3      	adds	r3, r2, r3
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	183b      	adds	r3, r7, r0
 80058b0:	7a5b      	ldrb	r3, [r3, #9]
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2106      	movs	r1, #6
 80058b8:	400b      	ands	r3, r1
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	18d3      	adds	r3, r2, r3
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	2426      	movs	r4, #38	; 0x26
 80058c2:	193b      	adds	r3, r7, r4
 80058c4:	3202      	adds	r2, #2
 80058c6:	701a      	strb	r2, [r3, #0]
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80058c8:	183b      	adds	r3, r7, r0
 80058ca:	7a1b      	ldrb	r3, [r3, #8]
 80058cc:	099b      	lsrs	r3, r3, #6
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	183b      	adds	r3, r7, r0
 80058d4:	79db      	ldrb	r3, [r3, #7]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	b29b      	uxth	r3, r3
 80058dc:	18d3      	adds	r3, r2, r3
 80058de:	b29a      	uxth	r2, r3
 80058e0:	183b      	adds	r3, r7, r0
 80058e2:	799b      	ldrb	r3, [r3, #6]
 80058e4:	029b      	lsls	r3, r3, #10
 80058e6:	b299      	uxth	r1, r3
 80058e8:	23c0      	movs	r3, #192	; 0xc0
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	400b      	ands	r3, r1
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	18d3      	adds	r3, r2, r3
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	211e      	movs	r1, #30
 80058f6:	187b      	adds	r3, r7, r1
 80058f8:	3201      	adds	r2, #1
 80058fa:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80058fc:	187b      	adds	r3, r7, r1
 80058fe:	881a      	ldrh	r2, [r3, #0]
 8005900:	193b      	adds	r3, r7, r4
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	3b09      	subs	r3, #9
 8005906:	409a      	lsls	r2, r3
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800590c:	2327      	movs	r3, #39	; 0x27
 800590e:	18fb      	adds	r3, r7, r3
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005914:	e05c      	b.n	80059d0 <SD_disk_ioctl+0x240>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2280      	movs	r2, #128	; 0x80
 800591a:	0092      	lsls	r2, r2, #2
 800591c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800591e:	2327      	movs	r3, #39	; 0x27
 8005920:	18fb      	adds	r3, r7, r3
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
			break;
 8005926:	e05a      	b.n	80059de <SD_disk_ioctl+0x24e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8005928:	f7ff fba8 	bl	800507c <SD_ReadyWait>
 800592c:	0003      	movs	r3, r0
 800592e:	2bff      	cmp	r3, #255	; 0xff
 8005930:	d150      	bne.n	80059d4 <SD_disk_ioctl+0x244>
 8005932:	2327      	movs	r3, #39	; 0x27
 8005934:	18fb      	adds	r3, r7, r3
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]
			break;
 800593a:	e04b      	b.n	80059d4 <SD_disk_ioctl+0x244>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800593c:	2100      	movs	r1, #0
 800593e:	2049      	movs	r0, #73	; 0x49
 8005940:	f7ff fc9d 	bl	800527e <SD_SendCmd>
 8005944:	1e03      	subs	r3, r0, #0
 8005946:	d147      	bne.n	80059d8 <SD_disk_ioctl+0x248>
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	2110      	movs	r1, #16
 800594c:	0018      	movs	r0, r3
 800594e:	f7ff fc0f 	bl	8005170 <SD_RxDataBlock>
 8005952:	1e03      	subs	r3, r0, #0
 8005954:	d040      	beq.n	80059d8 <SD_disk_ioctl+0x248>
 8005956:	2327      	movs	r3, #39	; 0x27
 8005958:	18fb      	adds	r3, r7, r3
 800595a:	2200      	movs	r2, #0
 800595c:	701a      	strb	r2, [r3, #0]
			break;
 800595e:	e03b      	b.n	80059d8 <SD_disk_ioctl+0x248>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8005960:	2100      	movs	r1, #0
 8005962:	204a      	movs	r0, #74	; 0x4a
 8005964:	f7ff fc8b 	bl	800527e <SD_SendCmd>
 8005968:	1e03      	subs	r3, r0, #0
 800596a:	d137      	bne.n	80059dc <SD_disk_ioctl+0x24c>
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	2110      	movs	r1, #16
 8005970:	0018      	movs	r0, r3
 8005972:	f7ff fbfd 	bl	8005170 <SD_RxDataBlock>
 8005976:	1e03      	subs	r3, r0, #0
 8005978:	d030      	beq.n	80059dc <SD_disk_ioctl+0x24c>
 800597a:	2327      	movs	r3, #39	; 0x27
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
			break;
 8005982:	e02b      	b.n	80059dc <SD_disk_ioctl+0x24c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8005984:	2100      	movs	r1, #0
 8005986:	207a      	movs	r0, #122	; 0x7a
 8005988:	f7ff fc79 	bl	800527e <SD_SendCmd>
 800598c:	1e03      	subs	r3, r0, #0
 800598e:	d11a      	bne.n	80059c6 <SD_disk_ioctl+0x236>
			{
				for (n = 0; n < 4; n++)
 8005990:	2326      	movs	r3, #38	; 0x26
 8005992:	18fb      	adds	r3, r7, r3
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	e00c      	b.n	80059b4 <SD_disk_ioctl+0x224>
				{
					*ptr++ = SPI_RxByte();
 800599a:	6a3c      	ldr	r4, [r7, #32]
 800599c:	1c63      	adds	r3, r4, #1
 800599e:	623b      	str	r3, [r7, #32]
 80059a0:	f7ff fb40 	bl	8005024 <SPI_RxByte>
 80059a4:	0003      	movs	r3, r0
 80059a6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80059a8:	2126      	movs	r1, #38	; 0x26
 80059aa:	187b      	adds	r3, r7, r1
 80059ac:	781a      	ldrb	r2, [r3, #0]
 80059ae:	187b      	adds	r3, r7, r1
 80059b0:	3201      	adds	r2, #1
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	2326      	movs	r3, #38	; 0x26
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d9ed      	bls.n	800599a <SD_disk_ioctl+0x20a>
				}
				res = RES_OK;
 80059be:	2327      	movs	r3, #39	; 0x27
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	2200      	movs	r2, #0
 80059c4:	701a      	strb	r2, [r3, #0]
			}
		default:
			res = RES_PARERR;
 80059c6:	2327      	movs	r3, #39	; 0x27
 80059c8:	18fb      	adds	r3, r7, r3
 80059ca:	2204      	movs	r2, #4
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	e006      	b.n	80059de <SD_disk_ioctl+0x24e>
			break;
 80059d0:	46c0      	nop			; (mov r8, r8)
 80059d2:	e004      	b.n	80059de <SD_disk_ioctl+0x24e>
			break;
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	e002      	b.n	80059de <SD_disk_ioctl+0x24e>
			break;
 80059d8:	46c0      	nop			; (mov r8, r8)
 80059da:	e000      	b.n	80059de <SD_disk_ioctl+0x24e>
			break;
 80059dc:	46c0      	nop			; (mov r8, r8)
		}

		DESELECT();
 80059de:	f7ff fad9 	bl	8004f94 <DESELECT>
		SPI_RxByte();
 80059e2:	f7ff fb1f 	bl	8005024 <SPI_RxByte>
	}

	return res;
 80059e6:	2327      	movs	r3, #39	; 0x27
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	781b      	ldrb	r3, [r3, #0]
}
 80059ec:	0018      	movs	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b00b      	add	sp, #44	; 0x2c
 80059f2:	bd90      	pop	{r4, r7, pc}
 80059f4:	20000000 	.word	0x20000000
 80059f8:	08012ee0 	.word	0x08012ee0

080059fc <main>:
  *            updates the display, fetches weather data via Wi-Fi, and logs data to the SD card.
  *          The routine timings are managed by incrementing counters within the TIM6 interrupt callback.
  * @retval int
  */
int main(void)
{
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	4c3d      	ldr	r4, [pc, #244]	; (8005af4 <main+0xf8>)
 8005a00:	44a5      	add	sp, r4
 8005a02:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a04:	f000 fe74 	bl	80066f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a08:	f000 f880 	bl	8005b0c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a0c:	f000 fa74 	bl	8005ef8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005a10:	f000 fa12 	bl	8005e38 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8005a14:	f000 f8f2 	bl	8005bfc <MX_I2C1_Init>
  MX_SPI1_Init();
 8005a18:	f000 f930 	bl	8005c7c <MX_SPI1_Init>
  MX_SPI2_Init();
 8005a1c:	f000 f966 	bl	8005cec <MX_SPI2_Init>
  MX_FATFS_Init();
 8005a20:	f004 ff70 	bl	800a904 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005a24:	f000 f99a 	bl	8005d5c <MX_TIM6_Init>
  MX_USART4_UART_Init();
 8005a28:	f000 fa36 	bl	8005e98 <MX_USART4_UART_Init>
  MX_USART1_UART_Init();
 8005a2c:	f000 f9d4 	bl	8005dd8 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  ST7735_Init(3);
 8005a30:	2003      	movs	r0, #3
 8005a32:	f7fe f9e1 	bl	8003df8 <ST7735_Init>
  AHT20_init();
 8005a36:	f7ff f813 	bl	8004a60 <AHT20_init>
  SD_init(&fil);
 8005a3a:	2360      	movs	r3, #96	; 0x60
 8005a3c:	18fb      	adds	r3, r7, r3
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f7ff f8f6 	bl	8004c30 <SD_init>
  ESP_init();
 8005a44:	f7fd fa4a 	bl	8002edc <ESP_init>
  drawTechyInterface();
 8005a48:	f7fd ff76 	bl	8003938 <drawTechyInterface>
  SensorData sensor_data;
  WeatherData weather_data;
  ESP_wifiConnect();
 8005a4c:	f7fd fa6a 	bl	8002f24 <ESP_wifiConnect>
  HAL_TIM_Base_Start_IT(&htim6);
 8005a50:	4b29      	ldr	r3, [pc, #164]	; (8005af8 <main+0xfc>)
 8005a52:	0018      	movs	r0, r3
 8005a54:	f003 fc3c 	bl	80092d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	if (ahtCounter >= AHT_READ_TIME)
 8005a58:	4b28      	ldr	r3, [pc, #160]	; (8005afc <main+0x100>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d917      	bls.n	8005a90 <main+0x94>
	{
		AHT20_read(&sensor_data.temperature, &sensor_data.humidity);
 8005a60:	2158      	movs	r1, #88	; 0x58
 8005a62:	187b      	adds	r3, r7, r1
 8005a64:	1d1a      	adds	r2, r3, #4
 8005a66:	187b      	adds	r3, r7, r1
 8005a68:	0011      	movs	r1, r2
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f7ff f822 	bl	8004ab4 <AHT20_read>
		updateTemperatureAndHumidity(sensor_data.temperature, sensor_data.humidity);
 8005a70:	4b23      	ldr	r3, [pc, #140]	; (8005b00 <main+0x104>)
 8005a72:	4924      	ldr	r1, [pc, #144]	; (8005b04 <main+0x108>)
 8005a74:	185b      	adds	r3, r3, r1
 8005a76:	19db      	adds	r3, r3, r7
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4b21      	ldr	r3, [pc, #132]	; (8005b00 <main+0x104>)
 8005a7c:	185b      	adds	r3, r3, r1
 8005a7e:	19db      	adds	r3, r3, r7
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	1c19      	adds	r1, r3, #0
 8005a84:	1c10      	adds	r0, r2, #0
 8005a86:	f7fe f80f 	bl	8003aa8 <updateTemperatureAndHumidity>
		ahtCounter = 0;
 8005a8a:	4b1c      	ldr	r3, [pc, #112]	; (8005afc <main+0x100>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]
	}
	if (fileWriteCounter >= API_DATA_SAVE_TIME)
 8005a90:	4b1d      	ldr	r3, [pc, #116]	; (8005b08 <main+0x10c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b05      	cmp	r3, #5
 8005a96:	d9df      	bls.n	8005a58 <main+0x5c>
	{
		ESP_fetchWeatherData(weather_data.date, weather_data.max_temp, weather_data.min_temp, weather_data.avg_temp, weather_data.weather_condition);
 8005a98:	003b      	movs	r3, r7
 8005a9a:	330a      	adds	r3, #10
 8005a9c:	001c      	movs	r4, r3
 8005a9e:	003b      	movs	r3, r7
 8005aa0:	1d5a      	adds	r2, r3, #5
 8005aa2:	0039      	movs	r1, r7
 8005aa4:	003b      	movs	r3, r7
 8005aa6:	3341      	adds	r3, #65	; 0x41
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	003b      	movs	r3, r7
 8005aac:	330f      	adds	r3, #15
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	0023      	movs	r3, r4
 8005ab2:	f7fd facb 	bl	800304c <ESP_fetchWeatherData>
		SD_saveData(&fil, sensor_data.temperature, sensor_data.humidity, weather_data.max_temp, weather_data.min_temp, weather_data.avg_temp, weather_data.weather_condition, weather_data.date);
 8005ab6:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <main+0x104>)
 8005ab8:	4a12      	ldr	r2, [pc, #72]	; (8005b04 <main+0x108>)
 8005aba:	189b      	adds	r3, r3, r2
 8005abc:	19db      	adds	r3, r3, r7
 8005abe:	6819      	ldr	r1, [r3, #0]
 8005ac0:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <main+0x104>)
 8005ac2:	189b      	adds	r3, r3, r2
 8005ac4:	19db      	adds	r3, r3, r7
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	003c      	movs	r4, r7
 8005aca:	2360      	movs	r3, #96	; 0x60
 8005acc:	18f8      	adds	r0, r7, r3
 8005ace:	003b      	movs	r3, r7
 8005ad0:	3341      	adds	r3, #65	; 0x41
 8005ad2:	9303      	str	r3, [sp, #12]
 8005ad4:	003b      	movs	r3, r7
 8005ad6:	330f      	adds	r3, #15
 8005ad8:	9302      	str	r3, [sp, #8]
 8005ada:	003b      	movs	r3, r7
 8005adc:	330a      	adds	r3, #10
 8005ade:	9301      	str	r3, [sp, #4]
 8005ae0:	003b      	movs	r3, r7
 8005ae2:	3305      	adds	r3, #5
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	0023      	movs	r3, r4
 8005ae8:	f7ff f9e4 	bl	8004eb4 <SD_saveData>
		fileWriteCounter = 0;
 8005aec:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <main+0x10c>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
	if (ahtCounter >= AHT_READ_TIME)
 8005af2:	e7b1      	b.n	8005a58 <main+0x5c>
 8005af4:	ffffef5c 	.word	0xffffef5c
 8005af8:	20000b54 	.word	0x20000b54
 8005afc:	20000d2c 	.word	0x20000d2c
 8005b00:	ffffefc8 	.word	0xffffefc8
 8005b04:	00001090 	.word	0x00001090
 8005b08:	20000d30 	.word	0x20000d30

08005b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b0c:	b590      	push	{r4, r7, lr}
 8005b0e:	b09f      	sub	sp, #124	; 0x7c
 8005b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b12:	2440      	movs	r4, #64	; 0x40
 8005b14:	193b      	adds	r3, r7, r4
 8005b16:	0018      	movs	r0, r3
 8005b18:	2338      	movs	r3, #56	; 0x38
 8005b1a:	001a      	movs	r2, r3
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	f009 fa35 	bl	800ef8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b22:	232c      	movs	r3, #44	; 0x2c
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	0018      	movs	r0, r3
 8005b28:	2314      	movs	r3, #20
 8005b2a:	001a      	movs	r2, r3
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	f009 fa2d 	bl	800ef8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b32:	1d3b      	adds	r3, r7, #4
 8005b34:	0018      	movs	r0, r3
 8005b36:	2328      	movs	r3, #40	; 0x28
 8005b38:	001a      	movs	r2, r3
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	f009 fa26 	bl	800ef8c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b40:	4b2c      	ldr	r3, [pc, #176]	; (8005bf4 <SystemClock_Config+0xe8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a2c      	ldr	r2, [pc, #176]	; (8005bf8 <SystemClock_Config+0xec>)
 8005b46:	401a      	ands	r2, r3
 8005b48:	4b2a      	ldr	r3, [pc, #168]	; (8005bf4 <SystemClock_Config+0xe8>)
 8005b4a:	2180      	movs	r1, #128	; 0x80
 8005b4c:	0109      	lsls	r1, r1, #4
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005b52:	0021      	movs	r1, r4
 8005b54:	187b      	adds	r3, r7, r1
 8005b56:	2201      	movs	r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b5a:	187b      	adds	r3, r7, r1
 8005b5c:	2280      	movs	r2, #128	; 0x80
 8005b5e:	0252      	lsls	r2, r2, #9
 8005b60:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b62:	187b      	adds	r3, r7, r1
 8005b64:	2202      	movs	r2, #2
 8005b66:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005b68:	187b      	adds	r3, r7, r1
 8005b6a:	2280      	movs	r2, #128	; 0x80
 8005b6c:	0252      	lsls	r2, r2, #9
 8005b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8005b70:	187b      	adds	r3, r7, r1
 8005b72:	22c0      	movs	r2, #192	; 0xc0
 8005b74:	0312      	lsls	r2, r2, #12
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8005b78:	187b      	adds	r3, r7, r1
 8005b7a:	2280      	movs	r2, #128	; 0x80
 8005b7c:	03d2      	lsls	r2, r2, #15
 8005b7e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b80:	187b      	adds	r3, r7, r1
 8005b82:	0018      	movs	r0, r3
 8005b84:	f001 ff3e 	bl	8007a04 <HAL_RCC_OscConfig>
 8005b88:	1e03      	subs	r3, r0, #0
 8005b8a:	d001      	beq.n	8005b90 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8005b8c:	f000 fa78 	bl	8006080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b90:	212c      	movs	r1, #44	; 0x2c
 8005b92:	187b      	adds	r3, r7, r1
 8005b94:	220f      	movs	r2, #15
 8005b96:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b98:	187b      	adds	r3, r7, r1
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b9e:	187b      	adds	r3, r7, r1
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005ba4:	187b      	adds	r3, r7, r1
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005baa:	187b      	adds	r3, r7, r1
 8005bac:	2200      	movs	r2, #0
 8005bae:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005bb0:	187b      	adds	r3, r7, r1
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f002 faf9 	bl	80081ac <HAL_RCC_ClockConfig>
 8005bba:	1e03      	subs	r3, r0, #0
 8005bbc:	d001      	beq.n	8005bc2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8005bbe:	f000 fa5f 	bl	8006080 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8005bc2:	1d3b      	adds	r3, r7, #4
 8005bc4:	220b      	movs	r2, #11
 8005bc6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	2200      	movs	r2, #0
 8005bcc:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005bce:	1d3b      	adds	r3, r7, #4
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005bd4:	1d3b      	adds	r3, r7, #4
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005bda:	1d3b      	adds	r3, r7, #4
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f002 fd09 	bl	80085f4 <HAL_RCCEx_PeriphCLKConfig>
 8005be2:	1e03      	subs	r3, r0, #0
 8005be4:	d001      	beq.n	8005bea <SystemClock_Config+0xde>
  {
    Error_Handler();
 8005be6:	f000 fa4b 	bl	8006080 <Error_Handler>
  }
}
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	46bd      	mov	sp, r7
 8005bee:	b01f      	add	sp, #124	; 0x7c
 8005bf0:	bd90      	pop	{r4, r7, pc}
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	40007000 	.word	0x40007000
 8005bf8:	ffffe7ff 	.word	0xffffe7ff

08005bfc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005c00:	4b1b      	ldr	r3, [pc, #108]	; (8005c70 <MX_I2C1_Init+0x74>)
 8005c02:	4a1c      	ldr	r2, [pc, #112]	; (8005c74 <MX_I2C1_Init+0x78>)
 8005c04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8005c06:	4b1a      	ldr	r3, [pc, #104]	; (8005c70 <MX_I2C1_Init+0x74>)
 8005c08:	4a1b      	ldr	r2, [pc, #108]	; (8005c78 <MX_I2C1_Init+0x7c>)
 8005c0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005c0c:	4b18      	ldr	r3, [pc, #96]	; (8005c70 <MX_I2C1_Init+0x74>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c12:	4b17      	ldr	r3, [pc, #92]	; (8005c70 <MX_I2C1_Init+0x74>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c18:	4b15      	ldr	r3, [pc, #84]	; (8005c70 <MX_I2C1_Init+0x74>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005c1e:	4b14      	ldr	r3, [pc, #80]	; (8005c70 <MX_I2C1_Init+0x74>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005c24:	4b12      	ldr	r3, [pc, #72]	; (8005c70 <MX_I2C1_Init+0x74>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c2a:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <MX_I2C1_Init+0x74>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c30:	4b0f      	ldr	r3, [pc, #60]	; (8005c70 <MX_I2C1_Init+0x74>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005c36:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <MX_I2C1_Init+0x74>)
 8005c38:	0018      	movs	r0, r3
 8005c3a:	f001 f8ef 	bl	8006e1c <HAL_I2C_Init>
 8005c3e:	1e03      	subs	r3, r0, #0
 8005c40:	d001      	beq.n	8005c46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005c42:	f000 fa1d 	bl	8006080 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005c46:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <MX_I2C1_Init+0x74>)
 8005c48:	2100      	movs	r1, #0
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f001 fe42 	bl	80078d4 <HAL_I2CEx_ConfigAnalogFilter>
 8005c50:	1e03      	subs	r3, r0, #0
 8005c52:	d001      	beq.n	8005c58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005c54:	f000 fa14 	bl	8006080 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <MX_I2C1_Init+0x74>)
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f001 fe85 	bl	800796c <HAL_I2CEx_ConfigDigitalFilter>
 8005c62:	1e03      	subs	r3, r0, #0
 8005c64:	d001      	beq.n	8005c6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005c66:	f000 fa0b 	bl	8006080 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20000a50 	.word	0x20000a50
 8005c74:	40005400 	.word	0x40005400
 8005c78:	00707cbb 	.word	0x00707cbb

08005c7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005c80:	4b18      	ldr	r3, [pc, #96]	; (8005ce4 <MX_SPI1_Init+0x68>)
 8005c82:	4a19      	ldr	r2, [pc, #100]	; (8005ce8 <MX_SPI1_Init+0x6c>)
 8005c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005c86:	4b17      	ldr	r3, [pc, #92]	; (8005ce4 <MX_SPI1_Init+0x68>)
 8005c88:	2282      	movs	r2, #130	; 0x82
 8005c8a:	0052      	lsls	r2, r2, #1
 8005c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8005c8e:	4b15      	ldr	r3, [pc, #84]	; (8005ce4 <MX_SPI1_Init+0x68>)
 8005c90:	2280      	movs	r2, #128	; 0x80
 8005c92:	0212      	lsls	r2, r2, #8
 8005c94:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005c96:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <MX_SPI1_Init+0x68>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c9c:	4b11      	ldr	r3, [pc, #68]	; (8005ce4 <MX_SPI1_Init+0x68>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005ca2:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <MX_SPI1_Init+0x68>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005ca8:	4b0e      	ldr	r3, [pc, #56]	; (8005ce4 <MX_SPI1_Init+0x68>)
 8005caa:	2280      	movs	r2, #128	; 0x80
 8005cac:	0092      	lsls	r2, r2, #2
 8005cae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <MX_SPI1_Init+0x68>)
 8005cb2:	2210      	movs	r2, #16
 8005cb4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <MX_SPI1_Init+0x68>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005cbc:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <MX_SPI1_Init+0x68>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc2:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <MX_SPI1_Init+0x68>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005cc8:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <MX_SPI1_Init+0x68>)
 8005cca:	2207      	movs	r2, #7
 8005ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005cce:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <MX_SPI1_Init+0x68>)
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f002 fe2d 	bl	8008930 <HAL_SPI_Init>
 8005cd6:	1e03      	subs	r3, r0, #0
 8005cd8:	d001      	beq.n	8005cde <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8005cda:	f000 f9d1 	bl	8006080 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20000aa4 	.word	0x20000aa4
 8005ce8:	40013000 	.word	0x40013000

08005cec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005cf0:	4b18      	ldr	r3, [pc, #96]	; (8005d54 <MX_SPI2_Init+0x68>)
 8005cf2:	4a19      	ldr	r2, [pc, #100]	; (8005d58 <MX_SPI2_Init+0x6c>)
 8005cf4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005cf6:	4b17      	ldr	r3, [pc, #92]	; (8005d54 <MX_SPI2_Init+0x68>)
 8005cf8:	2282      	movs	r2, #130	; 0x82
 8005cfa:	0052      	lsls	r2, r2, #1
 8005cfc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <MX_SPI2_Init+0x68>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005d04:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <MX_SPI2_Init+0x68>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d0a:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <MX_SPI2_Init+0x68>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005d10:	4b10      	ldr	r3, [pc, #64]	; (8005d54 <MX_SPI2_Init+0x68>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005d16:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <MX_SPI2_Init+0x68>)
 8005d18:	2280      	movs	r2, #128	; 0x80
 8005d1a:	0092      	lsls	r2, r2, #2
 8005d1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <MX_SPI2_Init+0x68>)
 8005d20:	2208      	movs	r2, #8
 8005d22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005d24:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <MX_SPI2_Init+0x68>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005d2a:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <MX_SPI2_Init+0x68>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d30:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <MX_SPI2_Init+0x68>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005d36:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <MX_SPI2_Init+0x68>)
 8005d38:	2207      	movs	r2, #7
 8005d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005d3c:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <MX_SPI2_Init+0x68>)
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f002 fdf6 	bl	8008930 <HAL_SPI_Init>
 8005d44:	1e03      	subs	r3, r0, #0
 8005d46:	d001      	beq.n	8005d4c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005d48:	f000 f99a 	bl	8006080 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005d4c:	46c0      	nop			; (mov r8, r8)
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	20000afc 	.word	0x20000afc
 8005d58:	40003800 	.word	0x40003800

08005d5c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d62:	003b      	movs	r3, r7
 8005d64:	0018      	movs	r0, r3
 8005d66:	2308      	movs	r3, #8
 8005d68:	001a      	movs	r2, r3
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	f009 f90e 	bl	800ef8c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005d70:	4b15      	ldr	r3, [pc, #84]	; (8005dc8 <MX_TIM6_Init+0x6c>)
 8005d72:	4a16      	ldr	r2, [pc, #88]	; (8005dcc <MX_TIM6_Init+0x70>)
 8005d74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3200-1;
 8005d76:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <MX_TIM6_Init+0x6c>)
 8005d78:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <MX_TIM6_Init+0x74>)
 8005d7a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d7c:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <MX_TIM6_Init+0x6c>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8005d82:	4b11      	ldr	r3, [pc, #68]	; (8005dc8 <MX_TIM6_Init+0x6c>)
 8005d84:	4a13      	ldr	r2, [pc, #76]	; (8005dd4 <MX_TIM6_Init+0x78>)
 8005d86:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d88:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <MX_TIM6_Init+0x6c>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005d8e:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <MX_TIM6_Init+0x6c>)
 8005d90:	0018      	movs	r0, r3
 8005d92:	f003 fa5d 	bl	8009250 <HAL_TIM_Base_Init>
 8005d96:	1e03      	subs	r3, r0, #0
 8005d98:	d001      	beq.n	8005d9e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8005d9a:	f000 f971 	bl	8006080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d9e:	003b      	movs	r3, r7
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005da4:	003b      	movs	r3, r7
 8005da6:	2200      	movs	r2, #0
 8005da8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005daa:	003a      	movs	r2, r7
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <MX_TIM6_Init+0x6c>)
 8005dae:	0011      	movs	r1, r2
 8005db0:	0018      	movs	r0, r3
 8005db2:	f003 fc45 	bl	8009640 <HAL_TIMEx_MasterConfigSynchronization>
 8005db6:	1e03      	subs	r3, r0, #0
 8005db8:	d001      	beq.n	8005dbe <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8005dba:	f000 f961 	bl	8006080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005dbe:	46c0      	nop			; (mov r8, r8)
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b002      	add	sp, #8
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	20000b54 	.word	0x20000b54
 8005dcc:	40001000 	.word	0x40001000
 8005dd0:	00000c7f 	.word	0x00000c7f
 8005dd4:	0000270f 	.word	0x0000270f

08005dd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005ddc:	4b14      	ldr	r3, [pc, #80]	; (8005e30 <MX_USART1_UART_Init+0x58>)
 8005dde:	4a15      	ldr	r2, [pc, #84]	; (8005e34 <MX_USART1_UART_Init+0x5c>)
 8005de0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8005de2:	4b13      	ldr	r3, [pc, #76]	; (8005e30 <MX_USART1_UART_Init+0x58>)
 8005de4:	22e1      	movs	r2, #225	; 0xe1
 8005de6:	0292      	lsls	r2, r2, #10
 8005de8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005dea:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <MX_USART1_UART_Init+0x58>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005df0:	4b0f      	ldr	r3, [pc, #60]	; (8005e30 <MX_USART1_UART_Init+0x58>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005df6:	4b0e      	ldr	r3, [pc, #56]	; (8005e30 <MX_USART1_UART_Init+0x58>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005dfc:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <MX_USART1_UART_Init+0x58>)
 8005dfe:	220c      	movs	r2, #12
 8005e00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e02:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <MX_USART1_UART_Init+0x58>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e08:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <MX_USART1_UART_Init+0x58>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e0e:	4b08      	ldr	r3, [pc, #32]	; (8005e30 <MX_USART1_UART_Init+0x58>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e14:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <MX_USART1_UART_Init+0x58>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <MX_USART1_UART_Init+0x58>)
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f003 fc6d 	bl	80096fc <HAL_UART_Init>
 8005e22:	1e03      	subs	r3, r0, #0
 8005e24:	d001      	beq.n	8005e2a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005e26:	f000 f92b 	bl	8006080 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005e2a:	46c0      	nop			; (mov r8, r8)
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000b94 	.word	0x20000b94
 8005e34:	40013800 	.word	0x40013800

08005e38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005e3c:	4b14      	ldr	r3, [pc, #80]	; (8005e90 <MX_USART2_UART_Init+0x58>)
 8005e3e:	4a15      	ldr	r2, [pc, #84]	; (8005e94 <MX_USART2_UART_Init+0x5c>)
 8005e40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8005e42:	4b13      	ldr	r3, [pc, #76]	; (8005e90 <MX_USART2_UART_Init+0x58>)
 8005e44:	22e1      	movs	r2, #225	; 0xe1
 8005e46:	0292      	lsls	r2, r2, #10
 8005e48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005e4a:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <MX_USART2_UART_Init+0x58>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005e50:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <MX_USART2_UART_Init+0x58>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005e56:	4b0e      	ldr	r3, [pc, #56]	; (8005e90 <MX_USART2_UART_Init+0x58>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005e5c:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <MX_USART2_UART_Init+0x58>)
 8005e5e:	220c      	movs	r2, #12
 8005e60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e62:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <MX_USART2_UART_Init+0x58>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e68:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <MX_USART2_UART_Init+0x58>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e6e:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <MX_USART2_UART_Init+0x58>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e74:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <MX_USART2_UART_Init+0x58>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005e7a:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <MX_USART2_UART_Init+0x58>)
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f003 fc3d 	bl	80096fc <HAL_UART_Init>
 8005e82:	1e03      	subs	r3, r0, #0
 8005e84:	d001      	beq.n	8005e8a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005e86:	f000 f8fb 	bl	8006080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005e8a:	46c0      	nop			; (mov r8, r8)
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	20000c1c 	.word	0x20000c1c
 8005e94:	40004400 	.word	0x40004400

08005e98 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8005e9c:	4b14      	ldr	r3, [pc, #80]	; (8005ef0 <MX_USART4_UART_Init+0x58>)
 8005e9e:	4a15      	ldr	r2, [pc, #84]	; (8005ef4 <MX_USART4_UART_Init+0x5c>)
 8005ea0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 8005ea2:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <MX_USART4_UART_Init+0x58>)
 8005ea4:	22e1      	movs	r2, #225	; 0xe1
 8005ea6:	0292      	lsls	r2, r2, #10
 8005ea8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005eaa:	4b11      	ldr	r3, [pc, #68]	; (8005ef0 <MX_USART4_UART_Init+0x58>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005eb0:	4b0f      	ldr	r3, [pc, #60]	; (8005ef0 <MX_USART4_UART_Init+0x58>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005eb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <MX_USART4_UART_Init+0x58>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005ebc:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <MX_USART4_UART_Init+0x58>)
 8005ebe:	220c      	movs	r2, #12
 8005ec0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <MX_USART4_UART_Init+0x58>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ec8:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <MX_USART4_UART_Init+0x58>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ece:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <MX_USART4_UART_Init+0x58>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <MX_USART4_UART_Init+0x58>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005eda:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <MX_USART4_UART_Init+0x58>)
 8005edc:	0018      	movs	r0, r3
 8005ede:	f003 fc0d 	bl	80096fc <HAL_UART_Init>
 8005ee2:	1e03      	subs	r3, r0, #0
 8005ee4:	d001      	beq.n	8005eea <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8005ee6:	f000 f8cb 	bl	8006080 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20000ca4 	.word	0x20000ca4
 8005ef4:	40004c00 	.word	0x40004c00

08005ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b08b      	sub	sp, #44	; 0x2c
 8005efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005efe:	2414      	movs	r4, #20
 8005f00:	193b      	adds	r3, r7, r4
 8005f02:	0018      	movs	r0, r3
 8005f04:	2314      	movs	r3, #20
 8005f06:	001a      	movs	r2, r3
 8005f08:	2100      	movs	r1, #0
 8005f0a:	f009 f83f 	bl	800ef8c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f0e:	4b4b      	ldr	r3, [pc, #300]	; (800603c <MX_GPIO_Init+0x144>)
 8005f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f12:	4b4a      	ldr	r3, [pc, #296]	; (800603c <MX_GPIO_Init+0x144>)
 8005f14:	2104      	movs	r1, #4
 8005f16:	430a      	orrs	r2, r1
 8005f18:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f1a:	4b48      	ldr	r3, [pc, #288]	; (800603c <MX_GPIO_Init+0x144>)
 8005f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1e:	2204      	movs	r2, #4
 8005f20:	4013      	ands	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f26:	4b45      	ldr	r3, [pc, #276]	; (800603c <MX_GPIO_Init+0x144>)
 8005f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2a:	4b44      	ldr	r3, [pc, #272]	; (800603c <MX_GPIO_Init+0x144>)
 8005f2c:	2180      	movs	r1, #128	; 0x80
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f32:	4b42      	ldr	r3, [pc, #264]	; (800603c <MX_GPIO_Init+0x144>)
 8005f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f36:	2280      	movs	r2, #128	; 0x80
 8005f38:	4013      	ands	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f3e:	4b3f      	ldr	r3, [pc, #252]	; (800603c <MX_GPIO_Init+0x144>)
 8005f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f42:	4b3e      	ldr	r3, [pc, #248]	; (800603c <MX_GPIO_Init+0x144>)
 8005f44:	2101      	movs	r1, #1
 8005f46:	430a      	orrs	r2, r1
 8005f48:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f4a:	4b3c      	ldr	r3, [pc, #240]	; (800603c <MX_GPIO_Init+0x144>)
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4e:	2201      	movs	r2, #1
 8005f50:	4013      	ands	r3, r2
 8005f52:	60bb      	str	r3, [r7, #8]
 8005f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f56:	4b39      	ldr	r3, [pc, #228]	; (800603c <MX_GPIO_Init+0x144>)
 8005f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5a:	4b38      	ldr	r3, [pc, #224]	; (800603c <MX_GPIO_Init+0x144>)
 8005f5c:	2102      	movs	r1, #2
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f62:	4b36      	ldr	r3, [pc, #216]	; (800603c <MX_GPIO_Init+0x144>)
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	2202      	movs	r2, #2
 8005f68:	4013      	ands	r3, r2
 8005f6a:	607b      	str	r3, [r7, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 8005f6e:	2382      	movs	r3, #130	; 0x82
 8005f70:	015b      	lsls	r3, r3, #5
 8005f72:	4833      	ldr	r0, [pc, #204]	; (8006040 <MX_GPIO_Init+0x148>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	0019      	movs	r1, r3
 8005f78:	f000 ff32 	bl	8006de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8005f7c:	4b31      	ldr	r3, [pc, #196]	; (8006044 <MX_GPIO_Init+0x14c>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2180      	movs	r1, #128	; 0x80
 8005f82:	0018      	movs	r0, r3
 8005f84:	f000 ff2c 	bl	8006de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8005f88:	2380      	movs	r3, #128	; 0x80
 8005f8a:	0059      	lsls	r1, r3, #1
 8005f8c:	23a0      	movs	r3, #160	; 0xa0
 8005f8e:	05db      	lsls	r3, r3, #23
 8005f90:	2200      	movs	r2, #0
 8005f92:	0018      	movs	r0, r3
 8005f94:	f000 ff24 	bl	8006de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005f98:	193b      	adds	r3, r7, r4
 8005f9a:	2280      	movs	r2, #128	; 0x80
 8005f9c:	0192      	lsls	r2, r2, #6
 8005f9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005fa0:	193b      	adds	r3, r7, r4
 8005fa2:	2284      	movs	r2, #132	; 0x84
 8005fa4:	0392      	lsls	r2, r2, #14
 8005fa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa8:	193b      	adds	r3, r7, r4
 8005faa:	2200      	movs	r2, #0
 8005fac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005fae:	193b      	adds	r3, r7, r4
 8005fb0:	4a24      	ldr	r2, [pc, #144]	; (8006044 <MX_GPIO_Init+0x14c>)
 8005fb2:	0019      	movs	r1, r3
 8005fb4:	0010      	movs	r0, r2
 8005fb6:	f000 fd95 	bl	8006ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8005fba:	0021      	movs	r1, r4
 8005fbc:	193b      	adds	r3, r7, r4
 8005fbe:	2282      	movs	r2, #130	; 0x82
 8005fc0:	0152      	lsls	r2, r2, #5
 8005fc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fc4:	000c      	movs	r4, r1
 8005fc6:	193b      	adds	r3, r7, r4
 8005fc8:	2201      	movs	r2, #1
 8005fca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fcc:	193b      	adds	r3, r7, r4
 8005fce:	2200      	movs	r2, #0
 8005fd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fd2:	193b      	adds	r3, r7, r4
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fd8:	193b      	adds	r3, r7, r4
 8005fda:	4a19      	ldr	r2, [pc, #100]	; (8006040 <MX_GPIO_Init+0x148>)
 8005fdc:	0019      	movs	r1, r3
 8005fde:	0010      	movs	r0, r2
 8005fe0:	f000 fd80 	bl	8006ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005fe4:	193b      	adds	r3, r7, r4
 8005fe6:	2280      	movs	r2, #128	; 0x80
 8005fe8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fea:	193b      	adds	r3, r7, r4
 8005fec:	2201      	movs	r2, #1
 8005fee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff0:	193b      	adds	r3, r7, r4
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ff6:	193b      	adds	r3, r7, r4
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ffc:	193b      	adds	r3, r7, r4
 8005ffe:	4a11      	ldr	r2, [pc, #68]	; (8006044 <MX_GPIO_Init+0x14c>)
 8006000:	0019      	movs	r1, r3
 8006002:	0010      	movs	r0, r2
 8006004:	f000 fd6e 	bl	8006ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006008:	0021      	movs	r1, r4
 800600a:	187b      	adds	r3, r7, r1
 800600c:	2280      	movs	r2, #128	; 0x80
 800600e:	0052      	lsls	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006012:	187b      	adds	r3, r7, r1
 8006014:	2201      	movs	r2, #1
 8006016:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006018:	187b      	adds	r3, r7, r1
 800601a:	2200      	movs	r2, #0
 800601c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800601e:	187b      	adds	r3, r7, r1
 8006020:	2200      	movs	r2, #0
 8006022:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006024:	187a      	adds	r2, r7, r1
 8006026:	23a0      	movs	r3, #160	; 0xa0
 8006028:	05db      	lsls	r3, r3, #23
 800602a:	0011      	movs	r1, r2
 800602c:	0018      	movs	r0, r3
 800602e:	f000 fd59 	bl	8006ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	46bd      	mov	sp, r7
 8006036:	b00b      	add	sp, #44	; 0x2c
 8006038:	bd90      	pop	{r4, r7, pc}
 800603a:	46c0      	nop			; (mov r8, r8)
 800603c:	40021000 	.word	0x40021000
 8006040:	50000400 	.word	0x50000400
 8006044:	50000800 	.word	0x50000800

08006048 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	if (htim == &htim6)
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	4b08      	ldr	r3, [pc, #32]	; (8006074 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8006054:	429a      	cmp	r2, r3
 8006056:	d109      	bne.n	800606c <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		ahtCounter++;
 8006058:	4b07      	ldr	r3, [pc, #28]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	4b06      	ldr	r3, [pc, #24]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006060:	601a      	str	r2, [r3, #0]
		fileWriteCounter++;
 8006062:	4b06      	ldr	r3, [pc, #24]	; (800607c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	4b04      	ldr	r3, [pc, #16]	; (800607c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800606a:	601a      	str	r2, [r3, #0]
	}
}
 800606c:	46c0      	nop			; (mov r8, r8)
 800606e:	46bd      	mov	sp, r7
 8006070:	b002      	add	sp, #8
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000b54 	.word	0x20000b54
 8006078:	20000d2c 	.word	0x20000d2c
 800607c:	20000d30 	.word	0x20000d30

08006080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006084:	b672      	cpsid	i
}
 8006086:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006088:	e7fe      	b.n	8006088 <Error_Handler+0x8>
	...

0800608c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <HAL_MspInit+0x24>)
 8006092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006094:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <HAL_MspInit+0x24>)
 8006096:	2101      	movs	r1, #1
 8006098:	430a      	orrs	r2, r1
 800609a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800609c:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <HAL_MspInit+0x24>)
 800609e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060a0:	4b03      	ldr	r3, [pc, #12]	; (80060b0 <HAL_MspInit+0x24>)
 80060a2:	2180      	movs	r1, #128	; 0x80
 80060a4:	0549      	lsls	r1, r1, #21
 80060a6:	430a      	orrs	r2, r1
 80060a8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40021000 	.word	0x40021000

080060b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80060b4:	b590      	push	{r4, r7, lr}
 80060b6:	b089      	sub	sp, #36	; 0x24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060bc:	240c      	movs	r4, #12
 80060be:	193b      	adds	r3, r7, r4
 80060c0:	0018      	movs	r0, r3
 80060c2:	2314      	movs	r3, #20
 80060c4:	001a      	movs	r2, r3
 80060c6:	2100      	movs	r1, #0
 80060c8:	f008 ff60 	bl	800ef8c <memset>
  if(hi2c->Instance==I2C1)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a18      	ldr	r2, [pc, #96]	; (8006134 <HAL_I2C_MspInit+0x80>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d129      	bne.n	800612a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060d6:	4b18      	ldr	r3, [pc, #96]	; (8006138 <HAL_I2C_MspInit+0x84>)
 80060d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060da:	4b17      	ldr	r3, [pc, #92]	; (8006138 <HAL_I2C_MspInit+0x84>)
 80060dc:	2102      	movs	r1, #2
 80060de:	430a      	orrs	r2, r1
 80060e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80060e2:	4b15      	ldr	r3, [pc, #84]	; (8006138 <HAL_I2C_MspInit+0x84>)
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	2202      	movs	r2, #2
 80060e8:	4013      	ands	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]
 80060ec:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80060ee:	193b      	adds	r3, r7, r4
 80060f0:	22c0      	movs	r2, #192	; 0xc0
 80060f2:	0092      	lsls	r2, r2, #2
 80060f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80060f6:	0021      	movs	r1, r4
 80060f8:	187b      	adds	r3, r7, r1
 80060fa:	2212      	movs	r2, #18
 80060fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060fe:	187b      	adds	r3, r7, r1
 8006100:	2200      	movs	r2, #0
 8006102:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006104:	187b      	adds	r3, r7, r1
 8006106:	2203      	movs	r2, #3
 8006108:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800610a:	187b      	adds	r3, r7, r1
 800610c:	2204      	movs	r2, #4
 800610e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006110:	187b      	adds	r3, r7, r1
 8006112:	4a0a      	ldr	r2, [pc, #40]	; (800613c <HAL_I2C_MspInit+0x88>)
 8006114:	0019      	movs	r1, r3
 8006116:	0010      	movs	r0, r2
 8006118:	f000 fce4 	bl	8006ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800611c:	4b06      	ldr	r3, [pc, #24]	; (8006138 <HAL_I2C_MspInit+0x84>)
 800611e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006120:	4b05      	ldr	r3, [pc, #20]	; (8006138 <HAL_I2C_MspInit+0x84>)
 8006122:	2180      	movs	r1, #128	; 0x80
 8006124:	0389      	lsls	r1, r1, #14
 8006126:	430a      	orrs	r2, r1
 8006128:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800612a:	46c0      	nop			; (mov r8, r8)
 800612c:	46bd      	mov	sp, r7
 800612e:	b009      	add	sp, #36	; 0x24
 8006130:	bd90      	pop	{r4, r7, pc}
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	40005400 	.word	0x40005400
 8006138:	40021000 	.word	0x40021000
 800613c:	50000400 	.word	0x50000400

08006140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006140:	b590      	push	{r4, r7, lr}
 8006142:	b08b      	sub	sp, #44	; 0x2c
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006148:	2414      	movs	r4, #20
 800614a:	193b      	adds	r3, r7, r4
 800614c:	0018      	movs	r0, r3
 800614e:	2314      	movs	r3, #20
 8006150:	001a      	movs	r2, r3
 8006152:	2100      	movs	r1, #0
 8006154:	f008 ff1a 	bl	800ef8c <memset>
  if(hspi->Instance==SPI1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a30      	ldr	r2, [pc, #192]	; (8006220 <HAL_SPI_MspInit+0xe0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d12a      	bne.n	80061b8 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006162:	4b30      	ldr	r3, [pc, #192]	; (8006224 <HAL_SPI_MspInit+0xe4>)
 8006164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006166:	4b2f      	ldr	r3, [pc, #188]	; (8006224 <HAL_SPI_MspInit+0xe4>)
 8006168:	2180      	movs	r1, #128	; 0x80
 800616a:	0149      	lsls	r1, r1, #5
 800616c:	430a      	orrs	r2, r1
 800616e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006170:	4b2c      	ldr	r3, [pc, #176]	; (8006224 <HAL_SPI_MspInit+0xe4>)
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	4b2b      	ldr	r3, [pc, #172]	; (8006224 <HAL_SPI_MspInit+0xe4>)
 8006176:	2101      	movs	r1, #1
 8006178:	430a      	orrs	r2, r1
 800617a:	62da      	str	r2, [r3, #44]	; 0x2c
 800617c:	4b29      	ldr	r3, [pc, #164]	; (8006224 <HAL_SPI_MspInit+0xe4>)
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	2201      	movs	r2, #1
 8006182:	4013      	ands	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006188:	0021      	movs	r1, r4
 800618a:	187b      	adds	r3, r7, r1
 800618c:	22a0      	movs	r2, #160	; 0xa0
 800618e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006190:	187b      	adds	r3, r7, r1
 8006192:	2202      	movs	r2, #2
 8006194:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006196:	187b      	adds	r3, r7, r1
 8006198:	2200      	movs	r2, #0
 800619a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800619c:	187b      	adds	r3, r7, r1
 800619e:	2203      	movs	r2, #3
 80061a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80061a2:	187b      	adds	r3, r7, r1
 80061a4:	2200      	movs	r2, #0
 80061a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061a8:	187a      	adds	r2, r7, r1
 80061aa:	23a0      	movs	r3, #160	; 0xa0
 80061ac:	05db      	lsls	r3, r3, #23
 80061ae:	0011      	movs	r1, r2
 80061b0:	0018      	movs	r0, r3
 80061b2:	f000 fc97 	bl	8006ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80061b6:	e02e      	b.n	8006216 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1a      	ldr	r2, [pc, #104]	; (8006228 <HAL_SPI_MspInit+0xe8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d129      	bne.n	8006216 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80061c2:	4b18      	ldr	r3, [pc, #96]	; (8006224 <HAL_SPI_MspInit+0xe4>)
 80061c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c6:	4b17      	ldr	r3, [pc, #92]	; (8006224 <HAL_SPI_MspInit+0xe4>)
 80061c8:	2180      	movs	r1, #128	; 0x80
 80061ca:	01c9      	lsls	r1, r1, #7
 80061cc:	430a      	orrs	r2, r1
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061d0:	4b14      	ldr	r3, [pc, #80]	; (8006224 <HAL_SPI_MspInit+0xe4>)
 80061d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d4:	4b13      	ldr	r3, [pc, #76]	; (8006224 <HAL_SPI_MspInit+0xe4>)
 80061d6:	2102      	movs	r1, #2
 80061d8:	430a      	orrs	r2, r1
 80061da:	62da      	str	r2, [r3, #44]	; 0x2c
 80061dc:	4b11      	ldr	r3, [pc, #68]	; (8006224 <HAL_SPI_MspInit+0xe4>)
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	2202      	movs	r2, #2
 80061e2:	4013      	ands	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80061e8:	2114      	movs	r1, #20
 80061ea:	187b      	adds	r3, r7, r1
 80061ec:	22e0      	movs	r2, #224	; 0xe0
 80061ee:	0212      	lsls	r2, r2, #8
 80061f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061f2:	187b      	adds	r3, r7, r1
 80061f4:	2202      	movs	r2, #2
 80061f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f8:	187b      	adds	r3, r7, r1
 80061fa:	2200      	movs	r2, #0
 80061fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061fe:	187b      	adds	r3, r7, r1
 8006200:	2203      	movs	r2, #3
 8006202:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8006204:	187b      	adds	r3, r7, r1
 8006206:	2200      	movs	r2, #0
 8006208:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800620a:	187b      	adds	r3, r7, r1
 800620c:	4a07      	ldr	r2, [pc, #28]	; (800622c <HAL_SPI_MspInit+0xec>)
 800620e:	0019      	movs	r1, r3
 8006210:	0010      	movs	r0, r2
 8006212:	f000 fc67 	bl	8006ae4 <HAL_GPIO_Init>
}
 8006216:	46c0      	nop			; (mov r8, r8)
 8006218:	46bd      	mov	sp, r7
 800621a:	b00b      	add	sp, #44	; 0x2c
 800621c:	bd90      	pop	{r4, r7, pc}
 800621e:	46c0      	nop			; (mov r8, r8)
 8006220:	40013000 	.word	0x40013000
 8006224:	40021000 	.word	0x40021000
 8006228:	40003800 	.word	0x40003800
 800622c:	50000400 	.word	0x50000400

08006230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a14      	ldr	r2, [pc, #80]	; (8006290 <HAL_TIM_Base_MspInit+0x60>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d10e      	bne.n	8006260 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006242:	4b14      	ldr	r3, [pc, #80]	; (8006294 <HAL_TIM_Base_MspInit+0x64>)
 8006244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006246:	4b13      	ldr	r3, [pc, #76]	; (8006294 <HAL_TIM_Base_MspInit+0x64>)
 8006248:	2110      	movs	r1, #16
 800624a:	430a      	orrs	r2, r1
 800624c:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800624e:	2200      	movs	r2, #0
 8006250:	2100      	movs	r1, #0
 8006252:	2011      	movs	r0, #17
 8006254:	f000 fb8c 	bl	8006970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006258:	2011      	movs	r0, #17
 800625a:	f000 fb9e 	bl	800699a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800625e:	e012      	b.n	8006286 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a0c      	ldr	r2, [pc, #48]	; (8006298 <HAL_TIM_Base_MspInit+0x68>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d10d      	bne.n	8006286 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800626a:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <HAL_TIM_Base_MspInit+0x64>)
 800626c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800626e:	4b09      	ldr	r3, [pc, #36]	; (8006294 <HAL_TIM_Base_MspInit+0x64>)
 8006270:	2120      	movs	r1, #32
 8006272:	430a      	orrs	r2, r1
 8006274:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006276:	2200      	movs	r2, #0
 8006278:	2100      	movs	r1, #0
 800627a:	2012      	movs	r0, #18
 800627c:	f000 fb78 	bl	8006970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006280:	2012      	movs	r0, #18
 8006282:	f000 fb8a 	bl	800699a <HAL_NVIC_EnableIRQ>
}
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	46bd      	mov	sp, r7
 800628a:	b002      	add	sp, #8
 800628c:	bd80      	pop	{r7, pc}
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	40001000 	.word	0x40001000
 8006294:	40021000 	.word	0x40021000
 8006298:	40001400 	.word	0x40001400

0800629c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800629c:	b590      	push	{r4, r7, lr}
 800629e:	b08b      	sub	sp, #44	; 0x2c
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062a4:	2414      	movs	r4, #20
 80062a6:	193b      	adds	r3, r7, r4
 80062a8:	0018      	movs	r0, r3
 80062aa:	2314      	movs	r3, #20
 80062ac:	001a      	movs	r2, r3
 80062ae:	2100      	movs	r1, #0
 80062b0:	f008 fe6c 	bl	800ef8c <memset>
  if(huart->Instance==USART1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a54      	ldr	r2, [pc, #336]	; (800640c <HAL_UART_MspInit+0x170>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d133      	bne.n	8006326 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80062be:	4b54      	ldr	r3, [pc, #336]	; (8006410 <HAL_UART_MspInit+0x174>)
 80062c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c2:	4b53      	ldr	r3, [pc, #332]	; (8006410 <HAL_UART_MspInit+0x174>)
 80062c4:	2180      	movs	r1, #128	; 0x80
 80062c6:	01c9      	lsls	r1, r1, #7
 80062c8:	430a      	orrs	r2, r1
 80062ca:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062cc:	4b50      	ldr	r3, [pc, #320]	; (8006410 <HAL_UART_MspInit+0x174>)
 80062ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d0:	4b4f      	ldr	r3, [pc, #316]	; (8006410 <HAL_UART_MspInit+0x174>)
 80062d2:	2101      	movs	r1, #1
 80062d4:	430a      	orrs	r2, r1
 80062d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80062d8:	4b4d      	ldr	r3, [pc, #308]	; (8006410 <HAL_UART_MspInit+0x174>)
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	2201      	movs	r2, #1
 80062de:	4013      	ands	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80062e4:	193b      	adds	r3, r7, r4
 80062e6:	22c0      	movs	r2, #192	; 0xc0
 80062e8:	00d2      	lsls	r2, r2, #3
 80062ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ec:	0021      	movs	r1, r4
 80062ee:	187b      	adds	r3, r7, r1
 80062f0:	2202      	movs	r2, #2
 80062f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f4:	187b      	adds	r3, r7, r1
 80062f6:	2200      	movs	r2, #0
 80062f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062fa:	187b      	adds	r3, r7, r1
 80062fc:	2203      	movs	r2, #3
 80062fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006300:	187b      	adds	r3, r7, r1
 8006302:	2204      	movs	r2, #4
 8006304:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006306:	187a      	adds	r2, r7, r1
 8006308:	23a0      	movs	r3, #160	; 0xa0
 800630a:	05db      	lsls	r3, r3, #23
 800630c:	0011      	movs	r1, r2
 800630e:	0018      	movs	r0, r3
 8006310:	f000 fbe8 	bl	8006ae4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006314:	2200      	movs	r2, #0
 8006316:	2100      	movs	r1, #0
 8006318:	201b      	movs	r0, #27
 800631a:	f000 fb29 	bl	8006970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800631e:	201b      	movs	r0, #27
 8006320:	f000 fb3b 	bl	800699a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8006324:	e06e      	b.n	8006404 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART2)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a3a      	ldr	r2, [pc, #232]	; (8006414 <HAL_UART_MspInit+0x178>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d132      	bne.n	8006396 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006330:	4b37      	ldr	r3, [pc, #220]	; (8006410 <HAL_UART_MspInit+0x174>)
 8006332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006334:	4b36      	ldr	r3, [pc, #216]	; (8006410 <HAL_UART_MspInit+0x174>)
 8006336:	2180      	movs	r1, #128	; 0x80
 8006338:	0289      	lsls	r1, r1, #10
 800633a:	430a      	orrs	r2, r1
 800633c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800633e:	4b34      	ldr	r3, [pc, #208]	; (8006410 <HAL_UART_MspInit+0x174>)
 8006340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006342:	4b33      	ldr	r3, [pc, #204]	; (8006410 <HAL_UART_MspInit+0x174>)
 8006344:	2101      	movs	r1, #1
 8006346:	430a      	orrs	r2, r1
 8006348:	62da      	str	r2, [r3, #44]	; 0x2c
 800634a:	4b31      	ldr	r3, [pc, #196]	; (8006410 <HAL_UART_MspInit+0x174>)
 800634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634e:	2201      	movs	r2, #1
 8006350:	4013      	ands	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006356:	2114      	movs	r1, #20
 8006358:	187b      	adds	r3, r7, r1
 800635a:	220c      	movs	r2, #12
 800635c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800635e:	187b      	adds	r3, r7, r1
 8006360:	2202      	movs	r2, #2
 8006362:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006364:	187b      	adds	r3, r7, r1
 8006366:	2200      	movs	r2, #0
 8006368:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800636a:	187b      	adds	r3, r7, r1
 800636c:	2203      	movs	r2, #3
 800636e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8006370:	187b      	adds	r3, r7, r1
 8006372:	2204      	movs	r2, #4
 8006374:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006376:	187a      	adds	r2, r7, r1
 8006378:	23a0      	movs	r3, #160	; 0xa0
 800637a:	05db      	lsls	r3, r3, #23
 800637c:	0011      	movs	r1, r2
 800637e:	0018      	movs	r0, r3
 8006380:	f000 fbb0 	bl	8006ae4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006384:	2200      	movs	r2, #0
 8006386:	2100      	movs	r1, #0
 8006388:	201c      	movs	r0, #28
 800638a:	f000 faf1 	bl	8006970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800638e:	201c      	movs	r0, #28
 8006390:	f000 fb03 	bl	800699a <HAL_NVIC_EnableIRQ>
}
 8006394:	e036      	b.n	8006404 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART4)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a1f      	ldr	r2, [pc, #124]	; (8006418 <HAL_UART_MspInit+0x17c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d131      	bne.n	8006404 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART4_CLK_ENABLE();
 80063a0:	4b1b      	ldr	r3, [pc, #108]	; (8006410 <HAL_UART_MspInit+0x174>)
 80063a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063a4:	4b1a      	ldr	r3, [pc, #104]	; (8006410 <HAL_UART_MspInit+0x174>)
 80063a6:	2180      	movs	r1, #128	; 0x80
 80063a8:	0309      	lsls	r1, r1, #12
 80063aa:	430a      	orrs	r2, r1
 80063ac:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063ae:	4b18      	ldr	r3, [pc, #96]	; (8006410 <HAL_UART_MspInit+0x174>)
 80063b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b2:	4b17      	ldr	r3, [pc, #92]	; (8006410 <HAL_UART_MspInit+0x174>)
 80063b4:	2101      	movs	r1, #1
 80063b6:	430a      	orrs	r2, r1
 80063b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80063ba:	4b15      	ldr	r3, [pc, #84]	; (8006410 <HAL_UART_MspInit+0x174>)
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	2201      	movs	r2, #1
 80063c0:	4013      	ands	r3, r2
 80063c2:	60bb      	str	r3, [r7, #8]
 80063c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80063c6:	2114      	movs	r1, #20
 80063c8:	187b      	adds	r3, r7, r1
 80063ca:	2203      	movs	r2, #3
 80063cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ce:	187b      	adds	r3, r7, r1
 80063d0:	2202      	movs	r2, #2
 80063d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063d4:	187b      	adds	r3, r7, r1
 80063d6:	2200      	movs	r2, #0
 80063d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063da:	187b      	adds	r3, r7, r1
 80063dc:	2203      	movs	r2, #3
 80063de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80063e0:	187b      	adds	r3, r7, r1
 80063e2:	2206      	movs	r2, #6
 80063e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063e6:	187a      	adds	r2, r7, r1
 80063e8:	23a0      	movs	r3, #160	; 0xa0
 80063ea:	05db      	lsls	r3, r3, #23
 80063ec:	0011      	movs	r1, r2
 80063ee:	0018      	movs	r0, r3
 80063f0:	f000 fb78 	bl	8006ae4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80063f4:	2200      	movs	r2, #0
 80063f6:	2100      	movs	r1, #0
 80063f8:	200e      	movs	r0, #14
 80063fa:	f000 fab9 	bl	8006970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80063fe:	200e      	movs	r0, #14
 8006400:	f000 facb 	bl	800699a <HAL_NVIC_EnableIRQ>
}
 8006404:	46c0      	nop			; (mov r8, r8)
 8006406:	46bd      	mov	sp, r7
 8006408:	b00b      	add	sp, #44	; 0x2c
 800640a:	bd90      	pop	{r4, r7, pc}
 800640c:	40013800 	.word	0x40013800
 8006410:	40021000 	.word	0x40021000
 8006414:	40004400 	.word	0x40004400
 8006418:	40004c00 	.word	0x40004c00

0800641c <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8006420:	4b0d      	ldr	r3, [pc, #52]	; (8006458 <SDTimer_Handler+0x3c>)
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d006      	beq.n	8006438 <SDTimer_Handler+0x1c>
    Timer1--;
 800642a:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <SDTimer_Handler+0x3c>)
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	4b08      	ldr	r3, [pc, #32]	; (8006458 <SDTimer_Handler+0x3c>)
 8006436:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8006438:	4b08      	ldr	r3, [pc, #32]	; (800645c <SDTimer_Handler+0x40>)
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d006      	beq.n	8006450 <SDTimer_Handler+0x34>
    Timer2--;
 8006442:	4b06      	ldr	r3, [pc, #24]	; (800645c <SDTimer_Handler+0x40>)
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	4b03      	ldr	r3, [pc, #12]	; (800645c <SDTimer_Handler+0x40>)
 800644e:	801a      	strh	r2, [r3, #0]
}
 8006450:	46c0      	nop			; (mov r8, r8)
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	46c0      	nop			; (mov r8, r8)
 8006458:	20000d36 	.word	0x20000d36
 800645c:	20000d38 	.word	0x20000d38

08006460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006464:	e7fe      	b.n	8006464 <NMI_Handler+0x4>

08006466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800646a:	e7fe      	b.n	800646a <HardFault_Handler+0x4>

0800646c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006470:	46c0      	nop			; (mov r8, r8)
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800647a:	46c0      	nop			; (mov r8, r8)
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8006484:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <SysTick_Handler+0x30>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	b2db      	uxtb	r3, r3
 800648a:	3301      	adds	r3, #1
 800648c:	b2da      	uxtb	r2, r3
 800648e:	4b08      	ldr	r3, [pc, #32]	; (80064b0 <SysTick_Handler+0x30>)
 8006490:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8006492:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <SysTick_Handler+0x30>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b09      	cmp	r3, #9
 800649a:	d904      	bls.n	80064a6 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 800649c:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <SysTick_Handler+0x30>)
 800649e:	2200      	movs	r2, #0
 80064a0:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80064a2:	f7ff ffbb 	bl	800641c <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064a6:	f000 f977 	bl	8006798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20000d34 	.word	0x20000d34

080064b4 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */
  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80064b8:	4b03      	ldr	r3, [pc, #12]	; (80064c8 <USART4_5_IRQHandler+0x14>)
 80064ba:	0018      	movs	r0, r3
 80064bc:	f003 fa12 	bl	80098e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80064c0:	46c0      	nop			; (mov r8, r8)
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	46c0      	nop			; (mov r8, r8)
 80064c8:	20000ca4 	.word	0x20000ca4

080064cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80064d0:	4b03      	ldr	r3, [pc, #12]	; (80064e0 <TIM6_DAC_IRQHandler+0x14>)
 80064d2:	0018      	movs	r0, r3
 80064d4:	f002 ff4e 	bl	8009374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80064d8:	46c0      	nop			; (mov r8, r8)
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	46c0      	nop			; (mov r8, r8)
 80064e0:	20000b54 	.word	0x20000b54

080064e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80064e8:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <USART1_IRQHandler+0x14>)
 80064ea:	0018      	movs	r0, r3
 80064ec:	f7fe f9fc 	bl	80048e8 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80064f0:	46c0      	nop			; (mov r8, r8)
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	20000b94 	.word	0x20000b94

080064fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8006500:	4b03      	ldr	r3, [pc, #12]	; (8006510 <USART2_IRQHandler+0x14>)
 8006502:	0018      	movs	r0, r3
 8006504:	f7fe f9f0 	bl	80048e8 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006508:	46c0      	nop			; (mov r8, r8)
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	46c0      	nop			; (mov r8, r8)
 8006510:	20000c1c 	.word	0x20000c1c

08006514 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
  return 1;
 8006518:	2301      	movs	r3, #1
}
 800651a:	0018      	movs	r0, r3
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <_kill>:

int _kill(int pid, int sig)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800652a:	f008 fd89 	bl	800f040 <__errno>
 800652e:	0003      	movs	r3, r0
 8006530:	2216      	movs	r2, #22
 8006532:	601a      	str	r2, [r3, #0]
  return -1;
 8006534:	2301      	movs	r3, #1
 8006536:	425b      	negs	r3, r3
}
 8006538:	0018      	movs	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	b002      	add	sp, #8
 800653e:	bd80      	pop	{r7, pc}

08006540 <_exit>:

void _exit (int status)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006548:	2301      	movs	r3, #1
 800654a:	425a      	negs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	0011      	movs	r1, r2
 8006550:	0018      	movs	r0, r3
 8006552:	f7ff ffe5 	bl	8006520 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006556:	e7fe      	b.n	8006556 <_exit+0x16>

08006558 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006564:	2300      	movs	r3, #0
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	e00a      	b.n	8006580 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800656a:	e000      	b.n	800656e <_read+0x16>
 800656c:	bf00      	nop
 800656e:	0001      	movs	r1, r0
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	60ba      	str	r2, [r7, #8]
 8006576:	b2ca      	uxtb	r2, r1
 8006578:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	3301      	adds	r3, #1
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	429a      	cmp	r2, r3
 8006586:	dbf0      	blt.n	800656a <_read+0x12>
  }

  return len;
 8006588:	687b      	ldr	r3, [r7, #4]
}
 800658a:	0018      	movs	r0, r3
 800658c:	46bd      	mov	sp, r7
 800658e:	b006      	add	sp, #24
 8006590:	bd80      	pop	{r7, pc}

08006592 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b086      	sub	sp, #24
 8006596:	af00      	add	r7, sp, #0
 8006598:	60f8      	str	r0, [r7, #12]
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	e009      	b.n	80065b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	60ba      	str	r2, [r7, #8]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	0018      	movs	r0, r3
 80065ae:	e000      	b.n	80065b2 <_write+0x20>
 80065b0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	3301      	adds	r3, #1
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	429a      	cmp	r2, r3
 80065be:	dbf1      	blt.n	80065a4 <_write+0x12>
  }
  return len;
 80065c0:	687b      	ldr	r3, [r7, #4]
}
 80065c2:	0018      	movs	r0, r3
 80065c4:	46bd      	mov	sp, r7
 80065c6:	b006      	add	sp, #24
 80065c8:	bd80      	pop	{r7, pc}

080065ca <_close>:

int _close(int file)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80065d2:	2301      	movs	r3, #1
 80065d4:	425b      	negs	r3, r3
}
 80065d6:	0018      	movs	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	b002      	add	sp, #8
 80065dc:	bd80      	pop	{r7, pc}

080065de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b082      	sub	sp, #8
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2280      	movs	r2, #128	; 0x80
 80065ec:	0192      	lsls	r2, r2, #6
 80065ee:	605a      	str	r2, [r3, #4]
  return 0;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	0018      	movs	r0, r3
 80065f4:	46bd      	mov	sp, r7
 80065f6:	b002      	add	sp, #8
 80065f8:	bd80      	pop	{r7, pc}

080065fa <_isatty>:

int _isatty(int file)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006602:	2301      	movs	r3, #1
}
 8006604:	0018      	movs	r0, r3
 8006606:	46bd      	mov	sp, r7
 8006608:	b002      	add	sp, #8
 800660a:	bd80      	pop	{r7, pc}

0800660c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006618:	2300      	movs	r3, #0
}
 800661a:	0018      	movs	r0, r3
 800661c:	46bd      	mov	sp, r7
 800661e:	b004      	add	sp, #16
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800662c:	4a14      	ldr	r2, [pc, #80]	; (8006680 <_sbrk+0x5c>)
 800662e:	4b15      	ldr	r3, [pc, #84]	; (8006684 <_sbrk+0x60>)
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006638:	4b13      	ldr	r3, [pc, #76]	; (8006688 <_sbrk+0x64>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d102      	bne.n	8006646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006640:	4b11      	ldr	r3, [pc, #68]	; (8006688 <_sbrk+0x64>)
 8006642:	4a12      	ldr	r2, [pc, #72]	; (800668c <_sbrk+0x68>)
 8006644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006646:	4b10      	ldr	r3, [pc, #64]	; (8006688 <_sbrk+0x64>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	18d3      	adds	r3, r2, r3
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	429a      	cmp	r2, r3
 8006652:	d207      	bcs.n	8006664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006654:	f008 fcf4 	bl	800f040 <__errno>
 8006658:	0003      	movs	r3, r0
 800665a:	220c      	movs	r2, #12
 800665c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800665e:	2301      	movs	r3, #1
 8006660:	425b      	negs	r3, r3
 8006662:	e009      	b.n	8006678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006664:	4b08      	ldr	r3, [pc, #32]	; (8006688 <_sbrk+0x64>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800666a:	4b07      	ldr	r3, [pc, #28]	; (8006688 <_sbrk+0x64>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	18d2      	adds	r2, r2, r3
 8006672:	4b05      	ldr	r3, [pc, #20]	; (8006688 <_sbrk+0x64>)
 8006674:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006676:	68fb      	ldr	r3, [r7, #12]
}
 8006678:	0018      	movs	r0, r3
 800667a:	46bd      	mov	sp, r7
 800667c:	b006      	add	sp, #24
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20005000 	.word	0x20005000
 8006684:	00000400 	.word	0x00000400
 8006688:	20000d3c 	.word	0x20000d3c
 800668c:	200010d0 	.word	0x200010d0

08006690 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006694:	46c0      	nop			; (mov r8, r8)
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800669c:	480d      	ldr	r0, [pc, #52]	; (80066d4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800669e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80066a0:	f7ff fff6 	bl	8006690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80066a4:	480c      	ldr	r0, [pc, #48]	; (80066d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80066a6:	490d      	ldr	r1, [pc, #52]	; (80066dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80066a8:	4a0d      	ldr	r2, [pc, #52]	; (80066e0 <LoopForever+0xe>)
  movs r3, #0
 80066aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80066ac:	e002      	b.n	80066b4 <LoopCopyDataInit>

080066ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80066ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066b2:	3304      	adds	r3, #4

080066b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80066b8:	d3f9      	bcc.n	80066ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80066ba:	4a0a      	ldr	r2, [pc, #40]	; (80066e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80066bc:	4c0a      	ldr	r4, [pc, #40]	; (80066e8 <LoopForever+0x16>)
  movs r3, #0
 80066be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066c0:	e001      	b.n	80066c6 <LoopFillZerobss>

080066c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066c4:	3204      	adds	r2, #4

080066c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066c8:	d3fb      	bcc.n	80066c2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80066ca:	f008 fcbf 	bl	800f04c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066ce:	f7ff f995 	bl	80059fc <main>

080066d2 <LoopForever>:

LoopForever:
    b LoopForever
 80066d2:	e7fe      	b.n	80066d2 <LoopForever>
   ldr   r0, =_estack
 80066d4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80066d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80066dc:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80066e0:	08013f90 	.word	0x08013f90
  ldr r2, =_sbss
 80066e4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80066e8:	200010cc 	.word	0x200010cc

080066ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80066ec:	e7fe      	b.n	80066ec <ADC1_COMP_IRQHandler>
	...

080066f0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80066f6:	1dfb      	adds	r3, r7, #7
 80066f8:	2200      	movs	r2, #0
 80066fa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80066fc:	4b0b      	ldr	r3, [pc, #44]	; (800672c <HAL_Init+0x3c>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	4b0a      	ldr	r3, [pc, #40]	; (800672c <HAL_Init+0x3c>)
 8006702:	2140      	movs	r1, #64	; 0x40
 8006704:	430a      	orrs	r2, r1
 8006706:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006708:	2000      	movs	r0, #0
 800670a:	f000 f811 	bl	8006730 <HAL_InitTick>
 800670e:	1e03      	subs	r3, r0, #0
 8006710:	d003      	beq.n	800671a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8006712:	1dfb      	adds	r3, r7, #7
 8006714:	2201      	movs	r2, #1
 8006716:	701a      	strb	r2, [r3, #0]
 8006718:	e001      	b.n	800671e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800671a:	f7ff fcb7 	bl	800608c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800671e:	1dfb      	adds	r3, r7, #7
 8006720:	781b      	ldrb	r3, [r3, #0]
}
 8006722:	0018      	movs	r0, r3
 8006724:	46bd      	mov	sp, r7
 8006726:	b002      	add	sp, #8
 8006728:	bd80      	pop	{r7, pc}
 800672a:	46c0      	nop			; (mov r8, r8)
 800672c:	40022000 	.word	0x40022000

08006730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006730:	b590      	push	{r4, r7, lr}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006738:	4b14      	ldr	r3, [pc, #80]	; (800678c <HAL_InitTick+0x5c>)
 800673a:	681c      	ldr	r4, [r3, #0]
 800673c:	4b14      	ldr	r3, [pc, #80]	; (8006790 <HAL_InitTick+0x60>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	0019      	movs	r1, r3
 8006742:	23fa      	movs	r3, #250	; 0xfa
 8006744:	0098      	lsls	r0, r3, #2
 8006746:	f7f9 fcfb 	bl	8000140 <__udivsi3>
 800674a:	0003      	movs	r3, r0
 800674c:	0019      	movs	r1, r3
 800674e:	0020      	movs	r0, r4
 8006750:	f7f9 fcf6 	bl	8000140 <__udivsi3>
 8006754:	0003      	movs	r3, r0
 8006756:	0018      	movs	r0, r3
 8006758:	f000 f92f 	bl	80069ba <HAL_SYSTICK_Config>
 800675c:	1e03      	subs	r3, r0, #0
 800675e:	d001      	beq.n	8006764 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e00f      	b.n	8006784 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b03      	cmp	r3, #3
 8006768:	d80b      	bhi.n	8006782 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800676a:	6879      	ldr	r1, [r7, #4]
 800676c:	2301      	movs	r3, #1
 800676e:	425b      	negs	r3, r3
 8006770:	2200      	movs	r2, #0
 8006772:	0018      	movs	r0, r3
 8006774:	f000 f8fc 	bl	8006970 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006778:	4b06      	ldr	r3, [pc, #24]	; (8006794 <HAL_InitTick+0x64>)
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800677e:	2300      	movs	r3, #0
 8006780:	e000      	b.n	8006784 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
}
 8006784:	0018      	movs	r0, r3
 8006786:	46bd      	mov	sp, r7
 8006788:	b003      	add	sp, #12
 800678a:	bd90      	pop	{r4, r7, pc}
 800678c:	2000000c 	.word	0x2000000c
 8006790:	20000014 	.word	0x20000014
 8006794:	20000010 	.word	0x20000010

08006798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800679c:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <HAL_IncTick+0x1c>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	001a      	movs	r2, r3
 80067a2:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <HAL_IncTick+0x20>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	18d2      	adds	r2, r2, r3
 80067a8:	4b03      	ldr	r3, [pc, #12]	; (80067b8 <HAL_IncTick+0x20>)
 80067aa:	601a      	str	r2, [r3, #0]
}
 80067ac:	46c0      	nop			; (mov r8, r8)
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	20000014 	.word	0x20000014
 80067b8:	20000d40 	.word	0x20000d40

080067bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  return uwTick;
 80067c0:	4b02      	ldr	r3, [pc, #8]	; (80067cc <HAL_GetTick+0x10>)
 80067c2:	681b      	ldr	r3, [r3, #0]
}
 80067c4:	0018      	movs	r0, r3
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	46c0      	nop			; (mov r8, r8)
 80067cc:	20000d40 	.word	0x20000d40

080067d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067d8:	f7ff fff0 	bl	80067bc <HAL_GetTick>
 80067dc:	0003      	movs	r3, r0
 80067de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3301      	adds	r3, #1
 80067e8:	d005      	beq.n	80067f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067ea:	4b0a      	ldr	r3, [pc, #40]	; (8006814 <HAL_Delay+0x44>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	001a      	movs	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	189b      	adds	r3, r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	f7ff ffe0 	bl	80067bc <HAL_GetTick>
 80067fc:	0002      	movs	r2, r0
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	429a      	cmp	r2, r3
 8006806:	d8f7      	bhi.n	80067f8 <HAL_Delay+0x28>
  {
  }
}
 8006808:	46c0      	nop			; (mov r8, r8)
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	46bd      	mov	sp, r7
 800680e:	b004      	add	sp, #16
 8006810:	bd80      	pop	{r7, pc}
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	20000014 	.word	0x20000014

08006818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	0002      	movs	r2, r0
 8006820:	1dfb      	adds	r3, r7, #7
 8006822:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006824:	1dfb      	adds	r3, r7, #7
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b7f      	cmp	r3, #127	; 0x7f
 800682a:	d809      	bhi.n	8006840 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800682c:	1dfb      	adds	r3, r7, #7
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	001a      	movs	r2, r3
 8006832:	231f      	movs	r3, #31
 8006834:	401a      	ands	r2, r3
 8006836:	4b04      	ldr	r3, [pc, #16]	; (8006848 <__NVIC_EnableIRQ+0x30>)
 8006838:	2101      	movs	r1, #1
 800683a:	4091      	lsls	r1, r2
 800683c:	000a      	movs	r2, r1
 800683e:	601a      	str	r2, [r3, #0]
  }
}
 8006840:	46c0      	nop			; (mov r8, r8)
 8006842:	46bd      	mov	sp, r7
 8006844:	b002      	add	sp, #8
 8006846:	bd80      	pop	{r7, pc}
 8006848:	e000e100 	.word	0xe000e100

0800684c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800684c:	b590      	push	{r4, r7, lr}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	0002      	movs	r2, r0
 8006854:	6039      	str	r1, [r7, #0]
 8006856:	1dfb      	adds	r3, r7, #7
 8006858:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800685a:	1dfb      	adds	r3, r7, #7
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b7f      	cmp	r3, #127	; 0x7f
 8006860:	d828      	bhi.n	80068b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006862:	4a2f      	ldr	r2, [pc, #188]	; (8006920 <__NVIC_SetPriority+0xd4>)
 8006864:	1dfb      	adds	r3, r7, #7
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	b25b      	sxtb	r3, r3
 800686a:	089b      	lsrs	r3, r3, #2
 800686c:	33c0      	adds	r3, #192	; 0xc0
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	589b      	ldr	r3, [r3, r2]
 8006872:	1dfa      	adds	r2, r7, #7
 8006874:	7812      	ldrb	r2, [r2, #0]
 8006876:	0011      	movs	r1, r2
 8006878:	2203      	movs	r2, #3
 800687a:	400a      	ands	r2, r1
 800687c:	00d2      	lsls	r2, r2, #3
 800687e:	21ff      	movs	r1, #255	; 0xff
 8006880:	4091      	lsls	r1, r2
 8006882:	000a      	movs	r2, r1
 8006884:	43d2      	mvns	r2, r2
 8006886:	401a      	ands	r2, r3
 8006888:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	019b      	lsls	r3, r3, #6
 800688e:	22ff      	movs	r2, #255	; 0xff
 8006890:	401a      	ands	r2, r3
 8006892:	1dfb      	adds	r3, r7, #7
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	0018      	movs	r0, r3
 8006898:	2303      	movs	r3, #3
 800689a:	4003      	ands	r3, r0
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80068a0:	481f      	ldr	r0, [pc, #124]	; (8006920 <__NVIC_SetPriority+0xd4>)
 80068a2:	1dfb      	adds	r3, r7, #7
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	b25b      	sxtb	r3, r3
 80068a8:	089b      	lsrs	r3, r3, #2
 80068aa:	430a      	orrs	r2, r1
 80068ac:	33c0      	adds	r3, #192	; 0xc0
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80068b2:	e031      	b.n	8006918 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80068b4:	4a1b      	ldr	r2, [pc, #108]	; (8006924 <__NVIC_SetPriority+0xd8>)
 80068b6:	1dfb      	adds	r3, r7, #7
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	0019      	movs	r1, r3
 80068bc:	230f      	movs	r3, #15
 80068be:	400b      	ands	r3, r1
 80068c0:	3b08      	subs	r3, #8
 80068c2:	089b      	lsrs	r3, r3, #2
 80068c4:	3306      	adds	r3, #6
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	18d3      	adds	r3, r2, r3
 80068ca:	3304      	adds	r3, #4
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	1dfa      	adds	r2, r7, #7
 80068d0:	7812      	ldrb	r2, [r2, #0]
 80068d2:	0011      	movs	r1, r2
 80068d4:	2203      	movs	r2, #3
 80068d6:	400a      	ands	r2, r1
 80068d8:	00d2      	lsls	r2, r2, #3
 80068da:	21ff      	movs	r1, #255	; 0xff
 80068dc:	4091      	lsls	r1, r2
 80068de:	000a      	movs	r2, r1
 80068e0:	43d2      	mvns	r2, r2
 80068e2:	401a      	ands	r2, r3
 80068e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	019b      	lsls	r3, r3, #6
 80068ea:	22ff      	movs	r2, #255	; 0xff
 80068ec:	401a      	ands	r2, r3
 80068ee:	1dfb      	adds	r3, r7, #7
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	0018      	movs	r0, r3
 80068f4:	2303      	movs	r3, #3
 80068f6:	4003      	ands	r3, r0
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80068fc:	4809      	ldr	r0, [pc, #36]	; (8006924 <__NVIC_SetPriority+0xd8>)
 80068fe:	1dfb      	adds	r3, r7, #7
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	001c      	movs	r4, r3
 8006904:	230f      	movs	r3, #15
 8006906:	4023      	ands	r3, r4
 8006908:	3b08      	subs	r3, #8
 800690a:	089b      	lsrs	r3, r3, #2
 800690c:	430a      	orrs	r2, r1
 800690e:	3306      	adds	r3, #6
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	18c3      	adds	r3, r0, r3
 8006914:	3304      	adds	r3, #4
 8006916:	601a      	str	r2, [r3, #0]
}
 8006918:	46c0      	nop			; (mov r8, r8)
 800691a:	46bd      	mov	sp, r7
 800691c:	b003      	add	sp, #12
 800691e:	bd90      	pop	{r4, r7, pc}
 8006920:	e000e100 	.word	0xe000e100
 8006924:	e000ed00 	.word	0xe000ed00

08006928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	1e5a      	subs	r2, r3, #1
 8006934:	2380      	movs	r3, #128	; 0x80
 8006936:	045b      	lsls	r3, r3, #17
 8006938:	429a      	cmp	r2, r3
 800693a:	d301      	bcc.n	8006940 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800693c:	2301      	movs	r3, #1
 800693e:	e010      	b.n	8006962 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006940:	4b0a      	ldr	r3, [pc, #40]	; (800696c <SysTick_Config+0x44>)
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	3a01      	subs	r2, #1
 8006946:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006948:	2301      	movs	r3, #1
 800694a:	425b      	negs	r3, r3
 800694c:	2103      	movs	r1, #3
 800694e:	0018      	movs	r0, r3
 8006950:	f7ff ff7c 	bl	800684c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006954:	4b05      	ldr	r3, [pc, #20]	; (800696c <SysTick_Config+0x44>)
 8006956:	2200      	movs	r2, #0
 8006958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800695a:	4b04      	ldr	r3, [pc, #16]	; (800696c <SysTick_Config+0x44>)
 800695c:	2207      	movs	r2, #7
 800695e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006960:	2300      	movs	r3, #0
}
 8006962:	0018      	movs	r0, r3
 8006964:	46bd      	mov	sp, r7
 8006966:	b002      	add	sp, #8
 8006968:	bd80      	pop	{r7, pc}
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	e000e010 	.word	0xe000e010

08006970 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
 800697a:	210f      	movs	r1, #15
 800697c:	187b      	adds	r3, r7, r1
 800697e:	1c02      	adds	r2, r0, #0
 8006980:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	187b      	adds	r3, r7, r1
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	b25b      	sxtb	r3, r3
 800698a:	0011      	movs	r1, r2
 800698c:	0018      	movs	r0, r3
 800698e:	f7ff ff5d 	bl	800684c <__NVIC_SetPriority>
}
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	46bd      	mov	sp, r7
 8006996:	b004      	add	sp, #16
 8006998:	bd80      	pop	{r7, pc}

0800699a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	0002      	movs	r2, r0
 80069a2:	1dfb      	adds	r3, r7, #7
 80069a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069a6:	1dfb      	adds	r3, r7, #7
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	b25b      	sxtb	r3, r3
 80069ac:	0018      	movs	r0, r3
 80069ae:	f7ff ff33 	bl	8006818 <__NVIC_EnableIRQ>
}
 80069b2:	46c0      	nop			; (mov r8, r8)
 80069b4:	46bd      	mov	sp, r7
 80069b6:	b002      	add	sp, #8
 80069b8:	bd80      	pop	{r7, pc}

080069ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b082      	sub	sp, #8
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	0018      	movs	r0, r3
 80069c6:	f7ff ffaf 	bl	8006928 <SysTick_Config>
 80069ca:	0003      	movs	r3, r0
}
 80069cc:	0018      	movs	r0, r3
 80069ce:	46bd      	mov	sp, r7
 80069d0:	b002      	add	sp, #8
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069dc:	230f      	movs	r3, #15
 80069de:	18fb      	adds	r3, r7, r3
 80069e0:	2200      	movs	r2, #0
 80069e2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2225      	movs	r2, #37	; 0x25
 80069e8:	5c9b      	ldrb	r3, [r3, r2]
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d008      	beq.n	8006a02 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2204      	movs	r2, #4
 80069f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2224      	movs	r2, #36	; 0x24
 80069fa:	2100      	movs	r1, #0
 80069fc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e024      	b.n	8006a4c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	210e      	movs	r1, #14
 8006a0e:	438a      	bics	r2, r1
 8006a10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	438a      	bics	r2, r1
 8006a20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a26:	221c      	movs	r2, #28
 8006a28:	401a      	ands	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	2101      	movs	r1, #1
 8006a30:	4091      	lsls	r1, r2
 8006a32:	000a      	movs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2225      	movs	r2, #37	; 0x25
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2224      	movs	r2, #36	; 0x24
 8006a42:	2100      	movs	r1, #0
 8006a44:	5499      	strb	r1, [r3, r2]

    return status;
 8006a46:	230f      	movs	r3, #15
 8006a48:	18fb      	adds	r3, r7, r3
 8006a4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	b004      	add	sp, #16
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a5c:	210f      	movs	r1, #15
 8006a5e:	187b      	adds	r3, r7, r1
 8006a60:	2200      	movs	r2, #0
 8006a62:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2225      	movs	r2, #37	; 0x25
 8006a68:	5c9b      	ldrb	r3, [r3, r2]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d006      	beq.n	8006a7e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2204      	movs	r2, #4
 8006a74:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006a76:	187b      	adds	r3, r7, r1
 8006a78:	2201      	movs	r2, #1
 8006a7a:	701a      	strb	r2, [r3, #0]
 8006a7c:	e02a      	b.n	8006ad4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	210e      	movs	r1, #14
 8006a8a:	438a      	bics	r2, r1
 8006a8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2101      	movs	r1, #1
 8006a9a:	438a      	bics	r2, r1
 8006a9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa2:	221c      	movs	r2, #28
 8006aa4:	401a      	ands	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	2101      	movs	r1, #1
 8006aac:	4091      	lsls	r1, r2
 8006aae:	000a      	movs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2225      	movs	r2, #37	; 0x25
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2224      	movs	r2, #36	; 0x24
 8006abe:	2100      	movs	r1, #0
 8006ac0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	0010      	movs	r0, r2
 8006ad2:	4798      	blx	r3
    }
  }
  return status;
 8006ad4:	230f      	movs	r3, #15
 8006ad6:	18fb      	adds	r3, r7, r3
 8006ad8:	781b      	ldrb	r3, [r3, #0]
}
 8006ada:	0018      	movs	r0, r3
 8006adc:	46bd      	mov	sp, r7
 8006ade:	b004      	add	sp, #16
 8006ae0:	bd80      	pop	{r7, pc}
	...

08006ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006afa:	e155      	b.n	8006da8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2101      	movs	r1, #1
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	4091      	lsls	r1, r2
 8006b06:	000a      	movs	r2, r1
 8006b08:	4013      	ands	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d100      	bne.n	8006b14 <HAL_GPIO_Init+0x30>
 8006b12:	e146      	b.n	8006da2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2203      	movs	r2, #3
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d005      	beq.n	8006b2c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2203      	movs	r2, #3
 8006b26:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d130      	bne.n	8006b8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	2203      	movs	r2, #3
 8006b38:	409a      	lsls	r2, r3
 8006b3a:	0013      	movs	r3, r2
 8006b3c:	43da      	mvns	r2, r3
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	4013      	ands	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	409a      	lsls	r2, r3
 8006b4e:	0013      	movs	r3, r2
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b62:	2201      	movs	r2, #1
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	409a      	lsls	r2, r3
 8006b68:	0013      	movs	r3, r2
 8006b6a:	43da      	mvns	r2, r3
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	4013      	ands	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	091b      	lsrs	r3, r3, #4
 8006b78:	2201      	movs	r2, #1
 8006b7a:	401a      	ands	r2, r3
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	409a      	lsls	r2, r3
 8006b80:	0013      	movs	r3, r2
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2203      	movs	r2, #3
 8006b94:	4013      	ands	r3, r2
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d017      	beq.n	8006bca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	2203      	movs	r2, #3
 8006ba6:	409a      	lsls	r2, r3
 8006ba8:	0013      	movs	r3, r2
 8006baa:	43da      	mvns	r2, r3
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	4013      	ands	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	005b      	lsls	r3, r3, #1
 8006bba:	409a      	lsls	r2, r3
 8006bbc:	0013      	movs	r3, r2
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2203      	movs	r2, #3
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d123      	bne.n	8006c1e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	08da      	lsrs	r2, r3, #3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3208      	adds	r2, #8
 8006bde:	0092      	lsls	r2, r2, #2
 8006be0:	58d3      	ldr	r3, [r2, r3]
 8006be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	2207      	movs	r2, #7
 8006be8:	4013      	ands	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	220f      	movs	r2, #15
 8006bee:	409a      	lsls	r2, r3
 8006bf0:	0013      	movs	r3, r2
 8006bf2:	43da      	mvns	r2, r3
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	691a      	ldr	r2, [r3, #16]
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2107      	movs	r1, #7
 8006c02:	400b      	ands	r3, r1
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	409a      	lsls	r2, r3
 8006c08:	0013      	movs	r3, r2
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	08da      	lsrs	r2, r3, #3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3208      	adds	r2, #8
 8006c18:	0092      	lsls	r2, r2, #2
 8006c1a:	6939      	ldr	r1, [r7, #16]
 8006c1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	2203      	movs	r2, #3
 8006c2a:	409a      	lsls	r2, r3
 8006c2c:	0013      	movs	r3, r2
 8006c2e:	43da      	mvns	r2, r3
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	4013      	ands	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2203      	movs	r2, #3
 8006c3c:	401a      	ands	r2, r3
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	409a      	lsls	r2, r3
 8006c44:	0013      	movs	r3, r2
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	23c0      	movs	r3, #192	; 0xc0
 8006c58:	029b      	lsls	r3, r3, #10
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	d100      	bne.n	8006c60 <HAL_GPIO_Init+0x17c>
 8006c5e:	e0a0      	b.n	8006da2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c60:	4b57      	ldr	r3, [pc, #348]	; (8006dc0 <HAL_GPIO_Init+0x2dc>)
 8006c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c64:	4b56      	ldr	r3, [pc, #344]	; (8006dc0 <HAL_GPIO_Init+0x2dc>)
 8006c66:	2101      	movs	r1, #1
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c6c:	4a55      	ldr	r2, [pc, #340]	; (8006dc4 <HAL_GPIO_Init+0x2e0>)
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	089b      	lsrs	r3, r3, #2
 8006c72:	3302      	adds	r3, #2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	589b      	ldr	r3, [r3, r2]
 8006c78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2203      	movs	r2, #3
 8006c7e:	4013      	ands	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	220f      	movs	r2, #15
 8006c84:	409a      	lsls	r2, r3
 8006c86:	0013      	movs	r3, r2
 8006c88:	43da      	mvns	r2, r3
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	23a0      	movs	r3, #160	; 0xa0
 8006c94:	05db      	lsls	r3, r3, #23
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d01f      	beq.n	8006cda <HAL_GPIO_Init+0x1f6>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a4a      	ldr	r2, [pc, #296]	; (8006dc8 <HAL_GPIO_Init+0x2e4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d019      	beq.n	8006cd6 <HAL_GPIO_Init+0x1f2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a49      	ldr	r2, [pc, #292]	; (8006dcc <HAL_GPIO_Init+0x2e8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d013      	beq.n	8006cd2 <HAL_GPIO_Init+0x1ee>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a48      	ldr	r2, [pc, #288]	; (8006dd0 <HAL_GPIO_Init+0x2ec>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00d      	beq.n	8006cce <HAL_GPIO_Init+0x1ea>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a47      	ldr	r2, [pc, #284]	; (8006dd4 <HAL_GPIO_Init+0x2f0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d007      	beq.n	8006cca <HAL_GPIO_Init+0x1e6>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a46      	ldr	r2, [pc, #280]	; (8006dd8 <HAL_GPIO_Init+0x2f4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d101      	bne.n	8006cc6 <HAL_GPIO_Init+0x1e2>
 8006cc2:	2305      	movs	r3, #5
 8006cc4:	e00a      	b.n	8006cdc <HAL_GPIO_Init+0x1f8>
 8006cc6:	2306      	movs	r3, #6
 8006cc8:	e008      	b.n	8006cdc <HAL_GPIO_Init+0x1f8>
 8006cca:	2304      	movs	r3, #4
 8006ccc:	e006      	b.n	8006cdc <HAL_GPIO_Init+0x1f8>
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e004      	b.n	8006cdc <HAL_GPIO_Init+0x1f8>
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	e002      	b.n	8006cdc <HAL_GPIO_Init+0x1f8>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <HAL_GPIO_Init+0x1f8>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	2103      	movs	r1, #3
 8006ce0:	400a      	ands	r2, r1
 8006ce2:	0092      	lsls	r2, r2, #2
 8006ce4:	4093      	lsls	r3, r2
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cec:	4935      	ldr	r1, [pc, #212]	; (8006dc4 <HAL_GPIO_Init+0x2e0>)
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	089b      	lsrs	r3, r3, #2
 8006cf2:	3302      	adds	r3, #2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006cfa:	4b38      	ldr	r3, [pc, #224]	; (8006ddc <HAL_GPIO_Init+0x2f8>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	43da      	mvns	r2, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	4013      	ands	r3, r2
 8006d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	2380      	movs	r3, #128	; 0x80
 8006d10:	035b      	lsls	r3, r3, #13
 8006d12:	4013      	ands	r3, r2
 8006d14:	d003      	beq.n	8006d1e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006d1e:	4b2f      	ldr	r3, [pc, #188]	; (8006ddc <HAL_GPIO_Init+0x2f8>)
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006d24:	4b2d      	ldr	r3, [pc, #180]	; (8006ddc <HAL_GPIO_Init+0x2f8>)
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	43da      	mvns	r2, r3
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	4013      	ands	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	2380      	movs	r3, #128	; 0x80
 8006d3a:	039b      	lsls	r3, r3, #14
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	d003      	beq.n	8006d48 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006d48:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <HAL_GPIO_Init+0x2f8>)
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8006d4e:	4b23      	ldr	r3, [pc, #140]	; (8006ddc <HAL_GPIO_Init+0x2f8>)
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	43da      	mvns	r2, r3
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	2380      	movs	r3, #128	; 0x80
 8006d64:	029b      	lsls	r3, r3, #10
 8006d66:	4013      	ands	r3, r2
 8006d68:	d003      	beq.n	8006d72 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006d72:	4b1a      	ldr	r3, [pc, #104]	; (8006ddc <HAL_GPIO_Init+0x2f8>)
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d78:	4b18      	ldr	r3, [pc, #96]	; (8006ddc <HAL_GPIO_Init+0x2f8>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	43da      	mvns	r2, r3
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	4013      	ands	r3, r2
 8006d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	2380      	movs	r3, #128	; 0x80
 8006d8e:	025b      	lsls	r3, r3, #9
 8006d90:	4013      	ands	r3, r2
 8006d92:	d003      	beq.n	8006d9c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006d9c:	4b0f      	ldr	r3, [pc, #60]	; (8006ddc <HAL_GPIO_Init+0x2f8>)
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	3301      	adds	r3, #1
 8006da6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	40da      	lsrs	r2, r3
 8006db0:	1e13      	subs	r3, r2, #0
 8006db2:	d000      	beq.n	8006db6 <HAL_GPIO_Init+0x2d2>
 8006db4:	e6a2      	b.n	8006afc <HAL_GPIO_Init+0x18>
  }
}
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	46c0      	nop			; (mov r8, r8)
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	b006      	add	sp, #24
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40021000 	.word	0x40021000
 8006dc4:	40010000 	.word	0x40010000
 8006dc8:	50000400 	.word	0x50000400
 8006dcc:	50000800 	.word	0x50000800
 8006dd0:	50000c00 	.word	0x50000c00
 8006dd4:	50001000 	.word	0x50001000
 8006dd8:	50001c00 	.word	0x50001c00
 8006ddc:	40010400 	.word	0x40010400

08006de0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	0008      	movs	r0, r1
 8006dea:	0011      	movs	r1, r2
 8006dec:	1cbb      	adds	r3, r7, #2
 8006dee:	1c02      	adds	r2, r0, #0
 8006df0:	801a      	strh	r2, [r3, #0]
 8006df2:	1c7b      	adds	r3, r7, #1
 8006df4:	1c0a      	adds	r2, r1, #0
 8006df6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006df8:	1c7b      	adds	r3, r7, #1
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d004      	beq.n	8006e0a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e00:	1cbb      	adds	r3, r7, #2
 8006e02:	881a      	ldrh	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8006e08:	e003      	b.n	8006e12 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8006e0a:	1cbb      	adds	r3, r7, #2
 8006e0c:	881a      	ldrh	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006e12:	46c0      	nop			; (mov r8, r8)
 8006e14:	46bd      	mov	sp, r7
 8006e16:	b002      	add	sp, #8
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e082      	b.n	8006f34 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2241      	movs	r2, #65	; 0x41
 8006e32:	5c9b      	ldrb	r3, [r3, r2]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d107      	bne.n	8006e4a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2240      	movs	r2, #64	; 0x40
 8006e3e:	2100      	movs	r1, #0
 8006e40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	0018      	movs	r0, r3
 8006e46:	f7ff f935 	bl	80060b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2241      	movs	r2, #65	; 0x41
 8006e4e:	2124      	movs	r1, #36	; 0x24
 8006e50:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	438a      	bics	r2, r1
 8006e60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4934      	ldr	r1, [pc, #208]	; (8006f3c <HAL_I2C_Init+0x120>)
 8006e6c:	400a      	ands	r2, r1
 8006e6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4931      	ldr	r1, [pc, #196]	; (8006f40 <HAL_I2C_Init+0x124>)
 8006e7c:	400a      	ands	r2, r1
 8006e7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d108      	bne.n	8006e9a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	0209      	lsls	r1, r1, #8
 8006e94:	430a      	orrs	r2, r1
 8006e96:	609a      	str	r2, [r3, #8]
 8006e98:	e007      	b.n	8006eaa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689a      	ldr	r2, [r3, #8]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2184      	movs	r1, #132	; 0x84
 8006ea4:	0209      	lsls	r1, r1, #8
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d104      	bne.n	8006ebc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2280      	movs	r2, #128	; 0x80
 8006eb8:	0112      	lsls	r2, r2, #4
 8006eba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	491f      	ldr	r1, [pc, #124]	; (8006f44 <HAL_I2C_Init+0x128>)
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68da      	ldr	r2, [r3, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	491a      	ldr	r1, [pc, #104]	; (8006f40 <HAL_I2C_Init+0x124>)
 8006ed8:	400a      	ands	r2, r1
 8006eda:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69d9      	ldr	r1, [r3, #28]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1a      	ldr	r2, [r3, #32]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2101      	movs	r1, #1
 8006f12:	430a      	orrs	r2, r1
 8006f14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2241      	movs	r2, #65	; 0x41
 8006f20:	2120      	movs	r1, #32
 8006f22:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2242      	movs	r2, #66	; 0x42
 8006f2e:	2100      	movs	r1, #0
 8006f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	0018      	movs	r0, r3
 8006f36:	46bd      	mov	sp, r7
 8006f38:	b002      	add	sp, #8
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	f0ffffff 	.word	0xf0ffffff
 8006f40:	ffff7fff 	.word	0xffff7fff
 8006f44:	02008000 	.word	0x02008000

08006f48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006f48:	b590      	push	{r4, r7, lr}
 8006f4a:	b089      	sub	sp, #36	; 0x24
 8006f4c:	af02      	add	r7, sp, #8
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	0008      	movs	r0, r1
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	0019      	movs	r1, r3
 8006f56:	230a      	movs	r3, #10
 8006f58:	18fb      	adds	r3, r7, r3
 8006f5a:	1c02      	adds	r2, r0, #0
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	2308      	movs	r3, #8
 8006f60:	18fb      	adds	r3, r7, r3
 8006f62:	1c0a      	adds	r2, r1, #0
 8006f64:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2241      	movs	r2, #65	; 0x41
 8006f6a:	5c9b      	ldrb	r3, [r3, r2]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	d000      	beq.n	8006f74 <HAL_I2C_Master_Transmit+0x2c>
 8006f72:	e0e7      	b.n	8007144 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2240      	movs	r2, #64	; 0x40
 8006f78:	5c9b      	ldrb	r3, [r3, r2]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_I2C_Master_Transmit+0x3a>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e0e1      	b.n	8007146 <HAL_I2C_Master_Transmit+0x1fe>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2240      	movs	r2, #64	; 0x40
 8006f86:	2101      	movs	r1, #1
 8006f88:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006f8a:	f7ff fc17 	bl	80067bc <HAL_GetTick>
 8006f8e:	0003      	movs	r3, r0
 8006f90:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f92:	2380      	movs	r3, #128	; 0x80
 8006f94:	0219      	lsls	r1, r3, #8
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	2319      	movs	r3, #25
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f000 fa04 	bl	80073ac <I2C_WaitOnFlagUntilTimeout>
 8006fa4:	1e03      	subs	r3, r0, #0
 8006fa6:	d001      	beq.n	8006fac <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e0cc      	b.n	8007146 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2241      	movs	r2, #65	; 0x41
 8006fb0:	2121      	movs	r1, #33	; 0x21
 8006fb2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2242      	movs	r2, #66	; 0x42
 8006fb8:	2110      	movs	r1, #16
 8006fba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2208      	movs	r2, #8
 8006fcc:	18ba      	adds	r2, r7, r2
 8006fce:	8812      	ldrh	r2, [r2, #0]
 8006fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	2bff      	cmp	r3, #255	; 0xff
 8006fe0:	d911      	bls.n	8007006 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	22ff      	movs	r2, #255	; 0xff
 8006fe6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	2380      	movs	r3, #128	; 0x80
 8006ff0:	045c      	lsls	r4, r3, #17
 8006ff2:	230a      	movs	r3, #10
 8006ff4:	18fb      	adds	r3, r7, r3
 8006ff6:	8819      	ldrh	r1, [r3, #0]
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	4b55      	ldr	r3, [pc, #340]	; (8007150 <HAL_I2C_Master_Transmit+0x208>)
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	0023      	movs	r3, r4
 8007000:	f000 fc2e 	bl	8007860 <I2C_TransferConfig>
 8007004:	e075      	b.n	80070f2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800700a:	b29a      	uxth	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007014:	b2da      	uxtb	r2, r3
 8007016:	2380      	movs	r3, #128	; 0x80
 8007018:	049c      	lsls	r4, r3, #18
 800701a:	230a      	movs	r3, #10
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	8819      	ldrh	r1, [r3, #0]
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	4b4b      	ldr	r3, [pc, #300]	; (8007150 <HAL_I2C_Master_Transmit+0x208>)
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	0023      	movs	r3, r4
 8007028:	f000 fc1a 	bl	8007860 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800702c:	e061      	b.n	80070f2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	0018      	movs	r0, r3
 8007036:	f000 fa07 	bl	8007448 <I2C_WaitOnTXISFlagUntilTimeout>
 800703a:	1e03      	subs	r3, r0, #0
 800703c:	d001      	beq.n	8007042 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e081      	b.n	8007146 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	781a      	ldrb	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706a:	3b01      	subs	r3, #1
 800706c:	b29a      	uxth	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007076:	b29b      	uxth	r3, r3
 8007078:	2b00      	cmp	r3, #0
 800707a:	d03a      	beq.n	80070f2 <HAL_I2C_Master_Transmit+0x1aa>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007080:	2b00      	cmp	r3, #0
 8007082:	d136      	bne.n	80070f2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	0013      	movs	r3, r2
 800708e:	2200      	movs	r2, #0
 8007090:	2180      	movs	r1, #128	; 0x80
 8007092:	f000 f98b 	bl	80073ac <I2C_WaitOnFlagUntilTimeout>
 8007096:	1e03      	subs	r3, r0, #0
 8007098:	d001      	beq.n	800709e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e053      	b.n	8007146 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2bff      	cmp	r3, #255	; 0xff
 80070a6:	d911      	bls.n	80070cc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	22ff      	movs	r2, #255	; 0xff
 80070ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	2380      	movs	r3, #128	; 0x80
 80070b6:	045c      	lsls	r4, r3, #17
 80070b8:	230a      	movs	r3, #10
 80070ba:	18fb      	adds	r3, r7, r3
 80070bc:	8819      	ldrh	r1, [r3, #0]
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	2300      	movs	r3, #0
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	0023      	movs	r3, r4
 80070c6:	f000 fbcb 	bl	8007860 <I2C_TransferConfig>
 80070ca:	e012      	b.n	80070f2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	2380      	movs	r3, #128	; 0x80
 80070de:	049c      	lsls	r4, r3, #18
 80070e0:	230a      	movs	r3, #10
 80070e2:	18fb      	adds	r3, r7, r3
 80070e4:	8819      	ldrh	r1, [r3, #0]
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	2300      	movs	r3, #0
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	0023      	movs	r3, r4
 80070ee:	f000 fbb7 	bl	8007860 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d198      	bne.n	800702e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	0018      	movs	r0, r3
 8007104:	f000 f9e6 	bl	80074d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007108:	1e03      	subs	r3, r0, #0
 800710a:	d001      	beq.n	8007110 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e01a      	b.n	8007146 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2220      	movs	r2, #32
 8007116:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	490c      	ldr	r1, [pc, #48]	; (8007154 <HAL_I2C_Master_Transmit+0x20c>)
 8007124:	400a      	ands	r2, r1
 8007126:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2241      	movs	r2, #65	; 0x41
 800712c:	2120      	movs	r1, #32
 800712e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2242      	movs	r2, #66	; 0x42
 8007134:	2100      	movs	r1, #0
 8007136:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2240      	movs	r2, #64	; 0x40
 800713c:	2100      	movs	r1, #0
 800713e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	e000      	b.n	8007146 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8007144:	2302      	movs	r3, #2
  }
}
 8007146:	0018      	movs	r0, r3
 8007148:	46bd      	mov	sp, r7
 800714a:	b007      	add	sp, #28
 800714c:	bd90      	pop	{r4, r7, pc}
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	80002000 	.word	0x80002000
 8007154:	fe00e800 	.word	0xfe00e800

08007158 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007158:	b590      	push	{r4, r7, lr}
 800715a:	b089      	sub	sp, #36	; 0x24
 800715c:	af02      	add	r7, sp, #8
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	0008      	movs	r0, r1
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	0019      	movs	r1, r3
 8007166:	230a      	movs	r3, #10
 8007168:	18fb      	adds	r3, r7, r3
 800716a:	1c02      	adds	r2, r0, #0
 800716c:	801a      	strh	r2, [r3, #0]
 800716e:	2308      	movs	r3, #8
 8007170:	18fb      	adds	r3, r7, r3
 8007172:	1c0a      	adds	r2, r1, #0
 8007174:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2241      	movs	r2, #65	; 0x41
 800717a:	5c9b      	ldrb	r3, [r3, r2]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b20      	cmp	r3, #32
 8007180:	d000      	beq.n	8007184 <HAL_I2C_Master_Receive+0x2c>
 8007182:	e0e8      	b.n	8007356 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2240      	movs	r2, #64	; 0x40
 8007188:	5c9b      	ldrb	r3, [r3, r2]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d101      	bne.n	8007192 <HAL_I2C_Master_Receive+0x3a>
 800718e:	2302      	movs	r3, #2
 8007190:	e0e2      	b.n	8007358 <HAL_I2C_Master_Receive+0x200>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2240      	movs	r2, #64	; 0x40
 8007196:	2101      	movs	r1, #1
 8007198:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800719a:	f7ff fb0f 	bl	80067bc <HAL_GetTick>
 800719e:	0003      	movs	r3, r0
 80071a0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071a2:	2380      	movs	r3, #128	; 0x80
 80071a4:	0219      	lsls	r1, r3, #8
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	2319      	movs	r3, #25
 80071ae:	2201      	movs	r2, #1
 80071b0:	f000 f8fc 	bl	80073ac <I2C_WaitOnFlagUntilTimeout>
 80071b4:	1e03      	subs	r3, r0, #0
 80071b6:	d001      	beq.n	80071bc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e0cd      	b.n	8007358 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2241      	movs	r2, #65	; 0x41
 80071c0:	2122      	movs	r1, #34	; 0x22
 80071c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2242      	movs	r2, #66	; 0x42
 80071c8:	2110      	movs	r1, #16
 80071ca:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2208      	movs	r2, #8
 80071dc:	18ba      	adds	r2, r7, r2
 80071de:	8812      	ldrh	r2, [r2, #0]
 80071e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2bff      	cmp	r3, #255	; 0xff
 80071f0:	d911      	bls.n	8007216 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	22ff      	movs	r2, #255	; 0xff
 80071f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	2380      	movs	r3, #128	; 0x80
 8007200:	045c      	lsls	r4, r3, #17
 8007202:	230a      	movs	r3, #10
 8007204:	18fb      	adds	r3, r7, r3
 8007206:	8819      	ldrh	r1, [r3, #0]
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	4b55      	ldr	r3, [pc, #340]	; (8007360 <HAL_I2C_Master_Receive+0x208>)
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	0023      	movs	r3, r4
 8007210:	f000 fb26 	bl	8007860 <I2C_TransferConfig>
 8007214:	e076      	b.n	8007304 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007224:	b2da      	uxtb	r2, r3
 8007226:	2380      	movs	r3, #128	; 0x80
 8007228:	049c      	lsls	r4, r3, #18
 800722a:	230a      	movs	r3, #10
 800722c:	18fb      	adds	r3, r7, r3
 800722e:	8819      	ldrh	r1, [r3, #0]
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	4b4b      	ldr	r3, [pc, #300]	; (8007360 <HAL_I2C_Master_Receive+0x208>)
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	0023      	movs	r3, r4
 8007238:	f000 fb12 	bl	8007860 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800723c:	e062      	b.n	8007304 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	0018      	movs	r0, r3
 8007246:	f000 f989 	bl	800755c <I2C_WaitOnRXNEFlagUntilTimeout>
 800724a:	1e03      	subs	r3, r0, #0
 800724c:	d001      	beq.n	8007252 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e082      	b.n	8007358 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	b2d2      	uxtb	r2, r2
 800725e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800726e:	3b01      	subs	r3, #1
 8007270:	b29a      	uxth	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727a:	b29b      	uxth	r3, r3
 800727c:	3b01      	subs	r3, #1
 800727e:	b29a      	uxth	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007288:	b29b      	uxth	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d03a      	beq.n	8007304 <HAL_I2C_Master_Receive+0x1ac>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007292:	2b00      	cmp	r3, #0
 8007294:	d136      	bne.n	8007304 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	0013      	movs	r3, r2
 80072a0:	2200      	movs	r2, #0
 80072a2:	2180      	movs	r1, #128	; 0x80
 80072a4:	f000 f882 	bl	80073ac <I2C_WaitOnFlagUntilTimeout>
 80072a8:	1e03      	subs	r3, r0, #0
 80072aa:	d001      	beq.n	80072b0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e053      	b.n	8007358 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2bff      	cmp	r3, #255	; 0xff
 80072b8:	d911      	bls.n	80072de <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	22ff      	movs	r2, #255	; 0xff
 80072be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	2380      	movs	r3, #128	; 0x80
 80072c8:	045c      	lsls	r4, r3, #17
 80072ca:	230a      	movs	r3, #10
 80072cc:	18fb      	adds	r3, r7, r3
 80072ce:	8819      	ldrh	r1, [r3, #0]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	2300      	movs	r3, #0
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	0023      	movs	r3, r4
 80072d8:	f000 fac2 	bl	8007860 <I2C_TransferConfig>
 80072dc:	e012      	b.n	8007304 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	2380      	movs	r3, #128	; 0x80
 80072f0:	049c      	lsls	r4, r3, #18
 80072f2:	230a      	movs	r3, #10
 80072f4:	18fb      	adds	r3, r7, r3
 80072f6:	8819      	ldrh	r1, [r3, #0]
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	2300      	movs	r3, #0
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	0023      	movs	r3, r4
 8007300:	f000 faae 	bl	8007860 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007308:	b29b      	uxth	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d197      	bne.n	800723e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	0018      	movs	r0, r3
 8007316:	f000 f8dd 	bl	80074d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800731a:	1e03      	subs	r3, r0, #0
 800731c:	d001      	beq.n	8007322 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e01a      	b.n	8007358 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2220      	movs	r2, #32
 8007328:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	490b      	ldr	r1, [pc, #44]	; (8007364 <HAL_I2C_Master_Receive+0x20c>)
 8007336:	400a      	ands	r2, r1
 8007338:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2241      	movs	r2, #65	; 0x41
 800733e:	2120      	movs	r1, #32
 8007340:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2242      	movs	r2, #66	; 0x42
 8007346:	2100      	movs	r1, #0
 8007348:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2240      	movs	r2, #64	; 0x40
 800734e:	2100      	movs	r1, #0
 8007350:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	e000      	b.n	8007358 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8007356:	2302      	movs	r3, #2
  }
}
 8007358:	0018      	movs	r0, r3
 800735a:	46bd      	mov	sp, r7
 800735c:	b007      	add	sp, #28
 800735e:	bd90      	pop	{r4, r7, pc}
 8007360:	80002400 	.word	0x80002400
 8007364:	fe00e800 	.word	0xfe00e800

08007368 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	2202      	movs	r2, #2
 8007378:	4013      	ands	r3, r2
 800737a:	2b02      	cmp	r3, #2
 800737c:	d103      	bne.n	8007386 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2200      	movs	r2, #0
 8007384:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	2201      	movs	r2, #1
 800738e:	4013      	ands	r3, r2
 8007390:	2b01      	cmp	r3, #1
 8007392:	d007      	beq.n	80073a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2101      	movs	r1, #1
 80073a0:	430a      	orrs	r2, r1
 80073a2:	619a      	str	r2, [r3, #24]
  }
}
 80073a4:	46c0      	nop			; (mov r8, r8)
 80073a6:	46bd      	mov	sp, r7
 80073a8:	b002      	add	sp, #8
 80073aa:	bd80      	pop	{r7, pc}

080073ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	1dfb      	adds	r3, r7, #7
 80073ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073bc:	e030      	b.n	8007420 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	3301      	adds	r3, #1
 80073c2:	d02d      	beq.n	8007420 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c4:	f7ff f9fa 	bl	80067bc <HAL_GetTick>
 80073c8:	0002      	movs	r2, r0
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d302      	bcc.n	80073da <I2C_WaitOnFlagUntilTimeout+0x2e>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d122      	bne.n	8007420 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	4013      	ands	r3, r2
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	425a      	negs	r2, r3
 80073ea:	4153      	adcs	r3, r2
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	001a      	movs	r2, r3
 80073f0:	1dfb      	adds	r3, r7, #7
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d113      	bne.n	8007420 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fc:	2220      	movs	r2, #32
 80073fe:	431a      	orrs	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2241      	movs	r2, #65	; 0x41
 8007408:	2120      	movs	r1, #32
 800740a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2242      	movs	r2, #66	; 0x42
 8007410:	2100      	movs	r1, #0
 8007412:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2240      	movs	r2, #64	; 0x40
 8007418:	2100      	movs	r1, #0
 800741a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e00f      	b.n	8007440 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	4013      	ands	r3, r2
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	425a      	negs	r2, r3
 8007430:	4153      	adcs	r3, r2
 8007432:	b2db      	uxtb	r3, r3
 8007434:	001a      	movs	r2, r3
 8007436:	1dfb      	adds	r3, r7, #7
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d0bf      	beq.n	80073be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	0018      	movs	r0, r3
 8007442:	46bd      	mov	sp, r7
 8007444:	b004      	add	sp, #16
 8007446:	bd80      	pop	{r7, pc}

08007448 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007454:	e032      	b.n	80074bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	0018      	movs	r0, r3
 800745e:	f000 f8ff 	bl	8007660 <I2C_IsErrorOccurred>
 8007462:	1e03      	subs	r3, r0, #0
 8007464:	d001      	beq.n	800746a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e030      	b.n	80074cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	3301      	adds	r3, #1
 800746e:	d025      	beq.n	80074bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007470:	f7ff f9a4 	bl	80067bc <HAL_GetTick>
 8007474:	0002      	movs	r2, r0
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	429a      	cmp	r2, r3
 800747e:	d302      	bcc.n	8007486 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d11a      	bne.n	80074bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	2202      	movs	r2, #2
 800748e:	4013      	ands	r3, r2
 8007490:	2b02      	cmp	r3, #2
 8007492:	d013      	beq.n	80074bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007498:	2220      	movs	r2, #32
 800749a:	431a      	orrs	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2241      	movs	r2, #65	; 0x41
 80074a4:	2120      	movs	r1, #32
 80074a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2242      	movs	r2, #66	; 0x42
 80074ac:	2100      	movs	r1, #0
 80074ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2240      	movs	r2, #64	; 0x40
 80074b4:	2100      	movs	r1, #0
 80074b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e007      	b.n	80074cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	2202      	movs	r2, #2
 80074c4:	4013      	ands	r3, r2
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d1c5      	bne.n	8007456 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	0018      	movs	r0, r3
 80074ce:	46bd      	mov	sp, r7
 80074d0:	b004      	add	sp, #16
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074e0:	e02f      	b.n	8007542 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	68b9      	ldr	r1, [r7, #8]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	0018      	movs	r0, r3
 80074ea:	f000 f8b9 	bl	8007660 <I2C_IsErrorOccurred>
 80074ee:	1e03      	subs	r3, r0, #0
 80074f0:	d001      	beq.n	80074f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e02d      	b.n	8007552 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074f6:	f7ff f961 	bl	80067bc <HAL_GetTick>
 80074fa:	0002      	movs	r2, r0
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	429a      	cmp	r2, r3
 8007504:	d302      	bcc.n	800750c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d11a      	bne.n	8007542 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	2220      	movs	r2, #32
 8007514:	4013      	ands	r3, r2
 8007516:	2b20      	cmp	r3, #32
 8007518:	d013      	beq.n	8007542 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751e:	2220      	movs	r2, #32
 8007520:	431a      	orrs	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2241      	movs	r2, #65	; 0x41
 800752a:	2120      	movs	r1, #32
 800752c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2242      	movs	r2, #66	; 0x42
 8007532:	2100      	movs	r1, #0
 8007534:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2240      	movs	r2, #64	; 0x40
 800753a:	2100      	movs	r1, #0
 800753c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e007      	b.n	8007552 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	2220      	movs	r2, #32
 800754a:	4013      	ands	r3, r2
 800754c:	2b20      	cmp	r3, #32
 800754e:	d1c8      	bne.n	80074e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	0018      	movs	r0, r3
 8007554:	46bd      	mov	sp, r7
 8007556:	b004      	add	sp, #16
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007568:	e06b      	b.n	8007642 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	68b9      	ldr	r1, [r7, #8]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	0018      	movs	r0, r3
 8007572:	f000 f875 	bl	8007660 <I2C_IsErrorOccurred>
 8007576:	1e03      	subs	r3, r0, #0
 8007578:	d001      	beq.n	800757e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e069      	b.n	8007652 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	2220      	movs	r2, #32
 8007586:	4013      	ands	r3, r2
 8007588:	2b20      	cmp	r3, #32
 800758a:	d138      	bne.n	80075fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	2204      	movs	r2, #4
 8007594:	4013      	ands	r3, r2
 8007596:	2b04      	cmp	r3, #4
 8007598:	d105      	bne.n	80075a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	e055      	b.n	8007652 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	2210      	movs	r2, #16
 80075ae:	4013      	ands	r3, r2
 80075b0:	2b10      	cmp	r3, #16
 80075b2:	d107      	bne.n	80075c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2210      	movs	r2, #16
 80075ba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2204      	movs	r2, #4
 80075c0:	645a      	str	r2, [r3, #68]	; 0x44
 80075c2:	e002      	b.n	80075ca <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2220      	movs	r2, #32
 80075d0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	491f      	ldr	r1, [pc, #124]	; (800765c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80075de:	400a      	ands	r2, r1
 80075e0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2241      	movs	r2, #65	; 0x41
 80075e6:	2120      	movs	r1, #32
 80075e8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2242      	movs	r2, #66	; 0x42
 80075ee:	2100      	movs	r1, #0
 80075f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2240      	movs	r2, #64	; 0x40
 80075f6:	2100      	movs	r1, #0
 80075f8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e029      	b.n	8007652 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fe:	f7ff f8dd 	bl	80067bc <HAL_GetTick>
 8007602:	0002      	movs	r2, r0
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	429a      	cmp	r2, r3
 800760c:	d302      	bcc.n	8007614 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d116      	bne.n	8007642 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	2204      	movs	r2, #4
 800761c:	4013      	ands	r3, r2
 800761e:	2b04      	cmp	r3, #4
 8007620:	d00f      	beq.n	8007642 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	2220      	movs	r2, #32
 8007628:	431a      	orrs	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2241      	movs	r2, #65	; 0x41
 8007632:	2120      	movs	r1, #32
 8007634:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2240      	movs	r2, #64	; 0x40
 800763a:	2100      	movs	r1, #0
 800763c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e007      	b.n	8007652 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	2204      	movs	r2, #4
 800764a:	4013      	ands	r3, r2
 800764c:	2b04      	cmp	r3, #4
 800764e:	d18c      	bne.n	800756a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	0018      	movs	r0, r3
 8007654:	46bd      	mov	sp, r7
 8007656:	b004      	add	sp, #16
 8007658:	bd80      	pop	{r7, pc}
 800765a:	46c0      	nop			; (mov r8, r8)
 800765c:	fe00e800 	.word	0xfe00e800

08007660 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007660:	b590      	push	{r4, r7, lr}
 8007662:	b08b      	sub	sp, #44	; 0x2c
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800766c:	2327      	movs	r3, #39	; 0x27
 800766e:	18fb      	adds	r3, r7, r3
 8007670:	2200      	movs	r2, #0
 8007672:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800767c:	2300      	movs	r3, #0
 800767e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	2210      	movs	r2, #16
 8007688:	4013      	ands	r3, r2
 800768a:	d100      	bne.n	800768e <I2C_IsErrorOccurred+0x2e>
 800768c:	e082      	b.n	8007794 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2210      	movs	r2, #16
 8007694:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007696:	e060      	b.n	800775a <I2C_IsErrorOccurred+0xfa>
 8007698:	2427      	movs	r4, #39	; 0x27
 800769a:	193b      	adds	r3, r7, r4
 800769c:	193a      	adds	r2, r7, r4
 800769e:	7812      	ldrb	r2, [r2, #0]
 80076a0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	3301      	adds	r3, #1
 80076a6:	d058      	beq.n	800775a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80076a8:	f7ff f888 	bl	80067bc <HAL_GetTick>
 80076ac:	0002      	movs	r2, r0
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d306      	bcc.n	80076c6 <I2C_IsErrorOccurred+0x66>
 80076b8:	193b      	adds	r3, r7, r4
 80076ba:	193a      	adds	r2, r7, r4
 80076bc:	7812      	ldrb	r2, [r2, #0]
 80076be:	701a      	strb	r2, [r3, #0]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d149      	bne.n	800775a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	2380      	movs	r3, #128	; 0x80
 80076ce:	01db      	lsls	r3, r3, #7
 80076d0:	4013      	ands	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80076d4:	2013      	movs	r0, #19
 80076d6:	183b      	adds	r3, r7, r0
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	2142      	movs	r1, #66	; 0x42
 80076dc:	5c52      	ldrb	r2, [r2, r1]
 80076de:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699a      	ldr	r2, [r3, #24]
 80076e6:	2380      	movs	r3, #128	; 0x80
 80076e8:	021b      	lsls	r3, r3, #8
 80076ea:	401a      	ands	r2, r3
 80076ec:	2380      	movs	r3, #128	; 0x80
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d126      	bne.n	8007742 <I2C_IsErrorOccurred+0xe2>
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	2380      	movs	r3, #128	; 0x80
 80076f8:	01db      	lsls	r3, r3, #7
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d021      	beq.n	8007742 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80076fe:	183b      	adds	r3, r7, r0
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b20      	cmp	r3, #32
 8007704:	d01d      	beq.n	8007742 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2180      	movs	r1, #128	; 0x80
 8007712:	01c9      	lsls	r1, r1, #7
 8007714:	430a      	orrs	r2, r1
 8007716:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007718:	f7ff f850 	bl	80067bc <HAL_GetTick>
 800771c:	0003      	movs	r3, r0
 800771e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007720:	e00f      	b.n	8007742 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007722:	f7ff f84b 	bl	80067bc <HAL_GetTick>
 8007726:	0002      	movs	r2, r0
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	2b19      	cmp	r3, #25
 800772e:	d908      	bls.n	8007742 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	2220      	movs	r2, #32
 8007734:	4313      	orrs	r3, r2
 8007736:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007738:	2327      	movs	r3, #39	; 0x27
 800773a:	18fb      	adds	r3, r7, r3
 800773c:	2201      	movs	r2, #1
 800773e:	701a      	strb	r2, [r3, #0]

              break;
 8007740:	e00b      	b.n	800775a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	2220      	movs	r2, #32
 800774a:	4013      	ands	r3, r2
 800774c:	2127      	movs	r1, #39	; 0x27
 800774e:	187a      	adds	r2, r7, r1
 8007750:	1879      	adds	r1, r7, r1
 8007752:	7809      	ldrb	r1, [r1, #0]
 8007754:	7011      	strb	r1, [r2, #0]
 8007756:	2b20      	cmp	r3, #32
 8007758:	d1e3      	bne.n	8007722 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	2220      	movs	r2, #32
 8007762:	4013      	ands	r3, r2
 8007764:	2b20      	cmp	r3, #32
 8007766:	d004      	beq.n	8007772 <I2C_IsErrorOccurred+0x112>
 8007768:	2327      	movs	r3, #39	; 0x27
 800776a:	18fb      	adds	r3, r7, r3
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d092      	beq.n	8007698 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007772:	2327      	movs	r3, #39	; 0x27
 8007774:	18fb      	adds	r3, r7, r3
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d103      	bne.n	8007784 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2220      	movs	r2, #32
 8007782:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	2204      	movs	r2, #4
 8007788:	4313      	orrs	r3, r2
 800778a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800778c:	2327      	movs	r3, #39	; 0x27
 800778e:	18fb      	adds	r3, r7, r3
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800779c:	69ba      	ldr	r2, [r7, #24]
 800779e:	2380      	movs	r3, #128	; 0x80
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	4013      	ands	r3, r2
 80077a4:	d00c      	beq.n	80077c0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	2201      	movs	r2, #1
 80077aa:	4313      	orrs	r3, r2
 80077ac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2280      	movs	r2, #128	; 0x80
 80077b4:	0052      	lsls	r2, r2, #1
 80077b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077b8:	2327      	movs	r3, #39	; 0x27
 80077ba:	18fb      	adds	r3, r7, r3
 80077bc:	2201      	movs	r2, #1
 80077be:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	2380      	movs	r3, #128	; 0x80
 80077c4:	00db      	lsls	r3, r3, #3
 80077c6:	4013      	ands	r3, r2
 80077c8:	d00c      	beq.n	80077e4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	2208      	movs	r2, #8
 80077ce:	4313      	orrs	r3, r2
 80077d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2280      	movs	r2, #128	; 0x80
 80077d8:	00d2      	lsls	r2, r2, #3
 80077da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077dc:	2327      	movs	r3, #39	; 0x27
 80077de:	18fb      	adds	r3, r7, r3
 80077e0:	2201      	movs	r2, #1
 80077e2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	2380      	movs	r3, #128	; 0x80
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4013      	ands	r3, r2
 80077ec:	d00c      	beq.n	8007808 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	2202      	movs	r2, #2
 80077f2:	4313      	orrs	r3, r2
 80077f4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2280      	movs	r2, #128	; 0x80
 80077fc:	0092      	lsls	r2, r2, #2
 80077fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007800:	2327      	movs	r3, #39	; 0x27
 8007802:	18fb      	adds	r3, r7, r3
 8007804:	2201      	movs	r2, #1
 8007806:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007808:	2327      	movs	r3, #39	; 0x27
 800780a:	18fb      	adds	r3, r7, r3
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d01d      	beq.n	800784e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	0018      	movs	r0, r3
 8007816:	f7ff fda7 	bl	8007368 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	490d      	ldr	r1, [pc, #52]	; (800785c <I2C_IsErrorOccurred+0x1fc>)
 8007826:	400a      	ands	r2, r1
 8007828:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	431a      	orrs	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2241      	movs	r2, #65	; 0x41
 800783a:	2120      	movs	r1, #32
 800783c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2242      	movs	r2, #66	; 0x42
 8007842:	2100      	movs	r1, #0
 8007844:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2240      	movs	r2, #64	; 0x40
 800784a:	2100      	movs	r1, #0
 800784c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800784e:	2327      	movs	r3, #39	; 0x27
 8007850:	18fb      	adds	r3, r7, r3
 8007852:	781b      	ldrb	r3, [r3, #0]
}
 8007854:	0018      	movs	r0, r3
 8007856:	46bd      	mov	sp, r7
 8007858:	b00b      	add	sp, #44	; 0x2c
 800785a:	bd90      	pop	{r4, r7, pc}
 800785c:	fe00e800 	.word	0xfe00e800

08007860 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007860:	b590      	push	{r4, r7, lr}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	0008      	movs	r0, r1
 800786a:	0011      	movs	r1, r2
 800786c:	607b      	str	r3, [r7, #4]
 800786e:	240a      	movs	r4, #10
 8007870:	193b      	adds	r3, r7, r4
 8007872:	1c02      	adds	r2, r0, #0
 8007874:	801a      	strh	r2, [r3, #0]
 8007876:	2009      	movs	r0, #9
 8007878:	183b      	adds	r3, r7, r0
 800787a:	1c0a      	adds	r2, r1, #0
 800787c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800787e:	193b      	adds	r3, r7, r4
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	059b      	lsls	r3, r3, #22
 8007884:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007886:	183b      	adds	r3, r7, r0
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	0419      	lsls	r1, r3, #16
 800788c:	23ff      	movs	r3, #255	; 0xff
 800788e:	041b      	lsls	r3, r3, #16
 8007890:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007892:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	4313      	orrs	r3, r2
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	085b      	lsrs	r3, r3, #1
 80078a0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078aa:	0d51      	lsrs	r1, r2, #21
 80078ac:	2280      	movs	r2, #128	; 0x80
 80078ae:	00d2      	lsls	r2, r2, #3
 80078b0:	400a      	ands	r2, r1
 80078b2:	4907      	ldr	r1, [pc, #28]	; (80078d0 <I2C_TransferConfig+0x70>)
 80078b4:	430a      	orrs	r2, r1
 80078b6:	43d2      	mvns	r2, r2
 80078b8:	401a      	ands	r2, r3
 80078ba:	0011      	movs	r1, r2
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80078c6:	46c0      	nop			; (mov r8, r8)
 80078c8:	46bd      	mov	sp, r7
 80078ca:	b007      	add	sp, #28
 80078cc:	bd90      	pop	{r4, r7, pc}
 80078ce:	46c0      	nop			; (mov r8, r8)
 80078d0:	03ff63ff 	.word	0x03ff63ff

080078d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2241      	movs	r2, #65	; 0x41
 80078e2:	5c9b      	ldrb	r3, [r3, r2]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b20      	cmp	r3, #32
 80078e8:	d138      	bne.n	800795c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2240      	movs	r2, #64	; 0x40
 80078ee:	5c9b      	ldrb	r3, [r3, r2]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e032      	b.n	800795e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2240      	movs	r2, #64	; 0x40
 80078fc:	2101      	movs	r1, #1
 80078fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2241      	movs	r2, #65	; 0x41
 8007904:	2124      	movs	r1, #36	; 0x24
 8007906:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2101      	movs	r1, #1
 8007914:	438a      	bics	r2, r1
 8007916:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4911      	ldr	r1, [pc, #68]	; (8007968 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007924:	400a      	ands	r2, r1
 8007926:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6819      	ldr	r1, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2101      	movs	r1, #1
 8007944:	430a      	orrs	r2, r1
 8007946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2241      	movs	r2, #65	; 0x41
 800794c:	2120      	movs	r1, #32
 800794e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2240      	movs	r2, #64	; 0x40
 8007954:	2100      	movs	r1, #0
 8007956:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	e000      	b.n	800795e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800795c:	2302      	movs	r3, #2
  }
}
 800795e:	0018      	movs	r0, r3
 8007960:	46bd      	mov	sp, r7
 8007962:	b002      	add	sp, #8
 8007964:	bd80      	pop	{r7, pc}
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	ffffefff 	.word	0xffffefff

0800796c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2241      	movs	r2, #65	; 0x41
 800797a:	5c9b      	ldrb	r3, [r3, r2]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b20      	cmp	r3, #32
 8007980:	d139      	bne.n	80079f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2240      	movs	r2, #64	; 0x40
 8007986:	5c9b      	ldrb	r3, [r3, r2]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d101      	bne.n	8007990 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800798c:	2302      	movs	r3, #2
 800798e:	e033      	b.n	80079f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2240      	movs	r2, #64	; 0x40
 8007994:	2101      	movs	r1, #1
 8007996:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2241      	movs	r2, #65	; 0x41
 800799c:	2124      	movs	r1, #36	; 0x24
 800799e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2101      	movs	r1, #1
 80079ac:	438a      	bics	r2, r1
 80079ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4a11      	ldr	r2, [pc, #68]	; (8007a00 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80079bc:	4013      	ands	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	021b      	lsls	r3, r3, #8
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2101      	movs	r1, #1
 80079de:	430a      	orrs	r2, r1
 80079e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2241      	movs	r2, #65	; 0x41
 80079e6:	2120      	movs	r1, #32
 80079e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2240      	movs	r2, #64	; 0x40
 80079ee:	2100      	movs	r1, #0
 80079f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	e000      	b.n	80079f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80079f6:	2302      	movs	r3, #2
  }
}
 80079f8:	0018      	movs	r0, r3
 80079fa:	46bd      	mov	sp, r7
 80079fc:	b004      	add	sp, #16
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	fffff0ff 	.word	0xfffff0ff

08007a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a04:	b5b0      	push	{r4, r5, r7, lr}
 8007a06:	b08a      	sub	sp, #40	; 0x28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d102      	bne.n	8007a18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	f000 fbbf 	bl	8008196 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a18:	4bc9      	ldr	r3, [pc, #804]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	220c      	movs	r2, #12
 8007a1e:	4013      	ands	r3, r2
 8007a20:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a22:	4bc7      	ldr	r3, [pc, #796]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	2380      	movs	r3, #128	; 0x80
 8007a28:	025b      	lsls	r3, r3, #9
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2201      	movs	r2, #1
 8007a34:	4013      	ands	r3, r2
 8007a36:	d100      	bne.n	8007a3a <HAL_RCC_OscConfig+0x36>
 8007a38:	e07e      	b.n	8007b38 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d007      	beq.n	8007a50 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	2b0c      	cmp	r3, #12
 8007a44:	d112      	bne.n	8007a6c <HAL_RCC_OscConfig+0x68>
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	2380      	movs	r3, #128	; 0x80
 8007a4a:	025b      	lsls	r3, r3, #9
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d10d      	bne.n	8007a6c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a50:	4bbb      	ldr	r3, [pc, #748]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	2380      	movs	r3, #128	; 0x80
 8007a56:	029b      	lsls	r3, r3, #10
 8007a58:	4013      	ands	r3, r2
 8007a5a:	d100      	bne.n	8007a5e <HAL_RCC_OscConfig+0x5a>
 8007a5c:	e06b      	b.n	8007b36 <HAL_RCC_OscConfig+0x132>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d167      	bne.n	8007b36 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	f000 fb95 	bl	8008196 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	2380      	movs	r3, #128	; 0x80
 8007a72:	025b      	lsls	r3, r3, #9
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d107      	bne.n	8007a88 <HAL_RCC_OscConfig+0x84>
 8007a78:	4bb1      	ldr	r3, [pc, #708]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	4bb0      	ldr	r3, [pc, #704]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007a7e:	2180      	movs	r1, #128	; 0x80
 8007a80:	0249      	lsls	r1, r1, #9
 8007a82:	430a      	orrs	r2, r1
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	e027      	b.n	8007ad8 <HAL_RCC_OscConfig+0xd4>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	23a0      	movs	r3, #160	; 0xa0
 8007a8e:	02db      	lsls	r3, r3, #11
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d10e      	bne.n	8007ab2 <HAL_RCC_OscConfig+0xae>
 8007a94:	4baa      	ldr	r3, [pc, #680]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	4ba9      	ldr	r3, [pc, #676]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007a9a:	2180      	movs	r1, #128	; 0x80
 8007a9c:	02c9      	lsls	r1, r1, #11
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	4ba7      	ldr	r3, [pc, #668]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4ba6      	ldr	r3, [pc, #664]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007aa8:	2180      	movs	r1, #128	; 0x80
 8007aaa:	0249      	lsls	r1, r1, #9
 8007aac:	430a      	orrs	r2, r1
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	e012      	b.n	8007ad8 <HAL_RCC_OscConfig+0xd4>
 8007ab2:	4ba3      	ldr	r3, [pc, #652]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	4ba2      	ldr	r3, [pc, #648]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007ab8:	49a2      	ldr	r1, [pc, #648]	; (8007d44 <HAL_RCC_OscConfig+0x340>)
 8007aba:	400a      	ands	r2, r1
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	4ba0      	ldr	r3, [pc, #640]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	2380      	movs	r3, #128	; 0x80
 8007ac4:	025b      	lsls	r3, r3, #9
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	60fb      	str	r3, [r7, #12]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4b9c      	ldr	r3, [pc, #624]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	4b9b      	ldr	r3, [pc, #620]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007ad2:	499d      	ldr	r1, [pc, #628]	; (8007d48 <HAL_RCC_OscConfig+0x344>)
 8007ad4:	400a      	ands	r2, r1
 8007ad6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d015      	beq.n	8007b0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ae0:	f7fe fe6c 	bl	80067bc <HAL_GetTick>
 8007ae4:	0003      	movs	r3, r0
 8007ae6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ae8:	e009      	b.n	8007afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007aea:	f7fe fe67 	bl	80067bc <HAL_GetTick>
 8007aee:	0002      	movs	r2, r0
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b64      	cmp	r3, #100	; 0x64
 8007af6:	d902      	bls.n	8007afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	f000 fb4c 	bl	8008196 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007afe:	4b90      	ldr	r3, [pc, #576]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	2380      	movs	r3, #128	; 0x80
 8007b04:	029b      	lsls	r3, r3, #10
 8007b06:	4013      	ands	r3, r2
 8007b08:	d0ef      	beq.n	8007aea <HAL_RCC_OscConfig+0xe6>
 8007b0a:	e015      	b.n	8007b38 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b0c:	f7fe fe56 	bl	80067bc <HAL_GetTick>
 8007b10:	0003      	movs	r3, r0
 8007b12:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b14:	e008      	b.n	8007b28 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b16:	f7fe fe51 	bl	80067bc <HAL_GetTick>
 8007b1a:	0002      	movs	r2, r0
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	2b64      	cmp	r3, #100	; 0x64
 8007b22:	d901      	bls.n	8007b28 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e336      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b28:	4b85      	ldr	r3, [pc, #532]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	2380      	movs	r3, #128	; 0x80
 8007b2e:	029b      	lsls	r3, r3, #10
 8007b30:	4013      	ands	r3, r2
 8007b32:	d1f0      	bne.n	8007b16 <HAL_RCC_OscConfig+0x112>
 8007b34:	e000      	b.n	8007b38 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b36:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	4013      	ands	r3, r2
 8007b40:	d100      	bne.n	8007b44 <HAL_RCC_OscConfig+0x140>
 8007b42:	e099      	b.n	8007c78 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	4013      	ands	r3, r2
 8007b50:	d009      	beq.n	8007b66 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8007b52:	4b7b      	ldr	r3, [pc, #492]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	4b7a      	ldr	r3, [pc, #488]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007b58:	2120      	movs	r1, #32
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	2220      	movs	r2, #32
 8007b62:	4393      	bics	r3, r2
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d005      	beq.n	8007b78 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	2b0c      	cmp	r3, #12
 8007b70:	d13e      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x1ec>
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d13b      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8007b78:	4b71      	ldr	r3, [pc, #452]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2204      	movs	r2, #4
 8007b7e:	4013      	ands	r3, r2
 8007b80:	d004      	beq.n	8007b8c <HAL_RCC_OscConfig+0x188>
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e304      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b8c:	4b6c      	ldr	r3, [pc, #432]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	4a6e      	ldr	r2, [pc, #440]	; (8007d4c <HAL_RCC_OscConfig+0x348>)
 8007b92:	4013      	ands	r3, r2
 8007b94:	0019      	movs	r1, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	021a      	lsls	r2, r3, #8
 8007b9c:	4b68      	ldr	r3, [pc, #416]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007ba2:	4b67      	ldr	r3, [pc, #412]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2209      	movs	r2, #9
 8007ba8:	4393      	bics	r3, r2
 8007baa:	0019      	movs	r1, r3
 8007bac:	4b64      	ldr	r3, [pc, #400]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bb4:	f000 fc42 	bl	800843c <HAL_RCC_GetSysClockFreq>
 8007bb8:	0001      	movs	r1, r0
 8007bba:	4b61      	ldr	r3, [pc, #388]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	091b      	lsrs	r3, r3, #4
 8007bc0:	220f      	movs	r2, #15
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	4a62      	ldr	r2, [pc, #392]	; (8007d50 <HAL_RCC_OscConfig+0x34c>)
 8007bc6:	5cd3      	ldrb	r3, [r2, r3]
 8007bc8:	000a      	movs	r2, r1
 8007bca:	40da      	lsrs	r2, r3
 8007bcc:	4b61      	ldr	r3, [pc, #388]	; (8007d54 <HAL_RCC_OscConfig+0x350>)
 8007bce:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8007bd0:	4b61      	ldr	r3, [pc, #388]	; (8007d58 <HAL_RCC_OscConfig+0x354>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2513      	movs	r5, #19
 8007bd6:	197c      	adds	r4, r7, r5
 8007bd8:	0018      	movs	r0, r3
 8007bda:	f7fe fda9 	bl	8006730 <HAL_InitTick>
 8007bde:	0003      	movs	r3, r0
 8007be0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8007be2:	197b      	adds	r3, r7, r5
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d046      	beq.n	8007c78 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8007bea:	197b      	adds	r3, r7, r5
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	e2d2      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d027      	beq.n	8007c46 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007bf6:	4b52      	ldr	r3, [pc, #328]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2209      	movs	r2, #9
 8007bfc:	4393      	bics	r3, r2
 8007bfe:	0019      	movs	r1, r3
 8007c00:	4b4f      	ldr	r3, [pc, #316]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c04:	430a      	orrs	r2, r1
 8007c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c08:	f7fe fdd8 	bl	80067bc <HAL_GetTick>
 8007c0c:	0003      	movs	r3, r0
 8007c0e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c10:	e008      	b.n	8007c24 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c12:	f7fe fdd3 	bl	80067bc <HAL_GetTick>
 8007c16:	0002      	movs	r2, r0
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d901      	bls.n	8007c24 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e2b8      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c24:	4b46      	ldr	r3, [pc, #280]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2204      	movs	r2, #4
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	d0f1      	beq.n	8007c12 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c2e:	4b44      	ldr	r3, [pc, #272]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	4a46      	ldr	r2, [pc, #280]	; (8007d4c <HAL_RCC_OscConfig+0x348>)
 8007c34:	4013      	ands	r3, r2
 8007c36:	0019      	movs	r1, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	021a      	lsls	r2, r3, #8
 8007c3e:	4b40      	ldr	r3, [pc, #256]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007c40:	430a      	orrs	r2, r1
 8007c42:	605a      	str	r2, [r3, #4]
 8007c44:	e018      	b.n	8007c78 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c46:	4b3e      	ldr	r3, [pc, #248]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	4b3d      	ldr	r3, [pc, #244]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	438a      	bics	r2, r1
 8007c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c52:	f7fe fdb3 	bl	80067bc <HAL_GetTick>
 8007c56:	0003      	movs	r3, r0
 8007c58:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c5a:	e008      	b.n	8007c6e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c5c:	f7fe fdae 	bl	80067bc <HAL_GetTick>
 8007c60:	0002      	movs	r2, r0
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e293      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c6e:	4b34      	ldr	r3, [pc, #208]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2204      	movs	r2, #4
 8007c74:	4013      	ands	r3, r2
 8007c76:	d1f1      	bne.n	8007c5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2210      	movs	r2, #16
 8007c7e:	4013      	ands	r3, r2
 8007c80:	d100      	bne.n	8007c84 <HAL_RCC_OscConfig+0x280>
 8007c82:	e0a2      	b.n	8007dca <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d140      	bne.n	8007d0c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007c8a:	4b2d      	ldr	r3, [pc, #180]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	2380      	movs	r3, #128	; 0x80
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4013      	ands	r3, r2
 8007c94:	d005      	beq.n	8007ca2 <HAL_RCC_OscConfig+0x29e>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e279      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007ca2:	4b27      	ldr	r3, [pc, #156]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	4a2d      	ldr	r2, [pc, #180]	; (8007d5c <HAL_RCC_OscConfig+0x358>)
 8007ca8:	4013      	ands	r3, r2
 8007caa:	0019      	movs	r1, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cb0:	4b23      	ldr	r3, [pc, #140]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007cb6:	4b22      	ldr	r3, [pc, #136]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	021b      	lsls	r3, r3, #8
 8007cbc:	0a19      	lsrs	r1, r3, #8
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	061a      	lsls	r2, r3, #24
 8007cc4:	4b1e      	ldr	r3, [pc, #120]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	0b5b      	lsrs	r3, r3, #13
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	2280      	movs	r2, #128	; 0x80
 8007cd4:	0212      	lsls	r2, r2, #8
 8007cd6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007cd8:	4b19      	ldr	r3, [pc, #100]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	091b      	lsrs	r3, r3, #4
 8007cde:	210f      	movs	r1, #15
 8007ce0:	400b      	ands	r3, r1
 8007ce2:	491b      	ldr	r1, [pc, #108]	; (8007d50 <HAL_RCC_OscConfig+0x34c>)
 8007ce4:	5ccb      	ldrb	r3, [r1, r3]
 8007ce6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007ce8:	4b1a      	ldr	r3, [pc, #104]	; (8007d54 <HAL_RCC_OscConfig+0x350>)
 8007cea:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8007cec:	4b1a      	ldr	r3, [pc, #104]	; (8007d58 <HAL_RCC_OscConfig+0x354>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2513      	movs	r5, #19
 8007cf2:	197c      	adds	r4, r7, r5
 8007cf4:	0018      	movs	r0, r3
 8007cf6:	f7fe fd1b 	bl	8006730 <HAL_InitTick>
 8007cfa:	0003      	movs	r3, r0
 8007cfc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8007cfe:	197b      	adds	r3, r7, r5
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d061      	beq.n	8007dca <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8007d06:	197b      	adds	r3, r7, r5
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	e244      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d040      	beq.n	8007d96 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007d14:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <HAL_RCC_OscConfig+0x33c>)
 8007d1a:	2180      	movs	r1, #128	; 0x80
 8007d1c:	0049      	lsls	r1, r1, #1
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d22:	f7fe fd4b 	bl	80067bc <HAL_GetTick>
 8007d26:	0003      	movs	r3, r0
 8007d28:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007d2a:	e019      	b.n	8007d60 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d2c:	f7fe fd46 	bl	80067bc <HAL_GetTick>
 8007d30:	0002      	movs	r2, r0
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d912      	bls.n	8007d60 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e22b      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
 8007d3e:	46c0      	nop			; (mov r8, r8)
 8007d40:	40021000 	.word	0x40021000
 8007d44:	fffeffff 	.word	0xfffeffff
 8007d48:	fffbffff 	.word	0xfffbffff
 8007d4c:	ffffe0ff 	.word	0xffffe0ff
 8007d50:	08013684 	.word	0x08013684
 8007d54:	2000000c 	.word	0x2000000c
 8007d58:	20000010 	.word	0x20000010
 8007d5c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007d60:	4bca      	ldr	r3, [pc, #808]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	2380      	movs	r3, #128	; 0x80
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4013      	ands	r3, r2
 8007d6a:	d0df      	beq.n	8007d2c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d6c:	4bc7      	ldr	r3, [pc, #796]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	4ac7      	ldr	r2, [pc, #796]	; (8008090 <HAL_RCC_OscConfig+0x68c>)
 8007d72:	4013      	ands	r3, r2
 8007d74:	0019      	movs	r1, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d7a:	4bc4      	ldr	r3, [pc, #784]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d80:	4bc2      	ldr	r3, [pc, #776]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	021b      	lsls	r3, r3, #8
 8007d86:	0a19      	lsrs	r1, r3, #8
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	061a      	lsls	r2, r3, #24
 8007d8e:	4bbf      	ldr	r3, [pc, #764]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007d90:	430a      	orrs	r2, r1
 8007d92:	605a      	str	r2, [r3, #4]
 8007d94:	e019      	b.n	8007dca <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007d96:	4bbd      	ldr	r3, [pc, #756]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	4bbc      	ldr	r3, [pc, #752]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007d9c:	49bd      	ldr	r1, [pc, #756]	; (8008094 <HAL_RCC_OscConfig+0x690>)
 8007d9e:	400a      	ands	r2, r1
 8007da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007da2:	f7fe fd0b 	bl	80067bc <HAL_GetTick>
 8007da6:	0003      	movs	r3, r0
 8007da8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007daa:	e008      	b.n	8007dbe <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007dac:	f7fe fd06 	bl	80067bc <HAL_GetTick>
 8007db0:	0002      	movs	r2, r0
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e1eb      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007dbe:	4bb3      	ldr	r3, [pc, #716]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	2380      	movs	r3, #128	; 0x80
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	d1f0      	bne.n	8007dac <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2208      	movs	r2, #8
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	d036      	beq.n	8007e42 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d019      	beq.n	8007e10 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ddc:	4bab      	ldr	r3, [pc, #684]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007dde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007de0:	4baa      	ldr	r3, [pc, #680]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007de2:	2101      	movs	r1, #1
 8007de4:	430a      	orrs	r2, r1
 8007de6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007de8:	f7fe fce8 	bl	80067bc <HAL_GetTick>
 8007dec:	0003      	movs	r3, r0
 8007dee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007df0:	e008      	b.n	8007e04 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007df2:	f7fe fce3 	bl	80067bc <HAL_GetTick>
 8007df6:	0002      	movs	r2, r0
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d901      	bls.n	8007e04 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e1c8      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e04:	4ba1      	ldr	r3, [pc, #644]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e08:	2202      	movs	r2, #2
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	d0f1      	beq.n	8007df2 <HAL_RCC_OscConfig+0x3ee>
 8007e0e:	e018      	b.n	8007e42 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e10:	4b9e      	ldr	r3, [pc, #632]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007e12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e14:	4b9d      	ldr	r3, [pc, #628]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007e16:	2101      	movs	r1, #1
 8007e18:	438a      	bics	r2, r1
 8007e1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e1c:	f7fe fcce 	bl	80067bc <HAL_GetTick>
 8007e20:	0003      	movs	r3, r0
 8007e22:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e24:	e008      	b.n	8007e38 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e26:	f7fe fcc9 	bl	80067bc <HAL_GetTick>
 8007e2a:	0002      	movs	r2, r0
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d901      	bls.n	8007e38 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e1ae      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e38:	4b94      	ldr	r3, [pc, #592]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	4013      	ands	r3, r2
 8007e40:	d1f1      	bne.n	8007e26 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2204      	movs	r2, #4
 8007e48:	4013      	ands	r3, r2
 8007e4a:	d100      	bne.n	8007e4e <HAL_RCC_OscConfig+0x44a>
 8007e4c:	e0ae      	b.n	8007fac <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e4e:	2023      	movs	r0, #35	; 0x23
 8007e50:	183b      	adds	r3, r7, r0
 8007e52:	2200      	movs	r2, #0
 8007e54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e56:	4b8d      	ldr	r3, [pc, #564]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e5a:	2380      	movs	r3, #128	; 0x80
 8007e5c:	055b      	lsls	r3, r3, #21
 8007e5e:	4013      	ands	r3, r2
 8007e60:	d109      	bne.n	8007e76 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e62:	4b8a      	ldr	r3, [pc, #552]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e66:	4b89      	ldr	r3, [pc, #548]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007e68:	2180      	movs	r1, #128	; 0x80
 8007e6a:	0549      	lsls	r1, r1, #21
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007e70:	183b      	adds	r3, r7, r0
 8007e72:	2201      	movs	r2, #1
 8007e74:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e76:	4b88      	ldr	r3, [pc, #544]	; (8008098 <HAL_RCC_OscConfig+0x694>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	2380      	movs	r3, #128	; 0x80
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	4013      	ands	r3, r2
 8007e80:	d11a      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e82:	4b85      	ldr	r3, [pc, #532]	; (8008098 <HAL_RCC_OscConfig+0x694>)
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	4b84      	ldr	r3, [pc, #528]	; (8008098 <HAL_RCC_OscConfig+0x694>)
 8007e88:	2180      	movs	r1, #128	; 0x80
 8007e8a:	0049      	lsls	r1, r1, #1
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e90:	f7fe fc94 	bl	80067bc <HAL_GetTick>
 8007e94:	0003      	movs	r3, r0
 8007e96:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e98:	e008      	b.n	8007eac <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e9a:	f7fe fc8f 	bl	80067bc <HAL_GetTick>
 8007e9e:	0002      	movs	r2, r0
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b64      	cmp	r3, #100	; 0x64
 8007ea6:	d901      	bls.n	8007eac <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e174      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eac:	4b7a      	ldr	r3, [pc, #488]	; (8008098 <HAL_RCC_OscConfig+0x694>)
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	2380      	movs	r3, #128	; 0x80
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	d0f0      	beq.n	8007e9a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	2380      	movs	r3, #128	; 0x80
 8007ebe:	005b      	lsls	r3, r3, #1
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d107      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x4d0>
 8007ec4:	4b71      	ldr	r3, [pc, #452]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007ec6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ec8:	4b70      	ldr	r3, [pc, #448]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007eca:	2180      	movs	r1, #128	; 0x80
 8007ecc:	0049      	lsls	r1, r1, #1
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	651a      	str	r2, [r3, #80]	; 0x50
 8007ed2:	e031      	b.n	8007f38 <HAL_RCC_OscConfig+0x534>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10c      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x4f2>
 8007edc:	4b6b      	ldr	r3, [pc, #428]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007ede:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ee0:	4b6a      	ldr	r3, [pc, #424]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007ee2:	496c      	ldr	r1, [pc, #432]	; (8008094 <HAL_RCC_OscConfig+0x690>)
 8007ee4:	400a      	ands	r2, r1
 8007ee6:	651a      	str	r2, [r3, #80]	; 0x50
 8007ee8:	4b68      	ldr	r3, [pc, #416]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007eea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007eec:	4b67      	ldr	r3, [pc, #412]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007eee:	496b      	ldr	r1, [pc, #428]	; (800809c <HAL_RCC_OscConfig+0x698>)
 8007ef0:	400a      	ands	r2, r1
 8007ef2:	651a      	str	r2, [r3, #80]	; 0x50
 8007ef4:	e020      	b.n	8007f38 <HAL_RCC_OscConfig+0x534>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689a      	ldr	r2, [r3, #8]
 8007efa:	23a0      	movs	r3, #160	; 0xa0
 8007efc:	00db      	lsls	r3, r3, #3
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d10e      	bne.n	8007f20 <HAL_RCC_OscConfig+0x51c>
 8007f02:	4b62      	ldr	r3, [pc, #392]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007f04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f06:	4b61      	ldr	r3, [pc, #388]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007f08:	2180      	movs	r1, #128	; 0x80
 8007f0a:	00c9      	lsls	r1, r1, #3
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	651a      	str	r2, [r3, #80]	; 0x50
 8007f10:	4b5e      	ldr	r3, [pc, #376]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007f12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f14:	4b5d      	ldr	r3, [pc, #372]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007f16:	2180      	movs	r1, #128	; 0x80
 8007f18:	0049      	lsls	r1, r1, #1
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	651a      	str	r2, [r3, #80]	; 0x50
 8007f1e:	e00b      	b.n	8007f38 <HAL_RCC_OscConfig+0x534>
 8007f20:	4b5a      	ldr	r3, [pc, #360]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007f22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f24:	4b59      	ldr	r3, [pc, #356]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007f26:	495b      	ldr	r1, [pc, #364]	; (8008094 <HAL_RCC_OscConfig+0x690>)
 8007f28:	400a      	ands	r2, r1
 8007f2a:	651a      	str	r2, [r3, #80]	; 0x50
 8007f2c:	4b57      	ldr	r3, [pc, #348]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f30:	4b56      	ldr	r3, [pc, #344]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007f32:	495a      	ldr	r1, [pc, #360]	; (800809c <HAL_RCC_OscConfig+0x698>)
 8007f34:	400a      	ands	r2, r1
 8007f36:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d015      	beq.n	8007f6c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f40:	f7fe fc3c 	bl	80067bc <HAL_GetTick>
 8007f44:	0003      	movs	r3, r0
 8007f46:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f48:	e009      	b.n	8007f5e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f4a:	f7fe fc37 	bl	80067bc <HAL_GetTick>
 8007f4e:	0002      	movs	r2, r0
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	4a52      	ldr	r2, [pc, #328]	; (80080a0 <HAL_RCC_OscConfig+0x69c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d901      	bls.n	8007f5e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e11b      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f5e:	4b4b      	ldr	r3, [pc, #300]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f62:	2380      	movs	r3, #128	; 0x80
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4013      	ands	r3, r2
 8007f68:	d0ef      	beq.n	8007f4a <HAL_RCC_OscConfig+0x546>
 8007f6a:	e014      	b.n	8007f96 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f6c:	f7fe fc26 	bl	80067bc <HAL_GetTick>
 8007f70:	0003      	movs	r3, r0
 8007f72:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f74:	e009      	b.n	8007f8a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f76:	f7fe fc21 	bl	80067bc <HAL_GetTick>
 8007f7a:	0002      	movs	r2, r0
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	4a47      	ldr	r2, [pc, #284]	; (80080a0 <HAL_RCC_OscConfig+0x69c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d901      	bls.n	8007f8a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e105      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f8a:	4b40      	ldr	r3, [pc, #256]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007f8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f8e:	2380      	movs	r3, #128	; 0x80
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4013      	ands	r3, r2
 8007f94:	d1ef      	bne.n	8007f76 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007f96:	2323      	movs	r3, #35	; 0x23
 8007f98:	18fb      	adds	r3, r7, r3
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d105      	bne.n	8007fac <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fa0:	4b3a      	ldr	r3, [pc, #232]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fa4:	4b39      	ldr	r3, [pc, #228]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007fa6:	493f      	ldr	r1, [pc, #252]	; (80080a4 <HAL_RCC_OscConfig+0x6a0>)
 8007fa8:	400a      	ands	r2, r1
 8007faa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	d049      	beq.n	800804a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d026      	beq.n	800800c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8007fbe:	4b33      	ldr	r3, [pc, #204]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007fc0:	689a      	ldr	r2, [r3, #8]
 8007fc2:	4b32      	ldr	r3, [pc, #200]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	609a      	str	r2, [r3, #8]
 8007fca:	4b30      	ldr	r3, [pc, #192]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fce:	4b2f      	ldr	r3, [pc, #188]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8007fd6:	4b34      	ldr	r3, [pc, #208]	; (80080a8 <HAL_RCC_OscConfig+0x6a4>)
 8007fd8:	6a1a      	ldr	r2, [r3, #32]
 8007fda:	4b33      	ldr	r3, [pc, #204]	; (80080a8 <HAL_RCC_OscConfig+0x6a4>)
 8007fdc:	2180      	movs	r1, #128	; 0x80
 8007fde:	0189      	lsls	r1, r1, #6
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fe4:	f7fe fbea 	bl	80067bc <HAL_GetTick>
 8007fe8:	0003      	movs	r3, r0
 8007fea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fec:	e008      	b.n	8008000 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fee:	f7fe fbe5 	bl	80067bc <HAL_GetTick>
 8007ff2:	0002      	movs	r2, r0
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d901      	bls.n	8008000 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e0ca      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008000:	4b22      	ldr	r3, [pc, #136]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	2202      	movs	r2, #2
 8008006:	4013      	ands	r3, r2
 8008008:	d0f1      	beq.n	8007fee <HAL_RCC_OscConfig+0x5ea>
 800800a:	e01e      	b.n	800804a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800800c:	4b1f      	ldr	r3, [pc, #124]	; (800808c <HAL_RCC_OscConfig+0x688>)
 800800e:	689a      	ldr	r2, [r3, #8]
 8008010:	4b1e      	ldr	r3, [pc, #120]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8008012:	2101      	movs	r1, #1
 8008014:	438a      	bics	r2, r1
 8008016:	609a      	str	r2, [r3, #8]
 8008018:	4b23      	ldr	r3, [pc, #140]	; (80080a8 <HAL_RCC_OscConfig+0x6a4>)
 800801a:	6a1a      	ldr	r2, [r3, #32]
 800801c:	4b22      	ldr	r3, [pc, #136]	; (80080a8 <HAL_RCC_OscConfig+0x6a4>)
 800801e:	4923      	ldr	r1, [pc, #140]	; (80080ac <HAL_RCC_OscConfig+0x6a8>)
 8008020:	400a      	ands	r2, r1
 8008022:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008024:	f7fe fbca 	bl	80067bc <HAL_GetTick>
 8008028:	0003      	movs	r3, r0
 800802a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800802c:	e008      	b.n	8008040 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800802e:	f7fe fbc5 	bl	80067bc <HAL_GetTick>
 8008032:	0002      	movs	r2, r0
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	2b02      	cmp	r3, #2
 800803a:	d901      	bls.n	8008040 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e0aa      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008040:	4b12      	ldr	r3, [pc, #72]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	2202      	movs	r2, #2
 8008046:	4013      	ands	r3, r2
 8008048:	d1f1      	bne.n	800802e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804e:	2b00      	cmp	r3, #0
 8008050:	d100      	bne.n	8008054 <HAL_RCC_OscConfig+0x650>
 8008052:	e09f      	b.n	8008194 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	2b0c      	cmp	r3, #12
 8008058:	d100      	bne.n	800805c <HAL_RCC_OscConfig+0x658>
 800805a:	e078      	b.n	800814e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008060:	2b02      	cmp	r3, #2
 8008062:	d159      	bne.n	8008118 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008064:	4b09      	ldr	r3, [pc, #36]	; (800808c <HAL_RCC_OscConfig+0x688>)
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	4b08      	ldr	r3, [pc, #32]	; (800808c <HAL_RCC_OscConfig+0x688>)
 800806a:	4911      	ldr	r1, [pc, #68]	; (80080b0 <HAL_RCC_OscConfig+0x6ac>)
 800806c:	400a      	ands	r2, r1
 800806e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008070:	f7fe fba4 	bl	80067bc <HAL_GetTick>
 8008074:	0003      	movs	r3, r0
 8008076:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008078:	e01c      	b.n	80080b4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800807a:	f7fe fb9f 	bl	80067bc <HAL_GetTick>
 800807e:	0002      	movs	r2, r0
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d915      	bls.n	80080b4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e084      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
 800808c:	40021000 	.word	0x40021000
 8008090:	ffff1fff 	.word	0xffff1fff
 8008094:	fffffeff 	.word	0xfffffeff
 8008098:	40007000 	.word	0x40007000
 800809c:	fffffbff 	.word	0xfffffbff
 80080a0:	00001388 	.word	0x00001388
 80080a4:	efffffff 	.word	0xefffffff
 80080a8:	40010000 	.word	0x40010000
 80080ac:	ffffdfff 	.word	0xffffdfff
 80080b0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80080b4:	4b3a      	ldr	r3, [pc, #232]	; (80081a0 <HAL_RCC_OscConfig+0x79c>)
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	2380      	movs	r3, #128	; 0x80
 80080ba:	049b      	lsls	r3, r3, #18
 80080bc:	4013      	ands	r3, r2
 80080be:	d1dc      	bne.n	800807a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080c0:	4b37      	ldr	r3, [pc, #220]	; (80081a0 <HAL_RCC_OscConfig+0x79c>)
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	4a37      	ldr	r2, [pc, #220]	; (80081a4 <HAL_RCC_OscConfig+0x7a0>)
 80080c6:	4013      	ands	r3, r2
 80080c8:	0019      	movs	r1, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d2:	431a      	orrs	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d8:	431a      	orrs	r2, r3
 80080da:	4b31      	ldr	r3, [pc, #196]	; (80081a0 <HAL_RCC_OscConfig+0x79c>)
 80080dc:	430a      	orrs	r2, r1
 80080de:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080e0:	4b2f      	ldr	r3, [pc, #188]	; (80081a0 <HAL_RCC_OscConfig+0x79c>)
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	4b2e      	ldr	r3, [pc, #184]	; (80081a0 <HAL_RCC_OscConfig+0x79c>)
 80080e6:	2180      	movs	r1, #128	; 0x80
 80080e8:	0449      	lsls	r1, r1, #17
 80080ea:	430a      	orrs	r2, r1
 80080ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080ee:	f7fe fb65 	bl	80067bc <HAL_GetTick>
 80080f2:	0003      	movs	r3, r0
 80080f4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080f8:	f7fe fb60 	bl	80067bc <HAL_GetTick>
 80080fc:	0002      	movs	r2, r0
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e045      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800810a:	4b25      	ldr	r3, [pc, #148]	; (80081a0 <HAL_RCC_OscConfig+0x79c>)
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	2380      	movs	r3, #128	; 0x80
 8008110:	049b      	lsls	r3, r3, #18
 8008112:	4013      	ands	r3, r2
 8008114:	d0f0      	beq.n	80080f8 <HAL_RCC_OscConfig+0x6f4>
 8008116:	e03d      	b.n	8008194 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008118:	4b21      	ldr	r3, [pc, #132]	; (80081a0 <HAL_RCC_OscConfig+0x79c>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	4b20      	ldr	r3, [pc, #128]	; (80081a0 <HAL_RCC_OscConfig+0x79c>)
 800811e:	4922      	ldr	r1, [pc, #136]	; (80081a8 <HAL_RCC_OscConfig+0x7a4>)
 8008120:	400a      	ands	r2, r1
 8008122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008124:	f7fe fb4a 	bl	80067bc <HAL_GetTick>
 8008128:	0003      	movs	r3, r0
 800812a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800812c:	e008      	b.n	8008140 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800812e:	f7fe fb45 	bl	80067bc <HAL_GetTick>
 8008132:	0002      	movs	r2, r0
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	2b02      	cmp	r3, #2
 800813a:	d901      	bls.n	8008140 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e02a      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008140:	4b17      	ldr	r3, [pc, #92]	; (80081a0 <HAL_RCC_OscConfig+0x79c>)
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	2380      	movs	r3, #128	; 0x80
 8008146:	049b      	lsls	r3, r3, #18
 8008148:	4013      	ands	r3, r2
 800814a:	d1f0      	bne.n	800812e <HAL_RCC_OscConfig+0x72a>
 800814c:	e022      	b.n	8008194 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008152:	2b01      	cmp	r3, #1
 8008154:	d101      	bne.n	800815a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e01d      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800815a:	4b11      	ldr	r3, [pc, #68]	; (80081a0 <HAL_RCC_OscConfig+0x79c>)
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	2380      	movs	r3, #128	; 0x80
 8008164:	025b      	lsls	r3, r3, #9
 8008166:	401a      	ands	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	429a      	cmp	r2, r3
 800816e:	d10f      	bne.n	8008190 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	23f0      	movs	r3, #240	; 0xf0
 8008174:	039b      	lsls	r3, r3, #14
 8008176:	401a      	ands	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800817c:	429a      	cmp	r2, r3
 800817e:	d107      	bne.n	8008190 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	23c0      	movs	r3, #192	; 0xc0
 8008184:	041b      	lsls	r3, r3, #16
 8008186:	401a      	ands	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800818c:	429a      	cmp	r2, r3
 800818e:	d001      	beq.n	8008194 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e000      	b.n	8008196 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	0018      	movs	r0, r3
 8008198:	46bd      	mov	sp, r7
 800819a:	b00a      	add	sp, #40	; 0x28
 800819c:	bdb0      	pop	{r4, r5, r7, pc}
 800819e:	46c0      	nop			; (mov r8, r8)
 80081a0:	40021000 	.word	0x40021000
 80081a4:	ff02ffff 	.word	0xff02ffff
 80081a8:	feffffff 	.word	0xfeffffff

080081ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081ac:	b5b0      	push	{r4, r5, r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e128      	b.n	8008412 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081c0:	4b96      	ldr	r3, [pc, #600]	; (800841c <HAL_RCC_ClockConfig+0x270>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2201      	movs	r2, #1
 80081c6:	4013      	ands	r3, r2
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d91e      	bls.n	800820c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ce:	4b93      	ldr	r3, [pc, #588]	; (800841c <HAL_RCC_ClockConfig+0x270>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2201      	movs	r2, #1
 80081d4:	4393      	bics	r3, r2
 80081d6:	0019      	movs	r1, r3
 80081d8:	4b90      	ldr	r3, [pc, #576]	; (800841c <HAL_RCC_ClockConfig+0x270>)
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80081e0:	f7fe faec 	bl	80067bc <HAL_GetTick>
 80081e4:	0003      	movs	r3, r0
 80081e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081e8:	e009      	b.n	80081fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081ea:	f7fe fae7 	bl	80067bc <HAL_GetTick>
 80081ee:	0002      	movs	r2, r0
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	4a8a      	ldr	r2, [pc, #552]	; (8008420 <HAL_RCC_ClockConfig+0x274>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d901      	bls.n	80081fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e109      	b.n	8008412 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081fe:	4b87      	ldr	r3, [pc, #540]	; (800841c <HAL_RCC_ClockConfig+0x270>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2201      	movs	r2, #1
 8008204:	4013      	ands	r3, r2
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	429a      	cmp	r2, r3
 800820a:	d1ee      	bne.n	80081ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2202      	movs	r2, #2
 8008212:	4013      	ands	r3, r2
 8008214:	d009      	beq.n	800822a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008216:	4b83      	ldr	r3, [pc, #524]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	22f0      	movs	r2, #240	; 0xf0
 800821c:	4393      	bics	r3, r2
 800821e:	0019      	movs	r1, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689a      	ldr	r2, [r3, #8]
 8008224:	4b7f      	ldr	r3, [pc, #508]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 8008226:	430a      	orrs	r2, r1
 8008228:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2201      	movs	r2, #1
 8008230:	4013      	ands	r3, r2
 8008232:	d100      	bne.n	8008236 <HAL_RCC_ClockConfig+0x8a>
 8008234:	e089      	b.n	800834a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d107      	bne.n	800824e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800823e:	4b79      	ldr	r3, [pc, #484]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	2380      	movs	r3, #128	; 0x80
 8008244:	029b      	lsls	r3, r3, #10
 8008246:	4013      	ands	r3, r2
 8008248:	d120      	bne.n	800828c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e0e1      	b.n	8008412 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	2b03      	cmp	r3, #3
 8008254:	d107      	bne.n	8008266 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008256:	4b73      	ldr	r3, [pc, #460]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	2380      	movs	r3, #128	; 0x80
 800825c:	049b      	lsls	r3, r3, #18
 800825e:	4013      	ands	r3, r2
 8008260:	d114      	bne.n	800828c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e0d5      	b.n	8008412 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d106      	bne.n	800827c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800826e:	4b6d      	ldr	r3, [pc, #436]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2204      	movs	r2, #4
 8008274:	4013      	ands	r3, r2
 8008276:	d109      	bne.n	800828c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e0ca      	b.n	8008412 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800827c:	4b69      	ldr	r3, [pc, #420]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	2380      	movs	r3, #128	; 0x80
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4013      	ands	r3, r2
 8008286:	d101      	bne.n	800828c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e0c2      	b.n	8008412 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800828c:	4b65      	ldr	r3, [pc, #404]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	2203      	movs	r2, #3
 8008292:	4393      	bics	r3, r2
 8008294:	0019      	movs	r1, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685a      	ldr	r2, [r3, #4]
 800829a:	4b62      	ldr	r3, [pc, #392]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 800829c:	430a      	orrs	r2, r1
 800829e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082a0:	f7fe fa8c 	bl	80067bc <HAL_GetTick>
 80082a4:	0003      	movs	r3, r0
 80082a6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d111      	bne.n	80082d4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80082b0:	e009      	b.n	80082c6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082b2:	f7fe fa83 	bl	80067bc <HAL_GetTick>
 80082b6:	0002      	movs	r2, r0
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	4a58      	ldr	r2, [pc, #352]	; (8008420 <HAL_RCC_ClockConfig+0x274>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d901      	bls.n	80082c6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e0a5      	b.n	8008412 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80082c6:	4b57      	ldr	r3, [pc, #348]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	220c      	movs	r2, #12
 80082cc:	4013      	ands	r3, r2
 80082ce:	2b08      	cmp	r3, #8
 80082d0:	d1ef      	bne.n	80082b2 <HAL_RCC_ClockConfig+0x106>
 80082d2:	e03a      	b.n	800834a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d111      	bne.n	8008300 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082dc:	e009      	b.n	80082f2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082de:	f7fe fa6d 	bl	80067bc <HAL_GetTick>
 80082e2:	0002      	movs	r2, r0
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	4a4d      	ldr	r2, [pc, #308]	; (8008420 <HAL_RCC_ClockConfig+0x274>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d901      	bls.n	80082f2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e08f      	b.n	8008412 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082f2:	4b4c      	ldr	r3, [pc, #304]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	220c      	movs	r2, #12
 80082f8:	4013      	ands	r3, r2
 80082fa:	2b0c      	cmp	r3, #12
 80082fc:	d1ef      	bne.n	80082de <HAL_RCC_ClockConfig+0x132>
 80082fe:	e024      	b.n	800834a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d11b      	bne.n	8008340 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008308:	e009      	b.n	800831e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800830a:	f7fe fa57 	bl	80067bc <HAL_GetTick>
 800830e:	0002      	movs	r2, r0
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	4a42      	ldr	r2, [pc, #264]	; (8008420 <HAL_RCC_ClockConfig+0x274>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d901      	bls.n	800831e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e079      	b.n	8008412 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800831e:	4b41      	ldr	r3, [pc, #260]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	220c      	movs	r2, #12
 8008324:	4013      	ands	r3, r2
 8008326:	2b04      	cmp	r3, #4
 8008328:	d1ef      	bne.n	800830a <HAL_RCC_ClockConfig+0x15e>
 800832a:	e00e      	b.n	800834a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800832c:	f7fe fa46 	bl	80067bc <HAL_GetTick>
 8008330:	0002      	movs	r2, r0
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	4a3a      	ldr	r2, [pc, #232]	; (8008420 <HAL_RCC_ClockConfig+0x274>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d901      	bls.n	8008340 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e068      	b.n	8008412 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008340:	4b38      	ldr	r3, [pc, #224]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	220c      	movs	r2, #12
 8008346:	4013      	ands	r3, r2
 8008348:	d1f0      	bne.n	800832c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800834a:	4b34      	ldr	r3, [pc, #208]	; (800841c <HAL_RCC_ClockConfig+0x270>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2201      	movs	r2, #1
 8008350:	4013      	ands	r3, r2
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	429a      	cmp	r2, r3
 8008356:	d21e      	bcs.n	8008396 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008358:	4b30      	ldr	r3, [pc, #192]	; (800841c <HAL_RCC_ClockConfig+0x270>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2201      	movs	r2, #1
 800835e:	4393      	bics	r3, r2
 8008360:	0019      	movs	r1, r3
 8008362:	4b2e      	ldr	r3, [pc, #184]	; (800841c <HAL_RCC_ClockConfig+0x270>)
 8008364:	683a      	ldr	r2, [r7, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800836a:	f7fe fa27 	bl	80067bc <HAL_GetTick>
 800836e:	0003      	movs	r3, r0
 8008370:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008372:	e009      	b.n	8008388 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008374:	f7fe fa22 	bl	80067bc <HAL_GetTick>
 8008378:	0002      	movs	r2, r0
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	4a28      	ldr	r2, [pc, #160]	; (8008420 <HAL_RCC_ClockConfig+0x274>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d901      	bls.n	8008388 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e044      	b.n	8008412 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008388:	4b24      	ldr	r3, [pc, #144]	; (800841c <HAL_RCC_ClockConfig+0x270>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2201      	movs	r2, #1
 800838e:	4013      	ands	r3, r2
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	429a      	cmp	r2, r3
 8008394:	d1ee      	bne.n	8008374 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2204      	movs	r2, #4
 800839c:	4013      	ands	r3, r2
 800839e:	d009      	beq.n	80083b4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083a0:	4b20      	ldr	r3, [pc, #128]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	4a20      	ldr	r2, [pc, #128]	; (8008428 <HAL_RCC_ClockConfig+0x27c>)
 80083a6:	4013      	ands	r3, r2
 80083a8:	0019      	movs	r1, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	4b1d      	ldr	r3, [pc, #116]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 80083b0:	430a      	orrs	r2, r1
 80083b2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2208      	movs	r2, #8
 80083ba:	4013      	ands	r3, r2
 80083bc:	d00a      	beq.n	80083d4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80083be:	4b19      	ldr	r3, [pc, #100]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	4a1a      	ldr	r2, [pc, #104]	; (800842c <HAL_RCC_ClockConfig+0x280>)
 80083c4:	4013      	ands	r3, r2
 80083c6:	0019      	movs	r1, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	00da      	lsls	r2, r3, #3
 80083ce:	4b15      	ldr	r3, [pc, #84]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 80083d0:	430a      	orrs	r2, r1
 80083d2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083d4:	f000 f832 	bl	800843c <HAL_RCC_GetSysClockFreq>
 80083d8:	0001      	movs	r1, r0
 80083da:	4b12      	ldr	r3, [pc, #72]	; (8008424 <HAL_RCC_ClockConfig+0x278>)
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	091b      	lsrs	r3, r3, #4
 80083e0:	220f      	movs	r2, #15
 80083e2:	4013      	ands	r3, r2
 80083e4:	4a12      	ldr	r2, [pc, #72]	; (8008430 <HAL_RCC_ClockConfig+0x284>)
 80083e6:	5cd3      	ldrb	r3, [r2, r3]
 80083e8:	000a      	movs	r2, r1
 80083ea:	40da      	lsrs	r2, r3
 80083ec:	4b11      	ldr	r3, [pc, #68]	; (8008434 <HAL_RCC_ClockConfig+0x288>)
 80083ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80083f0:	4b11      	ldr	r3, [pc, #68]	; (8008438 <HAL_RCC_ClockConfig+0x28c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	250b      	movs	r5, #11
 80083f6:	197c      	adds	r4, r7, r5
 80083f8:	0018      	movs	r0, r3
 80083fa:	f7fe f999 	bl	8006730 <HAL_InitTick>
 80083fe:	0003      	movs	r3, r0
 8008400:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8008402:	197b      	adds	r3, r7, r5
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d002      	beq.n	8008410 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800840a:	197b      	adds	r3, r7, r5
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	e000      	b.n	8008412 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	0018      	movs	r0, r3
 8008414:	46bd      	mov	sp, r7
 8008416:	b004      	add	sp, #16
 8008418:	bdb0      	pop	{r4, r5, r7, pc}
 800841a:	46c0      	nop			; (mov r8, r8)
 800841c:	40022000 	.word	0x40022000
 8008420:	00001388 	.word	0x00001388
 8008424:	40021000 	.word	0x40021000
 8008428:	fffff8ff 	.word	0xfffff8ff
 800842c:	ffffc7ff 	.word	0xffffc7ff
 8008430:	08013684 	.word	0x08013684
 8008434:	2000000c 	.word	0x2000000c
 8008438:	20000010 	.word	0x20000010

0800843c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800843c:	b5b0      	push	{r4, r5, r7, lr}
 800843e:	b08e      	sub	sp, #56	; 0x38
 8008440:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008442:	4b4c      	ldr	r3, [pc, #304]	; (8008574 <HAL_RCC_GetSysClockFreq+0x138>)
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800844a:	230c      	movs	r3, #12
 800844c:	4013      	ands	r3, r2
 800844e:	2b0c      	cmp	r3, #12
 8008450:	d014      	beq.n	800847c <HAL_RCC_GetSysClockFreq+0x40>
 8008452:	d900      	bls.n	8008456 <HAL_RCC_GetSysClockFreq+0x1a>
 8008454:	e07b      	b.n	800854e <HAL_RCC_GetSysClockFreq+0x112>
 8008456:	2b04      	cmp	r3, #4
 8008458:	d002      	beq.n	8008460 <HAL_RCC_GetSysClockFreq+0x24>
 800845a:	2b08      	cmp	r3, #8
 800845c:	d00b      	beq.n	8008476 <HAL_RCC_GetSysClockFreq+0x3a>
 800845e:	e076      	b.n	800854e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008460:	4b44      	ldr	r3, [pc, #272]	; (8008574 <HAL_RCC_GetSysClockFreq+0x138>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2210      	movs	r2, #16
 8008466:	4013      	ands	r3, r2
 8008468:	d002      	beq.n	8008470 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800846a:	4b43      	ldr	r3, [pc, #268]	; (8008578 <HAL_RCC_GetSysClockFreq+0x13c>)
 800846c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800846e:	e07c      	b.n	800856a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8008470:	4b42      	ldr	r3, [pc, #264]	; (800857c <HAL_RCC_GetSysClockFreq+0x140>)
 8008472:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008474:	e079      	b.n	800856a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008476:	4b42      	ldr	r3, [pc, #264]	; (8008580 <HAL_RCC_GetSysClockFreq+0x144>)
 8008478:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800847a:	e076      	b.n	800856a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800847c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847e:	0c9a      	lsrs	r2, r3, #18
 8008480:	230f      	movs	r3, #15
 8008482:	401a      	ands	r2, r3
 8008484:	4b3f      	ldr	r3, [pc, #252]	; (8008584 <HAL_RCC_GetSysClockFreq+0x148>)
 8008486:	5c9b      	ldrb	r3, [r3, r2]
 8008488:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800848a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848c:	0d9a      	lsrs	r2, r3, #22
 800848e:	2303      	movs	r3, #3
 8008490:	4013      	ands	r3, r2
 8008492:	3301      	adds	r3, #1
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008496:	4b37      	ldr	r3, [pc, #220]	; (8008574 <HAL_RCC_GetSysClockFreq+0x138>)
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	2380      	movs	r3, #128	; 0x80
 800849c:	025b      	lsls	r3, r3, #9
 800849e:	4013      	ands	r3, r2
 80084a0:	d01a      	beq.n	80084d8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80084a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a4:	61bb      	str	r3, [r7, #24]
 80084a6:	2300      	movs	r3, #0
 80084a8:	61fb      	str	r3, [r7, #28]
 80084aa:	4a35      	ldr	r2, [pc, #212]	; (8008580 <HAL_RCC_GetSysClockFreq+0x144>)
 80084ac:	2300      	movs	r3, #0
 80084ae:	69b8      	ldr	r0, [r7, #24]
 80084b0:	69f9      	ldr	r1, [r7, #28]
 80084b2:	f7f8 f819 	bl	80004e8 <__aeabi_lmul>
 80084b6:	0002      	movs	r2, r0
 80084b8:	000b      	movs	r3, r1
 80084ba:	0010      	movs	r0, r2
 80084bc:	0019      	movs	r1, r3
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	613b      	str	r3, [r7, #16]
 80084c2:	2300      	movs	r3, #0
 80084c4:	617b      	str	r3, [r7, #20]
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f7f7 ffed 	bl	80004a8 <__aeabi_uldivmod>
 80084ce:	0002      	movs	r2, r0
 80084d0:	000b      	movs	r3, r1
 80084d2:	0013      	movs	r3, r2
 80084d4:	637b      	str	r3, [r7, #52]	; 0x34
 80084d6:	e037      	b.n	8008548 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80084d8:	4b26      	ldr	r3, [pc, #152]	; (8008574 <HAL_RCC_GetSysClockFreq+0x138>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2210      	movs	r2, #16
 80084de:	4013      	ands	r3, r2
 80084e0:	d01a      	beq.n	8008518 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80084e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e4:	60bb      	str	r3, [r7, #8]
 80084e6:	2300      	movs	r3, #0
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	4a23      	ldr	r2, [pc, #140]	; (8008578 <HAL_RCC_GetSysClockFreq+0x13c>)
 80084ec:	2300      	movs	r3, #0
 80084ee:	68b8      	ldr	r0, [r7, #8]
 80084f0:	68f9      	ldr	r1, [r7, #12]
 80084f2:	f7f7 fff9 	bl	80004e8 <__aeabi_lmul>
 80084f6:	0002      	movs	r2, r0
 80084f8:	000b      	movs	r3, r1
 80084fa:	0010      	movs	r0, r2
 80084fc:	0019      	movs	r1, r3
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	603b      	str	r3, [r7, #0]
 8008502:	2300      	movs	r3, #0
 8008504:	607b      	str	r3, [r7, #4]
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f7f7 ffcd 	bl	80004a8 <__aeabi_uldivmod>
 800850e:	0002      	movs	r2, r0
 8008510:	000b      	movs	r3, r1
 8008512:	0013      	movs	r3, r2
 8008514:	637b      	str	r3, [r7, #52]	; 0x34
 8008516:	e017      	b.n	8008548 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	0018      	movs	r0, r3
 800851c:	2300      	movs	r3, #0
 800851e:	0019      	movs	r1, r3
 8008520:	4a16      	ldr	r2, [pc, #88]	; (800857c <HAL_RCC_GetSysClockFreq+0x140>)
 8008522:	2300      	movs	r3, #0
 8008524:	f7f7 ffe0 	bl	80004e8 <__aeabi_lmul>
 8008528:	0002      	movs	r2, r0
 800852a:	000b      	movs	r3, r1
 800852c:	0010      	movs	r0, r2
 800852e:	0019      	movs	r1, r3
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	001c      	movs	r4, r3
 8008534:	2300      	movs	r3, #0
 8008536:	001d      	movs	r5, r3
 8008538:	0022      	movs	r2, r4
 800853a:	002b      	movs	r3, r5
 800853c:	f7f7 ffb4 	bl	80004a8 <__aeabi_uldivmod>
 8008540:	0002      	movs	r2, r0
 8008542:	000b      	movs	r3, r1
 8008544:	0013      	movs	r3, r2
 8008546:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8008548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800854c:	e00d      	b.n	800856a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800854e:	4b09      	ldr	r3, [pc, #36]	; (8008574 <HAL_RCC_GetSysClockFreq+0x138>)
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	0b5b      	lsrs	r3, r3, #13
 8008554:	2207      	movs	r2, #7
 8008556:	4013      	ands	r3, r2
 8008558:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	3301      	adds	r3, #1
 800855e:	2280      	movs	r2, #128	; 0x80
 8008560:	0212      	lsls	r2, r2, #8
 8008562:	409a      	lsls	r2, r3
 8008564:	0013      	movs	r3, r2
 8008566:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008568:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800856c:	0018      	movs	r0, r3
 800856e:	46bd      	mov	sp, r7
 8008570:	b00e      	add	sp, #56	; 0x38
 8008572:	bdb0      	pop	{r4, r5, r7, pc}
 8008574:	40021000 	.word	0x40021000
 8008578:	003d0900 	.word	0x003d0900
 800857c:	00f42400 	.word	0x00f42400
 8008580:	007a1200 	.word	0x007a1200
 8008584:	0801369c 	.word	0x0801369c

08008588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800858c:	4b02      	ldr	r3, [pc, #8]	; (8008598 <HAL_RCC_GetHCLKFreq+0x10>)
 800858e:	681b      	ldr	r3, [r3, #0]
}
 8008590:	0018      	movs	r0, r3
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	46c0      	nop			; (mov r8, r8)
 8008598:	2000000c 	.word	0x2000000c

0800859c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80085a0:	f7ff fff2 	bl	8008588 <HAL_RCC_GetHCLKFreq>
 80085a4:	0001      	movs	r1, r0
 80085a6:	4b06      	ldr	r3, [pc, #24]	; (80085c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	0a1b      	lsrs	r3, r3, #8
 80085ac:	2207      	movs	r2, #7
 80085ae:	4013      	ands	r3, r2
 80085b0:	4a04      	ldr	r2, [pc, #16]	; (80085c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80085b2:	5cd3      	ldrb	r3, [r2, r3]
 80085b4:	40d9      	lsrs	r1, r3
 80085b6:	000b      	movs	r3, r1
}
 80085b8:	0018      	movs	r0, r3
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	46c0      	nop			; (mov r8, r8)
 80085c0:	40021000 	.word	0x40021000
 80085c4:	08013694 	.word	0x08013694

080085c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80085cc:	f7ff ffdc 	bl	8008588 <HAL_RCC_GetHCLKFreq>
 80085d0:	0001      	movs	r1, r0
 80085d2:	4b06      	ldr	r3, [pc, #24]	; (80085ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	0adb      	lsrs	r3, r3, #11
 80085d8:	2207      	movs	r2, #7
 80085da:	4013      	ands	r3, r2
 80085dc:	4a04      	ldr	r2, [pc, #16]	; (80085f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80085de:	5cd3      	ldrb	r3, [r2, r3]
 80085e0:	40d9      	lsrs	r1, r3
 80085e2:	000b      	movs	r3, r1
}
 80085e4:	0018      	movs	r0, r3
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	46c0      	nop			; (mov r8, r8)
 80085ec:	40021000 	.word	0x40021000
 80085f0:	08013694 	.word	0x08013694

080085f4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80085fc:	2317      	movs	r3, #23
 80085fe:	18fb      	adds	r3, r7, r3
 8008600:	2200      	movs	r2, #0
 8008602:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2220      	movs	r2, #32
 800860a:	4013      	ands	r3, r2
 800860c:	d106      	bne.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	2380      	movs	r3, #128	; 0x80
 8008614:	011b      	lsls	r3, r3, #4
 8008616:	4013      	ands	r3, r2
 8008618:	d100      	bne.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800861a:	e104      	b.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800861c:	4bb9      	ldr	r3, [pc, #740]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800861e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008620:	2380      	movs	r3, #128	; 0x80
 8008622:	055b      	lsls	r3, r3, #21
 8008624:	4013      	ands	r3, r2
 8008626:	d10a      	bne.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008628:	4bb6      	ldr	r3, [pc, #728]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800862a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800862c:	4bb5      	ldr	r3, [pc, #724]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800862e:	2180      	movs	r1, #128	; 0x80
 8008630:	0549      	lsls	r1, r1, #21
 8008632:	430a      	orrs	r2, r1
 8008634:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008636:	2317      	movs	r3, #23
 8008638:	18fb      	adds	r3, r7, r3
 800863a:	2201      	movs	r2, #1
 800863c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800863e:	4bb2      	ldr	r3, [pc, #712]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	2380      	movs	r3, #128	; 0x80
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	4013      	ands	r3, r2
 8008648:	d11a      	bne.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800864a:	4baf      	ldr	r3, [pc, #700]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	4bae      	ldr	r3, [pc, #696]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008650:	2180      	movs	r1, #128	; 0x80
 8008652:	0049      	lsls	r1, r1, #1
 8008654:	430a      	orrs	r2, r1
 8008656:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008658:	f7fe f8b0 	bl	80067bc <HAL_GetTick>
 800865c:	0003      	movs	r3, r0
 800865e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008660:	e008      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008662:	f7fe f8ab 	bl	80067bc <HAL_GetTick>
 8008666:	0002      	movs	r2, r0
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	2b64      	cmp	r3, #100	; 0x64
 800866e:	d901      	bls.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e143      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008674:	4ba4      	ldr	r3, [pc, #656]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	2380      	movs	r3, #128	; 0x80
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	4013      	ands	r3, r2
 800867e:	d0f0      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8008680:	4ba0      	ldr	r3, [pc, #640]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	23c0      	movs	r3, #192	; 0xc0
 8008686:	039b      	lsls	r3, r3, #14
 8008688:	4013      	ands	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	23c0      	movs	r3, #192	; 0xc0
 8008692:	039b      	lsls	r3, r3, #14
 8008694:	4013      	ands	r3, r2
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	429a      	cmp	r2, r3
 800869a:	d107      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	23c0      	movs	r3, #192	; 0xc0
 80086a2:	039b      	lsls	r3, r3, #14
 80086a4:	4013      	ands	r3, r2
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d013      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	23c0      	movs	r3, #192	; 0xc0
 80086b2:	029b      	lsls	r3, r3, #10
 80086b4:	401a      	ands	r2, r3
 80086b6:	23c0      	movs	r3, #192	; 0xc0
 80086b8:	029b      	lsls	r3, r3, #10
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d10a      	bne.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086be:	4b91      	ldr	r3, [pc, #580]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	2380      	movs	r3, #128	; 0x80
 80086c4:	029b      	lsls	r3, r3, #10
 80086c6:	401a      	ands	r2, r3
 80086c8:	2380      	movs	r3, #128	; 0x80
 80086ca:	029b      	lsls	r3, r3, #10
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d101      	bne.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e113      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80086d4:	4b8b      	ldr	r3, [pc, #556]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80086d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086d8:	23c0      	movs	r3, #192	; 0xc0
 80086da:	029b      	lsls	r3, r3, #10
 80086dc:	4013      	ands	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d049      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	23c0      	movs	r3, #192	; 0xc0
 80086ec:	029b      	lsls	r3, r3, #10
 80086ee:	4013      	ands	r3, r2
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d004      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2220      	movs	r2, #32
 80086fc:	4013      	ands	r3, r2
 80086fe:	d10d      	bne.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	23c0      	movs	r3, #192	; 0xc0
 8008706:	029b      	lsls	r3, r3, #10
 8008708:	4013      	ands	r3, r2
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	429a      	cmp	r2, r3
 800870e:	d034      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	2380      	movs	r3, #128	; 0x80
 8008716:	011b      	lsls	r3, r3, #4
 8008718:	4013      	ands	r3, r2
 800871a:	d02e      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800871c:	4b79      	ldr	r3, [pc, #484]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800871e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008720:	4a7a      	ldr	r2, [pc, #488]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8008722:	4013      	ands	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008726:	4b77      	ldr	r3, [pc, #476]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008728:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800872a:	4b76      	ldr	r3, [pc, #472]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800872c:	2180      	movs	r1, #128	; 0x80
 800872e:	0309      	lsls	r1, r1, #12
 8008730:	430a      	orrs	r2, r1
 8008732:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008734:	4b73      	ldr	r3, [pc, #460]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008738:	4b72      	ldr	r3, [pc, #456]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800873a:	4975      	ldr	r1, [pc, #468]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800873c:	400a      	ands	r2, r1
 800873e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008740:	4b70      	ldr	r3, [pc, #448]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	2380      	movs	r3, #128	; 0x80
 800874a:	005b      	lsls	r3, r3, #1
 800874c:	4013      	ands	r3, r2
 800874e:	d014      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008750:	f7fe f834 	bl	80067bc <HAL_GetTick>
 8008754:	0003      	movs	r3, r0
 8008756:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008758:	e009      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800875a:	f7fe f82f 	bl	80067bc <HAL_GetTick>
 800875e:	0002      	movs	r2, r0
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	4a6b      	ldr	r2, [pc, #428]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d901      	bls.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	e0c6      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800876e:	4b65      	ldr	r3, [pc, #404]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008770:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008772:	2380      	movs	r3, #128	; 0x80
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4013      	ands	r3, r2
 8008778:	d0ef      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	2380      	movs	r3, #128	; 0x80
 8008780:	011b      	lsls	r3, r3, #4
 8008782:	4013      	ands	r3, r2
 8008784:	d01f      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	23c0      	movs	r3, #192	; 0xc0
 800878c:	029b      	lsls	r3, r3, #10
 800878e:	401a      	ands	r2, r3
 8008790:	23c0      	movs	r3, #192	; 0xc0
 8008792:	029b      	lsls	r3, r3, #10
 8008794:	429a      	cmp	r2, r3
 8008796:	d10c      	bne.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8008798:	4b5a      	ldr	r3, [pc, #360]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a5e      	ldr	r2, [pc, #376]	; (8008918 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800879e:	4013      	ands	r3, r2
 80087a0:	0019      	movs	r1, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	689a      	ldr	r2, [r3, #8]
 80087a6:	23c0      	movs	r3, #192	; 0xc0
 80087a8:	039b      	lsls	r3, r3, #14
 80087aa:	401a      	ands	r2, r3
 80087ac:	4b55      	ldr	r3, [pc, #340]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80087ae:	430a      	orrs	r2, r1
 80087b0:	601a      	str	r2, [r3, #0]
 80087b2:	4b54      	ldr	r3, [pc, #336]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80087b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689a      	ldr	r2, [r3, #8]
 80087ba:	23c0      	movs	r3, #192	; 0xc0
 80087bc:	029b      	lsls	r3, r3, #10
 80087be:	401a      	ands	r2, r3
 80087c0:	4b50      	ldr	r3, [pc, #320]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80087c2:	430a      	orrs	r2, r1
 80087c4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2220      	movs	r2, #32
 80087cc:	4013      	ands	r3, r2
 80087ce:	d01f      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	23c0      	movs	r3, #192	; 0xc0
 80087d6:	029b      	lsls	r3, r3, #10
 80087d8:	401a      	ands	r2, r3
 80087da:	23c0      	movs	r3, #192	; 0xc0
 80087dc:	029b      	lsls	r3, r3, #10
 80087de:	429a      	cmp	r2, r3
 80087e0:	d10c      	bne.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x208>
 80087e2:	4b48      	ldr	r3, [pc, #288]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a4c      	ldr	r2, [pc, #304]	; (8008918 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80087e8:	4013      	ands	r3, r2
 80087ea:	0019      	movs	r1, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685a      	ldr	r2, [r3, #4]
 80087f0:	23c0      	movs	r3, #192	; 0xc0
 80087f2:	039b      	lsls	r3, r3, #14
 80087f4:	401a      	ands	r2, r3
 80087f6:	4b43      	ldr	r3, [pc, #268]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80087f8:	430a      	orrs	r2, r1
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	4b41      	ldr	r3, [pc, #260]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80087fe:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	23c0      	movs	r3, #192	; 0xc0
 8008806:	029b      	lsls	r3, r3, #10
 8008808:	401a      	ands	r2, r3
 800880a:	4b3e      	ldr	r3, [pc, #248]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800880c:	430a      	orrs	r2, r1
 800880e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008810:	2317      	movs	r3, #23
 8008812:	18fb      	adds	r3, r7, r3
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d105      	bne.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800881a:	4b3a      	ldr	r3, [pc, #232]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800881c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800881e:	4b39      	ldr	r3, [pc, #228]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008820:	493e      	ldr	r1, [pc, #248]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008822:	400a      	ands	r2, r1
 8008824:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2201      	movs	r2, #1
 800882c:	4013      	ands	r3, r2
 800882e:	d009      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008830:	4b34      	ldr	r3, [pc, #208]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008834:	2203      	movs	r2, #3
 8008836:	4393      	bics	r3, r2
 8008838:	0019      	movs	r1, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68da      	ldr	r2, [r3, #12]
 800883e:	4b31      	ldr	r3, [pc, #196]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008840:	430a      	orrs	r2, r1
 8008842:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2202      	movs	r2, #2
 800884a:	4013      	ands	r3, r2
 800884c:	d009      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800884e:	4b2d      	ldr	r3, [pc, #180]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8008850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008852:	220c      	movs	r2, #12
 8008854:	4393      	bics	r3, r2
 8008856:	0019      	movs	r1, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	691a      	ldr	r2, [r3, #16]
 800885c:	4b29      	ldr	r3, [pc, #164]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800885e:	430a      	orrs	r2, r1
 8008860:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2204      	movs	r2, #4
 8008868:	4013      	ands	r3, r2
 800886a:	d009      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800886c:	4b25      	ldr	r3, [pc, #148]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800886e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008870:	4a2b      	ldr	r2, [pc, #172]	; (8008920 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8008872:	4013      	ands	r3, r2
 8008874:	0019      	movs	r1, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	695a      	ldr	r2, [r3, #20]
 800887a:	4b22      	ldr	r3, [pc, #136]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800887c:	430a      	orrs	r2, r1
 800887e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2208      	movs	r2, #8
 8008886:	4013      	ands	r3, r2
 8008888:	d009      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800888a:	4b1e      	ldr	r3, [pc, #120]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800888c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800888e:	4a25      	ldr	r2, [pc, #148]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008890:	4013      	ands	r3, r2
 8008892:	0019      	movs	r1, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	699a      	ldr	r2, [r3, #24]
 8008898:	4b1a      	ldr	r3, [pc, #104]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800889a:	430a      	orrs	r2, r1
 800889c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	2380      	movs	r3, #128	; 0x80
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	4013      	ands	r3, r2
 80088a8:	d009      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80088aa:	4b16      	ldr	r3, [pc, #88]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80088ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ae:	4a17      	ldr	r2, [pc, #92]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80088b0:	4013      	ands	r3, r2
 80088b2:	0019      	movs	r1, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	69da      	ldr	r2, [r3, #28]
 80088b8:	4b12      	ldr	r3, [pc, #72]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80088ba:	430a      	orrs	r2, r1
 80088bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2240      	movs	r2, #64	; 0x40
 80088c4:	4013      	ands	r3, r2
 80088c6:	d009      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80088c8:	4b0e      	ldr	r3, [pc, #56]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80088ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088cc:	4a16      	ldr	r2, [pc, #88]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80088ce:	4013      	ands	r3, r2
 80088d0:	0019      	movs	r1, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088d6:	4b0b      	ldr	r3, [pc, #44]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80088d8:	430a      	orrs	r2, r1
 80088da:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2280      	movs	r2, #128	; 0x80
 80088e2:	4013      	ands	r3, r2
 80088e4:	d009      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80088e6:	4b07      	ldr	r3, [pc, #28]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80088e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ea:	4a10      	ldr	r2, [pc, #64]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088ec:	4013      	ands	r3, r2
 80088ee:	0019      	movs	r1, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a1a      	ldr	r2, [r3, #32]
 80088f4:	4b03      	ldr	r3, [pc, #12]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80088f6:	430a      	orrs	r2, r1
 80088f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	0018      	movs	r0, r3
 80088fe:	46bd      	mov	sp, r7
 8008900:	b006      	add	sp, #24
 8008902:	bd80      	pop	{r7, pc}
 8008904:	40021000 	.word	0x40021000
 8008908:	40007000 	.word	0x40007000
 800890c:	fffcffff 	.word	0xfffcffff
 8008910:	fff7ffff 	.word	0xfff7ffff
 8008914:	00001388 	.word	0x00001388
 8008918:	ffcfffff 	.word	0xffcfffff
 800891c:	efffffff 	.word	0xefffffff
 8008920:	fffff3ff 	.word	0xfffff3ff
 8008924:	ffffcfff 	.word	0xffffcfff
 8008928:	fbffffff 	.word	0xfbffffff
 800892c:	fff3ffff 	.word	0xfff3ffff

08008930 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e083      	b.n	8008a4a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	2b00      	cmp	r3, #0
 8008948:	d109      	bne.n	800895e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	2382      	movs	r3, #130	; 0x82
 8008950:	005b      	lsls	r3, r3, #1
 8008952:	429a      	cmp	r2, r3
 8008954:	d009      	beq.n	800896a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	61da      	str	r2, [r3, #28]
 800895c:	e005      	b.n	800896a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2251      	movs	r2, #81	; 0x51
 8008974:	5c9b      	ldrb	r3, [r3, r2]
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	d107      	bne.n	800898c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2250      	movs	r2, #80	; 0x50
 8008980:	2100      	movs	r1, #0
 8008982:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	0018      	movs	r0, r3
 8008988:	f7fd fbda 	bl	8006140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2251      	movs	r2, #81	; 0x51
 8008990:	2102      	movs	r1, #2
 8008992:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2140      	movs	r1, #64	; 0x40
 80089a0:	438a      	bics	r2, r1
 80089a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	2382      	movs	r3, #130	; 0x82
 80089aa:	005b      	lsls	r3, r3, #1
 80089ac:	401a      	ands	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6899      	ldr	r1, [r3, #8]
 80089b2:	2384      	movs	r3, #132	; 0x84
 80089b4:	021b      	lsls	r3, r3, #8
 80089b6:	400b      	ands	r3, r1
 80089b8:	431a      	orrs	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68d9      	ldr	r1, [r3, #12]
 80089be:	2380      	movs	r3, #128	; 0x80
 80089c0:	011b      	lsls	r3, r3, #4
 80089c2:	400b      	ands	r3, r1
 80089c4:	431a      	orrs	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	2102      	movs	r1, #2
 80089cc:	400b      	ands	r3, r1
 80089ce:	431a      	orrs	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	2101      	movs	r1, #1
 80089d6:	400b      	ands	r3, r1
 80089d8:	431a      	orrs	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6999      	ldr	r1, [r3, #24]
 80089de:	2380      	movs	r3, #128	; 0x80
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	400b      	ands	r3, r1
 80089e4:	431a      	orrs	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	2138      	movs	r1, #56	; 0x38
 80089ec:	400b      	ands	r3, r1
 80089ee:	431a      	orrs	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	2180      	movs	r1, #128	; 0x80
 80089f6:	400b      	ands	r3, r1
 80089f8:	431a      	orrs	r2, r3
 80089fa:	0011      	movs	r1, r2
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a00:	2380      	movs	r3, #128	; 0x80
 8008a02:	019b      	lsls	r3, r3, #6
 8008a04:	401a      	ands	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	0c1b      	lsrs	r3, r3, #16
 8008a14:	2204      	movs	r2, #4
 8008a16:	4013      	ands	r3, r2
 8008a18:	0019      	movs	r1, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	2210      	movs	r2, #16
 8008a20:	401a      	ands	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69da      	ldr	r2, [r3, #28]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4907      	ldr	r1, [pc, #28]	; (8008a54 <HAL_SPI_Init+0x124>)
 8008a36:	400a      	ands	r2, r1
 8008a38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2251      	movs	r2, #81	; 0x51
 8008a44:	2101      	movs	r1, #1
 8008a46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	0018      	movs	r0, r3
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	b002      	add	sp, #8
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	46c0      	nop			; (mov r8, r8)
 8008a54:	fffff7ff 	.word	0xfffff7ff

08008a58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	1dbb      	adds	r3, r7, #6
 8008a66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a68:	231f      	movs	r3, #31
 8008a6a:	18fb      	adds	r3, r7, r3
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2250      	movs	r2, #80	; 0x50
 8008a74:	5c9b      	ldrb	r3, [r3, r2]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d101      	bne.n	8008a7e <HAL_SPI_Transmit+0x26>
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	e145      	b.n	8008d0a <HAL_SPI_Transmit+0x2b2>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2250      	movs	r2, #80	; 0x50
 8008a82:	2101      	movs	r1, #1
 8008a84:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a86:	f7fd fe99 	bl	80067bc <HAL_GetTick>
 8008a8a:	0003      	movs	r3, r0
 8008a8c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008a8e:	2316      	movs	r3, #22
 8008a90:	18fb      	adds	r3, r7, r3
 8008a92:	1dba      	adds	r2, r7, #6
 8008a94:	8812      	ldrh	r2, [r2, #0]
 8008a96:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2251      	movs	r2, #81	; 0x51
 8008a9c:	5c9b      	ldrb	r3, [r3, r2]
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d004      	beq.n	8008aae <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8008aa4:	231f      	movs	r3, #31
 8008aa6:	18fb      	adds	r3, r7, r3
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	701a      	strb	r2, [r3, #0]
    goto error;
 8008aac:	e126      	b.n	8008cfc <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d003      	beq.n	8008abc <HAL_SPI_Transmit+0x64>
 8008ab4:	1dbb      	adds	r3, r7, #6
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d104      	bne.n	8008ac6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8008abc:	231f      	movs	r3, #31
 8008abe:	18fb      	adds	r3, r7, r3
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	701a      	strb	r2, [r3, #0]
    goto error;
 8008ac4:	e11a      	b.n	8008cfc <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2251      	movs	r2, #81	; 0x51
 8008aca:	2103      	movs	r1, #3
 8008acc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	1dba      	adds	r2, r7, #6
 8008ade:	8812      	ldrh	r2, [r2, #0]
 8008ae0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	1dba      	adds	r2, r7, #6
 8008ae6:	8812      	ldrh	r2, [r2, #0]
 8008ae8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	689a      	ldr	r2, [r3, #8]
 8008b0c:	2380      	movs	r3, #128	; 0x80
 8008b0e:	021b      	lsls	r3, r3, #8
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d110      	bne.n	8008b36 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2140      	movs	r1, #64	; 0x40
 8008b20:	438a      	bics	r2, r1
 8008b22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2180      	movs	r1, #128	; 0x80
 8008b30:	01c9      	lsls	r1, r1, #7
 8008b32:	430a      	orrs	r2, r1
 8008b34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2240      	movs	r2, #64	; 0x40
 8008b3e:	4013      	ands	r3, r2
 8008b40:	2b40      	cmp	r3, #64	; 0x40
 8008b42:	d007      	beq.n	8008b54 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2140      	movs	r1, #64	; 0x40
 8008b50:	430a      	orrs	r2, r1
 8008b52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	68da      	ldr	r2, [r3, #12]
 8008b58:	2380      	movs	r3, #128	; 0x80
 8008b5a:	011b      	lsls	r3, r3, #4
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d152      	bne.n	8008c06 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d004      	beq.n	8008b72 <HAL_SPI_Transmit+0x11a>
 8008b68:	2316      	movs	r3, #22
 8008b6a:	18fb      	adds	r3, r7, r3
 8008b6c:	881b      	ldrh	r3, [r3, #0]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d143      	bne.n	8008bfa <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b76:	881a      	ldrh	r2, [r3, #0]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b82:	1c9a      	adds	r2, r3, #2
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b96:	e030      	b.n	8008bfa <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d112      	bne.n	8008bcc <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008baa:	881a      	ldrh	r2, [r3, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb6:	1c9a      	adds	r2, r3, #2
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8008bca:	e016      	b.n	8008bfa <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bcc:	f7fd fdf6 	bl	80067bc <HAL_GetTick>
 8008bd0:	0002      	movs	r2, r0
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d802      	bhi.n	8008be2 <HAL_SPI_Transmit+0x18a>
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	3301      	adds	r3, #1
 8008be0:	d102      	bne.n	8008be8 <HAL_SPI_Transmit+0x190>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d108      	bne.n	8008bfa <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8008be8:	231f      	movs	r3, #31
 8008bea:	18fb      	adds	r3, r7, r3
 8008bec:	2203      	movs	r2, #3
 8008bee:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2251      	movs	r2, #81	; 0x51
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	5499      	strb	r1, [r3, r2]
          goto error;
 8008bf8:	e080      	b.n	8008cfc <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1c9      	bne.n	8008b98 <HAL_SPI_Transmit+0x140>
 8008c04:	e053      	b.n	8008cae <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d004      	beq.n	8008c18 <HAL_SPI_Transmit+0x1c0>
 8008c0e:	2316      	movs	r3, #22
 8008c10:	18fb      	adds	r3, r7, r3
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d145      	bne.n	8008ca4 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	330c      	adds	r3, #12
 8008c22:	7812      	ldrb	r2, [r2, #0]
 8008c24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008c3e:	e031      	b.n	8008ca4 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	2202      	movs	r2, #2
 8008c48:	4013      	ands	r3, r2
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d113      	bne.n	8008c76 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	330c      	adds	r3, #12
 8008c58:	7812      	ldrb	r2, [r2, #0]
 8008c5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c60:	1c5a      	adds	r2, r3, #1
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c74:	e016      	b.n	8008ca4 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c76:	f7fd fda1 	bl	80067bc <HAL_GetTick>
 8008c7a:	0002      	movs	r2, r0
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d802      	bhi.n	8008c8c <HAL_SPI_Transmit+0x234>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	d102      	bne.n	8008c92 <HAL_SPI_Transmit+0x23a>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d108      	bne.n	8008ca4 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8008c92:	231f      	movs	r3, #31
 8008c94:	18fb      	adds	r3, r7, r3
 8008c96:	2203      	movs	r2, #3
 8008c98:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2251      	movs	r2, #81	; 0x51
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	5499      	strb	r1, [r3, r2]
          goto error;
 8008ca2:	e02b      	b.n	8008cfc <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1c8      	bne.n	8008c40 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	f000 fa85 	bl	80091c4 <SPI_EndRxTxTransaction>
 8008cba:	1e03      	subs	r3, r0, #0
 8008cbc:	d002      	beq.n	8008cc4 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2220      	movs	r2, #32
 8008cc2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10a      	bne.n	8008ce2 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ccc:	2300      	movs	r3, #0
 8008cce:	613b      	str	r3, [r7, #16]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	613b      	str	r3, [r7, #16]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	613b      	str	r3, [r7, #16]
 8008ce0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d004      	beq.n	8008cf4 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8008cea:	231f      	movs	r3, #31
 8008cec:	18fb      	adds	r3, r7, r3
 8008cee:	2201      	movs	r2, #1
 8008cf0:	701a      	strb	r2, [r3, #0]
 8008cf2:	e003      	b.n	8008cfc <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2251      	movs	r2, #81	; 0x51
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2250      	movs	r2, #80	; 0x50
 8008d00:	2100      	movs	r1, #0
 8008d02:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008d04:	231f      	movs	r3, #31
 8008d06:	18fb      	adds	r3, r7, r3
 8008d08:	781b      	ldrb	r3, [r3, #0]
}
 8008d0a:	0018      	movs	r0, r3
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	b008      	add	sp, #32
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b08c      	sub	sp, #48	; 0x30
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	60f8      	str	r0, [r7, #12]
 8008d1a:	60b9      	str	r1, [r7, #8]
 8008d1c:	607a      	str	r2, [r7, #4]
 8008d1e:	001a      	movs	r2, r3
 8008d20:	1cbb      	adds	r3, r7, #2
 8008d22:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d24:	2301      	movs	r3, #1
 8008d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d28:	232b      	movs	r3, #43	; 0x2b
 8008d2a:	18fb      	adds	r3, r7, r3
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2250      	movs	r2, #80	; 0x50
 8008d34:	5c9b      	ldrb	r3, [r3, r2]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d101      	bne.n	8008d3e <HAL_SPI_TransmitReceive+0x2c>
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	e1b0      	b.n	80090a0 <HAL_SPI_TransmitReceive+0x38e>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2250      	movs	r2, #80	; 0x50
 8008d42:	2101      	movs	r1, #1
 8008d44:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d46:	f7fd fd39 	bl	80067bc <HAL_GetTick>
 8008d4a:	0003      	movs	r3, r0
 8008d4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d4e:	2023      	movs	r0, #35	; 0x23
 8008d50:	183b      	adds	r3, r7, r0
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	2151      	movs	r1, #81	; 0x51
 8008d56:	5c52      	ldrb	r2, [r2, r1]
 8008d58:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d60:	231a      	movs	r3, #26
 8008d62:	18fb      	adds	r3, r7, r3
 8008d64:	1cba      	adds	r2, r7, #2
 8008d66:	8812      	ldrh	r2, [r2, #0]
 8008d68:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d6a:	183b      	adds	r3, r7, r0
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d011      	beq.n	8008d96 <HAL_SPI_TransmitReceive+0x84>
 8008d72:	69fa      	ldr	r2, [r7, #28]
 8008d74:	2382      	movs	r3, #130	; 0x82
 8008d76:	005b      	lsls	r3, r3, #1
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d107      	bne.n	8008d8c <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d103      	bne.n	8008d8c <HAL_SPI_TransmitReceive+0x7a>
 8008d84:	183b      	adds	r3, r7, r0
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d004      	beq.n	8008d96 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8008d8c:	232b      	movs	r3, #43	; 0x2b
 8008d8e:	18fb      	adds	r3, r7, r3
 8008d90:	2202      	movs	r2, #2
 8008d92:	701a      	strb	r2, [r3, #0]
    goto error;
 8008d94:	e17d      	b.n	8009092 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d006      	beq.n	8008daa <HAL_SPI_TransmitReceive+0x98>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <HAL_SPI_TransmitReceive+0x98>
 8008da2:	1cbb      	adds	r3, r7, #2
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d104      	bne.n	8008db4 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8008daa:	232b      	movs	r3, #43	; 0x2b
 8008dac:	18fb      	adds	r3, r7, r3
 8008dae:	2201      	movs	r2, #1
 8008db0:	701a      	strb	r2, [r3, #0]
    goto error;
 8008db2:	e16e      	b.n	8009092 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2251      	movs	r2, #81	; 0x51
 8008db8:	5c9b      	ldrb	r3, [r3, r2]
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b04      	cmp	r3, #4
 8008dbe:	d003      	beq.n	8008dc8 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2251      	movs	r2, #81	; 0x51
 8008dc4:	2105      	movs	r1, #5
 8008dc6:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	1cba      	adds	r2, r7, #2
 8008dd8:	8812      	ldrh	r2, [r2, #0]
 8008dda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	1cba      	adds	r2, r7, #2
 8008de0:	8812      	ldrh	r2, [r2, #0]
 8008de2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	1cba      	adds	r2, r7, #2
 8008dee:	8812      	ldrh	r2, [r2, #0]
 8008df0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	1cba      	adds	r2, r7, #2
 8008df6:	8812      	ldrh	r2, [r2, #0]
 8008df8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2240      	movs	r2, #64	; 0x40
 8008e0e:	4013      	ands	r3, r2
 8008e10:	2b40      	cmp	r3, #64	; 0x40
 8008e12:	d007      	beq.n	8008e24 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2140      	movs	r1, #64	; 0x40
 8008e20:	430a      	orrs	r2, r1
 8008e22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	68da      	ldr	r2, [r3, #12]
 8008e28:	2380      	movs	r3, #128	; 0x80
 8008e2a:	011b      	lsls	r3, r3, #4
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d000      	beq.n	8008e32 <HAL_SPI_TransmitReceive+0x120>
 8008e30:	e07f      	b.n	8008f32 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d005      	beq.n	8008e46 <HAL_SPI_TransmitReceive+0x134>
 8008e3a:	231a      	movs	r3, #26
 8008e3c:	18fb      	adds	r3, r7, r3
 8008e3e:	881b      	ldrh	r3, [r3, #0]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d000      	beq.n	8008e46 <HAL_SPI_TransmitReceive+0x134>
 8008e44:	e06a      	b.n	8008f1c <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4a:	881a      	ldrh	r2, [r3, #0]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e56:	1c9a      	adds	r2, r3, #2
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	3b01      	subs	r3, #1
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e6a:	e057      	b.n	8008f1c <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	2202      	movs	r2, #2
 8008e74:	4013      	ands	r3, r2
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d11b      	bne.n	8008eb2 <HAL_SPI_TransmitReceive+0x1a0>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d016      	beq.n	8008eb2 <HAL_SPI_TransmitReceive+0x1a0>
 8008e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d113      	bne.n	8008eb2 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8e:	881a      	ldrh	r2, [r3, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9a:	1c9a      	adds	r2, r3, #2
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	4013      	ands	r3, r2
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d119      	bne.n	8008ef4 <HAL_SPI_TransmitReceive+0x1e2>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d014      	beq.n	8008ef4 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68da      	ldr	r2, [r3, #12]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed4:	b292      	uxth	r2, r2
 8008ed6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008edc:	1c9a      	adds	r2, r3, #2
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ef4:	f7fd fc62 	bl	80067bc <HAL_GetTick>
 8008ef8:	0002      	movs	r2, r0
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d80b      	bhi.n	8008f1c <HAL_SPI_TransmitReceive+0x20a>
 8008f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f06:	3301      	adds	r3, #1
 8008f08:	d008      	beq.n	8008f1c <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8008f0a:	232b      	movs	r3, #43	; 0x2b
 8008f0c:	18fb      	adds	r3, r7, r3
 8008f0e:	2203      	movs	r2, #3
 8008f10:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2251      	movs	r2, #81	; 0x51
 8008f16:	2101      	movs	r1, #1
 8008f18:	5499      	strb	r1, [r3, r2]
        goto error;
 8008f1a:	e0ba      	b.n	8009092 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1a2      	bne.n	8008e6c <HAL_SPI_TransmitReceive+0x15a>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d19d      	bne.n	8008e6c <HAL_SPI_TransmitReceive+0x15a>
 8008f30:	e083      	b.n	800903a <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d005      	beq.n	8008f46 <HAL_SPI_TransmitReceive+0x234>
 8008f3a:	231a      	movs	r3, #26
 8008f3c:	18fb      	adds	r3, r7, r3
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d000      	beq.n	8008f46 <HAL_SPI_TransmitReceive+0x234>
 8008f44:	e06f      	b.n	8009026 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	330c      	adds	r3, #12
 8008f50:	7812      	ldrb	r2, [r2, #0]
 8008f52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f58:	1c5a      	adds	r2, r3, #1
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	3b01      	subs	r3, #1
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f6c:	e05b      	b.n	8009026 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	2202      	movs	r2, #2
 8008f76:	4013      	ands	r3, r2
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d11c      	bne.n	8008fb6 <HAL_SPI_TransmitReceive+0x2a4>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d017      	beq.n	8008fb6 <HAL_SPI_TransmitReceive+0x2a4>
 8008f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d114      	bne.n	8008fb6 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	330c      	adds	r3, #12
 8008f96:	7812      	ldrb	r2, [r2, #0]
 8008f98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9e:	1c5a      	adds	r2, r3, #1
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	3b01      	subs	r3, #1
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d119      	bne.n	8008ff8 <HAL_SPI_TransmitReceive+0x2e6>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d014      	beq.n	8008ff8 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68da      	ldr	r2, [r3, #12]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd8:	b2d2      	uxtb	r2, r2
 8008fda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	3b01      	subs	r3, #1
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ff8:	f7fd fbe0 	bl	80067bc <HAL_GetTick>
 8008ffc:	0002      	movs	r2, r0
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009004:	429a      	cmp	r2, r3
 8009006:	d802      	bhi.n	800900e <HAL_SPI_TransmitReceive+0x2fc>
 8009008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900a:	3301      	adds	r3, #1
 800900c:	d102      	bne.n	8009014 <HAL_SPI_TransmitReceive+0x302>
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	2b00      	cmp	r3, #0
 8009012:	d108      	bne.n	8009026 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 8009014:	232b      	movs	r3, #43	; 0x2b
 8009016:	18fb      	adds	r3, r7, r3
 8009018:	2203      	movs	r2, #3
 800901a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2251      	movs	r2, #81	; 0x51
 8009020:	2101      	movs	r1, #1
 8009022:	5499      	strb	r1, [r3, r2]
        goto error;
 8009024:	e035      	b.n	8009092 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800902a:	b29b      	uxth	r3, r3
 800902c:	2b00      	cmp	r3, #0
 800902e:	d19e      	bne.n	8008f6e <HAL_SPI_TransmitReceive+0x25c>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009034:	b29b      	uxth	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d199      	bne.n	8008f6e <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800903a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	0018      	movs	r0, r3
 8009042:	f000 f8bf 	bl	80091c4 <SPI_EndRxTxTransaction>
 8009046:	1e03      	subs	r3, r0, #0
 8009048:	d007      	beq.n	800905a <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 800904a:	232b      	movs	r3, #43	; 0x2b
 800904c:	18fb      	adds	r3, r7, r3
 800904e:	2201      	movs	r2, #1
 8009050:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2220      	movs	r2, #32
 8009056:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009058:	e01b      	b.n	8009092 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10a      	bne.n	8009078 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009062:	2300      	movs	r3, #0
 8009064:	617b      	str	r3, [r7, #20]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	617b      	str	r3, [r7, #20]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	617b      	str	r3, [r7, #20]
 8009076:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800907c:	2b00      	cmp	r3, #0
 800907e:	d004      	beq.n	800908a <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8009080:	232b      	movs	r3, #43	; 0x2b
 8009082:	18fb      	adds	r3, r7, r3
 8009084:	2201      	movs	r2, #1
 8009086:	701a      	strb	r2, [r3, #0]
 8009088:	e003      	b.n	8009092 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2251      	movs	r2, #81	; 0x51
 800908e:	2101      	movs	r1, #1
 8009090:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2250      	movs	r2, #80	; 0x50
 8009096:	2100      	movs	r1, #0
 8009098:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800909a:	232b      	movs	r3, #43	; 0x2b
 800909c:	18fb      	adds	r3, r7, r3
 800909e:	781b      	ldrb	r3, [r3, #0]
}
 80090a0:	0018      	movs	r0, r3
 80090a2:	46bd      	mov	sp, r7
 80090a4:	b00c      	add	sp, #48	; 0x30
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	603b      	str	r3, [r7, #0]
 80090b4:	1dfb      	adds	r3, r7, #7
 80090b6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80090b8:	f7fd fb80 	bl	80067bc <HAL_GetTick>
 80090bc:	0002      	movs	r2, r0
 80090be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c0:	1a9b      	subs	r3, r3, r2
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	18d3      	adds	r3, r2, r3
 80090c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80090c8:	f7fd fb78 	bl	80067bc <HAL_GetTick>
 80090cc:	0003      	movs	r3, r0
 80090ce:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80090d0:	4b3a      	ldr	r3, [pc, #232]	; (80091bc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	015b      	lsls	r3, r3, #5
 80090d6:	0d1b      	lsrs	r3, r3, #20
 80090d8:	69fa      	ldr	r2, [r7, #28]
 80090da:	4353      	muls	r3, r2
 80090dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090de:	e058      	b.n	8009192 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	3301      	adds	r3, #1
 80090e4:	d055      	beq.n	8009192 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80090e6:	f7fd fb69 	bl	80067bc <HAL_GetTick>
 80090ea:	0002      	movs	r2, r0
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	69fa      	ldr	r2, [r7, #28]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d902      	bls.n	80090fc <SPI_WaitFlagStateUntilTimeout+0x54>
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d142      	bne.n	8009182 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	21e0      	movs	r1, #224	; 0xe0
 8009108:	438a      	bics	r2, r1
 800910a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	2382      	movs	r3, #130	; 0x82
 8009112:	005b      	lsls	r3, r3, #1
 8009114:	429a      	cmp	r2, r3
 8009116:	d113      	bne.n	8009140 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	689a      	ldr	r2, [r3, #8]
 800911c:	2380      	movs	r3, #128	; 0x80
 800911e:	021b      	lsls	r3, r3, #8
 8009120:	429a      	cmp	r2, r3
 8009122:	d005      	beq.n	8009130 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	689a      	ldr	r2, [r3, #8]
 8009128:	2380      	movs	r3, #128	; 0x80
 800912a:	00db      	lsls	r3, r3, #3
 800912c:	429a      	cmp	r2, r3
 800912e:	d107      	bne.n	8009140 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2140      	movs	r1, #64	; 0x40
 800913c:	438a      	bics	r2, r1
 800913e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009144:	2380      	movs	r3, #128	; 0x80
 8009146:	019b      	lsls	r3, r3, #6
 8009148:	429a      	cmp	r2, r3
 800914a:	d110      	bne.n	800916e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	491a      	ldr	r1, [pc, #104]	; (80091c0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009158:	400a      	ands	r2, r1
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2180      	movs	r1, #128	; 0x80
 8009168:	0189      	lsls	r1, r1, #6
 800916a:	430a      	orrs	r2, r1
 800916c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2251      	movs	r2, #81	; 0x51
 8009172:	2101      	movs	r1, #1
 8009174:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2250      	movs	r2, #80	; 0x50
 800917a:	2100      	movs	r1, #0
 800917c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e017      	b.n	80091b2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	3b01      	subs	r3, #1
 8009190:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	4013      	ands	r3, r2
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	425a      	negs	r2, r3
 80091a2:	4153      	adcs	r3, r2
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	001a      	movs	r2, r3
 80091a8:	1dfb      	adds	r3, r7, #7
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d197      	bne.n	80090e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	0018      	movs	r0, r3
 80091b4:	46bd      	mov	sp, r7
 80091b6:	b008      	add	sp, #32
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	46c0      	nop			; (mov r8, r8)
 80091bc:	2000000c 	.word	0x2000000c
 80091c0:	ffffdfff 	.word	0xffffdfff

080091c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af02      	add	r7, sp, #8
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80091d0:	4b1d      	ldr	r3, [pc, #116]	; (8009248 <SPI_EndRxTxTransaction+0x84>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	491d      	ldr	r1, [pc, #116]	; (800924c <SPI_EndRxTxTransaction+0x88>)
 80091d6:	0018      	movs	r0, r3
 80091d8:	f7f6 ffb2 	bl	8000140 <__udivsi3>
 80091dc:	0003      	movs	r3, r0
 80091de:	001a      	movs	r2, r3
 80091e0:	0013      	movs	r3, r2
 80091e2:	015b      	lsls	r3, r3, #5
 80091e4:	1a9b      	subs	r3, r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	189b      	adds	r3, r3, r2
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	2382      	movs	r3, #130	; 0x82
 80091f4:	005b      	lsls	r3, r3, #1
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d112      	bne.n	8009220 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	0013      	movs	r3, r2
 8009204:	2200      	movs	r2, #0
 8009206:	2180      	movs	r1, #128	; 0x80
 8009208:	f7ff ff4e 	bl	80090a8 <SPI_WaitFlagStateUntilTimeout>
 800920c:	1e03      	subs	r3, r0, #0
 800920e:	d016      	beq.n	800923e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009214:	2220      	movs	r2, #32
 8009216:	431a      	orrs	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e00f      	b.n	8009240 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00a      	beq.n	800923c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	3b01      	subs	r3, #1
 800922a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	2280      	movs	r2, #128	; 0x80
 8009234:	4013      	ands	r3, r2
 8009236:	2b80      	cmp	r3, #128	; 0x80
 8009238:	d0f2      	beq.n	8009220 <SPI_EndRxTxTransaction+0x5c>
 800923a:	e000      	b.n	800923e <SPI_EndRxTxTransaction+0x7a>
        break;
 800923c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	0018      	movs	r0, r3
 8009242:	46bd      	mov	sp, r7
 8009244:	b006      	add	sp, #24
 8009246:	bd80      	pop	{r7, pc}
 8009248:	2000000c 	.word	0x2000000c
 800924c:	016e3600 	.word	0x016e3600

08009250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e032      	b.n	80092c8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2239      	movs	r2, #57	; 0x39
 8009266:	5c9b      	ldrb	r3, [r3, r2]
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d107      	bne.n	800927e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2238      	movs	r2, #56	; 0x38
 8009272:	2100      	movs	r1, #0
 8009274:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	0018      	movs	r0, r3
 800927a:	f7fc ffd9 	bl	8006230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2239      	movs	r2, #57	; 0x39
 8009282:	2102      	movs	r1, #2
 8009284:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	3304      	adds	r3, #4
 800928e:	0019      	movs	r1, r3
 8009290:	0010      	movs	r0, r2
 8009292:	f000 f977 	bl	8009584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	223e      	movs	r2, #62	; 0x3e
 800929a:	2101      	movs	r1, #1
 800929c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	223a      	movs	r2, #58	; 0x3a
 80092a2:	2101      	movs	r1, #1
 80092a4:	5499      	strb	r1, [r3, r2]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	223b      	movs	r2, #59	; 0x3b
 80092aa:	2101      	movs	r1, #1
 80092ac:	5499      	strb	r1, [r3, r2]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	223c      	movs	r2, #60	; 0x3c
 80092b2:	2101      	movs	r1, #1
 80092b4:	5499      	strb	r1, [r3, r2]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	223d      	movs	r2, #61	; 0x3d
 80092ba:	2101      	movs	r1, #1
 80092bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2239      	movs	r2, #57	; 0x39
 80092c2:	2101      	movs	r1, #1
 80092c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	0018      	movs	r0, r3
 80092ca:	46bd      	mov	sp, r7
 80092cc:	b002      	add	sp, #8
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2239      	movs	r2, #57	; 0x39
 80092dc:	5c9b      	ldrb	r3, [r3, r2]
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d001      	beq.n	80092e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e03b      	b.n	8009360 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2239      	movs	r2, #57	; 0x39
 80092ec:	2102      	movs	r1, #2
 80092ee:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68da      	ldr	r2, [r3, #12]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2101      	movs	r1, #1
 80092fc:	430a      	orrs	r2, r1
 80092fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	2380      	movs	r3, #128	; 0x80
 8009306:	05db      	lsls	r3, r3, #23
 8009308:	429a      	cmp	r2, r3
 800930a:	d00e      	beq.n	800932a <HAL_TIM_Base_Start_IT+0x5a>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a15      	ldr	r2, [pc, #84]	; (8009368 <HAL_TIM_Base_Start_IT+0x98>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d009      	beq.n	800932a <HAL_TIM_Base_Start_IT+0x5a>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a14      	ldr	r2, [pc, #80]	; (800936c <HAL_TIM_Base_Start_IT+0x9c>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d004      	beq.n	800932a <HAL_TIM_Base_Start_IT+0x5a>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a12      	ldr	r2, [pc, #72]	; (8009370 <HAL_TIM_Base_Start_IT+0xa0>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d111      	bne.n	800934e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	2207      	movs	r2, #7
 8009332:	4013      	ands	r3, r2
 8009334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2b06      	cmp	r3, #6
 800933a:	d010      	beq.n	800935e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2101      	movs	r1, #1
 8009348:	430a      	orrs	r2, r1
 800934a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800934c:	e007      	b.n	800935e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2101      	movs	r1, #1
 800935a:	430a      	orrs	r2, r1
 800935c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	0018      	movs	r0, r3
 8009362:	46bd      	mov	sp, r7
 8009364:	b004      	add	sp, #16
 8009366:	bd80      	pop	{r7, pc}
 8009368:	40000400 	.word	0x40000400
 800936c:	40010800 	.word	0x40010800
 8009370:	40011400 	.word	0x40011400

08009374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	2202      	movs	r2, #2
 8009384:	4013      	ands	r3, r2
 8009386:	2b02      	cmp	r3, #2
 8009388:	d124      	bne.n	80093d4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	2202      	movs	r2, #2
 8009392:	4013      	ands	r3, r2
 8009394:	2b02      	cmp	r3, #2
 8009396:	d11d      	bne.n	80093d4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2203      	movs	r2, #3
 800939e:	4252      	negs	r2, r2
 80093a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	2203      	movs	r2, #3
 80093b0:	4013      	ands	r3, r2
 80093b2:	d004      	beq.n	80093be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	0018      	movs	r0, r3
 80093b8:	f000 f8cc 	bl	8009554 <HAL_TIM_IC_CaptureCallback>
 80093bc:	e007      	b.n	80093ce <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	0018      	movs	r0, r3
 80093c2:	f000 f8bf 	bl	8009544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	0018      	movs	r0, r3
 80093ca:	f000 f8cb 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	2204      	movs	r2, #4
 80093dc:	4013      	ands	r3, r2
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d125      	bne.n	800942e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	2204      	movs	r2, #4
 80093ea:	4013      	ands	r3, r2
 80093ec:	2b04      	cmp	r3, #4
 80093ee:	d11e      	bne.n	800942e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2205      	movs	r2, #5
 80093f6:	4252      	negs	r2, r2
 80093f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2202      	movs	r2, #2
 80093fe:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	699a      	ldr	r2, [r3, #24]
 8009406:	23c0      	movs	r3, #192	; 0xc0
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4013      	ands	r3, r2
 800940c:	d004      	beq.n	8009418 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	0018      	movs	r0, r3
 8009412:	f000 f89f 	bl	8009554 <HAL_TIM_IC_CaptureCallback>
 8009416:	e007      	b.n	8009428 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	0018      	movs	r0, r3
 800941c:	f000 f892 	bl	8009544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	0018      	movs	r0, r3
 8009424:	f000 f89e 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	2208      	movs	r2, #8
 8009436:	4013      	ands	r3, r2
 8009438:	2b08      	cmp	r3, #8
 800943a:	d124      	bne.n	8009486 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	2208      	movs	r2, #8
 8009444:	4013      	ands	r3, r2
 8009446:	2b08      	cmp	r3, #8
 8009448:	d11d      	bne.n	8009486 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2209      	movs	r2, #9
 8009450:	4252      	negs	r2, r2
 8009452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2204      	movs	r2, #4
 8009458:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	69db      	ldr	r3, [r3, #28]
 8009460:	2203      	movs	r2, #3
 8009462:	4013      	ands	r3, r2
 8009464:	d004      	beq.n	8009470 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	0018      	movs	r0, r3
 800946a:	f000 f873 	bl	8009554 <HAL_TIM_IC_CaptureCallback>
 800946e:	e007      	b.n	8009480 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	0018      	movs	r0, r3
 8009474:	f000 f866 	bl	8009544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	0018      	movs	r0, r3
 800947c:	f000 f872 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	2210      	movs	r2, #16
 800948e:	4013      	ands	r3, r2
 8009490:	2b10      	cmp	r3, #16
 8009492:	d125      	bne.n	80094e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	2210      	movs	r2, #16
 800949c:	4013      	ands	r3, r2
 800949e:	2b10      	cmp	r3, #16
 80094a0:	d11e      	bne.n	80094e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2211      	movs	r2, #17
 80094a8:	4252      	negs	r2, r2
 80094aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2208      	movs	r2, #8
 80094b0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	69da      	ldr	r2, [r3, #28]
 80094b8:	23c0      	movs	r3, #192	; 0xc0
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4013      	ands	r3, r2
 80094be:	d004      	beq.n	80094ca <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	0018      	movs	r0, r3
 80094c4:	f000 f846 	bl	8009554 <HAL_TIM_IC_CaptureCallback>
 80094c8:	e007      	b.n	80094da <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	0018      	movs	r0, r3
 80094ce:	f000 f839 	bl	8009544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	0018      	movs	r0, r3
 80094d6:	f000 f845 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	2201      	movs	r2, #1
 80094e8:	4013      	ands	r3, r2
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d10f      	bne.n	800950e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	2201      	movs	r2, #1
 80094f6:	4013      	ands	r3, r2
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d108      	bne.n	800950e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2202      	movs	r2, #2
 8009502:	4252      	negs	r2, r2
 8009504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	0018      	movs	r0, r3
 800950a:	f7fc fd9d 	bl	8006048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	2240      	movs	r2, #64	; 0x40
 8009516:	4013      	ands	r3, r2
 8009518:	2b40      	cmp	r3, #64	; 0x40
 800951a:	d10f      	bne.n	800953c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	2240      	movs	r2, #64	; 0x40
 8009524:	4013      	ands	r3, r2
 8009526:	2b40      	cmp	r3, #64	; 0x40
 8009528:	d108      	bne.n	800953c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2241      	movs	r2, #65	; 0x41
 8009530:	4252      	negs	r2, r2
 8009532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	0018      	movs	r0, r3
 8009538:	f000 f81c 	bl	8009574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800953c:	46c0      	nop			; (mov r8, r8)
 800953e:	46bd      	mov	sp, r7
 8009540:	b002      	add	sp, #8
 8009542:	bd80      	pop	{r7, pc}

08009544 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800954c:	46c0      	nop			; (mov r8, r8)
 800954e:	46bd      	mov	sp, r7
 8009550:	b002      	add	sp, #8
 8009552:	bd80      	pop	{r7, pc}

08009554 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800955c:	46c0      	nop			; (mov r8, r8)
 800955e:	46bd      	mov	sp, r7
 8009560:	b002      	add	sp, #8
 8009562:	bd80      	pop	{r7, pc}

08009564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800956c:	46c0      	nop			; (mov r8, r8)
 800956e:	46bd      	mov	sp, r7
 8009570:	b002      	add	sp, #8
 8009572:	bd80      	pop	{r7, pc}

08009574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800957c:	46c0      	nop			; (mov r8, r8)
 800957e:	46bd      	mov	sp, r7
 8009580:	b002      	add	sp, #8
 8009582:	bd80      	pop	{r7, pc}

08009584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	2380      	movs	r3, #128	; 0x80
 8009598:	05db      	lsls	r3, r3, #23
 800959a:	429a      	cmp	r2, r3
 800959c:	d00b      	beq.n	80095b6 <TIM_Base_SetConfig+0x32>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a23      	ldr	r2, [pc, #140]	; (8009630 <TIM_Base_SetConfig+0xac>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d007      	beq.n	80095b6 <TIM_Base_SetConfig+0x32>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a22      	ldr	r2, [pc, #136]	; (8009634 <TIM_Base_SetConfig+0xb0>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d003      	beq.n	80095b6 <TIM_Base_SetConfig+0x32>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	4a21      	ldr	r2, [pc, #132]	; (8009638 <TIM_Base_SetConfig+0xb4>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d108      	bne.n	80095c8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2270      	movs	r2, #112	; 0x70
 80095ba:	4393      	bics	r3, r2
 80095bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	2380      	movs	r3, #128	; 0x80
 80095cc:	05db      	lsls	r3, r3, #23
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d00b      	beq.n	80095ea <TIM_Base_SetConfig+0x66>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a16      	ldr	r2, [pc, #88]	; (8009630 <TIM_Base_SetConfig+0xac>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d007      	beq.n	80095ea <TIM_Base_SetConfig+0x66>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a15      	ldr	r2, [pc, #84]	; (8009634 <TIM_Base_SetConfig+0xb0>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d003      	beq.n	80095ea <TIM_Base_SetConfig+0x66>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a14      	ldr	r2, [pc, #80]	; (8009638 <TIM_Base_SetConfig+0xb4>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d108      	bne.n	80095fc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	4a13      	ldr	r2, [pc, #76]	; (800963c <TIM_Base_SetConfig+0xb8>)
 80095ee:	4013      	ands	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2280      	movs	r2, #128	; 0x80
 8009600:	4393      	bics	r3, r2
 8009602:	001a      	movs	r2, r3
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	4313      	orrs	r3, r2
 800960a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	689a      	ldr	r2, [r3, #8]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	615a      	str	r2, [r3, #20]
}
 8009628:	46c0      	nop			; (mov r8, r8)
 800962a:	46bd      	mov	sp, r7
 800962c:	b004      	add	sp, #16
 800962e:	bd80      	pop	{r7, pc}
 8009630:	40000400 	.word	0x40000400
 8009634:	40010800 	.word	0x40010800
 8009638:	40011400 	.word	0x40011400
 800963c:	fffffcff 	.word	0xfffffcff

08009640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2238      	movs	r2, #56	; 0x38
 800964e:	5c9b      	ldrb	r3, [r3, r2]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d101      	bne.n	8009658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009654:	2302      	movs	r3, #2
 8009656:	e047      	b.n	80096e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2238      	movs	r2, #56	; 0x38
 800965c:	2101      	movs	r1, #1
 800965e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2239      	movs	r2, #57	; 0x39
 8009664:	2102      	movs	r1, #2
 8009666:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2270      	movs	r2, #112	; 0x70
 800967c:	4393      	bics	r3, r2
 800967e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	4313      	orrs	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	2380      	movs	r3, #128	; 0x80
 8009698:	05db      	lsls	r3, r3, #23
 800969a:	429a      	cmp	r2, r3
 800969c:	d00e      	beq.n	80096bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a13      	ldr	r2, [pc, #76]	; (80096f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d009      	beq.n	80096bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a11      	ldr	r2, [pc, #68]	; (80096f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d004      	beq.n	80096bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a10      	ldr	r2, [pc, #64]	; (80096f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d10c      	bne.n	80096d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	2280      	movs	r2, #128	; 0x80
 80096c0:	4393      	bics	r3, r2
 80096c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2239      	movs	r2, #57	; 0x39
 80096da:	2101      	movs	r1, #1
 80096dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2238      	movs	r2, #56	; 0x38
 80096e2:	2100      	movs	r1, #0
 80096e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	0018      	movs	r0, r3
 80096ea:	46bd      	mov	sp, r7
 80096ec:	b004      	add	sp, #16
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	40000400 	.word	0x40000400
 80096f4:	40010800 	.word	0x40010800
 80096f8:	40011400 	.word	0x40011400

080096fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e044      	b.n	8009798 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009712:	2b00      	cmp	r3, #0
 8009714:	d107      	bne.n	8009726 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2278      	movs	r2, #120	; 0x78
 800971a:	2100      	movs	r1, #0
 800971c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	0018      	movs	r0, r3
 8009722:	f7fc fdbb 	bl	800629c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2224      	movs	r2, #36	; 0x24
 800972a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2101      	movs	r1, #1
 8009738:	438a      	bics	r2, r1
 800973a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	0018      	movs	r0, r3
 8009740:	f000 fbce 	bl	8009ee0 <UART_SetConfig>
 8009744:	0003      	movs	r3, r0
 8009746:	2b01      	cmp	r3, #1
 8009748:	d101      	bne.n	800974e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e024      	b.n	8009798 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	0018      	movs	r0, r3
 800975a:	f000 fe5f 	bl	800a41c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	490d      	ldr	r1, [pc, #52]	; (80097a0 <HAL_UART_Init+0xa4>)
 800976a:	400a      	ands	r2, r1
 800976c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	689a      	ldr	r2, [r3, #8]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	212a      	movs	r1, #42	; 0x2a
 800977a:	438a      	bics	r2, r1
 800977c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2101      	movs	r1, #1
 800978a:	430a      	orrs	r2, r1
 800978c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	0018      	movs	r0, r3
 8009792:	f000 fef7 	bl	800a584 <UART_CheckIdleState>
 8009796:	0003      	movs	r3, r0
}
 8009798:	0018      	movs	r0, r3
 800979a:	46bd      	mov	sp, r7
 800979c:	b002      	add	sp, #8
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	ffffb7ff 	.word	0xffffb7ff

080097a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b08a      	sub	sp, #40	; 0x28
 80097a8:	af02      	add	r7, sp, #8
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	603b      	str	r3, [r7, #0]
 80097b0:	1dbb      	adds	r3, r7, #6
 80097b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097b8:	2b20      	cmp	r3, #32
 80097ba:	d000      	beq.n	80097be <HAL_UART_Transmit+0x1a>
 80097bc:	e08c      	b.n	80098d8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <HAL_UART_Transmit+0x28>
 80097c4:	1dbb      	adds	r3, r7, #6
 80097c6:	881b      	ldrh	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e084      	b.n	80098da <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	689a      	ldr	r2, [r3, #8]
 80097d4:	2380      	movs	r3, #128	; 0x80
 80097d6:	015b      	lsls	r3, r3, #5
 80097d8:	429a      	cmp	r2, r3
 80097da:	d109      	bne.n	80097f0 <HAL_UART_Transmit+0x4c>
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d105      	bne.n	80097f0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2201      	movs	r2, #1
 80097e8:	4013      	ands	r3, r2
 80097ea:	d001      	beq.n	80097f0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e074      	b.n	80098da <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2284      	movs	r2, #132	; 0x84
 80097f4:	2100      	movs	r1, #0
 80097f6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2221      	movs	r2, #33	; 0x21
 80097fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097fe:	f7fc ffdd 	bl	80067bc <HAL_GetTick>
 8009802:	0003      	movs	r3, r0
 8009804:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	1dba      	adds	r2, r7, #6
 800980a:	2150      	movs	r1, #80	; 0x50
 800980c:	8812      	ldrh	r2, [r2, #0]
 800980e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	1dba      	adds	r2, r7, #6
 8009814:	2152      	movs	r1, #82	; 0x52
 8009816:	8812      	ldrh	r2, [r2, #0]
 8009818:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	689a      	ldr	r2, [r3, #8]
 800981e:	2380      	movs	r3, #128	; 0x80
 8009820:	015b      	lsls	r3, r3, #5
 8009822:	429a      	cmp	r2, r3
 8009824:	d108      	bne.n	8009838 <HAL_UART_Transmit+0x94>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d104      	bne.n	8009838 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800982e:	2300      	movs	r3, #0
 8009830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	61bb      	str	r3, [r7, #24]
 8009836:	e003      	b.n	8009840 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800983c:	2300      	movs	r3, #0
 800983e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009840:	e02f      	b.n	80098a2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	0013      	movs	r3, r2
 800984c:	2200      	movs	r2, #0
 800984e:	2180      	movs	r1, #128	; 0x80
 8009850:	f000 ff40 	bl	800a6d4 <UART_WaitOnFlagUntilTimeout>
 8009854:	1e03      	subs	r3, r0, #0
 8009856:	d004      	beq.n	8009862 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2220      	movs	r2, #32
 800985c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e03b      	b.n	80098da <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10b      	bne.n	8009880 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	001a      	movs	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	05d2      	lsls	r2, r2, #23
 8009874:	0dd2      	lsrs	r2, r2, #23
 8009876:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	3302      	adds	r3, #2
 800987c:	61bb      	str	r3, [r7, #24]
 800987e:	e007      	b.n	8009890 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	781a      	ldrb	r2, [r3, #0]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	3301      	adds	r3, #1
 800988e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2252      	movs	r2, #82	; 0x52
 8009894:	5a9b      	ldrh	r3, [r3, r2]
 8009896:	b29b      	uxth	r3, r3
 8009898:	3b01      	subs	r3, #1
 800989a:	b299      	uxth	r1, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2252      	movs	r2, #82	; 0x52
 80098a0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2252      	movs	r2, #82	; 0x52
 80098a6:	5a9b      	ldrh	r3, [r3, r2]
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1c9      	bne.n	8009842 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	0013      	movs	r3, r2
 80098b8:	2200      	movs	r2, #0
 80098ba:	2140      	movs	r1, #64	; 0x40
 80098bc:	f000 ff0a 	bl	800a6d4 <UART_WaitOnFlagUntilTimeout>
 80098c0:	1e03      	subs	r3, r0, #0
 80098c2:	d004      	beq.n	80098ce <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2220      	movs	r2, #32
 80098c8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e005      	b.n	80098da <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2220      	movs	r2, #32
 80098d2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	e000      	b.n	80098da <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80098d8:	2302      	movs	r3, #2
  }
}
 80098da:	0018      	movs	r0, r3
 80098dc:	46bd      	mov	sp, r7
 80098de:	b008      	add	sp, #32
 80098e0:	bd80      	pop	{r7, pc}
	...

080098e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098e4:	b590      	push	{r4, r7, lr}
 80098e6:	b0ab      	sub	sp, #172	; 0xac
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	69db      	ldr	r3, [r3, #28]
 80098f2:	22a4      	movs	r2, #164	; 0xa4
 80098f4:	18b9      	adds	r1, r7, r2
 80098f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	20a0      	movs	r0, #160	; 0xa0
 8009900:	1839      	adds	r1, r7, r0
 8009902:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	219c      	movs	r1, #156	; 0x9c
 800990c:	1879      	adds	r1, r7, r1
 800990e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009910:	0011      	movs	r1, r2
 8009912:	18bb      	adds	r3, r7, r2
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a99      	ldr	r2, [pc, #612]	; (8009b7c <HAL_UART_IRQHandler+0x298>)
 8009918:	4013      	ands	r3, r2
 800991a:	2298      	movs	r2, #152	; 0x98
 800991c:	18bc      	adds	r4, r7, r2
 800991e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8009920:	18bb      	adds	r3, r7, r2
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d114      	bne.n	8009952 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009928:	187b      	adds	r3, r7, r1
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2220      	movs	r2, #32
 800992e:	4013      	ands	r3, r2
 8009930:	d00f      	beq.n	8009952 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009932:	183b      	adds	r3, r7, r0
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2220      	movs	r2, #32
 8009938:	4013      	ands	r3, r2
 800993a:	d00a      	beq.n	8009952 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009940:	2b00      	cmp	r3, #0
 8009942:	d100      	bne.n	8009946 <HAL_UART_IRQHandler+0x62>
 8009944:	e2a0      	b.n	8009e88 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	0010      	movs	r0, r2
 800994e:	4798      	blx	r3
      }
      return;
 8009950:	e29a      	b.n	8009e88 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009952:	2398      	movs	r3, #152	; 0x98
 8009954:	18fb      	adds	r3, r7, r3
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d100      	bne.n	800995e <HAL_UART_IRQHandler+0x7a>
 800995c:	e114      	b.n	8009b88 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800995e:	239c      	movs	r3, #156	; 0x9c
 8009960:	18fb      	adds	r3, r7, r3
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2201      	movs	r2, #1
 8009966:	4013      	ands	r3, r2
 8009968:	d106      	bne.n	8009978 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800996a:	23a0      	movs	r3, #160	; 0xa0
 800996c:	18fb      	adds	r3, r7, r3
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a83      	ldr	r2, [pc, #524]	; (8009b80 <HAL_UART_IRQHandler+0x29c>)
 8009972:	4013      	ands	r3, r2
 8009974:	d100      	bne.n	8009978 <HAL_UART_IRQHandler+0x94>
 8009976:	e107      	b.n	8009b88 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009978:	23a4      	movs	r3, #164	; 0xa4
 800997a:	18fb      	adds	r3, r7, r3
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2201      	movs	r2, #1
 8009980:	4013      	ands	r3, r2
 8009982:	d012      	beq.n	80099aa <HAL_UART_IRQHandler+0xc6>
 8009984:	23a0      	movs	r3, #160	; 0xa0
 8009986:	18fb      	adds	r3, r7, r3
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	2380      	movs	r3, #128	; 0x80
 800998c:	005b      	lsls	r3, r3, #1
 800998e:	4013      	ands	r3, r2
 8009990:	d00b      	beq.n	80099aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2201      	movs	r2, #1
 8009998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2284      	movs	r2, #132	; 0x84
 800999e:	589b      	ldr	r3, [r3, r2]
 80099a0:	2201      	movs	r2, #1
 80099a2:	431a      	orrs	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2184      	movs	r1, #132	; 0x84
 80099a8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099aa:	23a4      	movs	r3, #164	; 0xa4
 80099ac:	18fb      	adds	r3, r7, r3
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2202      	movs	r2, #2
 80099b2:	4013      	ands	r3, r2
 80099b4:	d011      	beq.n	80099da <HAL_UART_IRQHandler+0xf6>
 80099b6:	239c      	movs	r3, #156	; 0x9c
 80099b8:	18fb      	adds	r3, r7, r3
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2201      	movs	r2, #1
 80099be:	4013      	ands	r3, r2
 80099c0:	d00b      	beq.n	80099da <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2202      	movs	r2, #2
 80099c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2284      	movs	r2, #132	; 0x84
 80099ce:	589b      	ldr	r3, [r3, r2]
 80099d0:	2204      	movs	r2, #4
 80099d2:	431a      	orrs	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2184      	movs	r1, #132	; 0x84
 80099d8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099da:	23a4      	movs	r3, #164	; 0xa4
 80099dc:	18fb      	adds	r3, r7, r3
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2204      	movs	r2, #4
 80099e2:	4013      	ands	r3, r2
 80099e4:	d011      	beq.n	8009a0a <HAL_UART_IRQHandler+0x126>
 80099e6:	239c      	movs	r3, #156	; 0x9c
 80099e8:	18fb      	adds	r3, r7, r3
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2201      	movs	r2, #1
 80099ee:	4013      	ands	r3, r2
 80099f0:	d00b      	beq.n	8009a0a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2204      	movs	r2, #4
 80099f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2284      	movs	r2, #132	; 0x84
 80099fe:	589b      	ldr	r3, [r3, r2]
 8009a00:	2202      	movs	r2, #2
 8009a02:	431a      	orrs	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2184      	movs	r1, #132	; 0x84
 8009a08:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009a0a:	23a4      	movs	r3, #164	; 0xa4
 8009a0c:	18fb      	adds	r3, r7, r3
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2208      	movs	r2, #8
 8009a12:	4013      	ands	r3, r2
 8009a14:	d017      	beq.n	8009a46 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a16:	23a0      	movs	r3, #160	; 0xa0
 8009a18:	18fb      	adds	r3, r7, r3
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	4013      	ands	r3, r2
 8009a20:	d105      	bne.n	8009a2e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009a22:	239c      	movs	r3, #156	; 0x9c
 8009a24:	18fb      	adds	r3, r7, r3
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009a2c:	d00b      	beq.n	8009a46 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2208      	movs	r2, #8
 8009a34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2284      	movs	r2, #132	; 0x84
 8009a3a:	589b      	ldr	r3, [r3, r2]
 8009a3c:	2208      	movs	r2, #8
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2184      	movs	r1, #132	; 0x84
 8009a44:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009a46:	23a4      	movs	r3, #164	; 0xa4
 8009a48:	18fb      	adds	r3, r7, r3
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	2380      	movs	r3, #128	; 0x80
 8009a4e:	011b      	lsls	r3, r3, #4
 8009a50:	4013      	ands	r3, r2
 8009a52:	d013      	beq.n	8009a7c <HAL_UART_IRQHandler+0x198>
 8009a54:	23a0      	movs	r3, #160	; 0xa0
 8009a56:	18fb      	adds	r3, r7, r3
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	2380      	movs	r3, #128	; 0x80
 8009a5c:	04db      	lsls	r3, r3, #19
 8009a5e:	4013      	ands	r3, r2
 8009a60:	d00c      	beq.n	8009a7c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2280      	movs	r2, #128	; 0x80
 8009a68:	0112      	lsls	r2, r2, #4
 8009a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2284      	movs	r2, #132	; 0x84
 8009a70:	589b      	ldr	r3, [r3, r2]
 8009a72:	2220      	movs	r2, #32
 8009a74:	431a      	orrs	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2184      	movs	r1, #132	; 0x84
 8009a7a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2284      	movs	r2, #132	; 0x84
 8009a80:	589b      	ldr	r3, [r3, r2]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d100      	bne.n	8009a88 <HAL_UART_IRQHandler+0x1a4>
 8009a86:	e201      	b.n	8009e8c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009a88:	23a4      	movs	r3, #164	; 0xa4
 8009a8a:	18fb      	adds	r3, r7, r3
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2220      	movs	r2, #32
 8009a90:	4013      	ands	r3, r2
 8009a92:	d00e      	beq.n	8009ab2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009a94:	23a0      	movs	r3, #160	; 0xa0
 8009a96:	18fb      	adds	r3, r7, r3
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2220      	movs	r2, #32
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	d008      	beq.n	8009ab2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d004      	beq.n	8009ab2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	0010      	movs	r0, r2
 8009ab0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2284      	movs	r2, #132	; 0x84
 8009ab6:	589b      	ldr	r3, [r3, r2]
 8009ab8:	2194      	movs	r1, #148	; 0x94
 8009aba:	187a      	adds	r2, r7, r1
 8009abc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	2240      	movs	r2, #64	; 0x40
 8009ac6:	4013      	ands	r3, r2
 8009ac8:	2b40      	cmp	r3, #64	; 0x40
 8009aca:	d004      	beq.n	8009ad6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009acc:	187b      	adds	r3, r7, r1
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2228      	movs	r2, #40	; 0x28
 8009ad2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ad4:	d047      	beq.n	8009b66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	0018      	movs	r0, r3
 8009ada:	f000 fe65 	bl	800a7a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	2240      	movs	r2, #64	; 0x40
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	2b40      	cmp	r3, #64	; 0x40
 8009aea:	d137      	bne.n	8009b5c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009aec:	f3ef 8310 	mrs	r3, PRIMASK
 8009af0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8009af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009af4:	2090      	movs	r0, #144	; 0x90
 8009af6:	183a      	adds	r2, r7, r0
 8009af8:	6013      	str	r3, [r2, #0]
 8009afa:	2301      	movs	r3, #1
 8009afc:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b00:	f383 8810 	msr	PRIMASK, r3
}
 8009b04:	46c0      	nop			; (mov r8, r8)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689a      	ldr	r2, [r3, #8]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2140      	movs	r1, #64	; 0x40
 8009b12:	438a      	bics	r2, r1
 8009b14:	609a      	str	r2, [r3, #8]
 8009b16:	183b      	adds	r3, r7, r0
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b1e:	f383 8810 	msr	PRIMASK, r3
}
 8009b22:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d012      	beq.n	8009b52 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b30:	4a14      	ldr	r2, [pc, #80]	; (8009b84 <HAL_UART_IRQHandler+0x2a0>)
 8009b32:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b38:	0018      	movs	r0, r3
 8009b3a:	f7fc ff8b 	bl	8006a54 <HAL_DMA_Abort_IT>
 8009b3e:	1e03      	subs	r3, r0, #0
 8009b40:	d01a      	beq.n	8009b78 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b4c:	0018      	movs	r0, r3
 8009b4e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b50:	e012      	b.n	8009b78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	0018      	movs	r0, r3
 8009b56:	f000 f9af 	bl	8009eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b5a:	e00d      	b.n	8009b78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	0018      	movs	r0, r3
 8009b60:	f000 f9aa 	bl	8009eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b64:	e008      	b.n	8009b78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	0018      	movs	r0, r3
 8009b6a:	f000 f9a5 	bl	8009eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2284      	movs	r2, #132	; 0x84
 8009b72:	2100      	movs	r1, #0
 8009b74:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8009b76:	e189      	b.n	8009e8c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b78:	46c0      	nop			; (mov r8, r8)
    return;
 8009b7a:	e187      	b.n	8009e8c <HAL_UART_IRQHandler+0x5a8>
 8009b7c:	0000080f 	.word	0x0000080f
 8009b80:	04000120 	.word	0x04000120
 8009b84:	0800a871 	.word	0x0800a871

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d000      	beq.n	8009b92 <HAL_UART_IRQHandler+0x2ae>
 8009b90:	e13b      	b.n	8009e0a <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b92:	23a4      	movs	r3, #164	; 0xa4
 8009b94:	18fb      	adds	r3, r7, r3
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2210      	movs	r2, #16
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	d100      	bne.n	8009ba0 <HAL_UART_IRQHandler+0x2bc>
 8009b9e:	e134      	b.n	8009e0a <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009ba0:	23a0      	movs	r3, #160	; 0xa0
 8009ba2:	18fb      	adds	r3, r7, r3
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2210      	movs	r2, #16
 8009ba8:	4013      	ands	r3, r2
 8009baa:	d100      	bne.n	8009bae <HAL_UART_IRQHandler+0x2ca>
 8009bac:	e12d      	b.n	8009e0a <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2210      	movs	r2, #16
 8009bb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	2240      	movs	r2, #64	; 0x40
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	2b40      	cmp	r3, #64	; 0x40
 8009bc2:	d000      	beq.n	8009bc6 <HAL_UART_IRQHandler+0x2e2>
 8009bc4:	e0a1      	b.n	8009d0a <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	217e      	movs	r1, #126	; 0x7e
 8009bd0:	187b      	adds	r3, r7, r1
 8009bd2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8009bd4:	187b      	adds	r3, r7, r1
 8009bd6:	881b      	ldrh	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d100      	bne.n	8009bde <HAL_UART_IRQHandler+0x2fa>
 8009bdc:	e158      	b.n	8009e90 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2258      	movs	r2, #88	; 0x58
 8009be2:	5a9b      	ldrh	r3, [r3, r2]
 8009be4:	187a      	adds	r2, r7, r1
 8009be6:	8812      	ldrh	r2, [r2, #0]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d300      	bcc.n	8009bee <HAL_UART_IRQHandler+0x30a>
 8009bec:	e150      	b.n	8009e90 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	187a      	adds	r2, r7, r1
 8009bf2:	215a      	movs	r1, #90	; 0x5a
 8009bf4:	8812      	ldrh	r2, [r2, #0]
 8009bf6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2220      	movs	r2, #32
 8009c02:	4013      	ands	r3, r2
 8009c04:	d16f      	bne.n	8009ce6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c06:	f3ef 8310 	mrs	r3, PRIMASK
 8009c0a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c10:	2301      	movs	r3, #1
 8009c12:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c16:	f383 8810 	msr	PRIMASK, r3
}
 8009c1a:	46c0      	nop			; (mov r8, r8)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	499e      	ldr	r1, [pc, #632]	; (8009ea0 <HAL_UART_IRQHandler+0x5bc>)
 8009c28:	400a      	ands	r2, r1
 8009c2a:	601a      	str	r2, [r3, #0]
 8009c2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c32:	f383 8810 	msr	PRIMASK, r3
}
 8009c36:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c38:	f3ef 8310 	mrs	r3, PRIMASK
 8009c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8009c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c40:	677b      	str	r3, [r7, #116]	; 0x74
 8009c42:	2301      	movs	r3, #1
 8009c44:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c48:	f383 8810 	msr	PRIMASK, r3
}
 8009c4c:	46c0      	nop			; (mov r8, r8)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	689a      	ldr	r2, [r3, #8]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2101      	movs	r1, #1
 8009c5a:	438a      	bics	r2, r1
 8009c5c:	609a      	str	r2, [r3, #8]
 8009c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c60:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c64:	f383 8810 	msr	PRIMASK, r3
}
 8009c68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8009c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c72:	673b      	str	r3, [r7, #112]	; 0x70
 8009c74:	2301      	movs	r3, #1
 8009c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c7a:	f383 8810 	msr	PRIMASK, r3
}
 8009c7e:	46c0      	nop			; (mov r8, r8)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	689a      	ldr	r2, [r3, #8]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2140      	movs	r1, #64	; 0x40
 8009c8c:	438a      	bics	r2, r1
 8009c8e:	609a      	str	r2, [r3, #8]
 8009c90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c92:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c96:	f383 8810 	msr	PRIMASK, r3
}
 8009c9a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2280      	movs	r2, #128	; 0x80
 8009ca0:	2120      	movs	r1, #32
 8009ca2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009caa:	f3ef 8310 	mrs	r3, PRIMASK
 8009cae:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8009cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cba:	f383 8810 	msr	PRIMASK, r3
}
 8009cbe:	46c0      	nop			; (mov r8, r8)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2110      	movs	r1, #16
 8009ccc:	438a      	bics	r2, r1
 8009cce:	601a      	str	r2, [r3, #0]
 8009cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cd6:	f383 8810 	msr	PRIMASK, r3
}
 8009cda:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	f7fc fe77 	bl	80069d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2202      	movs	r2, #2
 8009cea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2258      	movs	r2, #88	; 0x58
 8009cf0:	5a9a      	ldrh	r2, [r3, r2]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	215a      	movs	r1, #90	; 0x5a
 8009cf6:	5a5b      	ldrh	r3, [r3, r1]
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	0011      	movs	r1, r2
 8009d02:	0018      	movs	r0, r3
 8009d04:	f000 f8e0 	bl	8009ec8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d08:	e0c2      	b.n	8009e90 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2258      	movs	r2, #88	; 0x58
 8009d0e:	5a99      	ldrh	r1, [r3, r2]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	225a      	movs	r2, #90	; 0x5a
 8009d14:	5a9b      	ldrh	r3, [r3, r2]
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	208e      	movs	r0, #142	; 0x8e
 8009d1a:	183b      	adds	r3, r7, r0
 8009d1c:	1a8a      	subs	r2, r1, r2
 8009d1e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	225a      	movs	r2, #90	; 0x5a
 8009d24:	5a9b      	ldrh	r3, [r3, r2]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d100      	bne.n	8009d2e <HAL_UART_IRQHandler+0x44a>
 8009d2c:	e0b2      	b.n	8009e94 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8009d2e:	183b      	adds	r3, r7, r0
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d100      	bne.n	8009d38 <HAL_UART_IRQHandler+0x454>
 8009d36:	e0ad      	b.n	8009e94 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d38:	f3ef 8310 	mrs	r3, PRIMASK
 8009d3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d40:	2488      	movs	r4, #136	; 0x88
 8009d42:	193a      	adds	r2, r7, r4
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	2301      	movs	r3, #1
 8009d48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	f383 8810 	msr	PRIMASK, r3
}
 8009d50:	46c0      	nop			; (mov r8, r8)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4951      	ldr	r1, [pc, #324]	; (8009ea4 <HAL_UART_IRQHandler+0x5c0>)
 8009d5e:	400a      	ands	r2, r1
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	193b      	adds	r3, r7, r4
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f383 8810 	msr	PRIMASK, r3
}
 8009d6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d70:	f3ef 8310 	mrs	r3, PRIMASK
 8009d74:	61bb      	str	r3, [r7, #24]
  return(result);
 8009d76:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d78:	2484      	movs	r4, #132	; 0x84
 8009d7a:	193a      	adds	r2, r7, r4
 8009d7c:	6013      	str	r3, [r2, #0]
 8009d7e:	2301      	movs	r3, #1
 8009d80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	f383 8810 	msr	PRIMASK, r3
}
 8009d88:	46c0      	nop			; (mov r8, r8)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	689a      	ldr	r2, [r3, #8]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2101      	movs	r1, #1
 8009d96:	438a      	bics	r2, r1
 8009d98:	609a      	str	r2, [r3, #8]
 8009d9a:	193b      	adds	r3, r7, r4
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009da0:	6a3b      	ldr	r3, [r7, #32]
 8009da2:	f383 8810 	msr	PRIMASK, r3
}
 8009da6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2280      	movs	r2, #128	; 0x80
 8009dac:	2120      	movs	r1, #32
 8009dae:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8009dc0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dc4:	2480      	movs	r4, #128	; 0x80
 8009dc6:	193a      	adds	r2, r7, r4
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	2301      	movs	r3, #1
 8009dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd0:	f383 8810 	msr	PRIMASK, r3
}
 8009dd4:	46c0      	nop			; (mov r8, r8)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2110      	movs	r1, #16
 8009de2:	438a      	bics	r2, r1
 8009de4:	601a      	str	r2, [r3, #0]
 8009de6:	193b      	adds	r3, r7, r4
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dee:	f383 8810 	msr	PRIMASK, r3
}
 8009df2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2202      	movs	r2, #2
 8009df8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009dfa:	183b      	adds	r3, r7, r0
 8009dfc:	881a      	ldrh	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	0011      	movs	r1, r2
 8009e02:	0018      	movs	r0, r3
 8009e04:	f000 f860 	bl	8009ec8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e08:	e044      	b.n	8009e94 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e0a:	23a4      	movs	r3, #164	; 0xa4
 8009e0c:	18fb      	adds	r3, r7, r3
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	2380      	movs	r3, #128	; 0x80
 8009e12:	035b      	lsls	r3, r3, #13
 8009e14:	4013      	ands	r3, r2
 8009e16:	d010      	beq.n	8009e3a <HAL_UART_IRQHandler+0x556>
 8009e18:	239c      	movs	r3, #156	; 0x9c
 8009e1a:	18fb      	adds	r3, r7, r3
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	2380      	movs	r3, #128	; 0x80
 8009e20:	03db      	lsls	r3, r3, #15
 8009e22:	4013      	ands	r3, r2
 8009e24:	d009      	beq.n	8009e3a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2280      	movs	r2, #128	; 0x80
 8009e2c:	0352      	lsls	r2, r2, #13
 8009e2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	0018      	movs	r0, r3
 8009e34:	f000 fd5e 	bl	800a8f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e38:	e02f      	b.n	8009e9a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009e3a:	23a4      	movs	r3, #164	; 0xa4
 8009e3c:	18fb      	adds	r3, r7, r3
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2280      	movs	r2, #128	; 0x80
 8009e42:	4013      	ands	r3, r2
 8009e44:	d00f      	beq.n	8009e66 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009e46:	23a0      	movs	r3, #160	; 0xa0
 8009e48:	18fb      	adds	r3, r7, r3
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2280      	movs	r2, #128	; 0x80
 8009e4e:	4013      	ands	r3, r2
 8009e50:	d009      	beq.n	8009e66 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d01e      	beq.n	8009e98 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	0010      	movs	r0, r2
 8009e62:	4798      	blx	r3
    }
    return;
 8009e64:	e018      	b.n	8009e98 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e66:	23a4      	movs	r3, #164	; 0xa4
 8009e68:	18fb      	adds	r3, r7, r3
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2240      	movs	r2, #64	; 0x40
 8009e6e:	4013      	ands	r3, r2
 8009e70:	d013      	beq.n	8009e9a <HAL_UART_IRQHandler+0x5b6>
 8009e72:	23a0      	movs	r3, #160	; 0xa0
 8009e74:	18fb      	adds	r3, r7, r3
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2240      	movs	r2, #64	; 0x40
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	d00d      	beq.n	8009e9a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	0018      	movs	r0, r3
 8009e82:	f000 fd0c 	bl	800a89e <UART_EndTransmit_IT>
    return;
 8009e86:	e008      	b.n	8009e9a <HAL_UART_IRQHandler+0x5b6>
      return;
 8009e88:	46c0      	nop			; (mov r8, r8)
 8009e8a:	e006      	b.n	8009e9a <HAL_UART_IRQHandler+0x5b6>
    return;
 8009e8c:	46c0      	nop			; (mov r8, r8)
 8009e8e:	e004      	b.n	8009e9a <HAL_UART_IRQHandler+0x5b6>
      return;
 8009e90:	46c0      	nop			; (mov r8, r8)
 8009e92:	e002      	b.n	8009e9a <HAL_UART_IRQHandler+0x5b6>
      return;
 8009e94:	46c0      	nop			; (mov r8, r8)
 8009e96:	e000      	b.n	8009e9a <HAL_UART_IRQHandler+0x5b6>
    return;
 8009e98:	46c0      	nop			; (mov r8, r8)
  }

}
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	b02b      	add	sp, #172	; 0xac
 8009e9e:	bd90      	pop	{r4, r7, pc}
 8009ea0:	fffffeff 	.word	0xfffffeff
 8009ea4:	fffffedf 	.word	0xfffffedf

08009ea8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009eb0:	46c0      	nop			; (mov r8, r8)
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	b002      	add	sp, #8
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ec0:	46c0      	nop			; (mov r8, r8)
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	b002      	add	sp, #8
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	000a      	movs	r2, r1
 8009ed2:	1cbb      	adds	r3, r7, #2
 8009ed4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ed6:	46c0      	nop			; (mov r8, r8)
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	b002      	add	sp, #8
 8009edc:	bd80      	pop	{r7, pc}
	...

08009ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ee0:	b5b0      	push	{r4, r5, r7, lr}
 8009ee2:	b08e      	sub	sp, #56	; 0x38
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ee8:	231a      	movs	r3, #26
 8009eea:	2218      	movs	r2, #24
 8009eec:	189b      	adds	r3, r3, r2
 8009eee:	19db      	adds	r3, r3, r7
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	689a      	ldr	r2, [r3, #8]
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	431a      	orrs	r2, r3
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	695b      	ldr	r3, [r3, #20]
 8009f02:	431a      	orrs	r2, r3
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	69db      	ldr	r3, [r3, #28]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4ac3      	ldr	r2, [pc, #780]	; (800a220 <UART_SetConfig+0x340>)
 8009f14:	4013      	ands	r3, r2
 8009f16:	0019      	movs	r1, r3
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f1e:	430a      	orrs	r2, r1
 8009f20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	4abe      	ldr	r2, [pc, #760]	; (800a224 <UART_SetConfig+0x344>)
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	0019      	movs	r1, r3
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	68da      	ldr	r2, [r3, #12]
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	430a      	orrs	r2, r1
 8009f38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4ab8      	ldr	r2, [pc, #736]	; (800a228 <UART_SetConfig+0x348>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d004      	beq.n	8009f54 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f50:	4313      	orrs	r3, r2
 8009f52:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	4ab4      	ldr	r2, [pc, #720]	; (800a22c <UART_SetConfig+0x34c>)
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	0019      	movs	r1, r3
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f66:	430a      	orrs	r2, r1
 8009f68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4ab0      	ldr	r2, [pc, #704]	; (800a230 <UART_SetConfig+0x350>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d131      	bne.n	8009fd8 <UART_SetConfig+0xf8>
 8009f74:	4baf      	ldr	r3, [pc, #700]	; (800a234 <UART_SetConfig+0x354>)
 8009f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f78:	2203      	movs	r2, #3
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	2b03      	cmp	r3, #3
 8009f7e:	d01d      	beq.n	8009fbc <UART_SetConfig+0xdc>
 8009f80:	d823      	bhi.n	8009fca <UART_SetConfig+0xea>
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d00c      	beq.n	8009fa0 <UART_SetConfig+0xc0>
 8009f86:	d820      	bhi.n	8009fca <UART_SetConfig+0xea>
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <UART_SetConfig+0xb2>
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d00e      	beq.n	8009fae <UART_SetConfig+0xce>
 8009f90:	e01b      	b.n	8009fca <UART_SetConfig+0xea>
 8009f92:	231b      	movs	r3, #27
 8009f94:	2218      	movs	r2, #24
 8009f96:	189b      	adds	r3, r3, r2
 8009f98:	19db      	adds	r3, r3, r7
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	701a      	strb	r2, [r3, #0]
 8009f9e:	e0b4      	b.n	800a10a <UART_SetConfig+0x22a>
 8009fa0:	231b      	movs	r3, #27
 8009fa2:	2218      	movs	r2, #24
 8009fa4:	189b      	adds	r3, r3, r2
 8009fa6:	19db      	adds	r3, r3, r7
 8009fa8:	2202      	movs	r2, #2
 8009faa:	701a      	strb	r2, [r3, #0]
 8009fac:	e0ad      	b.n	800a10a <UART_SetConfig+0x22a>
 8009fae:	231b      	movs	r3, #27
 8009fb0:	2218      	movs	r2, #24
 8009fb2:	189b      	adds	r3, r3, r2
 8009fb4:	19db      	adds	r3, r3, r7
 8009fb6:	2204      	movs	r2, #4
 8009fb8:	701a      	strb	r2, [r3, #0]
 8009fba:	e0a6      	b.n	800a10a <UART_SetConfig+0x22a>
 8009fbc:	231b      	movs	r3, #27
 8009fbe:	2218      	movs	r2, #24
 8009fc0:	189b      	adds	r3, r3, r2
 8009fc2:	19db      	adds	r3, r3, r7
 8009fc4:	2208      	movs	r2, #8
 8009fc6:	701a      	strb	r2, [r3, #0]
 8009fc8:	e09f      	b.n	800a10a <UART_SetConfig+0x22a>
 8009fca:	231b      	movs	r3, #27
 8009fcc:	2218      	movs	r2, #24
 8009fce:	189b      	adds	r3, r3, r2
 8009fd0:	19db      	adds	r3, r3, r7
 8009fd2:	2210      	movs	r2, #16
 8009fd4:	701a      	strb	r2, [r3, #0]
 8009fd6:	e098      	b.n	800a10a <UART_SetConfig+0x22a>
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a96      	ldr	r2, [pc, #600]	; (800a238 <UART_SetConfig+0x358>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d131      	bne.n	800a046 <UART_SetConfig+0x166>
 8009fe2:	4b94      	ldr	r3, [pc, #592]	; (800a234 <UART_SetConfig+0x354>)
 8009fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe6:	220c      	movs	r2, #12
 8009fe8:	4013      	ands	r3, r2
 8009fea:	2b0c      	cmp	r3, #12
 8009fec:	d01d      	beq.n	800a02a <UART_SetConfig+0x14a>
 8009fee:	d823      	bhi.n	800a038 <UART_SetConfig+0x158>
 8009ff0:	2b08      	cmp	r3, #8
 8009ff2:	d00c      	beq.n	800a00e <UART_SetConfig+0x12e>
 8009ff4:	d820      	bhi.n	800a038 <UART_SetConfig+0x158>
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d002      	beq.n	800a000 <UART_SetConfig+0x120>
 8009ffa:	2b04      	cmp	r3, #4
 8009ffc:	d00e      	beq.n	800a01c <UART_SetConfig+0x13c>
 8009ffe:	e01b      	b.n	800a038 <UART_SetConfig+0x158>
 800a000:	231b      	movs	r3, #27
 800a002:	2218      	movs	r2, #24
 800a004:	189b      	adds	r3, r3, r2
 800a006:	19db      	adds	r3, r3, r7
 800a008:	2200      	movs	r2, #0
 800a00a:	701a      	strb	r2, [r3, #0]
 800a00c:	e07d      	b.n	800a10a <UART_SetConfig+0x22a>
 800a00e:	231b      	movs	r3, #27
 800a010:	2218      	movs	r2, #24
 800a012:	189b      	adds	r3, r3, r2
 800a014:	19db      	adds	r3, r3, r7
 800a016:	2202      	movs	r2, #2
 800a018:	701a      	strb	r2, [r3, #0]
 800a01a:	e076      	b.n	800a10a <UART_SetConfig+0x22a>
 800a01c:	231b      	movs	r3, #27
 800a01e:	2218      	movs	r2, #24
 800a020:	189b      	adds	r3, r3, r2
 800a022:	19db      	adds	r3, r3, r7
 800a024:	2204      	movs	r2, #4
 800a026:	701a      	strb	r2, [r3, #0]
 800a028:	e06f      	b.n	800a10a <UART_SetConfig+0x22a>
 800a02a:	231b      	movs	r3, #27
 800a02c:	2218      	movs	r2, #24
 800a02e:	189b      	adds	r3, r3, r2
 800a030:	19db      	adds	r3, r3, r7
 800a032:	2208      	movs	r2, #8
 800a034:	701a      	strb	r2, [r3, #0]
 800a036:	e068      	b.n	800a10a <UART_SetConfig+0x22a>
 800a038:	231b      	movs	r3, #27
 800a03a:	2218      	movs	r2, #24
 800a03c:	189b      	adds	r3, r3, r2
 800a03e:	19db      	adds	r3, r3, r7
 800a040:	2210      	movs	r2, #16
 800a042:	701a      	strb	r2, [r3, #0]
 800a044:	e061      	b.n	800a10a <UART_SetConfig+0x22a>
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a7c      	ldr	r2, [pc, #496]	; (800a23c <UART_SetConfig+0x35c>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d106      	bne.n	800a05e <UART_SetConfig+0x17e>
 800a050:	231b      	movs	r3, #27
 800a052:	2218      	movs	r2, #24
 800a054:	189b      	adds	r3, r3, r2
 800a056:	19db      	adds	r3, r3, r7
 800a058:	2200      	movs	r2, #0
 800a05a:	701a      	strb	r2, [r3, #0]
 800a05c:	e055      	b.n	800a10a <UART_SetConfig+0x22a>
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a77      	ldr	r2, [pc, #476]	; (800a240 <UART_SetConfig+0x360>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d106      	bne.n	800a076 <UART_SetConfig+0x196>
 800a068:	231b      	movs	r3, #27
 800a06a:	2218      	movs	r2, #24
 800a06c:	189b      	adds	r3, r3, r2
 800a06e:	19db      	adds	r3, r3, r7
 800a070:	2200      	movs	r2, #0
 800a072:	701a      	strb	r2, [r3, #0]
 800a074:	e049      	b.n	800a10a <UART_SetConfig+0x22a>
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a6b      	ldr	r2, [pc, #428]	; (800a228 <UART_SetConfig+0x348>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d13e      	bne.n	800a0fe <UART_SetConfig+0x21e>
 800a080:	4b6c      	ldr	r3, [pc, #432]	; (800a234 <UART_SetConfig+0x354>)
 800a082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a084:	23c0      	movs	r3, #192	; 0xc0
 800a086:	011b      	lsls	r3, r3, #4
 800a088:	4013      	ands	r3, r2
 800a08a:	22c0      	movs	r2, #192	; 0xc0
 800a08c:	0112      	lsls	r2, r2, #4
 800a08e:	4293      	cmp	r3, r2
 800a090:	d027      	beq.n	800a0e2 <UART_SetConfig+0x202>
 800a092:	22c0      	movs	r2, #192	; 0xc0
 800a094:	0112      	lsls	r2, r2, #4
 800a096:	4293      	cmp	r3, r2
 800a098:	d82a      	bhi.n	800a0f0 <UART_SetConfig+0x210>
 800a09a:	2280      	movs	r2, #128	; 0x80
 800a09c:	0112      	lsls	r2, r2, #4
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d011      	beq.n	800a0c6 <UART_SetConfig+0x1e6>
 800a0a2:	2280      	movs	r2, #128	; 0x80
 800a0a4:	0112      	lsls	r2, r2, #4
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d822      	bhi.n	800a0f0 <UART_SetConfig+0x210>
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d004      	beq.n	800a0b8 <UART_SetConfig+0x1d8>
 800a0ae:	2280      	movs	r2, #128	; 0x80
 800a0b0:	00d2      	lsls	r2, r2, #3
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d00e      	beq.n	800a0d4 <UART_SetConfig+0x1f4>
 800a0b6:	e01b      	b.n	800a0f0 <UART_SetConfig+0x210>
 800a0b8:	231b      	movs	r3, #27
 800a0ba:	2218      	movs	r2, #24
 800a0bc:	189b      	adds	r3, r3, r2
 800a0be:	19db      	adds	r3, r3, r7
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	701a      	strb	r2, [r3, #0]
 800a0c4:	e021      	b.n	800a10a <UART_SetConfig+0x22a>
 800a0c6:	231b      	movs	r3, #27
 800a0c8:	2218      	movs	r2, #24
 800a0ca:	189b      	adds	r3, r3, r2
 800a0cc:	19db      	adds	r3, r3, r7
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	701a      	strb	r2, [r3, #0]
 800a0d2:	e01a      	b.n	800a10a <UART_SetConfig+0x22a>
 800a0d4:	231b      	movs	r3, #27
 800a0d6:	2218      	movs	r2, #24
 800a0d8:	189b      	adds	r3, r3, r2
 800a0da:	19db      	adds	r3, r3, r7
 800a0dc:	2204      	movs	r2, #4
 800a0de:	701a      	strb	r2, [r3, #0]
 800a0e0:	e013      	b.n	800a10a <UART_SetConfig+0x22a>
 800a0e2:	231b      	movs	r3, #27
 800a0e4:	2218      	movs	r2, #24
 800a0e6:	189b      	adds	r3, r3, r2
 800a0e8:	19db      	adds	r3, r3, r7
 800a0ea:	2208      	movs	r2, #8
 800a0ec:	701a      	strb	r2, [r3, #0]
 800a0ee:	e00c      	b.n	800a10a <UART_SetConfig+0x22a>
 800a0f0:	231b      	movs	r3, #27
 800a0f2:	2218      	movs	r2, #24
 800a0f4:	189b      	adds	r3, r3, r2
 800a0f6:	19db      	adds	r3, r3, r7
 800a0f8:	2210      	movs	r2, #16
 800a0fa:	701a      	strb	r2, [r3, #0]
 800a0fc:	e005      	b.n	800a10a <UART_SetConfig+0x22a>
 800a0fe:	231b      	movs	r3, #27
 800a100:	2218      	movs	r2, #24
 800a102:	189b      	adds	r3, r3, r2
 800a104:	19db      	adds	r3, r3, r7
 800a106:	2210      	movs	r2, #16
 800a108:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a46      	ldr	r2, [pc, #280]	; (800a228 <UART_SetConfig+0x348>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d000      	beq.n	800a116 <UART_SetConfig+0x236>
 800a114:	e09a      	b.n	800a24c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a116:	231b      	movs	r3, #27
 800a118:	2218      	movs	r2, #24
 800a11a:	189b      	adds	r3, r3, r2
 800a11c:	19db      	adds	r3, r3, r7
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	2b08      	cmp	r3, #8
 800a122:	d01d      	beq.n	800a160 <UART_SetConfig+0x280>
 800a124:	dc20      	bgt.n	800a168 <UART_SetConfig+0x288>
 800a126:	2b04      	cmp	r3, #4
 800a128:	d015      	beq.n	800a156 <UART_SetConfig+0x276>
 800a12a:	dc1d      	bgt.n	800a168 <UART_SetConfig+0x288>
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d002      	beq.n	800a136 <UART_SetConfig+0x256>
 800a130:	2b02      	cmp	r3, #2
 800a132:	d005      	beq.n	800a140 <UART_SetConfig+0x260>
 800a134:	e018      	b.n	800a168 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a136:	f7fe fa31 	bl	800859c <HAL_RCC_GetPCLK1Freq>
 800a13a:	0003      	movs	r3, r0
 800a13c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a13e:	e01c      	b.n	800a17a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a140:	4b3c      	ldr	r3, [pc, #240]	; (800a234 <UART_SetConfig+0x354>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2210      	movs	r2, #16
 800a146:	4013      	ands	r3, r2
 800a148:	d002      	beq.n	800a150 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a14a:	4b3e      	ldr	r3, [pc, #248]	; (800a244 <UART_SetConfig+0x364>)
 800a14c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a14e:	e014      	b.n	800a17a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800a150:	4b3d      	ldr	r3, [pc, #244]	; (800a248 <UART_SetConfig+0x368>)
 800a152:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a154:	e011      	b.n	800a17a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a156:	f7fe f971 	bl	800843c <HAL_RCC_GetSysClockFreq>
 800a15a:	0003      	movs	r3, r0
 800a15c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a15e:	e00c      	b.n	800a17a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a160:	2380      	movs	r3, #128	; 0x80
 800a162:	021b      	lsls	r3, r3, #8
 800a164:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a166:	e008      	b.n	800a17a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800a168:	2300      	movs	r3, #0
 800a16a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a16c:	231a      	movs	r3, #26
 800a16e:	2218      	movs	r2, #24
 800a170:	189b      	adds	r3, r3, r2
 800a172:	19db      	adds	r3, r3, r7
 800a174:	2201      	movs	r2, #1
 800a176:	701a      	strb	r2, [r3, #0]
        break;
 800a178:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d100      	bne.n	800a182 <UART_SetConfig+0x2a2>
 800a180:	e133      	b.n	800a3ea <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	685a      	ldr	r2, [r3, #4]
 800a186:	0013      	movs	r3, r2
 800a188:	005b      	lsls	r3, r3, #1
 800a18a:	189b      	adds	r3, r3, r2
 800a18c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a18e:	429a      	cmp	r2, r3
 800a190:	d305      	bcc.n	800a19e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d906      	bls.n	800a1ac <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800a19e:	231a      	movs	r3, #26
 800a1a0:	2218      	movs	r2, #24
 800a1a2:	189b      	adds	r3, r3, r2
 800a1a4:	19db      	adds	r3, r3, r7
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	701a      	strb	r2, [r3, #0]
 800a1aa:	e11e      	b.n	800a3ea <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ae:	613b      	str	r3, [r7, #16]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	617b      	str	r3, [r7, #20]
 800a1b4:	6939      	ldr	r1, [r7, #16]
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	000b      	movs	r3, r1
 800a1ba:	0e1b      	lsrs	r3, r3, #24
 800a1bc:	0010      	movs	r0, r2
 800a1be:	0205      	lsls	r5, r0, #8
 800a1c0:	431d      	orrs	r5, r3
 800a1c2:	000b      	movs	r3, r1
 800a1c4:	021c      	lsls	r4, r3, #8
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	085b      	lsrs	r3, r3, #1
 800a1cc:	60bb      	str	r3, [r7, #8]
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	60fb      	str	r3, [r7, #12]
 800a1d2:	68b8      	ldr	r0, [r7, #8]
 800a1d4:	68f9      	ldr	r1, [r7, #12]
 800a1d6:	1900      	adds	r0, r0, r4
 800a1d8:	4169      	adcs	r1, r5
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	607b      	str	r3, [r7, #4]
 800a1e4:	683a      	ldr	r2, [r7, #0]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f7f6 f95e 	bl	80004a8 <__aeabi_uldivmod>
 800a1ec:	0002      	movs	r2, r0
 800a1ee:	000b      	movs	r3, r1
 800a1f0:	0013      	movs	r3, r2
 800a1f2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1f6:	23c0      	movs	r3, #192	; 0xc0
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d309      	bcc.n	800a212 <UART_SetConfig+0x332>
 800a1fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a200:	2380      	movs	r3, #128	; 0x80
 800a202:	035b      	lsls	r3, r3, #13
 800a204:	429a      	cmp	r2, r3
 800a206:	d204      	bcs.n	800a212 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a20e:	60da      	str	r2, [r3, #12]
 800a210:	e0eb      	b.n	800a3ea <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800a212:	231a      	movs	r3, #26
 800a214:	2218      	movs	r2, #24
 800a216:	189b      	adds	r3, r3, r2
 800a218:	19db      	adds	r3, r3, r7
 800a21a:	2201      	movs	r2, #1
 800a21c:	701a      	strb	r2, [r3, #0]
 800a21e:	e0e4      	b.n	800a3ea <UART_SetConfig+0x50a>
 800a220:	efff69f3 	.word	0xefff69f3
 800a224:	ffffcfff 	.word	0xffffcfff
 800a228:	40004800 	.word	0x40004800
 800a22c:	fffff4ff 	.word	0xfffff4ff
 800a230:	40013800 	.word	0x40013800
 800a234:	40021000 	.word	0x40021000
 800a238:	40004400 	.word	0x40004400
 800a23c:	40004c00 	.word	0x40004c00
 800a240:	40005000 	.word	0x40005000
 800a244:	003d0900 	.word	0x003d0900
 800a248:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	69da      	ldr	r2, [r3, #28]
 800a250:	2380      	movs	r3, #128	; 0x80
 800a252:	021b      	lsls	r3, r3, #8
 800a254:	429a      	cmp	r2, r3
 800a256:	d000      	beq.n	800a25a <UART_SetConfig+0x37a>
 800a258:	e070      	b.n	800a33c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800a25a:	231b      	movs	r3, #27
 800a25c:	2218      	movs	r2, #24
 800a25e:	189b      	adds	r3, r3, r2
 800a260:	19db      	adds	r3, r3, r7
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	2b08      	cmp	r3, #8
 800a266:	d822      	bhi.n	800a2ae <UART_SetConfig+0x3ce>
 800a268:	009a      	lsls	r2, r3, #2
 800a26a:	4b67      	ldr	r3, [pc, #412]	; (800a408 <UART_SetConfig+0x528>)
 800a26c:	18d3      	adds	r3, r2, r3
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a272:	f7fe f993 	bl	800859c <HAL_RCC_GetPCLK1Freq>
 800a276:	0003      	movs	r3, r0
 800a278:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a27a:	e021      	b.n	800a2c0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a27c:	f7fe f9a4 	bl	80085c8 <HAL_RCC_GetPCLK2Freq>
 800a280:	0003      	movs	r3, r0
 800a282:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a284:	e01c      	b.n	800a2c0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a286:	4b61      	ldr	r3, [pc, #388]	; (800a40c <UART_SetConfig+0x52c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2210      	movs	r2, #16
 800a28c:	4013      	ands	r3, r2
 800a28e:	d002      	beq.n	800a296 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a290:	4b5f      	ldr	r3, [pc, #380]	; (800a410 <UART_SetConfig+0x530>)
 800a292:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a294:	e014      	b.n	800a2c0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800a296:	4b5f      	ldr	r3, [pc, #380]	; (800a414 <UART_SetConfig+0x534>)
 800a298:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a29a:	e011      	b.n	800a2c0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a29c:	f7fe f8ce 	bl	800843c <HAL_RCC_GetSysClockFreq>
 800a2a0:	0003      	movs	r3, r0
 800a2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2a4:	e00c      	b.n	800a2c0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2a6:	2380      	movs	r3, #128	; 0x80
 800a2a8:	021b      	lsls	r3, r3, #8
 800a2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2ac:	e008      	b.n	800a2c0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a2b2:	231a      	movs	r3, #26
 800a2b4:	2218      	movs	r2, #24
 800a2b6:	189b      	adds	r3, r3, r2
 800a2b8:	19db      	adds	r3, r3, r7
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	701a      	strb	r2, [r3, #0]
        break;
 800a2be:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d100      	bne.n	800a2c8 <UART_SetConfig+0x3e8>
 800a2c6:	e090      	b.n	800a3ea <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ca:	005a      	lsls	r2, r3, #1
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	085b      	lsrs	r3, r3, #1
 800a2d2:	18d2      	adds	r2, r2, r3
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	0019      	movs	r1, r3
 800a2da:	0010      	movs	r0, r2
 800a2dc:	f7f5 ff30 	bl	8000140 <__udivsi3>
 800a2e0:	0003      	movs	r3, r0
 800a2e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e6:	2b0f      	cmp	r3, #15
 800a2e8:	d921      	bls.n	800a32e <UART_SetConfig+0x44e>
 800a2ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2ec:	2380      	movs	r3, #128	; 0x80
 800a2ee:	025b      	lsls	r3, r3, #9
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d21c      	bcs.n	800a32e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	200e      	movs	r0, #14
 800a2fa:	2418      	movs	r4, #24
 800a2fc:	1903      	adds	r3, r0, r4
 800a2fe:	19db      	adds	r3, r3, r7
 800a300:	210f      	movs	r1, #15
 800a302:	438a      	bics	r2, r1
 800a304:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a308:	085b      	lsrs	r3, r3, #1
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	2207      	movs	r2, #7
 800a30e:	4013      	ands	r3, r2
 800a310:	b299      	uxth	r1, r3
 800a312:	1903      	adds	r3, r0, r4
 800a314:	19db      	adds	r3, r3, r7
 800a316:	1902      	adds	r2, r0, r4
 800a318:	19d2      	adds	r2, r2, r7
 800a31a:	8812      	ldrh	r2, [r2, #0]
 800a31c:	430a      	orrs	r2, r1
 800a31e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	1902      	adds	r2, r0, r4
 800a326:	19d2      	adds	r2, r2, r7
 800a328:	8812      	ldrh	r2, [r2, #0]
 800a32a:	60da      	str	r2, [r3, #12]
 800a32c:	e05d      	b.n	800a3ea <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800a32e:	231a      	movs	r3, #26
 800a330:	2218      	movs	r2, #24
 800a332:	189b      	adds	r3, r3, r2
 800a334:	19db      	adds	r3, r3, r7
 800a336:	2201      	movs	r2, #1
 800a338:	701a      	strb	r2, [r3, #0]
 800a33a:	e056      	b.n	800a3ea <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a33c:	231b      	movs	r3, #27
 800a33e:	2218      	movs	r2, #24
 800a340:	189b      	adds	r3, r3, r2
 800a342:	19db      	adds	r3, r3, r7
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	2b08      	cmp	r3, #8
 800a348:	d822      	bhi.n	800a390 <UART_SetConfig+0x4b0>
 800a34a:	009a      	lsls	r2, r3, #2
 800a34c:	4b32      	ldr	r3, [pc, #200]	; (800a418 <UART_SetConfig+0x538>)
 800a34e:	18d3      	adds	r3, r2, r3
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a354:	f7fe f922 	bl	800859c <HAL_RCC_GetPCLK1Freq>
 800a358:	0003      	movs	r3, r0
 800a35a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a35c:	e021      	b.n	800a3a2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a35e:	f7fe f933 	bl	80085c8 <HAL_RCC_GetPCLK2Freq>
 800a362:	0003      	movs	r3, r0
 800a364:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a366:	e01c      	b.n	800a3a2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a368:	4b28      	ldr	r3, [pc, #160]	; (800a40c <UART_SetConfig+0x52c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2210      	movs	r2, #16
 800a36e:	4013      	ands	r3, r2
 800a370:	d002      	beq.n	800a378 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800a372:	4b27      	ldr	r3, [pc, #156]	; (800a410 <UART_SetConfig+0x530>)
 800a374:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a376:	e014      	b.n	800a3a2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800a378:	4b26      	ldr	r3, [pc, #152]	; (800a414 <UART_SetConfig+0x534>)
 800a37a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a37c:	e011      	b.n	800a3a2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a37e:	f7fe f85d 	bl	800843c <HAL_RCC_GetSysClockFreq>
 800a382:	0003      	movs	r3, r0
 800a384:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a386:	e00c      	b.n	800a3a2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a388:	2380      	movs	r3, #128	; 0x80
 800a38a:	021b      	lsls	r3, r3, #8
 800a38c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a38e:	e008      	b.n	800a3a2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800a390:	2300      	movs	r3, #0
 800a392:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a394:	231a      	movs	r3, #26
 800a396:	2218      	movs	r2, #24
 800a398:	189b      	adds	r3, r3, r2
 800a39a:	19db      	adds	r3, r3, r7
 800a39c:	2201      	movs	r2, #1
 800a39e:	701a      	strb	r2, [r3, #0]
        break;
 800a3a0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d020      	beq.n	800a3ea <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	085a      	lsrs	r2, r3, #1
 800a3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b0:	18d2      	adds	r2, r2, r3
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	0019      	movs	r1, r3
 800a3b8:	0010      	movs	r0, r2
 800a3ba:	f7f5 fec1 	bl	8000140 <__udivsi3>
 800a3be:	0003      	movs	r3, r0
 800a3c0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c4:	2b0f      	cmp	r3, #15
 800a3c6:	d90a      	bls.n	800a3de <UART_SetConfig+0x4fe>
 800a3c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3ca:	2380      	movs	r3, #128	; 0x80
 800a3cc:	025b      	lsls	r3, r3, #9
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d205      	bcs.n	800a3de <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	60da      	str	r2, [r3, #12]
 800a3dc:	e005      	b.n	800a3ea <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800a3de:	231a      	movs	r3, #26
 800a3e0:	2218      	movs	r2, #24
 800a3e2:	189b      	adds	r3, r3, r2
 800a3e4:	19db      	adds	r3, r3, r7
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a3f6:	231a      	movs	r3, #26
 800a3f8:	2218      	movs	r2, #24
 800a3fa:	189b      	adds	r3, r3, r2
 800a3fc:	19db      	adds	r3, r3, r7
 800a3fe:	781b      	ldrb	r3, [r3, #0]
}
 800a400:	0018      	movs	r0, r3
 800a402:	46bd      	mov	sp, r7
 800a404:	b00e      	add	sp, #56	; 0x38
 800a406:	bdb0      	pop	{r4, r5, r7, pc}
 800a408:	080136a8 	.word	0x080136a8
 800a40c:	40021000 	.word	0x40021000
 800a410:	003d0900 	.word	0x003d0900
 800a414:	00f42400 	.word	0x00f42400
 800a418:	080136cc 	.word	0x080136cc

0800a41c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a428:	2201      	movs	r2, #1
 800a42a:	4013      	ands	r3, r2
 800a42c:	d00b      	beq.n	800a446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	4a4a      	ldr	r2, [pc, #296]	; (800a560 <UART_AdvFeatureConfig+0x144>)
 800a436:	4013      	ands	r3, r2
 800a438:	0019      	movs	r1, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	430a      	orrs	r2, r1
 800a444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44a:	2202      	movs	r2, #2
 800a44c:	4013      	ands	r3, r2
 800a44e:	d00b      	beq.n	800a468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	4a43      	ldr	r2, [pc, #268]	; (800a564 <UART_AdvFeatureConfig+0x148>)
 800a458:	4013      	ands	r3, r2
 800a45a:	0019      	movs	r1, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	430a      	orrs	r2, r1
 800a466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46c:	2204      	movs	r2, #4
 800a46e:	4013      	ands	r3, r2
 800a470:	d00b      	beq.n	800a48a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	4a3b      	ldr	r2, [pc, #236]	; (800a568 <UART_AdvFeatureConfig+0x14c>)
 800a47a:	4013      	ands	r3, r2
 800a47c:	0019      	movs	r1, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	430a      	orrs	r2, r1
 800a488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48e:	2208      	movs	r2, #8
 800a490:	4013      	ands	r3, r2
 800a492:	d00b      	beq.n	800a4ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	4a34      	ldr	r2, [pc, #208]	; (800a56c <UART_AdvFeatureConfig+0x150>)
 800a49c:	4013      	ands	r3, r2
 800a49e:	0019      	movs	r1, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	430a      	orrs	r2, r1
 800a4aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b0:	2210      	movs	r2, #16
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	d00b      	beq.n	800a4ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	4a2c      	ldr	r2, [pc, #176]	; (800a570 <UART_AdvFeatureConfig+0x154>)
 800a4be:	4013      	ands	r3, r2
 800a4c0:	0019      	movs	r1, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	d00b      	beq.n	800a4f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	4a25      	ldr	r2, [pc, #148]	; (800a574 <UART_AdvFeatureConfig+0x158>)
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	0019      	movs	r1, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	430a      	orrs	r2, r1
 800a4ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f4:	2240      	movs	r2, #64	; 0x40
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	d01d      	beq.n	800a536 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	4a1d      	ldr	r2, [pc, #116]	; (800a578 <UART_AdvFeatureConfig+0x15c>)
 800a502:	4013      	ands	r3, r2
 800a504:	0019      	movs	r1, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	430a      	orrs	r2, r1
 800a510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a516:	2380      	movs	r3, #128	; 0x80
 800a518:	035b      	lsls	r3, r3, #13
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d10b      	bne.n	800a536 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	4a15      	ldr	r2, [pc, #84]	; (800a57c <UART_AdvFeatureConfig+0x160>)
 800a526:	4013      	ands	r3, r2
 800a528:	0019      	movs	r1, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53a:	2280      	movs	r2, #128	; 0x80
 800a53c:	4013      	ands	r3, r2
 800a53e:	d00b      	beq.n	800a558 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	4a0e      	ldr	r2, [pc, #56]	; (800a580 <UART_AdvFeatureConfig+0x164>)
 800a548:	4013      	ands	r3, r2
 800a54a:	0019      	movs	r1, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	430a      	orrs	r2, r1
 800a556:	605a      	str	r2, [r3, #4]
  }
}
 800a558:	46c0      	nop			; (mov r8, r8)
 800a55a:	46bd      	mov	sp, r7
 800a55c:	b002      	add	sp, #8
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	fffdffff 	.word	0xfffdffff
 800a564:	fffeffff 	.word	0xfffeffff
 800a568:	fffbffff 	.word	0xfffbffff
 800a56c:	ffff7fff 	.word	0xffff7fff
 800a570:	ffffefff 	.word	0xffffefff
 800a574:	ffffdfff 	.word	0xffffdfff
 800a578:	ffefffff 	.word	0xffefffff
 800a57c:	ff9fffff 	.word	0xff9fffff
 800a580:	fff7ffff 	.word	0xfff7ffff

0800a584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b092      	sub	sp, #72	; 0x48
 800a588:	af02      	add	r7, sp, #8
 800a58a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2284      	movs	r2, #132	; 0x84
 800a590:	2100      	movs	r1, #0
 800a592:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a594:	f7fc f912 	bl	80067bc <HAL_GetTick>
 800a598:	0003      	movs	r3, r0
 800a59a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2208      	movs	r2, #8
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	2b08      	cmp	r3, #8
 800a5a8:	d12c      	bne.n	800a604 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ac:	2280      	movs	r2, #128	; 0x80
 800a5ae:	0391      	lsls	r1, r2, #14
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	4a46      	ldr	r2, [pc, #280]	; (800a6cc <UART_CheckIdleState+0x148>)
 800a5b4:	9200      	str	r2, [sp, #0]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f000 f88c 	bl	800a6d4 <UART_WaitOnFlagUntilTimeout>
 800a5bc:	1e03      	subs	r3, r0, #0
 800a5be:	d021      	beq.n	800a604 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5c0:	f3ef 8310 	mrs	r3, PRIMASK
 800a5c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a5c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d0:	f383 8810 	msr	PRIMASK, r3
}
 800a5d4:	46c0      	nop			; (mov r8, r8)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2180      	movs	r1, #128	; 0x80
 800a5e2:	438a      	bics	r2, r1
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ec:	f383 8810 	msr	PRIMASK, r3
}
 800a5f0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2220      	movs	r2, #32
 800a5f6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2278      	movs	r2, #120	; 0x78
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a600:	2303      	movs	r3, #3
 800a602:	e05f      	b.n	800a6c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2204      	movs	r2, #4
 800a60c:	4013      	ands	r3, r2
 800a60e:	2b04      	cmp	r3, #4
 800a610:	d146      	bne.n	800a6a0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a614:	2280      	movs	r2, #128	; 0x80
 800a616:	03d1      	lsls	r1, r2, #15
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	4a2c      	ldr	r2, [pc, #176]	; (800a6cc <UART_CheckIdleState+0x148>)
 800a61c:	9200      	str	r2, [sp, #0]
 800a61e:	2200      	movs	r2, #0
 800a620:	f000 f858 	bl	800a6d4 <UART_WaitOnFlagUntilTimeout>
 800a624:	1e03      	subs	r3, r0, #0
 800a626:	d03b      	beq.n	800a6a0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a628:	f3ef 8310 	mrs	r3, PRIMASK
 800a62c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a62e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a630:	637b      	str	r3, [r7, #52]	; 0x34
 800a632:	2301      	movs	r3, #1
 800a634:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	f383 8810 	msr	PRIMASK, r3
}
 800a63c:	46c0      	nop			; (mov r8, r8)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4921      	ldr	r1, [pc, #132]	; (800a6d0 <UART_CheckIdleState+0x14c>)
 800a64a:	400a      	ands	r2, r1
 800a64c:	601a      	str	r2, [r3, #0]
 800a64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a650:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	f383 8810 	msr	PRIMASK, r3
}
 800a658:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a65a:	f3ef 8310 	mrs	r3, PRIMASK
 800a65e:	61bb      	str	r3, [r7, #24]
  return(result);
 800a660:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a662:	633b      	str	r3, [r7, #48]	; 0x30
 800a664:	2301      	movs	r3, #1
 800a666:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	f383 8810 	msr	PRIMASK, r3
}
 800a66e:	46c0      	nop			; (mov r8, r8)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	689a      	ldr	r2, [r3, #8]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2101      	movs	r1, #1
 800a67c:	438a      	bics	r2, r1
 800a67e:	609a      	str	r2, [r3, #8]
 800a680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a682:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a684:	6a3b      	ldr	r3, [r7, #32]
 800a686:	f383 8810 	msr	PRIMASK, r3
}
 800a68a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2280      	movs	r2, #128	; 0x80
 800a690:	2120      	movs	r1, #32
 800a692:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2278      	movs	r2, #120	; 0x78
 800a698:	2100      	movs	r1, #0
 800a69a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e011      	b.n	800a6c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2280      	movs	r2, #128	; 0x80
 800a6aa:	2120      	movs	r1, #32
 800a6ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2278      	movs	r2, #120	; 0x78
 800a6be:	2100      	movs	r1, #0
 800a6c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	0018      	movs	r0, r3
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	b010      	add	sp, #64	; 0x40
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	01ffffff 	.word	0x01ffffff
 800a6d0:	fffffedf 	.word	0xfffffedf

0800a6d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	603b      	str	r3, [r7, #0]
 800a6e0:	1dfb      	adds	r3, r7, #7
 800a6e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6e4:	e04b      	b.n	800a77e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	d048      	beq.n	800a77e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6ec:	f7fc f866 	bl	80067bc <HAL_GetTick>
 800a6f0:	0002      	movs	r2, r0
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	69ba      	ldr	r2, [r7, #24]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d302      	bcc.n	800a702 <UART_WaitOnFlagUntilTimeout+0x2e>
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a702:	2303      	movs	r3, #3
 800a704:	e04b      	b.n	800a79e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2204      	movs	r2, #4
 800a70e:	4013      	ands	r3, r2
 800a710:	d035      	beq.n	800a77e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	69db      	ldr	r3, [r3, #28]
 800a718:	2208      	movs	r2, #8
 800a71a:	4013      	ands	r3, r2
 800a71c:	2b08      	cmp	r3, #8
 800a71e:	d111      	bne.n	800a744 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2208      	movs	r2, #8
 800a726:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	0018      	movs	r0, r3
 800a72c:	f000 f83c 	bl	800a7a8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2284      	movs	r2, #132	; 0x84
 800a734:	2108      	movs	r1, #8
 800a736:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2278      	movs	r2, #120	; 0x78
 800a73c:	2100      	movs	r1, #0
 800a73e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	e02c      	b.n	800a79e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	69da      	ldr	r2, [r3, #28]
 800a74a:	2380      	movs	r3, #128	; 0x80
 800a74c:	011b      	lsls	r3, r3, #4
 800a74e:	401a      	ands	r2, r3
 800a750:	2380      	movs	r3, #128	; 0x80
 800a752:	011b      	lsls	r3, r3, #4
 800a754:	429a      	cmp	r2, r3
 800a756:	d112      	bne.n	800a77e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2280      	movs	r2, #128	; 0x80
 800a75e:	0112      	lsls	r2, r2, #4
 800a760:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	0018      	movs	r0, r3
 800a766:	f000 f81f 	bl	800a7a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2284      	movs	r2, #132	; 0x84
 800a76e:	2120      	movs	r1, #32
 800a770:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2278      	movs	r2, #120	; 0x78
 800a776:	2100      	movs	r1, #0
 800a778:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a77a:	2303      	movs	r3, #3
 800a77c:	e00f      	b.n	800a79e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	69db      	ldr	r3, [r3, #28]
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	4013      	ands	r3, r2
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	425a      	negs	r2, r3
 800a78e:	4153      	adcs	r3, r2
 800a790:	b2db      	uxtb	r3, r3
 800a792:	001a      	movs	r2, r3
 800a794:	1dfb      	adds	r3, r7, #7
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d0a4      	beq.n	800a6e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	0018      	movs	r0, r3
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	b004      	add	sp, #16
 800a7a4:	bd80      	pop	{r7, pc}
	...

0800a7a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08e      	sub	sp, #56	; 0x38
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7b0:	f3ef 8310 	mrs	r3, PRIMASK
 800a7b4:	617b      	str	r3, [r7, #20]
  return(result);
 800a7b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	f383 8810 	msr	PRIMASK, r3
}
 800a7c4:	46c0      	nop			; (mov r8, r8)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4926      	ldr	r1, [pc, #152]	; (800a86c <UART_EndRxTransfer+0xc4>)
 800a7d2:	400a      	ands	r2, r1
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	f383 8810 	msr	PRIMASK, r3
}
 800a7e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7e2:	f3ef 8310 	mrs	r3, PRIMASK
 800a7e6:	623b      	str	r3, [r7, #32]
  return(result);
 800a7e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ea:	633b      	str	r3, [r7, #48]	; 0x30
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	f383 8810 	msr	PRIMASK, r3
}
 800a7f6:	46c0      	nop			; (mov r8, r8)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689a      	ldr	r2, [r3, #8]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2101      	movs	r1, #1
 800a804:	438a      	bics	r2, r1
 800a806:	609a      	str	r2, [r3, #8]
 800a808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	f383 8810 	msr	PRIMASK, r3
}
 800a812:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d118      	bne.n	800a84e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a81c:	f3ef 8310 	mrs	r3, PRIMASK
 800a820:	60bb      	str	r3, [r7, #8]
  return(result);
 800a822:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a824:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a826:	2301      	movs	r3, #1
 800a828:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f383 8810 	msr	PRIMASK, r3
}
 800a830:	46c0      	nop			; (mov r8, r8)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2110      	movs	r1, #16
 800a83e:	438a      	bics	r2, r1
 800a840:	601a      	str	r2, [r3, #0]
 800a842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a844:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	f383 8810 	msr	PRIMASK, r3
}
 800a84c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2280      	movs	r2, #128	; 0x80
 800a852:	2120      	movs	r1, #32
 800a854:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a862:	46c0      	nop			; (mov r8, r8)
 800a864:	46bd      	mov	sp, r7
 800a866:	b00e      	add	sp, #56	; 0x38
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	46c0      	nop			; (mov r8, r8)
 800a86c:	fffffedf 	.word	0xfffffedf

0800a870 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	225a      	movs	r2, #90	; 0x5a
 800a882:	2100      	movs	r1, #0
 800a884:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2252      	movs	r2, #82	; 0x52
 800a88a:	2100      	movs	r1, #0
 800a88c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	0018      	movs	r0, r3
 800a892:	f7ff fb11 	bl	8009eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a896:	46c0      	nop			; (mov r8, r8)
 800a898:	46bd      	mov	sp, r7
 800a89a:	b004      	add	sp, #16
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b086      	sub	sp, #24
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a8aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8ac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8ae:	617b      	str	r3, [r7, #20]
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f383 8810 	msr	PRIMASK, r3
}
 800a8ba:	46c0      	nop			; (mov r8, r8)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2140      	movs	r1, #64	; 0x40
 800a8c8:	438a      	bics	r2, r1
 800a8ca:	601a      	str	r2, [r3, #0]
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	f383 8810 	msr	PRIMASK, r3
}
 800a8d6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2220      	movs	r2, #32
 800a8dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	0018      	movs	r0, r3
 800a8e8:	f7ff fade 	bl	8009ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8ec:	46c0      	nop			; (mov r8, r8)
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	b006      	add	sp, #24
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a8fc:	46c0      	nop			; (mov r8, r8)
 800a8fe:	46bd      	mov	sp, r7
 800a900:	b002      	add	sp, #8
 800a902:	bd80      	pop	{r7, pc}

0800a904 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a908:	4a06      	ldr	r2, [pc, #24]	; (800a924 <MX_FATFS_Init+0x20>)
 800a90a:	4b07      	ldr	r3, [pc, #28]	; (800a928 <MX_FATFS_Init+0x24>)
 800a90c:	0011      	movs	r1, r2
 800a90e:	0018      	movs	r0, r3
 800a910:	f003 fa40 	bl	800dd94 <FATFS_LinkDriver>
 800a914:	0003      	movs	r3, r0
 800a916:	001a      	movs	r2, r3
 800a918:	4b04      	ldr	r3, [pc, #16]	; (800a92c <MX_FATFS_Init+0x28>)
 800a91a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a91c:	46c0      	nop			; (mov r8, r8)
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	46c0      	nop			; (mov r8, r8)
 800a924:	20000d48 	.word	0x20000d48
 800a928:	20000018 	.word	0x20000018
 800a92c:	20000d44 	.word	0x20000d44

0800a930 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a934:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a936:	0018      	movs	r0, r3
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	0002      	movs	r2, r0
 800a944:	1dfb      	adds	r3, r7, #7
 800a946:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800a948:	1dfb      	adds	r3, r7, #7
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	0018      	movs	r0, r3
 800a94e:	f7fa fd03 	bl	8005358 <SD_disk_initialize>
 800a952:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 800a954:	0018      	movs	r0, r3
 800a956:	46bd      	mov	sp, r7
 800a958:	b002      	add	sp, #8
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	0002      	movs	r2, r0
 800a964:	1dfb      	adds	r3, r7, #7
 800a966:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800a968:	1dfb      	adds	r3, r7, #7
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	0018      	movs	r0, r3
 800a96e:	f7fa fe01 	bl	8005574 <SD_disk_status>
 800a972:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 800a974:	0018      	movs	r0, r3
 800a976:	46bd      	mov	sp, r7
 800a978:	b002      	add	sp, #8
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a97c:	b5b0      	push	{r4, r5, r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	60b9      	str	r1, [r7, #8]
 800a984:	607a      	str	r2, [r7, #4]
 800a986:	603b      	str	r3, [r7, #0]
 800a988:	250f      	movs	r5, #15
 800a98a:	197b      	adds	r3, r7, r5
 800a98c:	1c02      	adds	r2, r0, #0
 800a98e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800a990:	683c      	ldr	r4, [r7, #0]
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	68b9      	ldr	r1, [r7, #8]
 800a996:	197b      	adds	r3, r7, r5
 800a998:	7818      	ldrb	r0, [r3, #0]
 800a99a:	0023      	movs	r3, r4
 800a99c:	f7fa fe00 	bl	80055a0 <SD_disk_read>
 800a9a0:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 800a9a2:	0018      	movs	r0, r3
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	b004      	add	sp, #16
 800a9a8:	bdb0      	pop	{r4, r5, r7, pc}

0800a9aa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a9aa:	b5b0      	push	{r4, r5, r7, lr}
 800a9ac:	b084      	sub	sp, #16
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
 800a9b4:	603b      	str	r3, [r7, #0]
 800a9b6:	250f      	movs	r5, #15
 800a9b8:	197b      	adds	r3, r7, r5
 800a9ba:	1c02      	adds	r2, r0, #0
 800a9bc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800a9be:	683c      	ldr	r4, [r7, #0]
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	68b9      	ldr	r1, [r7, #8]
 800a9c4:	197b      	adds	r3, r7, r5
 800a9c6:	7818      	ldrb	r0, [r3, #0]
 800a9c8:	0023      	movs	r3, r4
 800a9ca:	f7fa fe59 	bl	8005680 <SD_disk_write>
 800a9ce:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 800a9d0:	0018      	movs	r0, r3
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	b004      	add	sp, #16
 800a9d6:	bdb0      	pop	{r4, r5, r7, pc}

0800a9d8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	603a      	str	r2, [r7, #0]
 800a9e0:	1dfb      	adds	r3, r7, #7
 800a9e2:	1c02      	adds	r2, r0, #0
 800a9e4:	701a      	strb	r2, [r3, #0]
 800a9e6:	1dbb      	adds	r3, r7, #6
 800a9e8:	1c0a      	adds	r2, r1, #0
 800a9ea:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	1dbb      	adds	r3, r7, #6
 800a9f0:	7819      	ldrb	r1, [r3, #0]
 800a9f2:	1dfb      	adds	r3, r7, #7
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	0018      	movs	r0, r3
 800a9f8:	f7fa feca 	bl	8005790 <SD_disk_ioctl>
 800a9fc:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 800a9fe:	0018      	movs	r0, r3
 800aa00:	46bd      	mov	sp, r7
 800aa02:	b002      	add	sp, #8
 800aa04:	bd80      	pop	{r7, pc}
	...

0800aa08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800aa08:	b5b0      	push	{r4, r5, r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	0002      	movs	r2, r0
 800aa10:	1dfb      	adds	r3, r7, #7
 800aa12:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800aa14:	1dfb      	adds	r3, r7, #7
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	4a0b      	ldr	r2, [pc, #44]	; (800aa48 <disk_status+0x40>)
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	18d3      	adds	r3, r2, r3
 800aa1e:	3304      	adds	r3, #4
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	1dfa      	adds	r2, r7, #7
 800aa26:	7812      	ldrb	r2, [r2, #0]
 800aa28:	4907      	ldr	r1, [pc, #28]	; (800aa48 <disk_status+0x40>)
 800aa2a:	188a      	adds	r2, r1, r2
 800aa2c:	7a12      	ldrb	r2, [r2, #8]
 800aa2e:	250f      	movs	r5, #15
 800aa30:	197c      	adds	r4, r7, r5
 800aa32:	0010      	movs	r0, r2
 800aa34:	4798      	blx	r3
 800aa36:	0003      	movs	r3, r0
 800aa38:	7023      	strb	r3, [r4, #0]
  return stat;
 800aa3a:	197b      	adds	r3, r7, r5
 800aa3c:	781b      	ldrb	r3, [r3, #0]
}
 800aa3e:	0018      	movs	r0, r3
 800aa40:	46bd      	mov	sp, r7
 800aa42:	b004      	add	sp, #16
 800aa44:	bdb0      	pop	{r4, r5, r7, pc}
 800aa46:	46c0      	nop			; (mov r8, r8)
 800aa48:	20000f74 	.word	0x20000f74

0800aa4c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800aa4c:	b590      	push	{r4, r7, lr}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	0002      	movs	r2, r0
 800aa54:	1dfb      	adds	r3, r7, #7
 800aa56:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 800aa58:	200f      	movs	r0, #15
 800aa5a:	183b      	adds	r3, r7, r0
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 800aa60:	1dfb      	adds	r3, r7, #7
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	4a10      	ldr	r2, [pc, #64]	; (800aaa8 <disk_initialize+0x5c>)
 800aa66:	5cd3      	ldrb	r3, [r2, r3]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d116      	bne.n	800aa9a <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 800aa6c:	1dfb      	adds	r3, r7, #7
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	4a0d      	ldr	r2, [pc, #52]	; (800aaa8 <disk_initialize+0x5c>)
 800aa72:	2101      	movs	r1, #1
 800aa74:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800aa76:	1dfb      	adds	r3, r7, #7
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	4a0b      	ldr	r2, [pc, #44]	; (800aaa8 <disk_initialize+0x5c>)
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	18d3      	adds	r3, r2, r3
 800aa80:	3304      	adds	r3, #4
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	1dfa      	adds	r2, r7, #7
 800aa88:	7812      	ldrb	r2, [r2, #0]
 800aa8a:	4907      	ldr	r1, [pc, #28]	; (800aaa8 <disk_initialize+0x5c>)
 800aa8c:	188a      	adds	r2, r1, r2
 800aa8e:	7a12      	ldrb	r2, [r2, #8]
 800aa90:	183c      	adds	r4, r7, r0
 800aa92:	0010      	movs	r0, r2
 800aa94:	4798      	blx	r3
 800aa96:	0003      	movs	r3, r0
 800aa98:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 800aa9a:	230f      	movs	r3, #15
 800aa9c:	18fb      	adds	r3, r7, r3
 800aa9e:	781b      	ldrb	r3, [r3, #0]
}
 800aaa0:	0018      	movs	r0, r3
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	b005      	add	sp, #20
 800aaa6:	bd90      	pop	{r4, r7, pc}
 800aaa8:	20000f74 	.word	0x20000f74

0800aaac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aaac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaae:	b087      	sub	sp, #28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60b9      	str	r1, [r7, #8]
 800aab4:	607a      	str	r2, [r7, #4]
 800aab6:	603b      	str	r3, [r7, #0]
 800aab8:	210f      	movs	r1, #15
 800aaba:	187b      	adds	r3, r7, r1
 800aabc:	1c02      	adds	r2, r0, #0
 800aabe:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aac0:	187b      	adds	r3, r7, r1
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	4a0c      	ldr	r2, [pc, #48]	; (800aaf8 <disk_read+0x4c>)
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	18d3      	adds	r3, r2, r3
 800aaca:	3304      	adds	r3, #4
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	689d      	ldr	r5, [r3, #8]
 800aad0:	187b      	adds	r3, r7, r1
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	4a08      	ldr	r2, [pc, #32]	; (800aaf8 <disk_read+0x4c>)
 800aad6:	18d3      	adds	r3, r2, r3
 800aad8:	7a18      	ldrb	r0, [r3, #8]
 800aada:	2617      	movs	r6, #23
 800aadc:	19bc      	adds	r4, r7, r6
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	68b9      	ldr	r1, [r7, #8]
 800aae4:	47a8      	blx	r5
 800aae6:	0003      	movs	r3, r0
 800aae8:	7023      	strb	r3, [r4, #0]
  return res;
 800aaea:	19bb      	adds	r3, r7, r6
 800aaec:	781b      	ldrb	r3, [r3, #0]
}
 800aaee:	0018      	movs	r0, r3
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	b007      	add	sp, #28
 800aaf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaf6:	46c0      	nop			; (mov r8, r8)
 800aaf8:	20000f74 	.word	0x20000f74

0800aafc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800aafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aafe:	b087      	sub	sp, #28
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60b9      	str	r1, [r7, #8]
 800ab04:	607a      	str	r2, [r7, #4]
 800ab06:	603b      	str	r3, [r7, #0]
 800ab08:	210f      	movs	r1, #15
 800ab0a:	187b      	adds	r3, r7, r1
 800ab0c:	1c02      	adds	r2, r0, #0
 800ab0e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ab10:	187b      	adds	r3, r7, r1
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	4a0c      	ldr	r2, [pc, #48]	; (800ab48 <disk_write+0x4c>)
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	18d3      	adds	r3, r2, r3
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68dd      	ldr	r5, [r3, #12]
 800ab20:	187b      	adds	r3, r7, r1
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	4a08      	ldr	r2, [pc, #32]	; (800ab48 <disk_write+0x4c>)
 800ab26:	18d3      	adds	r3, r2, r3
 800ab28:	7a18      	ldrb	r0, [r3, #8]
 800ab2a:	2617      	movs	r6, #23
 800ab2c:	19bc      	adds	r4, r7, r6
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	68b9      	ldr	r1, [r7, #8]
 800ab34:	47a8      	blx	r5
 800ab36:	0003      	movs	r3, r0
 800ab38:	7023      	strb	r3, [r4, #0]
  return res;
 800ab3a:	19bb      	adds	r3, r7, r6
 800ab3c:	781b      	ldrb	r3, [r3, #0]
}
 800ab3e:	0018      	movs	r0, r3
 800ab40:	46bd      	mov	sp, r7
 800ab42:	b007      	add	sp, #28
 800ab44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab46:	46c0      	nop			; (mov r8, r8)
 800ab48:	20000f74 	.word	0x20000f74

0800ab4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ab4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	603a      	str	r2, [r7, #0]
 800ab54:	1dfb      	adds	r3, r7, #7
 800ab56:	1c02      	adds	r2, r0, #0
 800ab58:	701a      	strb	r2, [r3, #0]
 800ab5a:	1dbb      	adds	r3, r7, #6
 800ab5c:	1c0a      	adds	r2, r1, #0
 800ab5e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ab60:	1dfb      	adds	r3, r7, #7
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	4a0c      	ldr	r2, [pc, #48]	; (800ab98 <disk_ioctl+0x4c>)
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	18d3      	adds	r3, r2, r3
 800ab6a:	3304      	adds	r3, #4
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	1dfa      	adds	r2, r7, #7
 800ab72:	7812      	ldrb	r2, [r2, #0]
 800ab74:	4908      	ldr	r1, [pc, #32]	; (800ab98 <disk_ioctl+0x4c>)
 800ab76:	188a      	adds	r2, r1, r2
 800ab78:	7a10      	ldrb	r0, [r2, #8]
 800ab7a:	260f      	movs	r6, #15
 800ab7c:	19bc      	adds	r4, r7, r6
 800ab7e:	683d      	ldr	r5, [r7, #0]
 800ab80:	1dba      	adds	r2, r7, #6
 800ab82:	7811      	ldrb	r1, [r2, #0]
 800ab84:	002a      	movs	r2, r5
 800ab86:	4798      	blx	r3
 800ab88:	0003      	movs	r3, r0
 800ab8a:	7023      	strb	r3, [r4, #0]
  return res;
 800ab8c:	19bb      	adds	r3, r7, r6
 800ab8e:	781b      	ldrb	r3, [r3, #0]
}
 800ab90:	0018      	movs	r0, r3
 800ab92:	46bd      	mov	sp, r7
 800ab94:	b005      	add	sp, #20
 800ab96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab98:	20000f74 	.word	0x20000f74

0800ab9c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3301      	adds	r3, #1
 800aba8:	781a      	ldrb	r2, [r3, #0]
 800abaa:	210e      	movs	r1, #14
 800abac:	187b      	adds	r3, r7, r1
 800abae:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 800abb0:	187b      	adds	r3, r7, r1
 800abb2:	881b      	ldrh	r3, [r3, #0]
 800abb4:	021b      	lsls	r3, r3, #8
 800abb6:	b21a      	sxth	r2, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	b21b      	sxth	r3, r3
 800abbe:	4313      	orrs	r3, r2
 800abc0:	b21a      	sxth	r2, r3
 800abc2:	187b      	adds	r3, r7, r1
 800abc4:	801a      	strh	r2, [r3, #0]
	return rv;
 800abc6:	187b      	adds	r3, r7, r1
 800abc8:	881b      	ldrh	r3, [r3, #0]
}
 800abca:	0018      	movs	r0, r3
 800abcc:	46bd      	mov	sp, r7
 800abce:	b004      	add	sp, #16
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b084      	sub	sp, #16
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	3303      	adds	r3, #3
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	021b      	lsls	r3, r3, #8
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	3202      	adds	r2, #2
 800abea:	7812      	ldrb	r2, [r2, #0]
 800abec:	4313      	orrs	r3, r2
 800abee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	021b      	lsls	r3, r3, #8
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	3201      	adds	r2, #1
 800abf8:	7812      	ldrb	r2, [r2, #0]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	021b      	lsls	r3, r3, #8
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	7812      	ldrb	r2, [r2, #0]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]
	return rv;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
}
 800ac0c:	0018      	movs	r0, r3
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	b004      	add	sp, #16
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	000a      	movs	r2, r1
 800ac1e:	1cbb      	adds	r3, r7, #2
 800ac20:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	1c5a      	adds	r2, r3, #1
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	1cba      	adds	r2, r7, #2
 800ac2a:	8812      	ldrh	r2, [r2, #0]
 800ac2c:	b2d2      	uxtb	r2, r2
 800ac2e:	701a      	strb	r2, [r3, #0]
 800ac30:	1cbb      	adds	r3, r7, #2
 800ac32:	1cba      	adds	r2, r7, #2
 800ac34:	8812      	ldrh	r2, [r2, #0]
 800ac36:	0a12      	lsrs	r2, r2, #8
 800ac38:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	1c5a      	adds	r2, r3, #1
 800ac3e:	607a      	str	r2, [r7, #4]
 800ac40:	1cba      	adds	r2, r7, #2
 800ac42:	8812      	ldrh	r2, [r2, #0]
 800ac44:	b2d2      	uxtb	r2, r2
 800ac46:	701a      	strb	r2, [r3, #0]
}
 800ac48:	46c0      	nop			; (mov r8, r8)
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	b002      	add	sp, #8
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	1c5a      	adds	r2, r3, #1
 800ac5e:	607a      	str	r2, [r7, #4]
 800ac60:	683a      	ldr	r2, [r7, #0]
 800ac62:	b2d2      	uxtb	r2, r2
 800ac64:	701a      	strb	r2, [r3, #0]
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	0a1b      	lsrs	r3, r3, #8
 800ac6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	1c5a      	adds	r2, r3, #1
 800ac70:	607a      	str	r2, [r7, #4]
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	b2d2      	uxtb	r2, r2
 800ac76:	701a      	strb	r2, [r3, #0]
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	0a1b      	lsrs	r3, r3, #8
 800ac7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	1c5a      	adds	r2, r3, #1
 800ac82:	607a      	str	r2, [r7, #4]
 800ac84:	683a      	ldr	r2, [r7, #0]
 800ac86:	b2d2      	uxtb	r2, r2
 800ac88:	701a      	strb	r2, [r3, #0]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	0a1b      	lsrs	r3, r3, #8
 800ac8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	1c5a      	adds	r2, r3, #1
 800ac94:	607a      	str	r2, [r7, #4]
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	b2d2      	uxtb	r2, r2
 800ac9a:	701a      	strb	r2, [r3, #0]
}
 800ac9c:	46c0      	nop			; (mov r8, r8)
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	b002      	add	sp, #8
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00d      	beq.n	800acda <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	1c53      	adds	r3, r2, #1
 800acc2:	613b      	str	r3, [r7, #16]
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	1c59      	adds	r1, r3, #1
 800acc8:	6179      	str	r1, [r7, #20]
 800acca:	7812      	ldrb	r2, [r2, #0]
 800accc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	3b01      	subs	r3, #1
 800acd2:	607b      	str	r3, [r7, #4]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1f1      	bne.n	800acbe <mem_cpy+0x1a>
	}
}
 800acda:	46c0      	nop			; (mov r8, r8)
 800acdc:	46bd      	mov	sp, r7
 800acde:	b006      	add	sp, #24
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b086      	sub	sp, #24
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	60f8      	str	r0, [r7, #12]
 800acea:	60b9      	str	r1, [r7, #8]
 800acec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	1c5a      	adds	r2, r3, #1
 800acf6:	617a      	str	r2, [r7, #20]
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	b2d2      	uxtb	r2, r2
 800acfc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	3b01      	subs	r3, #1
 800ad02:	607b      	str	r3, [r7, #4]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1f3      	bne.n	800acf2 <mem_set+0x10>
}
 800ad0a:	46c0      	nop			; (mov r8, r8)
 800ad0c:	46c0      	nop			; (mov r8, r8)
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	b006      	add	sp, #24
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b088      	sub	sp, #32
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	61fb      	str	r3, [r7, #28]
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	1c5a      	adds	r2, r3, #1
 800ad30:	61fa      	str	r2, [r7, #28]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	0019      	movs	r1, r3
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	1c5a      	adds	r2, r3, #1
 800ad3a:	61ba      	str	r2, [r7, #24]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	1acb      	subs	r3, r1, r3
 800ad40:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	3b01      	subs	r3, #1
 800ad46:	607b      	str	r3, [r7, #4]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d002      	beq.n	800ad54 <mem_cmp+0x40>
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d0eb      	beq.n	800ad2c <mem_cmp+0x18>

	return r;
 800ad54:	697b      	ldr	r3, [r7, #20]
}
 800ad56:	0018      	movs	r0, r3
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	b008      	add	sp, #32
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b082      	sub	sp, #8
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ad68:	e002      	b.n	800ad70 <chk_chr+0x12>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	607b      	str	r3, [r7, #4]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d005      	beq.n	800ad84 <chk_chr+0x26>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	001a      	movs	r2, r3
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d1f2      	bne.n	800ad6a <chk_chr+0xc>
	return *str;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	781b      	ldrb	r3, [r3, #0]
}
 800ad88:	0018      	movs	r0, r3
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	b002      	add	sp, #8
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	60bb      	str	r3, [r7, #8]
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	60fb      	str	r3, [r7, #12]
 800ada2:	e027      	b.n	800adf4 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 800ada4:	4b25      	ldr	r3, [pc, #148]	; (800ae3c <chk_lock+0xac>)
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	0112      	lsls	r2, r2, #4
 800adaa:	58d3      	ldr	r3, [r2, r3]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d01c      	beq.n	800adea <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800adb0:	4b22      	ldr	r3, [pc, #136]	; (800ae3c <chk_lock+0xac>)
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	0112      	lsls	r2, r2, #4
 800adb6:	58d2      	ldr	r2, [r2, r3]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d116      	bne.n	800adee <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 800adc0:	4a1e      	ldr	r2, [pc, #120]	; (800ae3c <chk_lock+0xac>)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	011b      	lsls	r3, r3, #4
 800adc6:	18d3      	adds	r3, r2, r3
 800adc8:	3304      	adds	r3, #4
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800add0:	429a      	cmp	r2, r3
 800add2:	d10c      	bne.n	800adee <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 800add4:	4a19      	ldr	r2, [pc, #100]	; (800ae3c <chk_lock+0xac>)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	011b      	lsls	r3, r3, #4
 800adda:	18d3      	adds	r3, r2, r3
 800addc:	3308      	adds	r3, #8
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d102      	bne.n	800adee <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 800ade8:	e007      	b.n	800adfa <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 800adea:	2301      	movs	r3, #1
 800adec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3301      	adds	r3, #1
 800adf2:	60fb      	str	r3, [r7, #12]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d9d4      	bls.n	800ada4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	d109      	bne.n	800ae14 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d102      	bne.n	800ae0c <chk_lock+0x7c>
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d101      	bne.n	800ae10 <chk_lock+0x80>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	e011      	b.n	800ae34 <chk_lock+0xa4>
 800ae10:	2312      	movs	r3, #18
 800ae12:	e00f      	b.n	800ae34 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d109      	bne.n	800ae2e <chk_lock+0x9e>
 800ae1a:	4a08      	ldr	r2, [pc, #32]	; (800ae3c <chk_lock+0xac>)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	011b      	lsls	r3, r3, #4
 800ae20:	18d3      	adds	r3, r2, r3
 800ae22:	330c      	adds	r3, #12
 800ae24:	881a      	ldrh	r2, [r3, #0]
 800ae26:	2380      	movs	r3, #128	; 0x80
 800ae28:	005b      	lsls	r3, r3, #1
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d101      	bne.n	800ae32 <chk_lock+0xa2>
 800ae2e:	2310      	movs	r3, #16
 800ae30:	e000      	b.n	800ae34 <chk_lock+0xa4>
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	0018      	movs	r0, r3
 800ae36:	46bd      	mov	sp, r7
 800ae38:	b004      	add	sp, #16
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	20000d54 	.word	0x20000d54

0800ae40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae46:	2300      	movs	r3, #0
 800ae48:	607b      	str	r3, [r7, #4]
 800ae4a:	e002      	b.n	800ae52 <enq_lock+0x12>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	607b      	str	r3, [r7, #4]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d805      	bhi.n	800ae64 <enq_lock+0x24>
 800ae58:	4b07      	ldr	r3, [pc, #28]	; (800ae78 <enq_lock+0x38>)
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	0112      	lsls	r2, r2, #4
 800ae5e:	58d3      	ldr	r3, [r2, r3]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1f3      	bne.n	800ae4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	3b02      	subs	r3, #2
 800ae68:	1e5a      	subs	r2, r3, #1
 800ae6a:	4193      	sbcs	r3, r2
 800ae6c:	b2db      	uxtb	r3, r3
}
 800ae6e:	0018      	movs	r0, r3
 800ae70:	46bd      	mov	sp, r7
 800ae72:	b002      	add	sp, #8
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	46c0      	nop			; (mov r8, r8)
 800ae78:	20000d54 	.word	0x20000d54

0800ae7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae86:	2300      	movs	r3, #0
 800ae88:	60fb      	str	r3, [r7, #12]
 800ae8a:	e01e      	b.n	800aeca <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 800ae8c:	4b3f      	ldr	r3, [pc, #252]	; (800af8c <inc_lock+0x110>)
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	0112      	lsls	r2, r2, #4
 800ae92:	58d2      	ldr	r2, [r2, r3]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d113      	bne.n	800aec4 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 800ae9c:	4a3b      	ldr	r2, [pc, #236]	; (800af8c <inc_lock+0x110>)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	011b      	lsls	r3, r3, #4
 800aea2:	18d3      	adds	r3, r2, r3
 800aea4:	3304      	adds	r3, #4
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d109      	bne.n	800aec4 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 800aeb0:	4a36      	ldr	r2, [pc, #216]	; (800af8c <inc_lock+0x110>)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	011b      	lsls	r3, r3, #4
 800aeb6:	18d3      	adds	r3, r2, r3
 800aeb8:	3308      	adds	r3, #8
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d006      	beq.n	800aed2 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	3301      	adds	r3, #1
 800aec8:	60fb      	str	r3, [r7, #12]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d9dd      	bls.n	800ae8c <inc_lock+0x10>
 800aed0:	e000      	b.n	800aed4 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 800aed2:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d130      	bne.n	800af3c <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aeda:	2300      	movs	r3, #0
 800aedc:	60fb      	str	r3, [r7, #12]
 800aede:	e002      	b.n	800aee6 <inc_lock+0x6a>
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	3301      	adds	r3, #1
 800aee4:	60fb      	str	r3, [r7, #12]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d805      	bhi.n	800aef8 <inc_lock+0x7c>
 800aeec:	4b27      	ldr	r3, [pc, #156]	; (800af8c <inc_lock+0x110>)
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	0112      	lsls	r2, r2, #4
 800aef2:	58d3      	ldr	r3, [r2, r3]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1f3      	bne.n	800aee0 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d101      	bne.n	800af02 <inc_lock+0x86>
 800aefe:	2300      	movs	r3, #0
 800af00:	e03f      	b.n	800af82 <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6819      	ldr	r1, [r3, #0]
 800af06:	4b21      	ldr	r3, [pc, #132]	; (800af8c <inc_lock+0x110>)
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	0112      	lsls	r2, r2, #4
 800af0c:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	689a      	ldr	r2, [r3, #8]
 800af12:	491e      	ldr	r1, [pc, #120]	; (800af8c <inc_lock+0x110>)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	011b      	lsls	r3, r3, #4
 800af18:	18cb      	adds	r3, r1, r3
 800af1a:	3304      	adds	r3, #4
 800af1c:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	695a      	ldr	r2, [r3, #20]
 800af22:	491a      	ldr	r1, [pc, #104]	; (800af8c <inc_lock+0x110>)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	011b      	lsls	r3, r3, #4
 800af28:	18cb      	adds	r3, r1, r3
 800af2a:	3308      	adds	r3, #8
 800af2c:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800af2e:	4a17      	ldr	r2, [pc, #92]	; (800af8c <inc_lock+0x110>)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	011b      	lsls	r3, r3, #4
 800af34:	18d3      	adds	r3, r2, r3
 800af36:	330c      	adds	r3, #12
 800af38:	2200      	movs	r2, #0
 800af3a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d009      	beq.n	800af56 <inc_lock+0xda>
 800af42:	4a12      	ldr	r2, [pc, #72]	; (800af8c <inc_lock+0x110>)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	011b      	lsls	r3, r3, #4
 800af48:	18d3      	adds	r3, r2, r3
 800af4a:	330c      	adds	r3, #12
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d001      	beq.n	800af56 <inc_lock+0xda>
 800af52:	2300      	movs	r3, #0
 800af54:	e015      	b.n	800af82 <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d108      	bne.n	800af6e <inc_lock+0xf2>
 800af5c:	4a0b      	ldr	r2, [pc, #44]	; (800af8c <inc_lock+0x110>)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	011b      	lsls	r3, r3, #4
 800af62:	18d3      	adds	r3, r2, r3
 800af64:	330c      	adds	r3, #12
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	3301      	adds	r3, #1
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	e001      	b.n	800af72 <inc_lock+0xf6>
 800af6e:	2380      	movs	r3, #128	; 0x80
 800af70:	005b      	lsls	r3, r3, #1
 800af72:	4906      	ldr	r1, [pc, #24]	; (800af8c <inc_lock+0x110>)
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	0112      	lsls	r2, r2, #4
 800af78:	188a      	adds	r2, r1, r2
 800af7a:	320c      	adds	r2, #12
 800af7c:	8013      	strh	r3, [r2, #0]

	return i + 1;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	3301      	adds	r3, #1
}
 800af82:	0018      	movs	r0, r3
 800af84:	46bd      	mov	sp, r7
 800af86:	b004      	add	sp, #16
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	46c0      	nop			; (mov r8, r8)
 800af8c:	20000d54 	.word	0x20000d54

0800af90 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	3b01      	subs	r3, #1
 800af9c:	607b      	str	r3, [r7, #4]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d832      	bhi.n	800b00a <dec_lock+0x7a>
		n = Files[i].ctr;
 800afa4:	200e      	movs	r0, #14
 800afa6:	183b      	adds	r3, r7, r0
 800afa8:	491d      	ldr	r1, [pc, #116]	; (800b020 <dec_lock+0x90>)
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	0112      	lsls	r2, r2, #4
 800afae:	188a      	adds	r2, r1, r2
 800afb0:	320c      	adds	r2, #12
 800afb2:	8812      	ldrh	r2, [r2, #0]
 800afb4:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800afb6:	183b      	adds	r3, r7, r0
 800afb8:	881a      	ldrh	r2, [r3, #0]
 800afba:	2380      	movs	r3, #128	; 0x80
 800afbc:	005b      	lsls	r3, r3, #1
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d102      	bne.n	800afc8 <dec_lock+0x38>
 800afc2:	183b      	adds	r3, r7, r0
 800afc4:	2200      	movs	r2, #0
 800afc6:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 800afc8:	210e      	movs	r1, #14
 800afca:	187b      	adds	r3, r7, r1
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d004      	beq.n	800afdc <dec_lock+0x4c>
 800afd2:	187b      	adds	r3, r7, r1
 800afd4:	881a      	ldrh	r2, [r3, #0]
 800afd6:	187b      	adds	r3, r7, r1
 800afd8:	3a01      	subs	r2, #1
 800afda:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 800afdc:	4a10      	ldr	r2, [pc, #64]	; (800b020 <dec_lock+0x90>)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	011b      	lsls	r3, r3, #4
 800afe2:	18d3      	adds	r3, r2, r3
 800afe4:	330c      	adds	r3, #12
 800afe6:	210e      	movs	r1, #14
 800afe8:	187a      	adds	r2, r7, r1
 800afea:	8812      	ldrh	r2, [r2, #0]
 800afec:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800afee:	187b      	adds	r3, r7, r1
 800aff0:	881b      	ldrh	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d104      	bne.n	800b000 <dec_lock+0x70>
 800aff6:	4b0a      	ldr	r3, [pc, #40]	; (800b020 <dec_lock+0x90>)
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	0112      	lsls	r2, r2, #4
 800affc:	2100      	movs	r1, #0
 800affe:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 800b000:	230d      	movs	r3, #13
 800b002:	18fb      	adds	r3, r7, r3
 800b004:	2200      	movs	r2, #0
 800b006:	701a      	strb	r2, [r3, #0]
 800b008:	e003      	b.n	800b012 <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b00a:	230d      	movs	r3, #13
 800b00c:	18fb      	adds	r3, r7, r3
 800b00e:	2202      	movs	r2, #2
 800b010:	701a      	strb	r2, [r3, #0]
	}
	return res;
 800b012:	230d      	movs	r3, #13
 800b014:	18fb      	adds	r3, r7, r3
 800b016:	781b      	ldrb	r3, [r3, #0]
}
 800b018:	0018      	movs	r0, r3
 800b01a:	46bd      	mov	sp, r7
 800b01c:	b004      	add	sp, #16
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	20000d54 	.word	0x20000d54

0800b024 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b02c:	2300      	movs	r3, #0
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	e00e      	b.n	800b050 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b032:	4b0b      	ldr	r3, [pc, #44]	; (800b060 <clear_lock+0x3c>)
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	0112      	lsls	r2, r2, #4
 800b038:	58d3      	ldr	r3, [r2, r3]
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d104      	bne.n	800b04a <clear_lock+0x26>
 800b040:	4b07      	ldr	r3, [pc, #28]	; (800b060 <clear_lock+0x3c>)
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	0112      	lsls	r2, r2, #4
 800b046:	2100      	movs	r1, #0
 800b048:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	3301      	adds	r3, #1
 800b04e:	60fb      	str	r3, [r7, #12]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d9ed      	bls.n	800b032 <clear_lock+0xe>
	}
}
 800b056:	46c0      	nop			; (mov r8, r8)
 800b058:	46c0      	nop			; (mov r8, r8)
 800b05a:	46bd      	mov	sp, r7
 800b05c:	b004      	add	sp, #16
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	20000d54 	.word	0x20000d54

0800b064 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b064:	b590      	push	{r4, r7, lr}
 800b066:	b087      	sub	sp, #28
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b06c:	240f      	movs	r4, #15
 800b06e:	193b      	adds	r3, r7, r4
 800b070:	2200      	movs	r2, #0
 800b072:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	78db      	ldrb	r3, [r3, #3]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d034      	beq.n	800b0e6 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b080:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	7858      	ldrb	r0, [r3, #1]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3338      	adds	r3, #56	; 0x38
 800b08a:	0019      	movs	r1, r3
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	2301      	movs	r3, #1
 800b090:	f7ff fd34 	bl	800aafc <disk_write>
 800b094:	1e03      	subs	r3, r0, #0
 800b096:	d003      	beq.n	800b0a0 <sync_window+0x3c>
			res = FR_DISK_ERR;
 800b098:	193b      	adds	r3, r7, r4
 800b09a:	2201      	movs	r2, #1
 800b09c:	701a      	strb	r2, [r3, #0]
 800b09e:	e022      	b.n	800b0e6 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0aa:	697a      	ldr	r2, [r7, #20]
 800b0ac:	1ad2      	subs	r2, r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d217      	bcs.n	800b0e6 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	789b      	ldrb	r3, [r3, #2]
 800b0ba:	613b      	str	r3, [r7, #16]
 800b0bc:	e010      	b.n	800b0e0 <sync_window+0x7c>
					wsect += fs->fsize;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a1b      	ldr	r3, [r3, #32]
 800b0c2:	697a      	ldr	r2, [r7, #20]
 800b0c4:	18d3      	adds	r3, r2, r3
 800b0c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	7858      	ldrb	r0, [r3, #1]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	3338      	adds	r3, #56	; 0x38
 800b0d0:	0019      	movs	r1, r3
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	f7ff fd11 	bl	800aafc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	613b      	str	r3, [r7, #16]
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d8eb      	bhi.n	800b0be <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 800b0e6:	230f      	movs	r3, #15
 800b0e8:	18fb      	adds	r3, r7, r3
 800b0ea:	781b      	ldrb	r3, [r3, #0]
}
 800b0ec:	0018      	movs	r0, r3
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	b007      	add	sp, #28
 800b0f2:	bd90      	pop	{r4, r7, pc}

0800b0f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b0f4:	b5b0      	push	{r4, r5, r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b0fe:	250f      	movs	r5, #15
 800b100:	197b      	adds	r3, r7, r5
 800b102:	2200      	movs	r2, #0
 800b104:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d01f      	beq.n	800b150 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b110:	197c      	adds	r4, r7, r5
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	0018      	movs	r0, r3
 800b116:	f7ff ffa5 	bl	800b064 <sync_window>
 800b11a:	0003      	movs	r3, r0
 800b11c:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b11e:	002c      	movs	r4, r5
 800b120:	193b      	adds	r3, r7, r4
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d113      	bne.n	800b150 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	7858      	ldrb	r0, [r3, #1]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3338      	adds	r3, #56	; 0x38
 800b130:	0019      	movs	r1, r3
 800b132:	683a      	ldr	r2, [r7, #0]
 800b134:	2301      	movs	r3, #1
 800b136:	f7ff fcb9 	bl	800aaac <disk_read>
 800b13a:	1e03      	subs	r3, r0, #0
 800b13c:	d005      	beq.n	800b14a <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b13e:	2301      	movs	r3, #1
 800b140:	425b      	negs	r3, r3
 800b142:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b144:	193b      	adds	r3, r7, r4
 800b146:	2201      	movs	r2, #1
 800b148:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b150:	230f      	movs	r3, #15
 800b152:	18fb      	adds	r3, r7, r3
 800b154:	781b      	ldrb	r3, [r3, #0]
}
 800b156:	0018      	movs	r0, r3
 800b158:	46bd      	mov	sp, r7
 800b15a:	b004      	add	sp, #16
 800b15c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b160 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b160:	b5b0      	push	{r4, r5, r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b168:	250f      	movs	r5, #15
 800b16a:	197c      	adds	r4, r7, r5
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	0018      	movs	r0, r3
 800b170:	f7ff ff78 	bl	800b064 <sync_window>
 800b174:	0003      	movs	r3, r0
 800b176:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800b178:	197b      	adds	r3, r7, r5
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d15e      	bne.n	800b23e <sync_fs+0xde>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	2b03      	cmp	r3, #3
 800b186:	d14d      	bne.n	800b224 <sync_fs+0xc4>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	791b      	ldrb	r3, [r3, #4]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d149      	bne.n	800b224 <sync_fs+0xc4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	3338      	adds	r3, #56	; 0x38
 800b194:	0018      	movs	r0, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	899b      	ldrh	r3, [r3, #12]
 800b19a:	001a      	movs	r2, r3
 800b19c:	2100      	movs	r1, #0
 800b19e:	f7ff fda0 	bl	800ace2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	3338      	adds	r3, #56	; 0x38
 800b1a6:	33ff      	adds	r3, #255	; 0xff
 800b1a8:	33ff      	adds	r3, #255	; 0xff
 800b1aa:	4a28      	ldr	r2, [pc, #160]	; (800b24c <sync_fs+0xec>)
 800b1ac:	0011      	movs	r1, r2
 800b1ae:	0018      	movs	r0, r3
 800b1b0:	f7ff fd30 	bl	800ac14 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	3338      	adds	r3, #56	; 0x38
 800b1b8:	4a25      	ldr	r2, [pc, #148]	; (800b250 <sync_fs+0xf0>)
 800b1ba:	0011      	movs	r1, r2
 800b1bc:	0018      	movs	r0, r3
 800b1be:	f7ff fd47 	bl	800ac50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	3338      	adds	r3, #56	; 0x38
 800b1c6:	33e5      	adds	r3, #229	; 0xe5
 800b1c8:	33ff      	adds	r3, #255	; 0xff
 800b1ca:	4a22      	ldr	r2, [pc, #136]	; (800b254 <sync_fs+0xf4>)
 800b1cc:	0011      	movs	r1, r2
 800b1ce:	0018      	movs	r0, r3
 800b1d0:	f7ff fd3e 	bl	800ac50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3338      	adds	r3, #56	; 0x38
 800b1d8:	33e9      	adds	r3, #233	; 0xe9
 800b1da:	33ff      	adds	r3, #255	; 0xff
 800b1dc:	001a      	movs	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	0019      	movs	r1, r3
 800b1e4:	0010      	movs	r0, r2
 800b1e6:	f7ff fd33 	bl	800ac50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	3338      	adds	r3, #56	; 0x38
 800b1ee:	33ed      	adds	r3, #237	; 0xed
 800b1f0:	33ff      	adds	r3, #255	; 0xff
 800b1f2:	001a      	movs	r2, r3
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	695b      	ldr	r3, [r3, #20]
 800b1f8:	0019      	movs	r1, r3
 800b1fa:	0010      	movs	r0, r2
 800b1fc:	f7ff fd28 	bl	800ac50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b204:	1c5a      	adds	r2, r3, #1
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	7858      	ldrb	r0, [r3, #1]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	3338      	adds	r3, #56	; 0x38
 800b212:	0019      	movs	r1, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b218:	2301      	movs	r3, #1
 800b21a:	f7ff fc6f 	bl	800aafc <disk_write>
			fs->fsi_flag = 0;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	785b      	ldrb	r3, [r3, #1]
 800b228:	2200      	movs	r2, #0
 800b22a:	2100      	movs	r1, #0
 800b22c:	0018      	movs	r0, r3
 800b22e:	f7ff fc8d 	bl	800ab4c <disk_ioctl>
 800b232:	1e03      	subs	r3, r0, #0
 800b234:	d003      	beq.n	800b23e <sync_fs+0xde>
 800b236:	230f      	movs	r3, #15
 800b238:	18fb      	adds	r3, r7, r3
 800b23a:	2201      	movs	r2, #1
 800b23c:	701a      	strb	r2, [r3, #0]
	}

	return res;
 800b23e:	230f      	movs	r3, #15
 800b240:	18fb      	adds	r3, r7, r3
 800b242:	781b      	ldrb	r3, [r3, #0]
}
 800b244:	0018      	movs	r0, r3
 800b246:	46bd      	mov	sp, r7
 800b248:	b004      	add	sp, #16
 800b24a:	bdb0      	pop	{r4, r5, r7, pc}
 800b24c:	0000aa55 	.word	0x0000aa55
 800b250:	41615252 	.word	0x41615252
 800b254:	61417272 	.word	0x61417272

0800b258 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	3b02      	subs	r3, #2
 800b266:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	69db      	ldr	r3, [r3, #28]
 800b26c:	3b02      	subs	r3, #2
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	429a      	cmp	r2, r3
 800b272:	d301      	bcc.n	800b278 <clust2sect+0x20>
 800b274:	2300      	movs	r3, #0
 800b276:	e007      	b.n	800b288 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	895b      	ldrh	r3, [r3, #10]
 800b27c:	001a      	movs	r2, r3
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	435a      	muls	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b286:	18d3      	adds	r3, r2, r3
}
 800b288:	0018      	movs	r0, r3
 800b28a:	46bd      	mov	sp, r7
 800b28c:	b002      	add	sp, #8
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b290:	b590      	push	{r4, r7, lr}
 800b292:	b087      	sub	sp, #28
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d904      	bls.n	800b2b0 <get_fat+0x20>
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	69db      	ldr	r3, [r3, #28]
 800b2aa:	683a      	ldr	r2, [r7, #0]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d302      	bcc.n	800b2b6 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	617b      	str	r3, [r7, #20]
 800b2b4:	e0c2      	b.n	800b43c <get_fat+0x1ac>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	425b      	negs	r3, r3
 800b2ba:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	d100      	bne.n	800b2c6 <get_fat+0x36>
 800b2c4:	e088      	b.n	800b3d8 <get_fat+0x148>
 800b2c6:	dd00      	ble.n	800b2ca <get_fat+0x3a>
 800b2c8:	e0ae      	b.n	800b428 <get_fat+0x198>
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d002      	beq.n	800b2d4 <get_fat+0x44>
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d05c      	beq.n	800b38c <get_fat+0xfc>
 800b2d2:	e0a9      	b.n	800b428 <get_fat+0x198>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	085b      	lsrs	r3, r3, #1
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	18d3      	adds	r3, r2, r3
 800b2e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	899b      	ldrh	r3, [r3, #12]
 800b2ea:	0019      	movs	r1, r3
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f7f4 ff27 	bl	8000140 <__udivsi3>
 800b2f2:	0003      	movs	r3, r0
 800b2f4:	18e2      	adds	r2, r4, r3
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	0011      	movs	r1, r2
 800b2fa:	0018      	movs	r0, r3
 800b2fc:	f7ff fefa 	bl	800b0f4 <move_window>
 800b300:	1e03      	subs	r3, r0, #0
 800b302:	d000      	beq.n	800b306 <get_fat+0x76>
 800b304:	e093      	b.n	800b42e <get_fat+0x19e>
			wc = fs->win[bc++ % SS(fs)];
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	1c5a      	adds	r2, r3, #1
 800b30a:	60fa      	str	r2, [r7, #12]
 800b30c:	693a      	ldr	r2, [r7, #16]
 800b30e:	8992      	ldrh	r2, [r2, #12]
 800b310:	0011      	movs	r1, r2
 800b312:	0018      	movs	r0, r3
 800b314:	f7f4 ff9a 	bl	800024c <__aeabi_uidivmod>
 800b318:	000b      	movs	r3, r1
 800b31a:	0019      	movs	r1, r3
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	2238      	movs	r2, #56	; 0x38
 800b320:	185b      	adds	r3, r3, r1
 800b322:	189b      	adds	r3, r3, r2
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	899b      	ldrh	r3, [r3, #12]
 800b330:	0019      	movs	r1, r3
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f7f4 ff04 	bl	8000140 <__udivsi3>
 800b338:	0003      	movs	r3, r0
 800b33a:	18e2      	adds	r2, r4, r3
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	0011      	movs	r1, r2
 800b340:	0018      	movs	r0, r3
 800b342:	f7ff fed7 	bl	800b0f4 <move_window>
 800b346:	1e03      	subs	r3, r0, #0
 800b348:	d000      	beq.n	800b34c <get_fat+0xbc>
 800b34a:	e072      	b.n	800b432 <get_fat+0x1a2>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	899b      	ldrh	r3, [r3, #12]
 800b350:	001a      	movs	r2, r3
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	0011      	movs	r1, r2
 800b356:	0018      	movs	r0, r3
 800b358:	f7f4 ff78 	bl	800024c <__aeabi_uidivmod>
 800b35c:	000b      	movs	r3, r1
 800b35e:	0019      	movs	r1, r3
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	2238      	movs	r2, #56	; 0x38
 800b364:	185b      	adds	r3, r3, r1
 800b366:	189b      	adds	r3, r3, r2
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	021b      	lsls	r3, r3, #8
 800b36c:	001a      	movs	r2, r3
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	4313      	orrs	r3, r2
 800b372:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	2201      	movs	r2, #1
 800b378:	4013      	ands	r3, r2
 800b37a:	d002      	beq.n	800b382 <get_fat+0xf2>
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	091b      	lsrs	r3, r3, #4
 800b380:	e002      	b.n	800b388 <get_fat+0xf8>
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	051b      	lsls	r3, r3, #20
 800b386:	0d1b      	lsrs	r3, r3, #20
 800b388:	617b      	str	r3, [r7, #20]
			break;
 800b38a:	e057      	b.n	800b43c <get_fat+0x1ac>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	899b      	ldrh	r3, [r3, #12]
 800b394:	085b      	lsrs	r3, r3, #1
 800b396:	b29b      	uxth	r3, r3
 800b398:	0019      	movs	r1, r3
 800b39a:	6838      	ldr	r0, [r7, #0]
 800b39c:	f7f4 fed0 	bl	8000140 <__udivsi3>
 800b3a0:	0003      	movs	r3, r0
 800b3a2:	18e2      	adds	r2, r4, r3
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	0011      	movs	r1, r2
 800b3a8:	0018      	movs	r0, r3
 800b3aa:	f7ff fea3 	bl	800b0f4 <move_window>
 800b3ae:	1e03      	subs	r3, r0, #0
 800b3b0:	d141      	bne.n	800b436 <get_fat+0x1a6>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	3338      	adds	r3, #56	; 0x38
 800b3b6:	001c      	movs	r4, r3
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	005a      	lsls	r2, r3, #1
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	899b      	ldrh	r3, [r3, #12]
 800b3c0:	0019      	movs	r1, r3
 800b3c2:	0010      	movs	r0, r2
 800b3c4:	f7f4 ff42 	bl	800024c <__aeabi_uidivmod>
 800b3c8:	000b      	movs	r3, r1
 800b3ca:	18e3      	adds	r3, r4, r3
 800b3cc:	0018      	movs	r0, r3
 800b3ce:	f7ff fbe5 	bl	800ab9c <ld_word>
 800b3d2:	0003      	movs	r3, r0
 800b3d4:	617b      	str	r3, [r7, #20]
			break;
 800b3d6:	e031      	b.n	800b43c <get_fat+0x1ac>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	899b      	ldrh	r3, [r3, #12]
 800b3e0:	089b      	lsrs	r3, r3, #2
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	0019      	movs	r1, r3
 800b3e6:	6838      	ldr	r0, [r7, #0]
 800b3e8:	f7f4 feaa 	bl	8000140 <__udivsi3>
 800b3ec:	0003      	movs	r3, r0
 800b3ee:	18e2      	adds	r2, r4, r3
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	0011      	movs	r1, r2
 800b3f4:	0018      	movs	r0, r3
 800b3f6:	f7ff fe7d 	bl	800b0f4 <move_window>
 800b3fa:	1e03      	subs	r3, r0, #0
 800b3fc:	d11d      	bne.n	800b43a <get_fat+0x1aa>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	3338      	adds	r3, #56	; 0x38
 800b402:	001c      	movs	r4, r3
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	009a      	lsls	r2, r3, #2
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	899b      	ldrh	r3, [r3, #12]
 800b40c:	0019      	movs	r1, r3
 800b40e:	0010      	movs	r0, r2
 800b410:	f7f4 ff1c 	bl	800024c <__aeabi_uidivmod>
 800b414:	000b      	movs	r3, r1
 800b416:	18e3      	adds	r3, r4, r3
 800b418:	0018      	movs	r0, r3
 800b41a:	f7ff fbda 	bl	800abd2 <ld_dword>
 800b41e:	0003      	movs	r3, r0
 800b420:	011b      	lsls	r3, r3, #4
 800b422:	091b      	lsrs	r3, r3, #4
 800b424:	617b      	str	r3, [r7, #20]
			break;
 800b426:	e009      	b.n	800b43c <get_fat+0x1ac>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b428:	2301      	movs	r3, #1
 800b42a:	617b      	str	r3, [r7, #20]
 800b42c:	e006      	b.n	800b43c <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b42e:	46c0      	nop			; (mov r8, r8)
 800b430:	e004      	b.n	800b43c <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b432:	46c0      	nop			; (mov r8, r8)
 800b434:	e002      	b.n	800b43c <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b436:	46c0      	nop			; (mov r8, r8)
 800b438:	e000      	b.n	800b43c <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b43a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 800b43c:	697b      	ldr	r3, [r7, #20]
}
 800b43e:	0018      	movs	r0, r3
 800b440:	46bd      	mov	sp, r7
 800b442:	b007      	add	sp, #28
 800b444:	bd90      	pop	{r4, r7, pc}

0800b446 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b446:	b5b0      	push	{r4, r5, r7, lr}
 800b448:	b088      	sub	sp, #32
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	60f8      	str	r0, [r7, #12]
 800b44e:	60b9      	str	r1, [r7, #8]
 800b450:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b452:	231f      	movs	r3, #31
 800b454:	18fb      	adds	r3, r7, r3
 800b456:	2202      	movs	r2, #2
 800b458:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d800      	bhi.n	800b462 <put_fat+0x1c>
 800b460:	e11a      	b.n	800b698 <put_fat+0x252>
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	69db      	ldr	r3, [r3, #28]
 800b466:	68ba      	ldr	r2, [r7, #8]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d300      	bcc.n	800b46e <put_fat+0x28>
 800b46c:	e114      	b.n	800b698 <put_fat+0x252>
		switch (fs->fs_type) {
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	2b03      	cmp	r3, #3
 800b474:	d100      	bne.n	800b478 <put_fat+0x32>
 800b476:	e0c1      	b.n	800b5fc <put_fat+0x1b6>
 800b478:	dd00      	ble.n	800b47c <put_fat+0x36>
 800b47a:	e10d      	b.n	800b698 <put_fat+0x252>
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d003      	beq.n	800b488 <put_fat+0x42>
 800b480:	2b02      	cmp	r3, #2
 800b482:	d100      	bne.n	800b486 <put_fat+0x40>
 800b484:	e08a      	b.n	800b59c <put_fat+0x156>
 800b486:	e107      	b.n	800b698 <put_fat+0x252>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	61bb      	str	r3, [r7, #24]
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	085b      	lsrs	r3, r3, #1
 800b490:	69ba      	ldr	r2, [r7, #24]
 800b492:	18d3      	adds	r3, r2, r3
 800b494:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	899b      	ldrh	r3, [r3, #12]
 800b49e:	0019      	movs	r1, r3
 800b4a0:	69b8      	ldr	r0, [r7, #24]
 800b4a2:	f7f4 fe4d 	bl	8000140 <__udivsi3>
 800b4a6:	0003      	movs	r3, r0
 800b4a8:	18e2      	adds	r2, r4, r3
 800b4aa:	251f      	movs	r5, #31
 800b4ac:	197c      	adds	r4, r7, r5
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	0011      	movs	r1, r2
 800b4b2:	0018      	movs	r0, r3
 800b4b4:	f7ff fe1e 	bl	800b0f4 <move_window>
 800b4b8:	0003      	movs	r3, r0
 800b4ba:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800b4bc:	197b      	adds	r3, r7, r5
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d000      	beq.n	800b4c6 <put_fat+0x80>
 800b4c4:	e0e1      	b.n	800b68a <put_fat+0x244>
			p = fs->win + bc++ % SS(fs);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	3338      	adds	r3, #56	; 0x38
 800b4ca:	001c      	movs	r4, r3
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	1c5a      	adds	r2, r3, #1
 800b4d0:	61ba      	str	r2, [r7, #24]
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	8992      	ldrh	r2, [r2, #12]
 800b4d6:	0011      	movs	r1, r2
 800b4d8:	0018      	movs	r0, r3
 800b4da:	f7f4 feb7 	bl	800024c <__aeabi_uidivmod>
 800b4de:	000b      	movs	r3, r1
 800b4e0:	18e3      	adds	r3, r4, r3
 800b4e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	d00d      	beq.n	800b508 <put_fat+0xc2>
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	b25b      	sxtb	r3, r3
 800b4f2:	220f      	movs	r2, #15
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	b25a      	sxtb	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	011b      	lsls	r3, r3, #4
 800b4fe:	b25b      	sxtb	r3, r3
 800b500:	4313      	orrs	r3, r2
 800b502:	b25b      	sxtb	r3, r3
 800b504:	b2db      	uxtb	r3, r3
 800b506:	e001      	b.n	800b50c <put_fat+0xc6>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	697a      	ldr	r2, [r7, #20]
 800b50e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2201      	movs	r2, #1
 800b514:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	899b      	ldrh	r3, [r3, #12]
 800b51e:	0019      	movs	r1, r3
 800b520:	69b8      	ldr	r0, [r7, #24]
 800b522:	f7f4 fe0d 	bl	8000140 <__udivsi3>
 800b526:	0003      	movs	r3, r0
 800b528:	18e2      	adds	r2, r4, r3
 800b52a:	251f      	movs	r5, #31
 800b52c:	197c      	adds	r4, r7, r5
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	0011      	movs	r1, r2
 800b532:	0018      	movs	r0, r3
 800b534:	f7ff fdde 	bl	800b0f4 <move_window>
 800b538:	0003      	movs	r3, r0
 800b53a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800b53c:	197b      	adds	r3, r7, r5
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d000      	beq.n	800b546 <put_fat+0x100>
 800b544:	e0a3      	b.n	800b68e <put_fat+0x248>
			p = fs->win + bc % SS(fs);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	3338      	adds	r3, #56	; 0x38
 800b54a:	001c      	movs	r4, r3
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	899b      	ldrh	r3, [r3, #12]
 800b550:	001a      	movs	r2, r3
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	0011      	movs	r1, r2
 800b556:	0018      	movs	r0, r3
 800b558:	f7f4 fe78 	bl	800024c <__aeabi_uidivmod>
 800b55c:	000b      	movs	r3, r1
 800b55e:	18e3      	adds	r3, r4, r3
 800b560:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2201      	movs	r2, #1
 800b566:	4013      	ands	r3, r2
 800b568:	d003      	beq.n	800b572 <put_fat+0x12c>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	091b      	lsrs	r3, r3, #4
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	e00e      	b.n	800b590 <put_fat+0x14a>
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	b25b      	sxtb	r3, r3
 800b578:	220f      	movs	r2, #15
 800b57a:	4393      	bics	r3, r2
 800b57c:	b25a      	sxtb	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	0a1b      	lsrs	r3, r3, #8
 800b582:	b25b      	sxtb	r3, r3
 800b584:	210f      	movs	r1, #15
 800b586:	400b      	ands	r3, r1
 800b588:	b25b      	sxtb	r3, r3
 800b58a:	4313      	orrs	r3, r2
 800b58c:	b25b      	sxtb	r3, r3
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	697a      	ldr	r2, [r7, #20]
 800b592:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2201      	movs	r2, #1
 800b598:	70da      	strb	r2, [r3, #3]
			break;
 800b59a:	e07d      	b.n	800b698 <put_fat+0x252>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	899b      	ldrh	r3, [r3, #12]
 800b5a4:	085b      	lsrs	r3, r3, #1
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	0019      	movs	r1, r3
 800b5aa:	68b8      	ldr	r0, [r7, #8]
 800b5ac:	f7f4 fdc8 	bl	8000140 <__udivsi3>
 800b5b0:	0003      	movs	r3, r0
 800b5b2:	18e2      	adds	r2, r4, r3
 800b5b4:	251f      	movs	r5, #31
 800b5b6:	197c      	adds	r4, r7, r5
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	0011      	movs	r1, r2
 800b5bc:	0018      	movs	r0, r3
 800b5be:	f7ff fd99 	bl	800b0f4 <move_window>
 800b5c2:	0003      	movs	r3, r0
 800b5c4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800b5c6:	197b      	adds	r3, r7, r5
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d161      	bne.n	800b692 <put_fat+0x24c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	3338      	adds	r3, #56	; 0x38
 800b5d2:	001c      	movs	r4, r3
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	005a      	lsls	r2, r3, #1
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	899b      	ldrh	r3, [r3, #12]
 800b5dc:	0019      	movs	r1, r3
 800b5de:	0010      	movs	r0, r2
 800b5e0:	f7f4 fe34 	bl	800024c <__aeabi_uidivmod>
 800b5e4:	000b      	movs	r3, r1
 800b5e6:	18e3      	adds	r3, r4, r3
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	b292      	uxth	r2, r2
 800b5ec:	0011      	movs	r1, r2
 800b5ee:	0018      	movs	r0, r3
 800b5f0:	f7ff fb10 	bl	800ac14 <st_word>
			fs->wflag = 1;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	70da      	strb	r2, [r3, #3]
			break;
 800b5fa:	e04d      	b.n	800b698 <put_fat+0x252>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	899b      	ldrh	r3, [r3, #12]
 800b604:	089b      	lsrs	r3, r3, #2
 800b606:	b29b      	uxth	r3, r3
 800b608:	0019      	movs	r1, r3
 800b60a:	68b8      	ldr	r0, [r7, #8]
 800b60c:	f7f4 fd98 	bl	8000140 <__udivsi3>
 800b610:	0003      	movs	r3, r0
 800b612:	18e2      	adds	r2, r4, r3
 800b614:	251f      	movs	r5, #31
 800b616:	197c      	adds	r4, r7, r5
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	0011      	movs	r1, r2
 800b61c:	0018      	movs	r0, r3
 800b61e:	f7ff fd69 	bl	800b0f4 <move_window>
 800b622:	0003      	movs	r3, r0
 800b624:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800b626:	197b      	adds	r3, r7, r5
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d133      	bne.n	800b696 <put_fat+0x250>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	011b      	lsls	r3, r3, #4
 800b632:	091c      	lsrs	r4, r3, #4
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3338      	adds	r3, #56	; 0x38
 800b638:	001d      	movs	r5, r3
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	009a      	lsls	r2, r3, #2
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	899b      	ldrh	r3, [r3, #12]
 800b642:	0019      	movs	r1, r3
 800b644:	0010      	movs	r0, r2
 800b646:	f7f4 fe01 	bl	800024c <__aeabi_uidivmod>
 800b64a:	000b      	movs	r3, r1
 800b64c:	18eb      	adds	r3, r5, r3
 800b64e:	0018      	movs	r0, r3
 800b650:	f7ff fabf 	bl	800abd2 <ld_dword>
 800b654:	0003      	movs	r3, r0
 800b656:	0f1b      	lsrs	r3, r3, #28
 800b658:	071b      	lsls	r3, r3, #28
 800b65a:	4323      	orrs	r3, r4
 800b65c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	3338      	adds	r3, #56	; 0x38
 800b662:	001c      	movs	r4, r3
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	009a      	lsls	r2, r3, #2
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	899b      	ldrh	r3, [r3, #12]
 800b66c:	0019      	movs	r1, r3
 800b66e:	0010      	movs	r0, r2
 800b670:	f7f4 fdec 	bl	800024c <__aeabi_uidivmod>
 800b674:	000b      	movs	r3, r1
 800b676:	18e3      	adds	r3, r4, r3
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	0011      	movs	r1, r2
 800b67c:	0018      	movs	r0, r3
 800b67e:	f7ff fae7 	bl	800ac50 <st_dword>
			fs->wflag = 1;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2201      	movs	r2, #1
 800b686:	70da      	strb	r2, [r3, #3]
			break;
 800b688:	e006      	b.n	800b698 <put_fat+0x252>
			if (res != FR_OK) break;
 800b68a:	46c0      	nop			; (mov r8, r8)
 800b68c:	e004      	b.n	800b698 <put_fat+0x252>
			if (res != FR_OK) break;
 800b68e:	46c0      	nop			; (mov r8, r8)
 800b690:	e002      	b.n	800b698 <put_fat+0x252>
			if (res != FR_OK) break;
 800b692:	46c0      	nop			; (mov r8, r8)
 800b694:	e000      	b.n	800b698 <put_fat+0x252>
			if (res != FR_OK) break;
 800b696:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
 800b698:	231f      	movs	r3, #31
 800b69a:	18fb      	adds	r3, r7, r3
 800b69c:	781b      	ldrb	r3, [r3, #0]
}
 800b69e:	0018      	movs	r0, r3
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	b008      	add	sp, #32
 800b6a4:	bdb0      	pop	{r4, r5, r7, pc}

0800b6a6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b6a6:	b5b0      	push	{r4, r5, r7, lr}
 800b6a8:	b088      	sub	sp, #32
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	60f8      	str	r0, [r7, #12]
 800b6ae:	60b9      	str	r1, [r7, #8]
 800b6b0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b6b2:	231f      	movs	r3, #31
 800b6b4:	18fb      	adds	r3, r7, r3
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d904      	bls.n	800b6d0 <remove_chain+0x2a>
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	69db      	ldr	r3, [r3, #28]
 800b6ca:	68ba      	ldr	r2, [r7, #8]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d301      	bcc.n	800b6d4 <remove_chain+0x2e>
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	e057      	b.n	800b784 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d011      	beq.n	800b6fe <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b6da:	251f      	movs	r5, #31
 800b6dc:	197c      	adds	r4, r7, r5
 800b6de:	2301      	movs	r3, #1
 800b6e0:	425a      	negs	r2, r3
 800b6e2:	6879      	ldr	r1, [r7, #4]
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	0018      	movs	r0, r3
 800b6e8:	f7ff fead 	bl	800b446 <put_fat>
 800b6ec:	0003      	movs	r3, r0
 800b6ee:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 800b6f0:	197b      	adds	r3, r7, r5
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <remove_chain+0x58>
 800b6f8:	197b      	adds	r3, r7, r5
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	e042      	b.n	800b784 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	0011      	movs	r1, r2
 800b704:	0018      	movs	r0, r3
 800b706:	f7ff fdc3 	bl	800b290 <get_fat>
 800b70a:	0003      	movs	r3, r0
 800b70c:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d035      	beq.n	800b780 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	2b01      	cmp	r3, #1
 800b718:	d101      	bne.n	800b71e <remove_chain+0x78>
 800b71a:	2302      	movs	r3, #2
 800b71c:	e032      	b.n	800b784 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	3301      	adds	r3, #1
 800b722:	d101      	bne.n	800b728 <remove_chain+0x82>
 800b724:	2301      	movs	r3, #1
 800b726:	e02d      	b.n	800b784 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b728:	251f      	movs	r5, #31
 800b72a:	197c      	adds	r4, r7, r5
 800b72c:	68b9      	ldr	r1, [r7, #8]
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	2200      	movs	r2, #0
 800b732:	0018      	movs	r0, r3
 800b734:	f7ff fe87 	bl	800b446 <put_fat>
 800b738:	0003      	movs	r3, r0
 800b73a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 800b73c:	197b      	adds	r3, r7, r5
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d002      	beq.n	800b74a <remove_chain+0xa4>
 800b744:	197b      	adds	r3, r7, r5
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	e01c      	b.n	800b784 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	699a      	ldr	r2, [r3, #24]
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	69db      	ldr	r3, [r3, #28]
 800b752:	3b02      	subs	r3, #2
 800b754:	429a      	cmp	r2, r3
 800b756:	d20b      	bcs.n	800b770 <remove_chain+0xca>
			fs->free_clst++;
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	699b      	ldr	r3, [r3, #24]
 800b75c:	1c5a      	adds	r2, r3, #1
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	791b      	ldrb	r3, [r3, #4]
 800b766:	2201      	movs	r2, #1
 800b768:	4313      	orrs	r3, r2
 800b76a:	b2da      	uxtb	r2, r3
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	69db      	ldr	r3, [r3, #28]
 800b778:	68ba      	ldr	r2, [r7, #8]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d3bf      	bcc.n	800b6fe <remove_chain+0x58>
 800b77e:	e000      	b.n	800b782 <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 800b780:	46c0      	nop			; (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b782:	2300      	movs	r3, #0
}
 800b784:	0018      	movs	r0, r3
 800b786:	46bd      	mov	sp, r7
 800b788:	b008      	add	sp, #32
 800b78a:	bdb0      	pop	{r4, r5, r7, pc}

0800b78c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b78c:	b5b0      	push	{r4, r5, r7, lr}
 800b78e:	b088      	sub	sp, #32
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10d      	bne.n	800b7be <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	695b      	ldr	r3, [r3, #20]
 800b7a6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d004      	beq.n	800b7b8 <create_chain+0x2c>
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	69db      	ldr	r3, [r3, #28]
 800b7b2:	69ba      	ldr	r2, [r7, #24]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d31d      	bcc.n	800b7f4 <create_chain+0x68>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	61bb      	str	r3, [r7, #24]
 800b7bc:	e01a      	b.n	800b7f4 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b7be:	683a      	ldr	r2, [r7, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	0011      	movs	r1, r2
 800b7c4:	0018      	movs	r0, r3
 800b7c6:	f7ff fd63 	bl	800b290 <get_fat>
 800b7ca:	0003      	movs	r3, r0
 800b7cc:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d801      	bhi.n	800b7d8 <create_chain+0x4c>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e07b      	b.n	800b8d0 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	d101      	bne.n	800b7e2 <create_chain+0x56>
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	e076      	b.n	800b8d0 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	69db      	ldr	r3, [r3, #28]
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d201      	bcs.n	800b7f0 <create_chain+0x64>
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	e06f      	b.n	800b8d0 <create_chain+0x144>
		scl = clst;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	69db      	ldr	r3, [r3, #28]
 800b802:	69fa      	ldr	r2, [r7, #28]
 800b804:	429a      	cmp	r2, r3
 800b806:	d307      	bcc.n	800b818 <create_chain+0x8c>
				ncl = 2;
 800b808:	2302      	movs	r3, #2
 800b80a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b80c:	69fa      	ldr	r2, [r7, #28]
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	429a      	cmp	r2, r3
 800b812:	d901      	bls.n	800b818 <create_chain+0x8c>
 800b814:	2300      	movs	r3, #0
 800b816:	e05b      	b.n	800b8d0 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b818:	69fa      	ldr	r2, [r7, #28]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	0011      	movs	r1, r2
 800b81e:	0018      	movs	r0, r3
 800b820:	f7ff fd36 	bl	800b290 <get_fat>
 800b824:	0003      	movs	r3, r0
 800b826:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00d      	beq.n	800b84a <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d002      	beq.n	800b83a <create_chain+0xae>
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	3301      	adds	r3, #1
 800b838:	d101      	bne.n	800b83e <create_chain+0xb2>
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	e048      	b.n	800b8d0 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 800b83e:	69fa      	ldr	r2, [r7, #28]
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	429a      	cmp	r2, r3
 800b844:	d1d8      	bne.n	800b7f8 <create_chain+0x6c>
 800b846:	2300      	movs	r3, #0
 800b848:	e042      	b.n	800b8d0 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 800b84a:	46c0      	nop			; (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b84c:	2517      	movs	r5, #23
 800b84e:	197c      	adds	r4, r7, r5
 800b850:	2301      	movs	r3, #1
 800b852:	425a      	negs	r2, r3
 800b854:	69f9      	ldr	r1, [r7, #28]
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	0018      	movs	r0, r3
 800b85a:	f7ff fdf4 	bl	800b446 <put_fat>
 800b85e:	0003      	movs	r3, r0
 800b860:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 800b862:	197b      	adds	r3, r7, r5
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10b      	bne.n	800b882 <create_chain+0xf6>
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d008      	beq.n	800b882 <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b870:	197c      	adds	r4, r7, r5
 800b872:	69fa      	ldr	r2, [r7, #28]
 800b874:	6839      	ldr	r1, [r7, #0]
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	0018      	movs	r0, r3
 800b87a:	f7ff fde4 	bl	800b446 <put_fat>
 800b87e:	0003      	movs	r3, r0
 800b880:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b882:	2317      	movs	r3, #23
 800b884:	18fb      	adds	r3, r7, r3
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d116      	bne.n	800b8ba <create_chain+0x12e>
		fs->last_clst = ncl;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	69fa      	ldr	r2, [r7, #28]
 800b890:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	699a      	ldr	r2, [r3, #24]
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	3b02      	subs	r3, #2
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d804      	bhi.n	800b8aa <create_chain+0x11e>
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	1e5a      	subs	r2, r3, #1
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	791b      	ldrb	r3, [r3, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	b2da      	uxtb	r2, r3
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	711a      	strb	r2, [r3, #4]
 800b8b8:	e009      	b.n	800b8ce <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b8ba:	2317      	movs	r3, #23
 800b8bc:	18fb      	adds	r3, r7, r3
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d102      	bne.n	800b8ca <create_chain+0x13e>
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	425b      	negs	r3, r3
 800b8c8:	e000      	b.n	800b8cc <create_chain+0x140>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b8ce:	69fb      	ldr	r3, [r7, #28]
}
 800b8d0:	0018      	movs	r0, r3
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	b008      	add	sp, #32
 800b8d6:	bdb0      	pop	{r4, r5, r7, pc}

0800b8d8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ec:	3304      	adds	r3, #4
 800b8ee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	899b      	ldrh	r3, [r3, #12]
 800b8f4:	0019      	movs	r1, r3
 800b8f6:	6838      	ldr	r0, [r7, #0]
 800b8f8:	f7f4 fc22 	bl	8000140 <__udivsi3>
 800b8fc:	0003      	movs	r3, r0
 800b8fe:	001a      	movs	r2, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	895b      	ldrh	r3, [r3, #10]
 800b904:	0019      	movs	r1, r3
 800b906:	0010      	movs	r0, r2
 800b908:	f7f4 fc1a 	bl	8000140 <__udivsi3>
 800b90c:	0003      	movs	r3, r0
 800b90e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	1d1a      	adds	r2, r3, #4
 800b914:	613a      	str	r2, [r7, #16]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d101      	bne.n	800b924 <clmt_clust+0x4c>
 800b920:	2300      	movs	r3, #0
 800b922:	e010      	b.n	800b946 <clmt_clust+0x6e>
		if (cl < ncl) break;	/* In this fragment? */
 800b924:	697a      	ldr	r2, [r7, #20]
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d307      	bcc.n	800b93c <clmt_clust+0x64>
		cl -= ncl; tbl++;		/* Next fragment */
 800b92c:	697a      	ldr	r2, [r7, #20]
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	1ad3      	subs	r3, r2, r3
 800b932:	617b      	str	r3, [r7, #20]
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	3304      	adds	r3, #4
 800b938:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b93a:	e7e9      	b.n	800b910 <clmt_clust+0x38>
		if (cl < ncl) break;	/* In this fragment? */
 800b93c:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	18d3      	adds	r3, r2, r3
}
 800b946:	0018      	movs	r0, r3
 800b948:	46bd      	mov	sp, r7
 800b94a:	b006      	add	sp, #24
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b94e:	b590      	push	{r4, r7, lr}
 800b950:	b087      	sub	sp, #28
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b95e:	683a      	ldr	r2, [r7, #0]
 800b960:	2380      	movs	r3, #128	; 0x80
 800b962:	039b      	lsls	r3, r3, #14
 800b964:	429a      	cmp	r2, r3
 800b966:	d203      	bcs.n	800b970 <dir_sdi+0x22>
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	221f      	movs	r2, #31
 800b96c:	4013      	ands	r3, r2
 800b96e:	d001      	beq.n	800b974 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b970:	2302      	movs	r3, #2
 800b972:	e074      	b.n	800ba5e <dir_sdi+0x110>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d106      	bne.n	800b994 <dir_sdi+0x46>
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	2b02      	cmp	r3, #2
 800b98c:	d902      	bls.n	800b994 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b992:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d10c      	bne.n	800b9b4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	095b      	lsrs	r3, r3, #5
 800b99e:	693a      	ldr	r2, [r7, #16]
 800b9a0:	8912      	ldrh	r2, [r2, #8]
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d301      	bcc.n	800b9aa <dir_sdi+0x5c>
 800b9a6:	2302      	movs	r3, #2
 800b9a8:	e059      	b.n	800ba5e <dir_sdi+0x110>
		dp->sect = fs->dirbase;
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	61da      	str	r2, [r3, #28]
 800b9b2:	e02f      	b.n	800ba14 <dir_sdi+0xc6>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	895b      	ldrh	r3, [r3, #10]
 800b9b8:	001a      	movs	r2, r3
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	899b      	ldrh	r3, [r3, #12]
 800b9be:	4353      	muls	r3, r2
 800b9c0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b9c2:	e01a      	b.n	800b9fa <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	0011      	movs	r1, r2
 800b9ca:	0018      	movs	r0, r3
 800b9cc:	f7ff fc60 	bl	800b290 <get_fat>
 800b9d0:	0003      	movs	r3, r0
 800b9d2:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	d101      	bne.n	800b9de <dir_sdi+0x90>
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e03f      	b.n	800ba5e <dir_sdi+0x110>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d904      	bls.n	800b9ee <dir_sdi+0xa0>
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	69db      	ldr	r3, [r3, #28]
 800b9e8:	697a      	ldr	r2, [r7, #20]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d301      	bcc.n	800b9f2 <dir_sdi+0xa4>
 800b9ee:	2302      	movs	r3, #2
 800b9f0:	e035      	b.n	800ba5e <dir_sdi+0x110>
			ofs -= csz;
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	1ad3      	subs	r3, r2, r3
 800b9f8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d2e0      	bcs.n	800b9c4 <dir_sdi+0x76>
		}
		dp->sect = clust2sect(fs, clst);
 800ba02:	697a      	ldr	r2, [r7, #20]
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	0011      	movs	r1, r2
 800ba08:	0018      	movs	r0, r3
 800ba0a:	f7ff fc25 	bl	800b258 <clust2sect>
 800ba0e:	0002      	movs	r2, r0
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	697a      	ldr	r2, [r7, #20]
 800ba18:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	69db      	ldr	r3, [r3, #28]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d101      	bne.n	800ba26 <dir_sdi+0xd8>
 800ba22:	2302      	movs	r3, #2
 800ba24:	e01b      	b.n	800ba5e <dir_sdi+0x110>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	69dc      	ldr	r4, [r3, #28]
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	899b      	ldrh	r3, [r3, #12]
 800ba2e:	0019      	movs	r1, r3
 800ba30:	6838      	ldr	r0, [r7, #0]
 800ba32:	f7f4 fb85 	bl	8000140 <__udivsi3>
 800ba36:	0003      	movs	r3, r0
 800ba38:	18e2      	adds	r2, r4, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	3338      	adds	r3, #56	; 0x38
 800ba42:	001c      	movs	r4, r3
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	899b      	ldrh	r3, [r3, #12]
 800ba48:	001a      	movs	r2, r3
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	0011      	movs	r1, r2
 800ba4e:	0018      	movs	r0, r3
 800ba50:	f7f4 fbfc 	bl	800024c <__aeabi_uidivmod>
 800ba54:	000b      	movs	r3, r1
 800ba56:	18e2      	adds	r2, r4, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	0018      	movs	r0, r3
 800ba60:	46bd      	mov	sp, r7
 800ba62:	b007      	add	sp, #28
 800ba64:	bd90      	pop	{r4, r7, pc}

0800ba66 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ba66:	b590      	push	{r4, r7, lr}
 800ba68:	b087      	sub	sp, #28
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	695b      	ldr	r3, [r3, #20]
 800ba7a:	3320      	adds	r3, #32
 800ba7c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	69db      	ldr	r3, [r3, #28]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d004      	beq.n	800ba90 <dir_next+0x2a>
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	2380      	movs	r3, #128	; 0x80
 800ba8a:	039b      	lsls	r3, r3, #14
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d301      	bcc.n	800ba94 <dir_next+0x2e>
 800ba90:	2304      	movs	r3, #4
 800ba92:	e0c0      	b.n	800bc16 <dir_next+0x1b0>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	899b      	ldrh	r3, [r3, #12]
 800ba98:	001a      	movs	r2, r3
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	0011      	movs	r1, r2
 800ba9e:	0018      	movs	r0, r3
 800baa0:	f7f4 fbd4 	bl	800024c <__aeabi_uidivmod>
 800baa4:	1e0b      	subs	r3, r1, #0
 800baa6:	d000      	beq.n	800baaa <dir_next+0x44>
 800baa8:	e0a2      	b.n	800bbf0 <dir_next+0x18a>
		dp->sect++;				/* Next sector */
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	69db      	ldr	r3, [r3, #28]
 800baae:	1c5a      	adds	r2, r3, #1
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	699b      	ldr	r3, [r3, #24]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10b      	bne.n	800bad4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	095b      	lsrs	r3, r3, #5
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	8912      	ldrh	r2, [r2, #8]
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d200      	bcs.n	800baca <dir_next+0x64>
 800bac8:	e092      	b.n	800bbf0 <dir_next+0x18a>
				dp->sect = 0; return FR_NO_FILE;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	61da      	str	r2, [r3, #28]
 800bad0:	2304      	movs	r3, #4
 800bad2:	e0a0      	b.n	800bc16 <dir_next+0x1b0>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	899b      	ldrh	r3, [r3, #12]
 800bad8:	0019      	movs	r1, r3
 800bada:	68b8      	ldr	r0, [r7, #8]
 800badc:	f7f4 fb30 	bl	8000140 <__udivsi3>
 800bae0:	0003      	movs	r3, r0
 800bae2:	001a      	movs	r2, r3
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	895b      	ldrh	r3, [r3, #10]
 800bae8:	3b01      	subs	r3, #1
 800baea:	4013      	ands	r3, r2
 800baec:	d000      	beq.n	800baf0 <dir_next+0x8a>
 800baee:	e07f      	b.n	800bbf0 <dir_next+0x18a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	0019      	movs	r1, r3
 800baf8:	0010      	movs	r0, r2
 800bafa:	f7ff fbc9 	bl	800b290 <get_fat>
 800bafe:	0003      	movs	r3, r0
 800bb00:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d801      	bhi.n	800bb0c <dir_next+0xa6>
 800bb08:	2302      	movs	r3, #2
 800bb0a:	e084      	b.n	800bc16 <dir_next+0x1b0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	d101      	bne.n	800bb16 <dir_next+0xb0>
 800bb12:	2301      	movs	r3, #1
 800bb14:	e07f      	b.n	800bc16 <dir_next+0x1b0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	69db      	ldr	r3, [r3, #28]
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d35b      	bcc.n	800bbd8 <dir_next+0x172>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d104      	bne.n	800bb30 <dir_next+0xca>
						dp->sect = 0; return FR_NO_FILE;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	61da      	str	r2, [r3, #28]
 800bb2c:	2304      	movs	r3, #4
 800bb2e:	e072      	b.n	800bc16 <dir_next+0x1b0>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	699b      	ldr	r3, [r3, #24]
 800bb36:	0019      	movs	r1, r3
 800bb38:	0010      	movs	r0, r2
 800bb3a:	f7ff fe27 	bl	800b78c <create_chain>
 800bb3e:	0003      	movs	r3, r0
 800bb40:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d101      	bne.n	800bb4c <dir_next+0xe6>
 800bb48:	2307      	movs	r3, #7
 800bb4a:	e064      	b.n	800bc16 <dir_next+0x1b0>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d101      	bne.n	800bb56 <dir_next+0xf0>
 800bb52:	2302      	movs	r3, #2
 800bb54:	e05f      	b.n	800bc16 <dir_next+0x1b0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	d101      	bne.n	800bb60 <dir_next+0xfa>
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e05a      	b.n	800bc16 <dir_next+0x1b0>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	0018      	movs	r0, r3
 800bb64:	f7ff fa7e 	bl	800b064 <sync_window>
 800bb68:	1e03      	subs	r3, r0, #0
 800bb6a:	d001      	beq.n	800bb70 <dir_next+0x10a>
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	e052      	b.n	800bc16 <dir_next+0x1b0>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	3338      	adds	r3, #56	; 0x38
 800bb74:	0018      	movs	r0, r3
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	899b      	ldrh	r3, [r3, #12]
 800bb7a:	001a      	movs	r2, r3
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	f7ff f8b0 	bl	800ace2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bb82:	2300      	movs	r3, #0
 800bb84:	613b      	str	r3, [r7, #16]
 800bb86:	697a      	ldr	r2, [r7, #20]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	0011      	movs	r1, r2
 800bb8c:	0018      	movs	r0, r3
 800bb8e:	f7ff fb63 	bl	800b258 <clust2sect>
 800bb92:	0002      	movs	r2, r0
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	635a      	str	r2, [r3, #52]	; 0x34
 800bb98:	e012      	b.n	800bbc0 <dir_next+0x15a>
						fs->wflag = 1;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	0018      	movs	r0, r3
 800bba4:	f7ff fa5e 	bl	800b064 <sync_window>
 800bba8:	1e03      	subs	r3, r0, #0
 800bbaa:	d001      	beq.n	800bbb0 <dir_next+0x14a>
 800bbac:	2301      	movs	r3, #1
 800bbae:	e032      	b.n	800bc16 <dir_next+0x1b0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	613b      	str	r3, [r7, #16]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbba:	1c5a      	adds	r2, r3, #1
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	635a      	str	r2, [r3, #52]	; 0x34
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	895b      	ldrh	r3, [r3, #10]
 800bbc4:	001a      	movs	r2, r3
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d3e6      	bcc.n	800bb9a <dir_next+0x134>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	1ad2      	subs	r2, r2, r3
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	697a      	ldr	r2, [r7, #20]
 800bbdc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	0011      	movs	r1, r2
 800bbe4:	0018      	movs	r0, r3
 800bbe6:	f7ff fb37 	bl	800b258 <clust2sect>
 800bbea:	0002      	movs	r2, r0
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	3338      	adds	r3, #56	; 0x38
 800bbfa:	001c      	movs	r4, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	899b      	ldrh	r3, [r3, #12]
 800bc00:	001a      	movs	r2, r3
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	0011      	movs	r1, r2
 800bc06:	0018      	movs	r0, r3
 800bc08:	f7f4 fb20 	bl	800024c <__aeabi_uidivmod>
 800bc0c:	000b      	movs	r3, r1
 800bc0e:	18e2      	adds	r2, r4, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	0018      	movs	r0, r3
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	b007      	add	sp, #28
 800bc1c:	bd90      	pop	{r4, r7, pc}

0800bc1e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bc1e:	b5b0      	push	{r4, r5, r7, lr}
 800bc20:	b086      	sub	sp, #24
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
 800bc26:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bc2e:	2517      	movs	r5, #23
 800bc30:	197c      	adds	r4, r7, r5
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2100      	movs	r1, #0
 800bc36:	0018      	movs	r0, r3
 800bc38:	f7ff fe89 	bl	800b94e <dir_sdi>
 800bc3c:	0003      	movs	r3, r0
 800bc3e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800bc40:	197b      	adds	r3, r7, r5
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d133      	bne.n	800bcb0 <dir_alloc+0x92>
		n = 0;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	69da      	ldr	r2, [r3, #28]
 800bc50:	2517      	movs	r5, #23
 800bc52:	197c      	adds	r4, r7, r5
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	0011      	movs	r1, r2
 800bc58:	0018      	movs	r0, r3
 800bc5a:	f7ff fa4b 	bl	800b0f4 <move_window>
 800bc5e:	0003      	movs	r3, r0
 800bc60:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800bc62:	197b      	adds	r3, r7, r5
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d121      	bne.n	800bcae <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a1b      	ldr	r3, [r3, #32]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	2be5      	cmp	r3, #229	; 0xe5
 800bc72:	d004      	beq.n	800bc7e <dir_alloc+0x60>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a1b      	ldr	r3, [r3, #32]
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d107      	bne.n	800bc8e <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	3301      	adds	r3, #1
 800bc82:	613b      	str	r3, [r7, #16]
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d102      	bne.n	800bc92 <dir_alloc+0x74>
 800bc8c:	e010      	b.n	800bcb0 <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bc8e:	2300      	movs	r3, #0
 800bc90:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bc92:	2517      	movs	r5, #23
 800bc94:	197c      	adds	r4, r7, r5
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2101      	movs	r1, #1
 800bc9a:	0018      	movs	r0, r3
 800bc9c:	f7ff fee3 	bl	800ba66 <dir_next>
 800bca0:	0003      	movs	r3, r0
 800bca2:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bca4:	197b      	adds	r3, r7, r5
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d0cf      	beq.n	800bc4c <dir_alloc+0x2e>
 800bcac:	e000      	b.n	800bcb0 <dir_alloc+0x92>
			if (res != FR_OK) break;
 800bcae:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bcb0:	2217      	movs	r2, #23
 800bcb2:	18bb      	adds	r3, r7, r2
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	2b04      	cmp	r3, #4
 800bcb8:	d102      	bne.n	800bcc0 <dir_alloc+0xa2>
 800bcba:	18bb      	adds	r3, r7, r2
 800bcbc:	2207      	movs	r2, #7
 800bcbe:	701a      	strb	r2, [r3, #0]
	return res;
 800bcc0:	2317      	movs	r3, #23
 800bcc2:	18fb      	adds	r3, r7, r3
 800bcc4:	781b      	ldrb	r3, [r3, #0]
}
 800bcc6:	0018      	movs	r0, r3
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	b006      	add	sp, #24
 800bccc:	bdb0      	pop	{r4, r5, r7, pc}

0800bcce <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b084      	sub	sp, #16
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	331a      	adds	r3, #26
 800bcdc:	0018      	movs	r0, r3
 800bcde:	f7fe ff5d 	bl	800ab9c <ld_word>
 800bce2:	0003      	movs	r3, r0
 800bce4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	2b03      	cmp	r3, #3
 800bcec:	d109      	bne.n	800bd02 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	3314      	adds	r3, #20
 800bcf2:	0018      	movs	r0, r3
 800bcf4:	f7fe ff52 	bl	800ab9c <ld_word>
 800bcf8:	0003      	movs	r3, r0
 800bcfa:	041b      	lsls	r3, r3, #16
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bd02:	68fb      	ldr	r3, [r7, #12]
}
 800bd04:	0018      	movs	r0, r3
 800bd06:	46bd      	mov	sp, r7
 800bd08:	b004      	add	sp, #16
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	331a      	adds	r3, #26
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	b292      	uxth	r2, r2
 800bd20:	0011      	movs	r1, r2
 800bd22:	0018      	movs	r0, r3
 800bd24:	f7fe ff76 	bl	800ac14 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	2b03      	cmp	r3, #3
 800bd2e:	d109      	bne.n	800bd44 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	3314      	adds	r3, #20
 800bd34:	001a      	movs	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	0c1b      	lsrs	r3, r3, #16
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	0019      	movs	r1, r3
 800bd3e:	0010      	movs	r0, r2
 800bd40:	f7fe ff68 	bl	800ac14 <st_word>
	}
}
 800bd44:	46c0      	nop			; (mov r8, r8)
 800bd46:	46bd      	mov	sp, r7
 800bd48:	b004      	add	sp, #16
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bd4c:	b5b0      	push	{r4, r5, r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	331a      	adds	r3, #26
 800bd5a:	0018      	movs	r0, r3
 800bd5c:	f7fe ff1e 	bl	800ab9c <ld_word>
 800bd60:	1e03      	subs	r3, r0, #0
 800bd62:	d001      	beq.n	800bd68 <cmp_lfn+0x1c>
 800bd64:	2300      	movs	r3, #0
 800bd66:	e068      	b.n	800be3a <cmp_lfn+0xee>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	001a      	movs	r2, r3
 800bd6e:	233f      	movs	r3, #63	; 0x3f
 800bd70:	4013      	ands	r3, r2
 800bd72:	1e5a      	subs	r2, r3, #1
 800bd74:	0013      	movs	r3, r2
 800bd76:	005b      	lsls	r3, r3, #1
 800bd78:	189b      	adds	r3, r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	189b      	adds	r3, r3, r2
 800bd7e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bd80:	230e      	movs	r3, #14
 800bd82:	18fb      	adds	r3, r7, r3
 800bd84:	2201      	movs	r2, #1
 800bd86:	801a      	strh	r2, [r3, #0]
 800bd88:	2300      	movs	r3, #0
 800bd8a:	613b      	str	r3, [r7, #16]
 800bd8c:	e03d      	b.n	800be0a <cmp_lfn+0xbe>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bd8e:	4a2d      	ldr	r2, [pc, #180]	; (800be44 <cmp_lfn+0xf8>)
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	18d3      	adds	r3, r2, r3
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	001a      	movs	r2, r3
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	189b      	adds	r3, r3, r2
 800bd9c:	250c      	movs	r5, #12
 800bd9e:	197c      	adds	r4, r7, r5
 800bda0:	0018      	movs	r0, r3
 800bda2:	f7fe fefb 	bl	800ab9c <ld_word>
 800bda6:	0003      	movs	r3, r0
 800bda8:	8023      	strh	r3, [r4, #0]
		if (wc) {
 800bdaa:	230e      	movs	r3, #14
 800bdac:	18fb      	adds	r3, r7, r3
 800bdae:	881b      	ldrh	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d01f      	beq.n	800bdf4 <cmp_lfn+0xa8>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	2bfe      	cmp	r3, #254	; 0xfe
 800bdb8:	d813      	bhi.n	800bde2 <cmp_lfn+0x96>
 800bdba:	197b      	adds	r3, r7, r5
 800bdbc:	881b      	ldrh	r3, [r3, #0]
 800bdbe:	0018      	movs	r0, r3
 800bdc0:	f002 f84a 	bl	800de58 <ff_wtoupper>
 800bdc4:	0003      	movs	r3, r0
 800bdc6:	001c      	movs	r4, r3
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	1c5a      	adds	r2, r3, #1
 800bdcc:	617a      	str	r2, [r7, #20]
 800bdce:	005b      	lsls	r3, r3, #1
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	18d3      	adds	r3, r2, r3
 800bdd4:	881b      	ldrh	r3, [r3, #0]
 800bdd6:	0018      	movs	r0, r3
 800bdd8:	f002 f83e 	bl	800de58 <ff_wtoupper>
 800bddc:	0003      	movs	r3, r0
 800bdde:	429c      	cmp	r4, r3
 800bde0:	d001      	beq.n	800bde6 <cmp_lfn+0x9a>
				return 0;					/* Not matched */
 800bde2:	2300      	movs	r3, #0
 800bde4:	e029      	b.n	800be3a <cmp_lfn+0xee>
			}
			wc = uc;
 800bde6:	230e      	movs	r3, #14
 800bde8:	18fb      	adds	r3, r7, r3
 800bdea:	220c      	movs	r2, #12
 800bdec:	18ba      	adds	r2, r7, r2
 800bdee:	8812      	ldrh	r2, [r2, #0]
 800bdf0:	801a      	strh	r2, [r3, #0]
 800bdf2:	e007      	b.n	800be04 <cmp_lfn+0xb8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bdf4:	230c      	movs	r3, #12
 800bdf6:	18fb      	adds	r3, r7, r3
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	4a13      	ldr	r2, [pc, #76]	; (800be48 <cmp_lfn+0xfc>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d001      	beq.n	800be04 <cmp_lfn+0xb8>
 800be00:	2300      	movs	r3, #0
 800be02:	e01a      	b.n	800be3a <cmp_lfn+0xee>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	3301      	adds	r3, #1
 800be08:	613b      	str	r3, [r7, #16]
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	2b0c      	cmp	r3, #12
 800be0e:	d9be      	bls.n	800bd8e <cmp_lfn+0x42>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	001a      	movs	r2, r3
 800be16:	2340      	movs	r3, #64	; 0x40
 800be18:	4013      	ands	r3, r2
 800be1a:	d00d      	beq.n	800be38 <cmp_lfn+0xec>
 800be1c:	230e      	movs	r3, #14
 800be1e:	18fb      	adds	r3, r7, r3
 800be20:	881b      	ldrh	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d008      	beq.n	800be38 <cmp_lfn+0xec>
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	005b      	lsls	r3, r3, #1
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	18d3      	adds	r3, r2, r3
 800be2e:	881b      	ldrh	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d001      	beq.n	800be38 <cmp_lfn+0xec>
 800be34:	2300      	movs	r3, #0
 800be36:	e000      	b.n	800be3a <cmp_lfn+0xee>

	return 1;		/* The part of LFN matched */
 800be38:	2301      	movs	r3, #1
}
 800be3a:	0018      	movs	r0, r3
 800be3c:	46bd      	mov	sp, r7
 800be3e:	b006      	add	sp, #24
 800be40:	bdb0      	pop	{r4, r5, r7, pc}
 800be42:	46c0      	nop			; (mov r8, r8)
 800be44:	08013770 	.word	0x08013770
 800be48:	0000ffff 	.word	0x0000ffff

0800be4c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800be4c:	b590      	push	{r4, r7, lr}
 800be4e:	b089      	sub	sp, #36	; 0x24
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	0019      	movs	r1, r3
 800be58:	1dfb      	adds	r3, r7, #7
 800be5a:	701a      	strb	r2, [r3, #0]
 800be5c:	1dbb      	adds	r3, r7, #6
 800be5e:	1c0a      	adds	r2, r1, #0
 800be60:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	330d      	adds	r3, #13
 800be66:	1dba      	adds	r2, r7, #6
 800be68:	7812      	ldrb	r2, [r2, #0]
 800be6a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	330b      	adds	r3, #11
 800be70:	220f      	movs	r2, #15
 800be72:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	330c      	adds	r3, #12
 800be78:	2200      	movs	r2, #0
 800be7a:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	331a      	adds	r3, #26
 800be80:	2100      	movs	r1, #0
 800be82:	0018      	movs	r0, r3
 800be84:	f7fe fec6 	bl	800ac14 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800be88:	1dfb      	adds	r3, r7, #7
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	1e5a      	subs	r2, r3, #1
 800be8e:	0013      	movs	r3, r2
 800be90:	005b      	lsls	r3, r3, #1
 800be92:	189b      	adds	r3, r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	189b      	adds	r3, r3, r2
 800be98:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800be9a:	2316      	movs	r3, #22
 800be9c:	18fb      	adds	r3, r7, r3
 800be9e:	2200      	movs	r2, #0
 800bea0:	801a      	strh	r2, [r3, #0]
 800bea2:	2300      	movs	r3, #0
 800bea4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bea6:	2116      	movs	r1, #22
 800bea8:	187b      	adds	r3, r7, r1
 800beaa:	881b      	ldrh	r3, [r3, #0]
 800beac:	4a21      	ldr	r2, [pc, #132]	; (800bf34 <put_lfn+0xe8>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d008      	beq.n	800bec4 <put_lfn+0x78>
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	1c5a      	adds	r2, r3, #1
 800beb6:	61fa      	str	r2, [r7, #28]
 800beb8:	005b      	lsls	r3, r3, #1
 800beba:	68fa      	ldr	r2, [r7, #12]
 800bebc:	18d2      	adds	r2, r2, r3
 800bebe:	187b      	adds	r3, r7, r1
 800bec0:	8812      	ldrh	r2, [r2, #0]
 800bec2:	801a      	strh	r2, [r3, #0]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bec4:	4a1c      	ldr	r2, [pc, #112]	; (800bf38 <put_lfn+0xec>)
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	18d3      	adds	r3, r2, r3
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	001a      	movs	r2, r3
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	189a      	adds	r2, r3, r2
 800bed2:	2416      	movs	r4, #22
 800bed4:	193b      	adds	r3, r7, r4
 800bed6:	881b      	ldrh	r3, [r3, #0]
 800bed8:	0019      	movs	r1, r3
 800beda:	0010      	movs	r0, r2
 800bedc:	f7fe fe9a 	bl	800ac14 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bee0:	0022      	movs	r2, r4
 800bee2:	18bb      	adds	r3, r7, r2
 800bee4:	881b      	ldrh	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d103      	bne.n	800bef2 <put_lfn+0xa6>
 800beea:	18bb      	adds	r3, r7, r2
 800beec:	2201      	movs	r2, #1
 800beee:	4252      	negs	r2, r2
 800bef0:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	3301      	adds	r3, #1
 800bef6:	61bb      	str	r3, [r7, #24]
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	2b0c      	cmp	r3, #12
 800befc:	d9d3      	bls.n	800bea6 <put_lfn+0x5a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800befe:	2316      	movs	r3, #22
 800bf00:	18fb      	adds	r3, r7, r3
 800bf02:	881b      	ldrh	r3, [r3, #0]
 800bf04:	4a0b      	ldr	r2, [pc, #44]	; (800bf34 <put_lfn+0xe8>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d006      	beq.n	800bf18 <put_lfn+0xcc>
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	18d3      	adds	r3, r2, r3
 800bf12:	881b      	ldrh	r3, [r3, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d105      	bne.n	800bf24 <put_lfn+0xd8>
 800bf18:	1dfb      	adds	r3, r7, #7
 800bf1a:	1dfa      	adds	r2, r7, #7
 800bf1c:	7812      	ldrb	r2, [r2, #0]
 800bf1e:	2140      	movs	r1, #64	; 0x40
 800bf20:	430a      	orrs	r2, r1
 800bf22:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	1dfa      	adds	r2, r7, #7
 800bf28:	7812      	ldrb	r2, [r2, #0]
 800bf2a:	701a      	strb	r2, [r3, #0]
}
 800bf2c:	46c0      	nop			; (mov r8, r8)
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	b009      	add	sp, #36	; 0x24
 800bf32:	bd90      	pop	{r4, r7, pc}
 800bf34:	0000ffff 	.word	0x0000ffff
 800bf38:	08013770 	.word	0x08013770

0800bf3c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b08c      	sub	sp, #48	; 0x30
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]
 800bf48:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bf4a:	68b9      	ldr	r1, [r7, #8]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	220b      	movs	r2, #11
 800bf50:	0018      	movs	r0, r3
 800bf52:	f7fe fea7 	bl	800aca4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	2b05      	cmp	r3, #5
 800bf5a:	d92f      	bls.n	800bfbc <gen_numname+0x80>
		sr = seq;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bf60:	e026      	b.n	800bfb0 <gen_numname+0x74>
			wc = *lfn++;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	1c9a      	adds	r2, r3, #2
 800bf66:	607a      	str	r2, [r7, #4]
 800bf68:	2222      	movs	r2, #34	; 0x22
 800bf6a:	18ba      	adds	r2, r7, r2
 800bf6c:	881b      	ldrh	r3, [r3, #0]
 800bf6e:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 800bf70:	2300      	movs	r3, #0
 800bf72:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf74:	e019      	b.n	800bfaa <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	005a      	lsls	r2, r3, #1
 800bf7a:	2022      	movs	r0, #34	; 0x22
 800bf7c:	183b      	adds	r3, r7, r0
 800bf7e:	881b      	ldrh	r3, [r3, #0]
 800bf80:	2101      	movs	r1, #1
 800bf82:	400b      	ands	r3, r1
 800bf84:	18d3      	adds	r3, r2, r3
 800bf86:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bf88:	183b      	adds	r3, r7, r0
 800bf8a:	183a      	adds	r2, r7, r0
 800bf8c:	8812      	ldrh	r2, [r2, #0]
 800bf8e:	0852      	lsrs	r2, r2, #1
 800bf90:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 800bf92:	69fa      	ldr	r2, [r7, #28]
 800bf94:	2380      	movs	r3, #128	; 0x80
 800bf96:	025b      	lsls	r3, r3, #9
 800bf98:	4013      	ands	r3, r2
 800bf9a:	d003      	beq.n	800bfa4 <gen_numname+0x68>
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	4a30      	ldr	r2, [pc, #192]	; (800c060 <gen_numname+0x124>)
 800bfa0:	4053      	eors	r3, r2
 800bfa2:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfac:	2b0f      	cmp	r3, #15
 800bfae:	d9e2      	bls.n	800bf76 <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	881b      	ldrh	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1d4      	bne.n	800bf62 <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bfbc:	2307      	movs	r3, #7
 800bfbe:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	220f      	movs	r2, #15
 800bfc6:	4013      	ands	r3, r2
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	212f      	movs	r1, #47	; 0x2f
 800bfcc:	187b      	adds	r3, r7, r1
 800bfce:	3230      	adds	r2, #48	; 0x30
 800bfd0:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 800bfd2:	187b      	adds	r3, r7, r1
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	2b39      	cmp	r3, #57	; 0x39
 800bfd8:	d904      	bls.n	800bfe4 <gen_numname+0xa8>
 800bfda:	187b      	adds	r3, r7, r1
 800bfdc:	187a      	adds	r2, r7, r1
 800bfde:	7812      	ldrb	r2, [r2, #0]
 800bfe0:	3207      	adds	r2, #7
 800bfe2:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 800bfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe6:	1e5a      	subs	r2, r3, #1
 800bfe8:	62ba      	str	r2, [r7, #40]	; 0x28
 800bfea:	2014      	movs	r0, #20
 800bfec:	183a      	adds	r2, r7, r0
 800bfee:	212f      	movs	r1, #47	; 0x2f
 800bff0:	1879      	adds	r1, r7, r1
 800bff2:	7809      	ldrb	r1, [r1, #0]
 800bff4:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	091b      	lsrs	r3, r3, #4
 800bffa:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1de      	bne.n	800bfc0 <gen_numname+0x84>
	ns[i] = '~';
 800c002:	183a      	adds	r2, r7, r0
 800c004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c006:	18d3      	adds	r3, r2, r3
 800c008:	227e      	movs	r2, #126	; 0x7e
 800c00a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c00c:	2300      	movs	r3, #0
 800c00e:	627b      	str	r3, [r7, #36]	; 0x24
 800c010:	e002      	b.n	800c018 <gen_numname+0xdc>
 800c012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c014:	3301      	adds	r3, #1
 800c016:	627b      	str	r3, [r7, #36]	; 0x24
 800c018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d205      	bcs.n	800c02c <gen_numname+0xf0>
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c024:	18d3      	adds	r3, r2, r3
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	2b20      	cmp	r3, #32
 800c02a:	d1f2      	bne.n	800c012 <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02e:	2b07      	cmp	r3, #7
 800c030:	d806      	bhi.n	800c040 <gen_numname+0x104>
 800c032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c034:	1c5a      	adds	r2, r3, #1
 800c036:	62ba      	str	r2, [r7, #40]	; 0x28
 800c038:	2214      	movs	r2, #20
 800c03a:	18ba      	adds	r2, r7, r2
 800c03c:	5cd1      	ldrb	r1, [r2, r3]
 800c03e:	e000      	b.n	800c042 <gen_numname+0x106>
 800c040:	2120      	movs	r1, #32
 800c042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c044:	1c5a      	adds	r2, r3, #1
 800c046:	627a      	str	r2, [r7, #36]	; 0x24
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	18d3      	adds	r3, r2, r3
 800c04c:	1c0a      	adds	r2, r1, #0
 800c04e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c052:	2b07      	cmp	r3, #7
 800c054:	d9ea      	bls.n	800c02c <gen_numname+0xf0>
}
 800c056:	46c0      	nop			; (mov r8, r8)
 800c058:	46c0      	nop			; (mov r8, r8)
 800c05a:	46bd      	mov	sp, r7
 800c05c:	b00c      	add	sp, #48	; 0x30
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	00011021 	.word	0x00011021

0800c064 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c06c:	230f      	movs	r3, #15
 800c06e:	18fb      	adds	r3, r7, r3
 800c070:	2200      	movs	r2, #0
 800c072:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 800c074:	230b      	movs	r3, #11
 800c076:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c078:	200f      	movs	r0, #15
 800c07a:	183b      	adds	r3, r7, r0
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	0852      	lsrs	r2, r2, #1
 800c082:	01db      	lsls	r3, r3, #7
 800c084:	4313      	orrs	r3, r2
 800c086:	b2d9      	uxtb	r1, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	1c5a      	adds	r2, r3, #1
 800c08c:	607a      	str	r2, [r7, #4]
 800c08e:	781a      	ldrb	r2, [r3, #0]
 800c090:	183b      	adds	r3, r7, r0
 800c092:	188a      	adds	r2, r1, r2
 800c094:	701a      	strb	r2, [r3, #0]
	} while (--n);
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	3b01      	subs	r3, #1
 800c09a:	60bb      	str	r3, [r7, #8]
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d1ea      	bne.n	800c078 <sum_sfn+0x14>
	return sum;
 800c0a2:	183b      	adds	r3, r7, r0
 800c0a4:	781b      	ldrb	r3, [r3, #0]
}
 800c0a6:	0018      	movs	r0, r3
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	b004      	add	sp, #16
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c0ae:	b5b0      	push	{r4, r5, r7, lr}
 800c0b0:	b086      	sub	sp, #24
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c0bc:	2517      	movs	r5, #23
 800c0be:	197c      	adds	r4, r7, r5
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	0018      	movs	r0, r3
 800c0c6:	f7ff fc42 	bl	800b94e <dir_sdi>
 800c0ca:	0003      	movs	r3, r0
 800c0cc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800c0ce:	197b      	adds	r3, r7, r5
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d002      	beq.n	800c0dc <dir_find+0x2e>
 800c0d6:	197b      	adds	r3, r7, r5
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	e0df      	b.n	800c29c <dir_find+0x1ee>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c0dc:	2114      	movs	r1, #20
 800c0de:	187b      	adds	r3, r7, r1
 800c0e0:	22ff      	movs	r2, #255	; 0xff
 800c0e2:	701a      	strb	r2, [r3, #0]
 800c0e4:	2315      	movs	r3, #21
 800c0e6:	18fb      	adds	r3, r7, r3
 800c0e8:	187a      	adds	r2, r7, r1
 800c0ea:	7812      	ldrb	r2, [r2, #0]
 800c0ec:	701a      	strb	r2, [r3, #0]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	4252      	negs	r2, r2
 800c0f4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	69da      	ldr	r2, [r3, #28]
 800c0fa:	2517      	movs	r5, #23
 800c0fc:	197c      	adds	r4, r7, r5
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	0011      	movs	r1, r2
 800c102:	0018      	movs	r0, r3
 800c104:	f7fe fff6 	bl	800b0f4 <move_window>
 800c108:	0003      	movs	r3, r0
 800c10a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800c10c:	0029      	movs	r1, r5
 800c10e:	187b      	adds	r3, r7, r1
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d000      	beq.n	800c118 <dir_find+0x6a>
 800c116:	e0b9      	b.n	800c28c <dir_find+0x1de>
		c = dp->dir[DIR_Name];
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6a1a      	ldr	r2, [r3, #32]
 800c11c:	2016      	movs	r0, #22
 800c11e:	183b      	adds	r3, r7, r0
 800c120:	7812      	ldrb	r2, [r2, #0]
 800c122:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c124:	183b      	adds	r3, r7, r0
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d103      	bne.n	800c134 <dir_find+0x86>
 800c12c:	187b      	adds	r3, r7, r1
 800c12e:	2204      	movs	r2, #4
 800c130:	701a      	strb	r2, [r3, #0]
 800c132:	e0b0      	b.n	800c296 <dir_find+0x1e8>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6a1b      	ldr	r3, [r3, #32]
 800c138:	330b      	adds	r3, #11
 800c13a:	781a      	ldrb	r2, [r3, #0]
 800c13c:	200f      	movs	r0, #15
 800c13e:	183b      	adds	r3, r7, r0
 800c140:	213f      	movs	r1, #63	; 0x3f
 800c142:	400a      	ands	r2, r1
 800c144:	701a      	strb	r2, [r3, #0]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	0001      	movs	r1, r0
 800c14a:	187a      	adds	r2, r7, r1
 800c14c:	7812      	ldrb	r2, [r2, #0]
 800c14e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c150:	2316      	movs	r3, #22
 800c152:	18fb      	adds	r3, r7, r3
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	2be5      	cmp	r3, #229	; 0xe5
 800c158:	d008      	beq.n	800c16c <dir_find+0xbe>
 800c15a:	187b      	adds	r3, r7, r1
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	2208      	movs	r2, #8
 800c160:	4013      	ands	r3, r2
 800c162:	d00c      	beq.n	800c17e <dir_find+0xd0>
 800c164:	187b      	adds	r3, r7, r1
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	2b0f      	cmp	r3, #15
 800c16a:	d008      	beq.n	800c17e <dir_find+0xd0>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c16c:	2315      	movs	r3, #21
 800c16e:	18fb      	adds	r3, r7, r3
 800c170:	22ff      	movs	r2, #255	; 0xff
 800c172:	701a      	strb	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2201      	movs	r2, #1
 800c178:	4252      	negs	r2, r2
 800c17a:	631a      	str	r2, [r3, #48]	; 0x30
 800c17c:	e077      	b.n	800c26e <dir_find+0x1c0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c17e:	230f      	movs	r3, #15
 800c180:	18fb      	adds	r3, r7, r3
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	2b0f      	cmp	r3, #15
 800c186:	d148      	bne.n	800c21a <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	222f      	movs	r2, #47	; 0x2f
 800c18c:	5c9b      	ldrb	r3, [r3, r2]
 800c18e:	001a      	movs	r2, r3
 800c190:	2340      	movs	r3, #64	; 0x40
 800c192:	4013      	ands	r3, r2
 800c194:	d000      	beq.n	800c198 <dir_find+0xea>
 800c196:	e06a      	b.n	800c26e <dir_find+0x1c0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c198:	2116      	movs	r1, #22
 800c19a:	187b      	adds	r3, r7, r1
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	2240      	movs	r2, #64	; 0x40
 800c1a0:	4013      	ands	r3, r2
 800c1a2:	d015      	beq.n	800c1d0 <dir_find+0x122>
						sum = dp->dir[LDIR_Chksum];
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6a1a      	ldr	r2, [r3, #32]
 800c1a8:	2314      	movs	r3, #20
 800c1aa:	18fb      	adds	r3, r7, r3
 800c1ac:	7b52      	ldrb	r2, [r2, #13]
 800c1ae:	701a      	strb	r2, [r3, #0]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c1b0:	187b      	adds	r3, r7, r1
 800c1b2:	0008      	movs	r0, r1
 800c1b4:	187a      	adds	r2, r7, r1
 800c1b6:	7812      	ldrb	r2, [r2, #0]
 800c1b8:	2140      	movs	r1, #64	; 0x40
 800c1ba:	438a      	bics	r2, r1
 800c1bc:	701a      	strb	r2, [r3, #0]
 800c1be:	2315      	movs	r3, #21
 800c1c0:	18fb      	adds	r3, r7, r3
 800c1c2:	183a      	adds	r2, r7, r0
 800c1c4:	7812      	ldrb	r2, [r2, #0]
 800c1c6:	701a      	strb	r2, [r3, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	695a      	ldr	r2, [r3, #20]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c1d0:	2316      	movs	r3, #22
 800c1d2:	18fa      	adds	r2, r7, r3
 800c1d4:	2415      	movs	r4, #21
 800c1d6:	193b      	adds	r3, r7, r4
 800c1d8:	7812      	ldrb	r2, [r2, #0]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d117      	bne.n	800c210 <dir_find+0x162>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6a1b      	ldr	r3, [r3, #32]
 800c1e4:	330d      	adds	r3, #13
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	2214      	movs	r2, #20
 800c1ea:	18ba      	adds	r2, r7, r2
 800c1ec:	7812      	ldrb	r2, [r2, #0]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d10e      	bne.n	800c210 <dir_find+0x162>
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	691a      	ldr	r2, [r3, #16]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a1b      	ldr	r3, [r3, #32]
 800c1fa:	0019      	movs	r1, r3
 800c1fc:	0010      	movs	r0, r2
 800c1fe:	f7ff fda5 	bl	800bd4c <cmp_lfn>
 800c202:	1e03      	subs	r3, r0, #0
 800c204:	d004      	beq.n	800c210 <dir_find+0x162>
 800c206:	193b      	adds	r3, r7, r4
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	3b01      	subs	r3, #1
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	e000      	b.n	800c212 <dir_find+0x164>
 800c210:	22ff      	movs	r2, #255	; 0xff
 800c212:	2315      	movs	r3, #21
 800c214:	18fb      	adds	r3, r7, r3
 800c216:	701a      	strb	r2, [r3, #0]
 800c218:	e029      	b.n	800c26e <dir_find+0x1c0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c21a:	2315      	movs	r3, #21
 800c21c:	18fb      	adds	r3, r7, r3
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10b      	bne.n	800c23c <dir_find+0x18e>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6a1b      	ldr	r3, [r3, #32]
 800c228:	0018      	movs	r0, r3
 800c22a:	f7ff ff1b 	bl	800c064 <sum_sfn>
 800c22e:	0003      	movs	r3, r0
 800c230:	001a      	movs	r2, r3
 800c232:	2314      	movs	r3, #20
 800c234:	18fb      	adds	r3, r7, r3
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	4293      	cmp	r3, r2
 800c23a:	d029      	beq.n	800c290 <dir_find+0x1e2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	222f      	movs	r2, #47	; 0x2f
 800c240:	5c9b      	ldrb	r3, [r3, r2]
 800c242:	001a      	movs	r2, r3
 800c244:	2301      	movs	r3, #1
 800c246:	4013      	ands	r3, r2
 800c248:	d109      	bne.n	800c25e <dir_find+0x1b0>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a18      	ldr	r0, [r3, #32]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	3324      	adds	r3, #36	; 0x24
 800c252:	220b      	movs	r2, #11
 800c254:	0019      	movs	r1, r3
 800c256:	f7fe fd5d 	bl	800ad14 <mem_cmp>
 800c25a:	1e03      	subs	r3, r0, #0
 800c25c:	d01a      	beq.n	800c294 <dir_find+0x1e6>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c25e:	2315      	movs	r3, #21
 800c260:	18fb      	adds	r3, r7, r3
 800c262:	22ff      	movs	r2, #255	; 0xff
 800c264:	701a      	strb	r2, [r3, #0]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2201      	movs	r2, #1
 800c26a:	4252      	negs	r2, r2
 800c26c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c26e:	2517      	movs	r5, #23
 800c270:	197c      	adds	r4, r7, r5
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2100      	movs	r1, #0
 800c276:	0018      	movs	r0, r3
 800c278:	f7ff fbf5 	bl	800ba66 <dir_next>
 800c27c:	0003      	movs	r3, r0
 800c27e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 800c280:	197b      	adds	r3, r7, r5
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d100      	bne.n	800c28a <dir_find+0x1dc>
 800c288:	e735      	b.n	800c0f6 <dir_find+0x48>
 800c28a:	e004      	b.n	800c296 <dir_find+0x1e8>
		if (res != FR_OK) break;
 800c28c:	46c0      	nop			; (mov r8, r8)
 800c28e:	e002      	b.n	800c296 <dir_find+0x1e8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c290:	46c0      	nop			; (mov r8, r8)
 800c292:	e000      	b.n	800c296 <dir_find+0x1e8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c294:	46c0      	nop			; (mov r8, r8)

	return res;
 800c296:	2317      	movs	r3, #23
 800c298:	18fb      	adds	r3, r7, r3
 800c29a:	781b      	ldrb	r3, [r3, #0]
}
 800c29c:	0018      	movs	r0, r3
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	b006      	add	sp, #24
 800c2a2:	bdb0      	pop	{r4, r5, r7, pc}

0800c2a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c2a4:	b5b0      	push	{r4, r5, r7, lr}
 800c2a6:	b08c      	sub	sp, #48	; 0x30
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	222f      	movs	r2, #47	; 0x2f
 800c2b6:	5c9b      	ldrb	r3, [r3, r2]
 800c2b8:	001a      	movs	r2, r3
 800c2ba:	23a0      	movs	r3, #160	; 0xa0
 800c2bc:	4013      	ands	r3, r2
 800c2be:	d001      	beq.n	800c2c4 <dir_register+0x20>
 800c2c0:	2306      	movs	r3, #6
 800c2c2:	e0fb      	b.n	800c4bc <dir_register+0x218>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	627b      	str	r3, [r7, #36]	; 0x24
 800c2c8:	e002      	b.n	800c2d0 <dir_register+0x2c>
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	627b      	str	r3, [r7, #36]	; 0x24
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	691a      	ldr	r2, [r3, #16]
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d6:	005b      	lsls	r3, r3, #1
 800c2d8:	18d3      	adds	r3, r2, r3
 800c2da:	881b      	ldrh	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1f4      	bne.n	800c2ca <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	3324      	adds	r3, #36	; 0x24
 800c2e4:	0019      	movs	r1, r3
 800c2e6:	240c      	movs	r4, #12
 800c2e8:	193b      	adds	r3, r7, r4
 800c2ea:	220c      	movs	r2, #12
 800c2ec:	0018      	movs	r0, r3
 800c2ee:	f7fe fcd9 	bl	800aca4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c2f2:	193b      	adds	r3, r7, r4
 800c2f4:	7adb      	ldrb	r3, [r3, #11]
 800c2f6:	001a      	movs	r2, r3
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	d037      	beq.n	800c36e <dir_register+0xca>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	222f      	movs	r2, #47	; 0x2f
 800c302:	2140      	movs	r1, #64	; 0x40
 800c304:	5499      	strb	r1, [r3, r2]
		for (n = 1; n < 100; n++) {
 800c306:	2301      	movs	r3, #1
 800c308:	62bb      	str	r3, [r7, #40]	; 0x28
 800c30a:	e018      	b.n	800c33e <dir_register+0x9a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	3324      	adds	r3, #36	; 0x24
 800c310:	0018      	movs	r0, r3
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	691a      	ldr	r2, [r3, #16]
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	210c      	movs	r1, #12
 800c31a:	1879      	adds	r1, r7, r1
 800c31c:	f7ff fe0e 	bl	800bf3c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c320:	252f      	movs	r5, #47	; 0x2f
 800c322:	197c      	adds	r4, r7, r5
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	0018      	movs	r0, r3
 800c328:	f7ff fec1 	bl	800c0ae <dir_find>
 800c32c:	0003      	movs	r3, r0
 800c32e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800c330:	197b      	adds	r3, r7, r5
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d106      	bne.n	800c346 <dir_register+0xa2>
		for (n = 1; n < 100; n++) {
 800c338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33a:	3301      	adds	r3, #1
 800c33c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c340:	2b63      	cmp	r3, #99	; 0x63
 800c342:	d9e3      	bls.n	800c30c <dir_register+0x68>
 800c344:	e000      	b.n	800c348 <dir_register+0xa4>
			if (res != FR_OK) break;
 800c346:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34a:	2b64      	cmp	r3, #100	; 0x64
 800c34c:	d101      	bne.n	800c352 <dir_register+0xae>
 800c34e:	2307      	movs	r3, #7
 800c350:	e0b4      	b.n	800c4bc <dir_register+0x218>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c352:	222f      	movs	r2, #47	; 0x2f
 800c354:	18bb      	adds	r3, r7, r2
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	2b04      	cmp	r3, #4
 800c35a:	d002      	beq.n	800c362 <dir_register+0xbe>
 800c35c:	18bb      	adds	r3, r7, r2
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	e0ac      	b.n	800c4bc <dir_register+0x218>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c362:	230c      	movs	r3, #12
 800c364:	18fb      	adds	r3, r7, r3
 800c366:	7ad9      	ldrb	r1, [r3, #11]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	222f      	movs	r2, #47	; 0x2f
 800c36c:	5499      	strb	r1, [r3, r2]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c36e:	230c      	movs	r3, #12
 800c370:	18fb      	adds	r3, r7, r3
 800c372:	7adb      	ldrb	r3, [r3, #11]
 800c374:	001a      	movs	r2, r3
 800c376:	2302      	movs	r3, #2
 800c378:	4013      	ands	r3, r2
 800c37a:	d008      	beq.n	800c38e <dir_register+0xea>
 800c37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37e:	330c      	adds	r3, #12
 800c380:	210d      	movs	r1, #13
 800c382:	0018      	movs	r0, r3
 800c384:	f7f3 fedc 	bl	8000140 <__udivsi3>
 800c388:	0003      	movs	r3, r0
 800c38a:	3301      	adds	r3, #1
 800c38c:	e000      	b.n	800c390 <dir_register+0xec>
 800c38e:	2301      	movs	r3, #1
 800c390:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c392:	252f      	movs	r5, #47	; 0x2f
 800c394:	197c      	adds	r4, r7, r5
 800c396:	6a3a      	ldr	r2, [r7, #32]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	0011      	movs	r1, r2
 800c39c:	0018      	movs	r0, r3
 800c39e:	f7ff fc3e 	bl	800bc1e <dir_alloc>
 800c3a2:	0003      	movs	r3, r0
 800c3a4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c3a6:	0029      	movs	r1, r5
 800c3a8:	187b      	adds	r3, r7, r1
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d153      	bne.n	800c458 <dir_register+0x1b4>
 800c3b0:	6a3b      	ldr	r3, [r7, #32]
 800c3b2:	3b01      	subs	r3, #1
 800c3b4:	623b      	str	r3, [r7, #32]
 800c3b6:	6a3b      	ldr	r3, [r7, #32]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d04d      	beq.n	800c458 <dir_register+0x1b4>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	695a      	ldr	r2, [r3, #20]
 800c3c0:	6a3b      	ldr	r3, [r7, #32]
 800c3c2:	015b      	lsls	r3, r3, #5
 800c3c4:	1ad2      	subs	r2, r2, r3
 800c3c6:	000d      	movs	r5, r1
 800c3c8:	187c      	adds	r4, r7, r1
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	0011      	movs	r1, r2
 800c3ce:	0018      	movs	r0, r3
 800c3d0:	f7ff fabd 	bl	800b94e <dir_sdi>
 800c3d4:	0003      	movs	r3, r0
 800c3d6:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800c3d8:	197b      	adds	r3, r7, r5
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d13b      	bne.n	800c458 <dir_register+0x1b4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	3324      	adds	r3, #36	; 0x24
 800c3e4:	221b      	movs	r2, #27
 800c3e6:	18bc      	adds	r4, r7, r2
 800c3e8:	0018      	movs	r0, r3
 800c3ea:	f7ff fe3b 	bl	800c064 <sum_sfn>
 800c3ee:	0003      	movs	r3, r0
 800c3f0:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	69da      	ldr	r2, [r3, #28]
 800c3f6:	252f      	movs	r5, #47	; 0x2f
 800c3f8:	197c      	adds	r4, r7, r5
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	0011      	movs	r1, r2
 800c3fe:	0018      	movs	r0, r3
 800c400:	f7fe fe78 	bl	800b0f4 <move_window>
 800c404:	0003      	movs	r3, r0
 800c406:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 800c408:	002c      	movs	r4, r5
 800c40a:	193b      	adds	r3, r7, r4
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d121      	bne.n	800c456 <dir_register+0x1b2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	6918      	ldr	r0, [r3, #16]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6a19      	ldr	r1, [r3, #32]
 800c41a:	6a3b      	ldr	r3, [r7, #32]
 800c41c:	b2da      	uxtb	r2, r3
 800c41e:	231b      	movs	r3, #27
 800c420:	18fb      	adds	r3, r7, r3
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	f7ff fd12 	bl	800be4c <put_lfn>
				fs->wflag = 1;
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	2201      	movs	r2, #1
 800c42c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c42e:	0025      	movs	r5, r4
 800c430:	193c      	adds	r4, r7, r4
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2100      	movs	r1, #0
 800c436:	0018      	movs	r0, r3
 800c438:	f7ff fb15 	bl	800ba66 <dir_next>
 800c43c:	0003      	movs	r3, r0
 800c43e:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 800c440:	197b      	adds	r3, r7, r5
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d107      	bne.n	800c458 <dir_register+0x1b4>
 800c448:	6a3b      	ldr	r3, [r7, #32]
 800c44a:	3b01      	subs	r3, #1
 800c44c:	623b      	str	r3, [r7, #32]
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d1ce      	bne.n	800c3f2 <dir_register+0x14e>
 800c454:	e000      	b.n	800c458 <dir_register+0x1b4>
				if (res != FR_OK) break;
 800c456:	46c0      	nop			; (mov r8, r8)
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c458:	252f      	movs	r5, #47	; 0x2f
 800c45a:	197b      	adds	r3, r7, r5
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d129      	bne.n	800c4b6 <dir_register+0x212>
		res = move_window(fs, dp->sect);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	69da      	ldr	r2, [r3, #28]
 800c466:	197c      	adds	r4, r7, r5
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	0011      	movs	r1, r2
 800c46c:	0018      	movs	r0, r3
 800c46e:	f7fe fe41 	bl	800b0f4 <move_window>
 800c472:	0003      	movs	r3, r0
 800c474:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800c476:	197b      	adds	r3, r7, r5
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d11b      	bne.n	800c4b6 <dir_register+0x212>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	2220      	movs	r2, #32
 800c484:	2100      	movs	r1, #0
 800c486:	0018      	movs	r0, r3
 800c488:	f7fe fc2b 	bl	800ace2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6a18      	ldr	r0, [r3, #32]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	3324      	adds	r3, #36	; 0x24
 800c494:	220b      	movs	r2, #11
 800c496:	0019      	movs	r1, r3
 800c498:	f7fe fc04 	bl	800aca4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	222f      	movs	r2, #47	; 0x2f
 800c4a0:	5c9a      	ldrb	r2, [r3, r2]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6a1b      	ldr	r3, [r3, #32]
 800c4a6:	330c      	adds	r3, #12
 800c4a8:	2118      	movs	r1, #24
 800c4aa:	400a      	ands	r2, r1
 800c4ac:	b2d2      	uxtb	r2, r2
 800c4ae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c4b6:	232f      	movs	r3, #47	; 0x2f
 800c4b8:	18fb      	adds	r3, r7, r3
 800c4ba:	781b      	ldrb	r3, [r3, #0]
}
 800c4bc:	0018      	movs	r0, r3
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	b00c      	add	sp, #48	; 0x30
 800c4c2:	bdb0      	pop	{r4, r5, r7, pc}

0800c4c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c4c4:	b5b0      	push	{r4, r5, r7, lr}
 800c4c6:	b08a      	sub	sp, #40	; 0x28
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	613b      	str	r3, [r7, #16]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	691b      	ldr	r3, [r3, #16]
 800c4da:	60fb      	str	r3, [r7, #12]
 800c4dc:	2300      	movs	r3, #0
 800c4de:	617b      	str	r3, [r7, #20]
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	1c5a      	adds	r2, r3, #1
 800c4e8:	61ba      	str	r2, [r7, #24]
 800c4ea:	693a      	ldr	r2, [r7, #16]
 800c4ec:	18d3      	adds	r3, r2, r3
 800c4ee:	781a      	ldrb	r2, [r3, #0]
 800c4f0:	2124      	movs	r1, #36	; 0x24
 800c4f2:	187b      	adds	r3, r7, r1
 800c4f4:	801a      	strh	r2, [r3, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 800c4f6:	000a      	movs	r2, r1
 800c4f8:	18bb      	adds	r3, r7, r2
 800c4fa:	881b      	ldrh	r3, [r3, #0]
 800c4fc:	2b1f      	cmp	r3, #31
 800c4fe:	d94e      	bls.n	800c59e <create_name+0xda>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c500:	18bb      	adds	r3, r7, r2
 800c502:	881b      	ldrh	r3, [r3, #0]
 800c504:	2b2f      	cmp	r3, #47	; 0x2f
 800c506:	d007      	beq.n	800c518 <create_name+0x54>
 800c508:	18bb      	adds	r3, r7, r2
 800c50a:	881b      	ldrh	r3, [r3, #0]
 800c50c:	2b5c      	cmp	r3, #92	; 0x5c
 800c50e:	d110      	bne.n	800c532 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c510:	e002      	b.n	800c518 <create_name+0x54>
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	3301      	adds	r3, #1
 800c516:	61bb      	str	r3, [r7, #24]
 800c518:	693a      	ldr	r2, [r7, #16]
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	18d3      	adds	r3, r2, r3
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	2b2f      	cmp	r3, #47	; 0x2f
 800c522:	d0f6      	beq.n	800c512 <create_name+0x4e>
 800c524:	693a      	ldr	r2, [r7, #16]
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	18d3      	adds	r3, r2, r3
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	2b5c      	cmp	r3, #92	; 0x5c
 800c52e:	d0f0      	beq.n	800c512 <create_name+0x4e>
			break;
 800c530:	e036      	b.n	800c5a0 <create_name+0xdc>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	2bfe      	cmp	r3, #254	; 0xfe
 800c536:	d901      	bls.n	800c53c <create_name+0x78>
 800c538:	2306      	movs	r3, #6
 800c53a:	e1c2      	b.n	800c8c2 <create_name+0x3fe>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c53c:	2524      	movs	r5, #36	; 0x24
 800c53e:	197b      	adds	r3, r7, r5
 800c540:	197a      	adds	r2, r7, r5
 800c542:	8812      	ldrh	r2, [r2, #0]
 800c544:	21ff      	movs	r1, #255	; 0xff
 800c546:	400a      	ands	r2, r1
 800c548:	801a      	strh	r2, [r3, #0]
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c54a:	197c      	adds	r4, r7, r5
 800c54c:	197b      	adds	r3, r7, r5
 800c54e:	881b      	ldrh	r3, [r3, #0]
 800c550:	2101      	movs	r1, #1
 800c552:	0018      	movs	r0, r3
 800c554:	f001 fc2e 	bl	800ddb4 <ff_convert>
 800c558:	0003      	movs	r3, r0
 800c55a:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c55c:	197b      	adds	r3, r7, r5
 800c55e:	881b      	ldrh	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d101      	bne.n	800c568 <create_name+0xa4>
 800c564:	2306      	movs	r3, #6
 800c566:	e1ac      	b.n	800c8c2 <create_name+0x3fe>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c568:	2224      	movs	r2, #36	; 0x24
 800c56a:	18bb      	adds	r3, r7, r2
 800c56c:	881b      	ldrh	r3, [r3, #0]
 800c56e:	2b7f      	cmp	r3, #127	; 0x7f
 800c570:	d80a      	bhi.n	800c588 <create_name+0xc4>
 800c572:	18bb      	adds	r3, r7, r2
 800c574:	881a      	ldrh	r2, [r3, #0]
 800c576:	4ba7      	ldr	r3, [pc, #668]	; (800c814 <create_name+0x350>)
 800c578:	0011      	movs	r1, r2
 800c57a:	0018      	movs	r0, r3
 800c57c:	f7fe fbef 	bl	800ad5e <chk_chr>
 800c580:	1e03      	subs	r3, r0, #0
 800c582:	d001      	beq.n	800c588 <create_name+0xc4>
 800c584:	2306      	movs	r3, #6
 800c586:	e19c      	b.n	800c8c2 <create_name+0x3fe>
		lfn[di++] = w;					/* Store the Unicode character */
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	1c5a      	adds	r2, r3, #1
 800c58c:	617a      	str	r2, [r7, #20]
 800c58e:	005b      	lsls	r3, r3, #1
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	18d3      	adds	r3, r2, r3
 800c594:	2224      	movs	r2, #36	; 0x24
 800c596:	18ba      	adds	r2, r7, r2
 800c598:	8812      	ldrh	r2, [r2, #0]
 800c59a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c59c:	e7a2      	b.n	800c4e4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c59e:	46c0      	nop			; (mov r8, r8)
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c5a0:	693a      	ldr	r2, [r7, #16]
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	18d2      	adds	r2, r2, r3
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c5aa:	2324      	movs	r3, #36	; 0x24
 800c5ac:	18fb      	adds	r3, r7, r3
 800c5ae:	881b      	ldrh	r3, [r3, #0]
 800c5b0:	2b1f      	cmp	r3, #31
 800c5b2:	d801      	bhi.n	800c5b8 <create_name+0xf4>
 800c5b4:	2204      	movs	r2, #4
 800c5b6:	e000      	b.n	800c5ba <create_name+0xf6>
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	2327      	movs	r3, #39	; 0x27
 800c5bc:	18fb      	adds	r3, r7, r3
 800c5be:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c5c0:	e016      	b.n	800c5f0 <create_name+0x12c>
		w = lfn[di - 1];
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	4a94      	ldr	r2, [pc, #592]	; (800c818 <create_name+0x354>)
 800c5c6:	4694      	mov	ip, r2
 800c5c8:	4463      	add	r3, ip
 800c5ca:	005b      	lsls	r3, r3, #1
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	18d2      	adds	r2, r2, r3
 800c5d0:	2124      	movs	r1, #36	; 0x24
 800c5d2:	187b      	adds	r3, r7, r1
 800c5d4:	8812      	ldrh	r2, [r2, #0]
 800c5d6:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 800c5d8:	000a      	movs	r2, r1
 800c5da:	18bb      	adds	r3, r7, r2
 800c5dc:	881b      	ldrh	r3, [r3, #0]
 800c5de:	2b20      	cmp	r3, #32
 800c5e0:	d003      	beq.n	800c5ea <create_name+0x126>
 800c5e2:	18bb      	adds	r3, r7, r2
 800c5e4:	881b      	ldrh	r3, [r3, #0]
 800c5e6:	2b2e      	cmp	r3, #46	; 0x2e
 800c5e8:	d106      	bne.n	800c5f8 <create_name+0x134>
		di--;
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1e5      	bne.n	800c5c2 <create_name+0xfe>
 800c5f6:	e000      	b.n	800c5fa <create_name+0x136>
		if (w != ' ' && w != '.') break;
 800c5f8:	46c0      	nop			; (mov r8, r8)
	}
	lfn[di] = 0;						/* LFN is created */
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	005b      	lsls	r3, r3, #1
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	18d3      	adds	r3, r2, r3
 800c602:	2200      	movs	r2, #0
 800c604:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d101      	bne.n	800c610 <create_name+0x14c>
 800c60c:	2306      	movs	r3, #6
 800c60e:	e158      	b.n	800c8c2 <create_name+0x3fe>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	3324      	adds	r3, #36	; 0x24
 800c614:	220b      	movs	r2, #11
 800c616:	2120      	movs	r1, #32
 800c618:	0018      	movs	r0, r3
 800c61a:	f7fe fb62 	bl	800ace2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c61e:	2300      	movs	r3, #0
 800c620:	61bb      	str	r3, [r7, #24]
 800c622:	e002      	b.n	800c62a <create_name+0x166>
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	3301      	adds	r3, #1
 800c628:	61bb      	str	r3, [r7, #24]
 800c62a:	69bb      	ldr	r3, [r7, #24]
 800c62c:	005b      	lsls	r3, r3, #1
 800c62e:	68fa      	ldr	r2, [r7, #12]
 800c630:	18d3      	adds	r3, r2, r3
 800c632:	881b      	ldrh	r3, [r3, #0]
 800c634:	2b20      	cmp	r3, #32
 800c636:	d0f5      	beq.n	800c624 <create_name+0x160>
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	005b      	lsls	r3, r3, #1
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	18d3      	adds	r3, r2, r3
 800c640:	881b      	ldrh	r3, [r3, #0]
 800c642:	2b2e      	cmp	r3, #46	; 0x2e
 800c644:	d0ee      	beq.n	800c624 <create_name+0x160>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00a      	beq.n	800c662 <create_name+0x19e>
 800c64c:	2227      	movs	r2, #39	; 0x27
 800c64e:	18bb      	adds	r3, r7, r2
 800c650:	18ba      	adds	r2, r7, r2
 800c652:	7812      	ldrb	r2, [r2, #0]
 800c654:	2103      	movs	r1, #3
 800c656:	430a      	orrs	r2, r1
 800c658:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c65a:	e002      	b.n	800c662 <create_name+0x19e>
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	3b01      	subs	r3, #1
 800c660:	617b      	str	r3, [r7, #20]
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d009      	beq.n	800c67c <create_name+0x1b8>
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	4a6b      	ldr	r2, [pc, #428]	; (800c818 <create_name+0x354>)
 800c66c:	4694      	mov	ip, r2
 800c66e:	4463      	add	r3, ip
 800c670:	005b      	lsls	r3, r3, #1
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	18d3      	adds	r3, r2, r3
 800c676:	881b      	ldrh	r3, [r3, #0]
 800c678:	2b2e      	cmp	r3, #46	; 0x2e
 800c67a:	d1ef      	bne.n	800c65c <create_name+0x198>

	i = b = 0; ni = 8;
 800c67c:	2326      	movs	r3, #38	; 0x26
 800c67e:	18fb      	adds	r3, r7, r3
 800c680:	2200      	movs	r2, #0
 800c682:	701a      	strb	r2, [r3, #0]
 800c684:	2300      	movs	r3, #0
 800c686:	623b      	str	r3, [r7, #32]
 800c688:	2308      	movs	r3, #8
 800c68a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	1c5a      	adds	r2, r3, #1
 800c690:	61ba      	str	r2, [r7, #24]
 800c692:	005b      	lsls	r3, r3, #1
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	18d2      	adds	r2, r2, r3
 800c698:	2124      	movs	r1, #36	; 0x24
 800c69a:	187b      	adds	r3, r7, r1
 800c69c:	8812      	ldrh	r2, [r2, #0]
 800c69e:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 800c6a0:	000a      	movs	r2, r1
 800c6a2:	18bb      	adds	r3, r7, r2
 800c6a4:	881b      	ldrh	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d100      	bne.n	800c6ac <create_name+0x1e8>
 800c6aa:	e0b1      	b.n	800c810 <create_name+0x34c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c6ac:	18bb      	adds	r3, r7, r2
 800c6ae:	881b      	ldrh	r3, [r3, #0]
 800c6b0:	2b20      	cmp	r3, #32
 800c6b2:	d007      	beq.n	800c6c4 <create_name+0x200>
 800c6b4:	18bb      	adds	r3, r7, r2
 800c6b6:	881b      	ldrh	r3, [r3, #0]
 800c6b8:	2b2e      	cmp	r3, #46	; 0x2e
 800c6ba:	d10b      	bne.n	800c6d4 <create_name+0x210>
 800c6bc:	69ba      	ldr	r2, [r7, #24]
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d007      	beq.n	800c6d4 <create_name+0x210>
			cf |= NS_LOSS | NS_LFN; continue;
 800c6c4:	2227      	movs	r2, #39	; 0x27
 800c6c6:	18bb      	adds	r3, r7, r2
 800c6c8:	18ba      	adds	r2, r7, r2
 800c6ca:	7812      	ldrb	r2, [r2, #0]
 800c6cc:	2103      	movs	r1, #3
 800c6ce:	430a      	orrs	r2, r1
 800c6d0:	701a      	strb	r2, [r3, #0]
 800c6d2:	e09c      	b.n	800c80e <create_name+0x34a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c6d4:	6a3a      	ldr	r2, [r7, #32]
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d203      	bcs.n	800c6e4 <create_name+0x220>
 800c6dc:	69ba      	ldr	r2, [r7, #24]
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d127      	bne.n	800c734 <create_name+0x270>
			if (ni == 11) {				/* Long extension */
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	2b0b      	cmp	r3, #11
 800c6e8:	d107      	bne.n	800c6fa <create_name+0x236>
				cf |= NS_LOSS | NS_LFN; break;
 800c6ea:	2227      	movs	r2, #39	; 0x27
 800c6ec:	18bb      	adds	r3, r7, r2
 800c6ee:	18ba      	adds	r2, r7, r2
 800c6f0:	7812      	ldrb	r2, [r2, #0]
 800c6f2:	2103      	movs	r1, #3
 800c6f4:	430a      	orrs	r2, r1
 800c6f6:	701a      	strb	r2, [r3, #0]
 800c6f8:	e095      	b.n	800c826 <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c6fa:	69ba      	ldr	r2, [r7, #24]
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d006      	beq.n	800c710 <create_name+0x24c>
 800c702:	2227      	movs	r2, #39	; 0x27
 800c704:	18bb      	adds	r3, r7, r2
 800c706:	18ba      	adds	r2, r7, r2
 800c708:	7812      	ldrb	r2, [r2, #0]
 800c70a:	2103      	movs	r1, #3
 800c70c:	430a      	orrs	r2, r1
 800c70e:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 800c710:	69ba      	ldr	r2, [r7, #24]
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	429a      	cmp	r2, r3
 800c716:	d900      	bls.n	800c71a <create_name+0x256>
 800c718:	e084      	b.n	800c824 <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	61bb      	str	r3, [r7, #24]
 800c71e:	2308      	movs	r3, #8
 800c720:	623b      	str	r3, [r7, #32]
 800c722:	230b      	movs	r3, #11
 800c724:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c726:	2226      	movs	r2, #38	; 0x26
 800c728:	18bb      	adds	r3, r7, r2
 800c72a:	18ba      	adds	r2, r7, r2
 800c72c:	7812      	ldrb	r2, [r2, #0]
 800c72e:	0092      	lsls	r2, r2, #2
 800c730:	701a      	strb	r2, [r3, #0]
 800c732:	e06c      	b.n	800c80e <create_name+0x34a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c734:	2524      	movs	r5, #36	; 0x24
 800c736:	197b      	adds	r3, r7, r5
 800c738:	881b      	ldrh	r3, [r3, #0]
 800c73a:	2b7f      	cmp	r3, #127	; 0x7f
 800c73c:	d91a      	bls.n	800c774 <create_name+0x2b0>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c73e:	197c      	adds	r4, r7, r5
 800c740:	197b      	adds	r3, r7, r5
 800c742:	881b      	ldrh	r3, [r3, #0]
 800c744:	2100      	movs	r1, #0
 800c746:	0018      	movs	r0, r3
 800c748:	f001 fb34 	bl	800ddb4 <ff_convert>
 800c74c:	0003      	movs	r3, r0
 800c74e:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c750:	197b      	adds	r3, r7, r5
 800c752:	881b      	ldrh	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d006      	beq.n	800c766 <create_name+0x2a2>
 800c758:	197b      	adds	r3, r7, r5
 800c75a:	881b      	ldrh	r3, [r3, #0]
 800c75c:	3b80      	subs	r3, #128	; 0x80
 800c75e:	4a2f      	ldr	r2, [pc, #188]	; (800c81c <create_name+0x358>)
 800c760:	5cd2      	ldrb	r2, [r2, r3]
 800c762:	197b      	adds	r3, r7, r5
 800c764:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c766:	2227      	movs	r2, #39	; 0x27
 800c768:	18bb      	adds	r3, r7, r2
 800c76a:	18ba      	adds	r2, r7, r2
 800c76c:	7812      	ldrb	r2, [r2, #0]
 800c76e:	2102      	movs	r1, #2
 800c770:	430a      	orrs	r2, r1
 800c772:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c774:	2224      	movs	r2, #36	; 0x24
 800c776:	18bb      	adds	r3, r7, r2
 800c778:	881b      	ldrh	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d008      	beq.n	800c790 <create_name+0x2cc>
 800c77e:	18bb      	adds	r3, r7, r2
 800c780:	881a      	ldrh	r2, [r3, #0]
 800c782:	4b27      	ldr	r3, [pc, #156]	; (800c820 <create_name+0x35c>)
 800c784:	0011      	movs	r1, r2
 800c786:	0018      	movs	r0, r3
 800c788:	f7fe fae9 	bl	800ad5e <chk_chr>
 800c78c:	1e03      	subs	r3, r0, #0
 800c78e:	d00b      	beq.n	800c7a8 <create_name+0x2e4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c790:	2324      	movs	r3, #36	; 0x24
 800c792:	18fb      	adds	r3, r7, r3
 800c794:	225f      	movs	r2, #95	; 0x5f
 800c796:	801a      	strh	r2, [r3, #0]
 800c798:	2227      	movs	r2, #39	; 0x27
 800c79a:	18bb      	adds	r3, r7, r2
 800c79c:	18ba      	adds	r2, r7, r2
 800c79e:	7812      	ldrb	r2, [r2, #0]
 800c7a0:	2103      	movs	r1, #3
 800c7a2:	430a      	orrs	r2, r1
 800c7a4:	701a      	strb	r2, [r3, #0]
 800c7a6:	e025      	b.n	800c7f4 <create_name+0x330>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c7a8:	2224      	movs	r2, #36	; 0x24
 800c7aa:	18bb      	adds	r3, r7, r2
 800c7ac:	881b      	ldrh	r3, [r3, #0]
 800c7ae:	2b40      	cmp	r3, #64	; 0x40
 800c7b0:	d90b      	bls.n	800c7ca <create_name+0x306>
 800c7b2:	18bb      	adds	r3, r7, r2
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	2b5a      	cmp	r3, #90	; 0x5a
 800c7b8:	d807      	bhi.n	800c7ca <create_name+0x306>
					b |= 2;
 800c7ba:	2226      	movs	r2, #38	; 0x26
 800c7bc:	18bb      	adds	r3, r7, r2
 800c7be:	18ba      	adds	r2, r7, r2
 800c7c0:	7812      	ldrb	r2, [r2, #0]
 800c7c2:	2102      	movs	r1, #2
 800c7c4:	430a      	orrs	r2, r1
 800c7c6:	701a      	strb	r2, [r3, #0]
 800c7c8:	e014      	b.n	800c7f4 <create_name+0x330>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c7ca:	2024      	movs	r0, #36	; 0x24
 800c7cc:	183b      	adds	r3, r7, r0
 800c7ce:	881b      	ldrh	r3, [r3, #0]
 800c7d0:	2b60      	cmp	r3, #96	; 0x60
 800c7d2:	d90f      	bls.n	800c7f4 <create_name+0x330>
 800c7d4:	183b      	adds	r3, r7, r0
 800c7d6:	881b      	ldrh	r3, [r3, #0]
 800c7d8:	2b7a      	cmp	r3, #122	; 0x7a
 800c7da:	d80b      	bhi.n	800c7f4 <create_name+0x330>
						b |= 1; w -= 0x20;
 800c7dc:	2226      	movs	r2, #38	; 0x26
 800c7de:	18bb      	adds	r3, r7, r2
 800c7e0:	18ba      	adds	r2, r7, r2
 800c7e2:	7812      	ldrb	r2, [r2, #0]
 800c7e4:	2101      	movs	r1, #1
 800c7e6:	430a      	orrs	r2, r1
 800c7e8:	701a      	strb	r2, [r3, #0]
 800c7ea:	183b      	adds	r3, r7, r0
 800c7ec:	183a      	adds	r2, r7, r0
 800c7ee:	8812      	ldrh	r2, [r2, #0]
 800c7f0:	3a20      	subs	r2, #32
 800c7f2:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c7f4:	6a3b      	ldr	r3, [r7, #32]
 800c7f6:	1c5a      	adds	r2, r3, #1
 800c7f8:	623a      	str	r2, [r7, #32]
 800c7fa:	2224      	movs	r2, #36	; 0x24
 800c7fc:	18ba      	adds	r2, r7, r2
 800c7fe:	8812      	ldrh	r2, [r2, #0]
 800c800:	b2d0      	uxtb	r0, r2
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	2124      	movs	r1, #36	; 0x24
 800c806:	18d3      	adds	r3, r2, r3
 800c808:	185b      	adds	r3, r3, r1
 800c80a:	1c02      	adds	r2, r0, #0
 800c80c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800c80e:	e73d      	b.n	800c68c <create_name+0x1c8>
		if (!w) break;					/* Break on end of the LFN */
 800c810:	46c0      	nop			; (mov r8, r8)
 800c812:	e008      	b.n	800c826 <create_name+0x362>
 800c814:	08012d64 	.word	0x08012d64
 800c818:	7fffffff 	.word	0x7fffffff
 800c81c:	080136f0 	.word	0x080136f0
 800c820:	08012d70 	.word	0x08012d70
			if (si > di) break;			/* No extension */
 800c824:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2224      	movs	r2, #36	; 0x24
 800c82a:	5c9b      	ldrb	r3, [r3, r2]
 800c82c:	2be5      	cmp	r3, #229	; 0xe5
 800c82e:	d103      	bne.n	800c838 <create_name+0x374>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2224      	movs	r2, #36	; 0x24
 800c834:	2105      	movs	r1, #5
 800c836:	5499      	strb	r1, [r3, r2]

	if (ni == 8) b <<= 2;
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	2b08      	cmp	r3, #8
 800c83c:	d105      	bne.n	800c84a <create_name+0x386>
 800c83e:	2226      	movs	r2, #38	; 0x26
 800c840:	18bb      	adds	r3, r7, r2
 800c842:	18ba      	adds	r2, r7, r2
 800c844:	7812      	ldrb	r2, [r2, #0]
 800c846:	0092      	lsls	r2, r2, #2
 800c848:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c84a:	2126      	movs	r1, #38	; 0x26
 800c84c:	187b      	adds	r3, r7, r1
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	220c      	movs	r2, #12
 800c852:	4013      	ands	r3, r2
 800c854:	2b0c      	cmp	r3, #12
 800c856:	d005      	beq.n	800c864 <create_name+0x3a0>
 800c858:	187b      	adds	r3, r7, r1
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	2203      	movs	r2, #3
 800c85e:	4013      	ands	r3, r2
 800c860:	2b03      	cmp	r3, #3
 800c862:	d106      	bne.n	800c872 <create_name+0x3ae>
 800c864:	2227      	movs	r2, #39	; 0x27
 800c866:	18bb      	adds	r3, r7, r2
 800c868:	18ba      	adds	r2, r7, r2
 800c86a:	7812      	ldrb	r2, [r2, #0]
 800c86c:	2102      	movs	r1, #2
 800c86e:	430a      	orrs	r2, r1
 800c870:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c872:	2127      	movs	r1, #39	; 0x27
 800c874:	187b      	adds	r3, r7, r1
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	2202      	movs	r2, #2
 800c87a:	4013      	ands	r3, r2
 800c87c:	d11a      	bne.n	800c8b4 <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c87e:	2326      	movs	r3, #38	; 0x26
 800c880:	18fb      	adds	r3, r7, r3
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	2203      	movs	r2, #3
 800c886:	4013      	ands	r3, r2
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d105      	bne.n	800c898 <create_name+0x3d4>
 800c88c:	187b      	adds	r3, r7, r1
 800c88e:	187a      	adds	r2, r7, r1
 800c890:	7812      	ldrb	r2, [r2, #0]
 800c892:	2110      	movs	r1, #16
 800c894:	430a      	orrs	r2, r1
 800c896:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c898:	2326      	movs	r3, #38	; 0x26
 800c89a:	18fb      	adds	r3, r7, r3
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	220c      	movs	r2, #12
 800c8a0:	4013      	ands	r3, r2
 800c8a2:	2b04      	cmp	r3, #4
 800c8a4:	d106      	bne.n	800c8b4 <create_name+0x3f0>
 800c8a6:	2227      	movs	r2, #39	; 0x27
 800c8a8:	18bb      	adds	r3, r7, r2
 800c8aa:	18ba      	adds	r2, r7, r2
 800c8ac:	7812      	ldrb	r2, [r2, #0]
 800c8ae:	2108      	movs	r1, #8
 800c8b0:	430a      	orrs	r2, r1
 800c8b2:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2227      	movs	r2, #39	; 0x27
 800c8b8:	18ba      	adds	r2, r7, r2
 800c8ba:	212f      	movs	r1, #47	; 0x2f
 800c8bc:	7812      	ldrb	r2, [r2, #0]
 800c8be:	545a      	strb	r2, [r3, r1]

	return FR_OK;
 800c8c0:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c8c2:	0018      	movs	r0, r3
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	b00a      	add	sp, #40	; 0x28
 800c8c8:	bdb0      	pop	{r4, r5, r7, pc}
 800c8ca:	46c0      	nop			; (mov r8, r8)

0800c8cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c8cc:	b5b0      	push	{r4, r5, r7, lr}
 800c8ce:	b086      	sub	sp, #24
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c8e0:	e002      	b.n	800c8e8 <follow_path+0x1c>
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	603b      	str	r3, [r7, #0]
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	2b2f      	cmp	r3, #47	; 0x2f
 800c8ee:	d0f8      	beq.n	800c8e2 <follow_path+0x16>
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	2b5c      	cmp	r3, #92	; 0x5c
 800c8f6:	d0f4      	beq.n	800c8e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	2b1f      	cmp	r3, #31
 800c904:	d80d      	bhi.n	800c922 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	222f      	movs	r2, #47	; 0x2f
 800c90a:	2180      	movs	r1, #128	; 0x80
 800c90c:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 800c90e:	2317      	movs	r3, #23
 800c910:	18fc      	adds	r4, r7, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2100      	movs	r1, #0
 800c916:	0018      	movs	r0, r3
 800c918:	f7ff f819 	bl	800b94e <dir_sdi>
 800c91c:	0003      	movs	r3, r0
 800c91e:	7023      	strb	r3, [r4, #0]
 800c920:	e057      	b.n	800c9d2 <follow_path+0x106>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c922:	2517      	movs	r5, #23
 800c924:	197c      	adds	r4, r7, r5
 800c926:	003a      	movs	r2, r7
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	0011      	movs	r1, r2
 800c92c:	0018      	movs	r0, r3
 800c92e:	f7ff fdc9 	bl	800c4c4 <create_name>
 800c932:	0003      	movs	r3, r0
 800c934:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800c936:	197b      	adds	r3, r7, r5
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d144      	bne.n	800c9c8 <follow_path+0xfc>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c93e:	197c      	adds	r4, r7, r5
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	0018      	movs	r0, r3
 800c944:	f7ff fbb3 	bl	800c0ae <dir_find>
 800c948:	0003      	movs	r3, r0
 800c94a:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 800c94c:	200b      	movs	r0, #11
 800c94e:	183b      	adds	r3, r7, r0
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	212f      	movs	r1, #47	; 0x2f
 800c954:	5c52      	ldrb	r2, [r2, r1]
 800c956:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 800c958:	197b      	adds	r3, r7, r5
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d00c      	beq.n	800c97a <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c960:	197b      	adds	r3, r7, r5
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	2b04      	cmp	r3, #4
 800c966:	d131      	bne.n	800c9cc <follow_path+0x100>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c968:	183b      	adds	r3, r7, r0
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	2204      	movs	r2, #4
 800c96e:	4013      	ands	r3, r2
 800c970:	d12c      	bne.n	800c9cc <follow_path+0x100>
 800c972:	197b      	adds	r3, r7, r5
 800c974:	2205      	movs	r2, #5
 800c976:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800c978:	e028      	b.n	800c9cc <follow_path+0x100>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c97a:	230b      	movs	r3, #11
 800c97c:	18fb      	adds	r3, r7, r3
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	2204      	movs	r2, #4
 800c982:	4013      	ands	r3, r2
 800c984:	d124      	bne.n	800c9d0 <follow_path+0x104>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	799b      	ldrb	r3, [r3, #6]
 800c98a:	001a      	movs	r2, r3
 800c98c:	2310      	movs	r3, #16
 800c98e:	4013      	ands	r3, r2
 800c990:	d104      	bne.n	800c99c <follow_path+0xd0>
				res = FR_NO_PATH; break;
 800c992:	2317      	movs	r3, #23
 800c994:	18fb      	adds	r3, r7, r3
 800c996:	2205      	movs	r2, #5
 800c998:	701a      	strb	r2, [r3, #0]
 800c99a:	e01a      	b.n	800c9d2 <follow_path+0x106>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	3338      	adds	r3, #56	; 0x38
 800c9a0:	001c      	movs	r4, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	695a      	ldr	r2, [r3, #20]
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	899b      	ldrh	r3, [r3, #12]
 800c9aa:	0019      	movs	r1, r3
 800c9ac:	0010      	movs	r0, r2
 800c9ae:	f7f3 fc4d 	bl	800024c <__aeabi_uidivmod>
 800c9b2:	000b      	movs	r3, r1
 800c9b4:	18e2      	adds	r2, r4, r3
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	0011      	movs	r1, r2
 800c9ba:	0018      	movs	r0, r3
 800c9bc:	f7ff f987 	bl	800bcce <ld_clust>
 800c9c0:	0002      	movs	r2, r0
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c9c6:	e7ac      	b.n	800c922 <follow_path+0x56>
			if (res != FR_OK) break;
 800c9c8:	46c0      	nop			; (mov r8, r8)
 800c9ca:	e002      	b.n	800c9d2 <follow_path+0x106>
				break;
 800c9cc:	46c0      	nop			; (mov r8, r8)
 800c9ce:	e000      	b.n	800c9d2 <follow_path+0x106>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c9d0:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
 800c9d2:	2317      	movs	r3, #23
 800c9d4:	18fb      	adds	r3, r7, r3
 800c9d6:	781b      	ldrb	r3, [r3, #0]
}
 800c9d8:	0018      	movs	r0, r3
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	b006      	add	sp, #24
 800c9de:	bdb0      	pop	{r4, r5, r7, pc}

0800c9e0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	425b      	negs	r3, r3
 800c9ec:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d031      	beq.n	800ca5a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	617b      	str	r3, [r7, #20]
 800c9fc:	e002      	b.n	800ca04 <get_ldnumber+0x24>
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	3301      	adds	r3, #1
 800ca02:	617b      	str	r3, [r7, #20]
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	2b1f      	cmp	r3, #31
 800ca0a:	d903      	bls.n	800ca14 <get_ldnumber+0x34>
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	2b3a      	cmp	r3, #58	; 0x3a
 800ca12:	d1f4      	bne.n	800c9fe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	2b3a      	cmp	r3, #58	; 0x3a
 800ca1a:	d11c      	bne.n	800ca56 <get_ldnumber+0x76>
			tp = *path;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	1c5a      	adds	r2, r3, #1
 800ca26:	60fa      	str	r2, [r7, #12]
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	3b30      	subs	r3, #48	; 0x30
 800ca2c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	2b09      	cmp	r3, #9
 800ca32:	d80e      	bhi.n	800ca52 <get_ldnumber+0x72>
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d10a      	bne.n	800ca52 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d107      	bne.n	800ca52 <get_ldnumber+0x72>
					vol = (int)i;
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	617b      	str	r3, [r7, #20]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	697a      	ldr	r2, [r7, #20]
 800ca50:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	e002      	b.n	800ca5c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ca56:	2300      	movs	r3, #0
 800ca58:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ca5a:	693b      	ldr	r3, [r7, #16]
}
 800ca5c:	0018      	movs	r0, r3
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	b006      	add	sp, #24
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	70da      	strb	r2, [r3, #3]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	4252      	negs	r2, r2
 800ca7a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	0011      	movs	r1, r2
 800ca82:	0018      	movs	r0, r3
 800ca84:	f7fe fb36 	bl	800b0f4 <move_window>
 800ca88:	1e03      	subs	r3, r0, #0
 800ca8a:	d001      	beq.n	800ca90 <check_fs+0x2c>
 800ca8c:	2304      	movs	r3, #4
 800ca8e:	e037      	b.n	800cb00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	3338      	adds	r3, #56	; 0x38
 800ca94:	33ff      	adds	r3, #255	; 0xff
 800ca96:	33ff      	adds	r3, #255	; 0xff
 800ca98:	0018      	movs	r0, r3
 800ca9a:	f7fe f87f 	bl	800ab9c <ld_word>
 800ca9e:	0003      	movs	r3, r0
 800caa0:	001a      	movs	r2, r3
 800caa2:	4b19      	ldr	r3, [pc, #100]	; (800cb08 <check_fs+0xa4>)
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d001      	beq.n	800caac <check_fs+0x48>
 800caa8:	2303      	movs	r3, #3
 800caaa:	e029      	b.n	800cb00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2238      	movs	r2, #56	; 0x38
 800cab0:	5c9b      	ldrb	r3, [r3, r2]
 800cab2:	2be9      	cmp	r3, #233	; 0xe9
 800cab4:	d009      	beq.n	800caca <check_fs+0x66>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2238      	movs	r2, #56	; 0x38
 800caba:	5c9b      	ldrb	r3, [r3, r2]
 800cabc:	2beb      	cmp	r3, #235	; 0xeb
 800cabe:	d11e      	bne.n	800cafe <check_fs+0x9a>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	223a      	movs	r2, #58	; 0x3a
 800cac4:	5c9b      	ldrb	r3, [r3, r2]
 800cac6:	2b90      	cmp	r3, #144	; 0x90
 800cac8:	d119      	bne.n	800cafe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	3338      	adds	r3, #56	; 0x38
 800cace:	3336      	adds	r3, #54	; 0x36
 800cad0:	0018      	movs	r0, r3
 800cad2:	f7fe f87e 	bl	800abd2 <ld_dword>
 800cad6:	0003      	movs	r3, r0
 800cad8:	021b      	lsls	r3, r3, #8
 800cada:	0a1b      	lsrs	r3, r3, #8
 800cadc:	4a0b      	ldr	r2, [pc, #44]	; (800cb0c <check_fs+0xa8>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d101      	bne.n	800cae6 <check_fs+0x82>
 800cae2:	2300      	movs	r3, #0
 800cae4:	e00c      	b.n	800cb00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	3338      	adds	r3, #56	; 0x38
 800caea:	3352      	adds	r3, #82	; 0x52
 800caec:	0018      	movs	r0, r3
 800caee:	f7fe f870 	bl	800abd2 <ld_dword>
 800caf2:	0003      	movs	r3, r0
 800caf4:	4a06      	ldr	r2, [pc, #24]	; (800cb10 <check_fs+0xac>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d101      	bne.n	800cafe <check_fs+0x9a>
 800cafa:	2300      	movs	r3, #0
 800cafc:	e000      	b.n	800cb00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cafe:	2302      	movs	r3, #2
}
 800cb00:	0018      	movs	r0, r3
 800cb02:	46bd      	mov	sp, r7
 800cb04:	b002      	add	sp, #8
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	0000aa55 	.word	0x0000aa55
 800cb0c:	00544146 	.word	0x00544146
 800cb10:	33544146 	.word	0x33544146

0800cb14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cb14:	b5b0      	push	{r4, r5, r7, lr}
 800cb16:	b096      	sub	sp, #88	; 0x58
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	1dfb      	adds	r3, r7, #7
 800cb20:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	2200      	movs	r2, #0
 800cb26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	0018      	movs	r0, r3
 800cb2c:	f7ff ff58 	bl	800c9e0 <get_ldnumber>
 800cb30:	0003      	movs	r3, r0
 800cb32:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	da01      	bge.n	800cb3e <find_volume+0x2a>
 800cb3a:	230b      	movs	r3, #11
 800cb3c:	e283      	b.n	800d046 <find_volume+0x532>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cb3e:	4bc2      	ldr	r3, [pc, #776]	; (800ce48 <find_volume+0x334>)
 800cb40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb42:	0092      	lsls	r2, r2, #2
 800cb44:	58d3      	ldr	r3, [r2, r3]
 800cb46:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d101      	bne.n	800cb52 <find_volume+0x3e>
 800cb4e:	230c      	movs	r3, #12
 800cb50:	e279      	b.n	800d046 <find_volume+0x532>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb56:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cb58:	1dfb      	adds	r3, r7, #7
 800cb5a:	1dfa      	adds	r2, r7, #7
 800cb5c:	7812      	ldrb	r2, [r2, #0]
 800cb5e:	2101      	movs	r1, #1
 800cb60:	438a      	bics	r2, r1
 800cb62:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d01b      	beq.n	800cba4 <find_volume+0x90>
		stat = disk_status(fs->drv);
 800cb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6e:	785b      	ldrb	r3, [r3, #1]
 800cb70:	2537      	movs	r5, #55	; 0x37
 800cb72:	197c      	adds	r4, r7, r5
 800cb74:	0018      	movs	r0, r3
 800cb76:	f7fd ff47 	bl	800aa08 <disk_status>
 800cb7a:	0003      	movs	r3, r0
 800cb7c:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cb7e:	0029      	movs	r1, r5
 800cb80:	187b      	adds	r3, r7, r1
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	2201      	movs	r2, #1
 800cb86:	4013      	ands	r3, r2
 800cb88:	d10c      	bne.n	800cba4 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cb8a:	1dfb      	adds	r3, r7, #7
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d006      	beq.n	800cba0 <find_volume+0x8c>
 800cb92:	187b      	adds	r3, r7, r1
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	2204      	movs	r2, #4
 800cb98:	4013      	ands	r3, r2
 800cb9a:	d001      	beq.n	800cba0 <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 800cb9c:	230a      	movs	r3, #10
 800cb9e:	e252      	b.n	800d046 <find_volume+0x532>
			}
			return FR_OK;				/* The file system object is valid */
 800cba0:	2300      	movs	r3, #0
 800cba2:	e250      	b.n	800d046 <find_volume+0x532>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba6:	2200      	movs	r2, #0
 800cba8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbac:	b2da      	uxtb	r2, r3
 800cbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb4:	785b      	ldrb	r3, [r3, #1]
 800cbb6:	2537      	movs	r5, #55	; 0x37
 800cbb8:	197c      	adds	r4, r7, r5
 800cbba:	0018      	movs	r0, r3
 800cbbc:	f7fd ff46 	bl	800aa4c <disk_initialize>
 800cbc0:	0003      	movs	r3, r0
 800cbc2:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cbc4:	197b      	adds	r3, r7, r5
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	2201      	movs	r2, #1
 800cbca:	4013      	ands	r3, r2
 800cbcc:	d001      	beq.n	800cbd2 <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cbce:	2303      	movs	r3, #3
 800cbd0:	e239      	b.n	800d046 <find_volume+0x532>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cbd2:	1dfb      	adds	r3, r7, #7
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d007      	beq.n	800cbea <find_volume+0xd6>
 800cbda:	2337      	movs	r3, #55	; 0x37
 800cbdc:	18fb      	adds	r3, r7, r3
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	2204      	movs	r2, #4
 800cbe2:	4013      	ands	r3, r2
 800cbe4:	d001      	beq.n	800cbea <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800cbe6:	230a      	movs	r3, #10
 800cbe8:	e22d      	b.n	800d046 <find_volume+0x532>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800cbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbec:	7858      	ldrb	r0, [r3, #1]
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	330c      	adds	r3, #12
 800cbf2:	001a      	movs	r2, r3
 800cbf4:	2102      	movs	r1, #2
 800cbf6:	f7fd ffa9 	bl	800ab4c <disk_ioctl>
 800cbfa:	1e03      	subs	r3, r0, #0
 800cbfc:	d001      	beq.n	800cc02 <find_volume+0xee>
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e221      	b.n	800d046 <find_volume+0x532>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	899a      	ldrh	r2, [r3, #12]
 800cc06:	2380      	movs	r3, #128	; 0x80
 800cc08:	015b      	lsls	r3, r3, #5
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d80d      	bhi.n	800cc2a <find_volume+0x116>
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc10:	899a      	ldrh	r2, [r3, #12]
 800cc12:	2380      	movs	r3, #128	; 0x80
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d307      	bcc.n	800cc2a <find_volume+0x116>
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	899b      	ldrh	r3, [r3, #12]
 800cc1e:	001a      	movs	r2, r3
 800cc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc22:	899b      	ldrh	r3, [r3, #12]
 800cc24:	3b01      	subs	r3, #1
 800cc26:	4013      	ands	r3, r2
 800cc28:	d001      	beq.n	800cc2e <find_volume+0x11a>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e20b      	b.n	800d046 <find_volume+0x532>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cc32:	2557      	movs	r5, #87	; 0x57
 800cc34:	197c      	adds	r4, r7, r5
 800cc36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3a:	0011      	movs	r1, r2
 800cc3c:	0018      	movs	r0, r3
 800cc3e:	f7ff ff11 	bl	800ca64 <check_fs>
 800cc42:	0003      	movs	r3, r0
 800cc44:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cc46:	197b      	adds	r3, r7, r5
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	2b02      	cmp	r3, #2
 800cc4c:	d14b      	bne.n	800cce6 <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cc4e:	2300      	movs	r3, #0
 800cc50:	643b      	str	r3, [r7, #64]	; 0x40
 800cc52:	e01d      	b.n	800cc90 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc56:	3338      	adds	r3, #56	; 0x38
 800cc58:	001a      	movs	r2, r3
 800cc5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc5c:	011b      	lsls	r3, r3, #4
 800cc5e:	33bf      	adds	r3, #191	; 0xbf
 800cc60:	33ff      	adds	r3, #255	; 0xff
 800cc62:	18d3      	adds	r3, r2, r3
 800cc64:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc68:	3304      	adds	r3, #4
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d006      	beq.n	800cc7e <find_volume+0x16a>
 800cc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc72:	3308      	adds	r3, #8
 800cc74:	0018      	movs	r0, r3
 800cc76:	f7fd ffac 	bl	800abd2 <ld_dword>
 800cc7a:	0003      	movs	r3, r0
 800cc7c:	e000      	b.n	800cc80 <find_volume+0x16c>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	2214      	movs	r2, #20
 800cc82:	18ba      	adds	r2, r7, r2
 800cc84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc86:	0089      	lsls	r1, r1, #2
 800cc88:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cc8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	643b      	str	r3, [r7, #64]	; 0x40
 800cc90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc92:	2b03      	cmp	r3, #3
 800cc94:	d9de      	bls.n	800cc54 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cc96:	2300      	movs	r3, #0
 800cc98:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cc9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d002      	beq.n	800cca6 <find_volume+0x192>
 800cca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cca2:	3b01      	subs	r3, #1
 800cca4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cca6:	2314      	movs	r3, #20
 800cca8:	18fb      	adds	r3, r7, r3
 800ccaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ccac:	0092      	lsls	r2, r2, #2
 800ccae:	58d3      	ldr	r3, [r2, r3]
 800ccb0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ccb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d008      	beq.n	800ccca <find_volume+0x1b6>
 800ccb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbc:	0011      	movs	r1, r2
 800ccbe:	0018      	movs	r0, r3
 800ccc0:	f7ff fed0 	bl	800ca64 <check_fs>
 800ccc4:	0003      	movs	r3, r0
 800ccc6:	001a      	movs	r2, r3
 800ccc8:	e000      	b.n	800cccc <find_volume+0x1b8>
 800ccca:	2203      	movs	r2, #3
 800cccc:	2157      	movs	r1, #87	; 0x57
 800ccce:	187b      	adds	r3, r7, r1
 800ccd0:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ccd2:	187b      	adds	r3, r7, r1
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d905      	bls.n	800cce6 <find_volume+0x1d2>
 800ccda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccdc:	3301      	adds	r3, #1
 800ccde:	643b      	str	r3, [r7, #64]	; 0x40
 800cce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cce2:	2b03      	cmp	r3, #3
 800cce4:	d9df      	bls.n	800cca6 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cce6:	2357      	movs	r3, #87	; 0x57
 800cce8:	18fb      	adds	r3, r7, r3
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	2b04      	cmp	r3, #4
 800ccee:	d101      	bne.n	800ccf4 <find_volume+0x1e0>
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e1a8      	b.n	800d046 <find_volume+0x532>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ccf4:	2357      	movs	r3, #87	; 0x57
 800ccf6:	18fb      	adds	r3, r7, r3
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d901      	bls.n	800cd02 <find_volume+0x1ee>
 800ccfe:	230d      	movs	r3, #13
 800cd00:	e1a1      	b.n	800d046 <find_volume+0x532>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd04:	3338      	adds	r3, #56	; 0x38
 800cd06:	330b      	adds	r3, #11
 800cd08:	0018      	movs	r0, r3
 800cd0a:	f7fd ff47 	bl	800ab9c <ld_word>
 800cd0e:	0003      	movs	r3, r0
 800cd10:	001a      	movs	r2, r3
 800cd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd14:	899b      	ldrh	r3, [r3, #12]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d001      	beq.n	800cd1e <find_volume+0x20a>
 800cd1a:	230d      	movs	r3, #13
 800cd1c:	e193      	b.n	800d046 <find_volume+0x532>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd20:	3338      	adds	r3, #56	; 0x38
 800cd22:	3316      	adds	r3, #22
 800cd24:	0018      	movs	r0, r3
 800cd26:	f7fd ff39 	bl	800ab9c <ld_word>
 800cd2a:	0003      	movs	r3, r0
 800cd2c:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cd2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d107      	bne.n	800cd44 <find_volume+0x230>
 800cd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd36:	3338      	adds	r3, #56	; 0x38
 800cd38:	3324      	adds	r3, #36	; 0x24
 800cd3a:	0018      	movs	r0, r3
 800cd3c:	f7fd ff49 	bl	800abd2 <ld_dword>
 800cd40:	0003      	movs	r3, r0
 800cd42:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd48:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4c:	2248      	movs	r2, #72	; 0x48
 800cd4e:	5c9a      	ldrb	r2, [r3, r2]
 800cd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd52:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd56:	789b      	ldrb	r3, [r3, #2]
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d005      	beq.n	800cd68 <find_volume+0x254>
 800cd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5e:	789b      	ldrb	r3, [r3, #2]
 800cd60:	2b02      	cmp	r3, #2
 800cd62:	d001      	beq.n	800cd68 <find_volume+0x254>
 800cd64:	230d      	movs	r3, #13
 800cd66:	e16e      	b.n	800d046 <find_volume+0x532>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6a:	789b      	ldrb	r3, [r3, #2]
 800cd6c:	001a      	movs	r2, r3
 800cd6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd70:	4353      	muls	r3, r2
 800cd72:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd76:	2245      	movs	r2, #69	; 0x45
 800cd78:	5c9b      	ldrb	r3, [r3, r2]
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd82:	895b      	ldrh	r3, [r3, #10]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d007      	beq.n	800cd98 <find_volume+0x284>
 800cd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8a:	895b      	ldrh	r3, [r3, #10]
 800cd8c:	001a      	movs	r2, r3
 800cd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd90:	895b      	ldrh	r3, [r3, #10]
 800cd92:	3b01      	subs	r3, #1
 800cd94:	4013      	ands	r3, r2
 800cd96:	d001      	beq.n	800cd9c <find_volume+0x288>
 800cd98:	230d      	movs	r3, #13
 800cd9a:	e154      	b.n	800d046 <find_volume+0x532>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9e:	3338      	adds	r3, #56	; 0x38
 800cda0:	3311      	adds	r3, #17
 800cda2:	0018      	movs	r0, r3
 800cda4:	f7fd fefa 	bl	800ab9c <ld_word>
 800cda8:	0003      	movs	r3, r0
 800cdaa:	001a      	movs	r2, r3
 800cdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb2:	891a      	ldrh	r2, [r3, #8]
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb6:	899b      	ldrh	r3, [r3, #12]
 800cdb8:	095b      	lsrs	r3, r3, #5
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	0019      	movs	r1, r3
 800cdbe:	0010      	movs	r0, r2
 800cdc0:	f7f3 fa44 	bl	800024c <__aeabi_uidivmod>
 800cdc4:	000b      	movs	r3, r1
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d001      	beq.n	800cdd0 <find_volume+0x2bc>
 800cdcc:	230d      	movs	r3, #13
 800cdce:	e13a      	b.n	800d046 <find_volume+0x532>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd2:	3338      	adds	r3, #56	; 0x38
 800cdd4:	3313      	adds	r3, #19
 800cdd6:	0018      	movs	r0, r3
 800cdd8:	f7fd fee0 	bl	800ab9c <ld_word>
 800cddc:	0003      	movs	r3, r0
 800cdde:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cde0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d107      	bne.n	800cdf6 <find_volume+0x2e2>
 800cde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde8:	3338      	adds	r3, #56	; 0x38
 800cdea:	3320      	adds	r3, #32
 800cdec:	0018      	movs	r0, r3
 800cdee:	f7fd fef0 	bl	800abd2 <ld_dword>
 800cdf2:	0003      	movs	r3, r0
 800cdf4:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf8:	3338      	adds	r3, #56	; 0x38
 800cdfa:	330e      	adds	r3, #14
 800cdfc:	252e      	movs	r5, #46	; 0x2e
 800cdfe:	197c      	adds	r4, r7, r5
 800ce00:	0018      	movs	r0, r3
 800ce02:	f7fd fecb 	bl	800ab9c <ld_word>
 800ce06:	0003      	movs	r3, r0
 800ce08:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ce0a:	197b      	adds	r3, r7, r5
 800ce0c:	881b      	ldrh	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d101      	bne.n	800ce16 <find_volume+0x302>
 800ce12:	230d      	movs	r3, #13
 800ce14:	e117      	b.n	800d046 <find_volume+0x532>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ce16:	232e      	movs	r3, #46	; 0x2e
 800ce18:	18fb      	adds	r3, r7, r3
 800ce1a:	881a      	ldrh	r2, [r3, #0]
 800ce1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce1e:	18d4      	adds	r4, r2, r3
 800ce20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce22:	891a      	ldrh	r2, [r3, #8]
 800ce24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce26:	899b      	ldrh	r3, [r3, #12]
 800ce28:	095b      	lsrs	r3, r3, #5
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	0019      	movs	r1, r3
 800ce2e:	0010      	movs	r0, r2
 800ce30:	f7f3 f986 	bl	8000140 <__udivsi3>
 800ce34:	0003      	movs	r3, r0
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	18e3      	adds	r3, r4, r3
 800ce3a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ce3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d203      	bcs.n	800ce4c <find_volume+0x338>
 800ce44:	230d      	movs	r3, #13
 800ce46:	e0fe      	b.n	800d046 <find_volume+0x532>
 800ce48:	20000d4c 	.word	0x20000d4c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ce4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce50:	1ad2      	subs	r2, r2, r3
 800ce52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce54:	895b      	ldrh	r3, [r3, #10]
 800ce56:	0019      	movs	r1, r3
 800ce58:	0010      	movs	r0, r2
 800ce5a:	f7f3 f971 	bl	8000140 <__udivsi3>
 800ce5e:	0003      	movs	r3, r0
 800ce60:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ce62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d101      	bne.n	800ce6c <find_volume+0x358>
 800ce68:	230d      	movs	r3, #13
 800ce6a:	e0ec      	b.n	800d046 <find_volume+0x532>
		fmt = FS_FAT32;
 800ce6c:	2157      	movs	r1, #87	; 0x57
 800ce6e:	187b      	adds	r3, r7, r1
 800ce70:	2203      	movs	r2, #3
 800ce72:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ce74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce76:	4a76      	ldr	r2, [pc, #472]	; (800d050 <find_volume+0x53c>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d802      	bhi.n	800ce82 <find_volume+0x36e>
 800ce7c:	187b      	adds	r3, r7, r1
 800ce7e:	2202      	movs	r2, #2
 800ce80:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ce82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce84:	4a73      	ldr	r2, [pc, #460]	; (800d054 <find_volume+0x540>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d803      	bhi.n	800ce92 <find_volume+0x37e>
 800ce8a:	2357      	movs	r3, #87	; 0x57
 800ce8c:	18fb      	adds	r3, r7, r3
 800ce8e:	2201      	movs	r2, #1
 800ce90:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce94:	1c9a      	adds	r2, r3, #2
 800ce96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce98:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ce9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce9e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cea0:	232e      	movs	r3, #46	; 0x2e
 800cea2:	18fb      	adds	r3, r7, r3
 800cea4:	881a      	ldrh	r2, [r3, #0]
 800cea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cea8:	18d2      	adds	r2, r2, r3
 800ceaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceac:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800ceae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ceb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb2:	18d2      	adds	r2, r2, r3
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800ceb8:	2357      	movs	r3, #87	; 0x57
 800ceba:	18fb      	adds	r3, r7, r3
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	2b03      	cmp	r3, #3
 800cec0:	d11d      	bne.n	800cefe <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec4:	3338      	adds	r3, #56	; 0x38
 800cec6:	332a      	adds	r3, #42	; 0x2a
 800cec8:	0018      	movs	r0, r3
 800ceca:	f7fd fe67 	bl	800ab9c <ld_word>
 800cece:	1e03      	subs	r3, r0, #0
 800ced0:	d001      	beq.n	800ced6 <find_volume+0x3c2>
 800ced2:	230d      	movs	r3, #13
 800ced4:	e0b7      	b.n	800d046 <find_volume+0x532>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ced6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced8:	891b      	ldrh	r3, [r3, #8]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d001      	beq.n	800cee2 <find_volume+0x3ce>
 800cede:	230d      	movs	r3, #13
 800cee0:	e0b1      	b.n	800d046 <find_volume+0x532>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee4:	3338      	adds	r3, #56	; 0x38
 800cee6:	332c      	adds	r3, #44	; 0x2c
 800cee8:	0018      	movs	r0, r3
 800ceea:	f7fd fe72 	bl	800abd2 <ld_dword>
 800ceee:	0002      	movs	r2, r0
 800cef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef6:	69db      	ldr	r3, [r3, #28]
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	647b      	str	r3, [r7, #68]	; 0x44
 800cefc:	e020      	b.n	800cf40 <find_volume+0x42c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf00:	891b      	ldrh	r3, [r3, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d101      	bne.n	800cf0a <find_volume+0x3f6>
 800cf06:	230d      	movs	r3, #13
 800cf08:	e09d      	b.n	800d046 <find_volume+0x532>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf10:	18d2      	adds	r2, r2, r3
 800cf12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf14:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cf16:	2357      	movs	r3, #87	; 0x57
 800cf18:	18fb      	adds	r3, r7, r3
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	2b02      	cmp	r3, #2
 800cf1e:	d103      	bne.n	800cf28 <find_volume+0x414>
 800cf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf22:	69db      	ldr	r3, [r3, #28]
 800cf24:	005b      	lsls	r3, r3, #1
 800cf26:	e00a      	b.n	800cf3e <find_volume+0x42a>
 800cf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2a:	69da      	ldr	r2, [r3, #28]
 800cf2c:	0013      	movs	r3, r2
 800cf2e:	005b      	lsls	r3, r3, #1
 800cf30:	189b      	adds	r3, r3, r2
 800cf32:	085a      	lsrs	r2, r3, #1
 800cf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf36:	69db      	ldr	r3, [r3, #28]
 800cf38:	2101      	movs	r1, #1
 800cf3a:	400b      	ands	r3, r1
 800cf3c:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cf3e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf42:	6a1c      	ldr	r4, [r3, #32]
 800cf44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf46:	899b      	ldrh	r3, [r3, #12]
 800cf48:	001a      	movs	r2, r3
 800cf4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf4c:	18d3      	adds	r3, r2, r3
 800cf4e:	1e5a      	subs	r2, r3, #1
 800cf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf52:	899b      	ldrh	r3, [r3, #12]
 800cf54:	0019      	movs	r1, r3
 800cf56:	0010      	movs	r0, r2
 800cf58:	f7f3 f8f2 	bl	8000140 <__udivsi3>
 800cf5c:	0003      	movs	r3, r0
 800cf5e:	429c      	cmp	r4, r3
 800cf60:	d201      	bcs.n	800cf66 <find_volume+0x452>
 800cf62:	230d      	movs	r3, #13
 800cf64:	e06f      	b.n	800d046 <find_volume+0x532>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cf66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf68:	2201      	movs	r2, #1
 800cf6a:	4252      	negs	r2, r2
 800cf6c:	619a      	str	r2, [r3, #24]
 800cf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf70:	699a      	ldr	r2, [r3, #24]
 800cf72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf74:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800cf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf78:	2280      	movs	r2, #128	; 0x80
 800cf7a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cf7c:	2357      	movs	r3, #87	; 0x57
 800cf7e:	18fb      	adds	r3, r7, r3
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	2b03      	cmp	r3, #3
 800cf84:	d148      	bne.n	800d018 <find_volume+0x504>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cf86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf88:	3338      	adds	r3, #56	; 0x38
 800cf8a:	3330      	adds	r3, #48	; 0x30
 800cf8c:	0018      	movs	r0, r3
 800cf8e:	f7fd fe05 	bl	800ab9c <ld_word>
 800cf92:	0003      	movs	r3, r0
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d13f      	bne.n	800d018 <find_volume+0x504>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cf98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf9a:	1c5a      	adds	r2, r3, #1
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9e:	0011      	movs	r1, r2
 800cfa0:	0018      	movs	r0, r3
 800cfa2:	f7fe f8a7 	bl	800b0f4 <move_window>
 800cfa6:	1e03      	subs	r3, r0, #0
 800cfa8:	d136      	bne.n	800d018 <find_volume+0x504>
		{
			fs->fsi_flag = 0;
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfac:	2200      	movs	r2, #0
 800cfae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb2:	3338      	adds	r3, #56	; 0x38
 800cfb4:	33ff      	adds	r3, #255	; 0xff
 800cfb6:	33ff      	adds	r3, #255	; 0xff
 800cfb8:	0018      	movs	r0, r3
 800cfba:	f7fd fdef 	bl	800ab9c <ld_word>
 800cfbe:	0003      	movs	r3, r0
 800cfc0:	001a      	movs	r2, r3
 800cfc2:	4b25      	ldr	r3, [pc, #148]	; (800d058 <find_volume+0x544>)
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d127      	bne.n	800d018 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfca:	3338      	adds	r3, #56	; 0x38
 800cfcc:	0018      	movs	r0, r3
 800cfce:	f7fd fe00 	bl	800abd2 <ld_dword>
 800cfd2:	0003      	movs	r3, r0
 800cfd4:	4a21      	ldr	r2, [pc, #132]	; (800d05c <find_volume+0x548>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d11e      	bne.n	800d018 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfdc:	3338      	adds	r3, #56	; 0x38
 800cfde:	33e5      	adds	r3, #229	; 0xe5
 800cfe0:	33ff      	adds	r3, #255	; 0xff
 800cfe2:	0018      	movs	r0, r3
 800cfe4:	f7fd fdf5 	bl	800abd2 <ld_dword>
 800cfe8:	0003      	movs	r3, r0
 800cfea:	4a1d      	ldr	r2, [pc, #116]	; (800d060 <find_volume+0x54c>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d113      	bne.n	800d018 <find_volume+0x504>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff2:	3338      	adds	r3, #56	; 0x38
 800cff4:	33e9      	adds	r3, #233	; 0xe9
 800cff6:	33ff      	adds	r3, #255	; 0xff
 800cff8:	0018      	movs	r0, r3
 800cffa:	f7fd fdea 	bl	800abd2 <ld_dword>
 800cffe:	0002      	movs	r2, r0
 800d000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d002:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d006:	3338      	adds	r3, #56	; 0x38
 800d008:	33ed      	adds	r3, #237	; 0xed
 800d00a:	33ff      	adds	r3, #255	; 0xff
 800d00c:	0018      	movs	r0, r3
 800d00e:	f7fd fde0 	bl	800abd2 <ld_dword>
 800d012:	0002      	movs	r2, r0
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01a:	2257      	movs	r2, #87	; 0x57
 800d01c:	18ba      	adds	r2, r7, r2
 800d01e:	7812      	ldrb	r2, [r2, #0]
 800d020:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d022:	4b10      	ldr	r3, [pc, #64]	; (800d064 <find_volume+0x550>)
 800d024:	881b      	ldrh	r3, [r3, #0]
 800d026:	3301      	adds	r3, #1
 800d028:	b29a      	uxth	r2, r3
 800d02a:	4b0e      	ldr	r3, [pc, #56]	; (800d064 <find_volume+0x550>)
 800d02c:	801a      	strh	r2, [r3, #0]
 800d02e:	4b0d      	ldr	r3, [pc, #52]	; (800d064 <find_volume+0x550>)
 800d030:	881a      	ldrh	r2, [r3, #0]
 800d032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d034:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d038:	4a0b      	ldr	r2, [pc, #44]	; (800d068 <find_volume+0x554>)
 800d03a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03e:	0018      	movs	r0, r3
 800d040:	f7fd fff0 	bl	800b024 <clear_lock>
#endif
	return FR_OK;
 800d044:	2300      	movs	r3, #0
}
 800d046:	0018      	movs	r0, r3
 800d048:	46bd      	mov	sp, r7
 800d04a:	b016      	add	sp, #88	; 0x58
 800d04c:	bdb0      	pop	{r4, r5, r7, pc}
 800d04e:	46c0      	nop			; (mov r8, r8)
 800d050:	0000fff5 	.word	0x0000fff5
 800d054:	00000ff5 	.word	0x00000ff5
 800d058:	0000aa55 	.word	0x0000aa55
 800d05c:	41615252 	.word	0x41615252
 800d060:	61417272 	.word	0x61417272
 800d064:	20000d50 	.word	0x20000d50
 800d068:	20000d74 	.word	0x20000d74

0800d06c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d06c:	b590      	push	{r4, r7, lr}
 800d06e:	b085      	sub	sp, #20
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d076:	240f      	movs	r4, #15
 800d078:	193b      	adds	r3, r7, r4
 800d07a:	2209      	movs	r2, #9
 800d07c:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d01d      	beq.n	800d0c0 <validate+0x54>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d019      	beq.n	800d0c0 <validate+0x54>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d014      	beq.n	800d0c0 <validate+0x54>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	889a      	ldrh	r2, [r3, #4]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	88db      	ldrh	r3, [r3, #6]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d10d      	bne.n	800d0c0 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	785b      	ldrb	r3, [r3, #1]
 800d0aa:	0018      	movs	r0, r3
 800d0ac:	f7fd fcac 	bl	800aa08 <disk_status>
 800d0b0:	0003      	movs	r3, r0
 800d0b2:	001a      	movs	r2, r3
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	4013      	ands	r3, r2
 800d0b8:	d102      	bne.n	800d0c0 <validate+0x54>
			res = FR_OK;
 800d0ba:	193b      	adds	r3, r7, r4
 800d0bc:	2200      	movs	r2, #0
 800d0be:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d0c0:	230f      	movs	r3, #15
 800d0c2:	18fb      	adds	r3, r7, r3
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d102      	bne.n	800d0d0 <validate+0x64>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681a      	ldr	r2, [r3, #0]
 800d0ce:	e000      	b.n	800d0d2 <validate+0x66>
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	601a      	str	r2, [r3, #0]
	return res;
 800d0d6:	230f      	movs	r3, #15
 800d0d8:	18fb      	adds	r3, r7, r3
 800d0da:	781b      	ldrb	r3, [r3, #0]
}
 800d0dc:	0018      	movs	r0, r3
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	b005      	add	sp, #20
 800d0e2:	bd90      	pop	{r4, r7, pc}

0800d0e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d0e4:	b5b0      	push	{r4, r5, r7, lr}
 800d0e6:	b088      	sub	sp, #32
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	1dfb      	adds	r3, r7, #7
 800d0f0:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d0f6:	2310      	movs	r3, #16
 800d0f8:	18fb      	adds	r3, r7, r3
 800d0fa:	0018      	movs	r0, r3
 800d0fc:	f7ff fc70 	bl	800c9e0 <get_ldnumber>
 800d100:	0003      	movs	r3, r0
 800d102:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	2b00      	cmp	r3, #0
 800d108:	da01      	bge.n	800d10e <f_mount+0x2a>
 800d10a:	230b      	movs	r3, #11
 800d10c:	e030      	b.n	800d170 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d10e:	4b1a      	ldr	r3, [pc, #104]	; (800d178 <f_mount+0x94>)
 800d110:	69fa      	ldr	r2, [r7, #28]
 800d112:	0092      	lsls	r2, r2, #2
 800d114:	58d3      	ldr	r3, [r2, r3]
 800d116:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d006      	beq.n	800d12c <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	0018      	movs	r0, r3
 800d122:	f7fd ff7f 	bl	800b024 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	2200      	movs	r2, #0
 800d12a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d002      	beq.n	800d138 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2200      	movs	r2, #0
 800d136:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d138:	68f9      	ldr	r1, [r7, #12]
 800d13a:	4b0f      	ldr	r3, [pc, #60]	; (800d178 <f_mount+0x94>)
 800d13c:	69fa      	ldr	r2, [r7, #28]
 800d13e:	0092      	lsls	r2, r2, #2
 800d140:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d003      	beq.n	800d150 <f_mount+0x6c>
 800d148:	1dfb      	adds	r3, r7, #7
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d001      	beq.n	800d154 <f_mount+0x70>
 800d150:	2300      	movs	r3, #0
 800d152:	e00d      	b.n	800d170 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d154:	2517      	movs	r5, #23
 800d156:	197c      	adds	r4, r7, r5
 800d158:	230c      	movs	r3, #12
 800d15a:	18f9      	adds	r1, r7, r3
 800d15c:	2308      	movs	r3, #8
 800d15e:	18fb      	adds	r3, r7, r3
 800d160:	2200      	movs	r2, #0
 800d162:	0018      	movs	r0, r3
 800d164:	f7ff fcd6 	bl	800cb14 <find_volume>
 800d168:	0003      	movs	r3, r0
 800d16a:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 800d16c:	197b      	adds	r3, r7, r5
 800d16e:	781b      	ldrb	r3, [r3, #0]
}
 800d170:	0018      	movs	r0, r3
 800d172:	46bd      	mov	sp, r7
 800d174:	b008      	add	sp, #32
 800d176:	bdb0      	pop	{r4, r5, r7, pc}
 800d178:	20000d4c 	.word	0x20000d4c

0800d17c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d17e:	b09b      	sub	sp, #108	; 0x6c
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	1dfb      	adds	r3, r7, #7
 800d188:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d101      	bne.n	800d194 <f_open+0x18>
 800d190:	2309      	movs	r3, #9
 800d192:	e1f4      	b.n	800d57e <f_open+0x402>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d194:	1dfb      	adds	r3, r7, #7
 800d196:	1dfa      	adds	r2, r7, #7
 800d198:	7812      	ldrb	r2, [r2, #0]
 800d19a:	213f      	movs	r1, #63	; 0x3f
 800d19c:	400a      	ands	r2, r1
 800d19e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800d1a0:	2567      	movs	r5, #103	; 0x67
 800d1a2:	197c      	adds	r4, r7, r5
 800d1a4:	1dfb      	adds	r3, r7, #7
 800d1a6:	781a      	ldrb	r2, [r3, #0]
 800d1a8:	2314      	movs	r3, #20
 800d1aa:	18f9      	adds	r1, r7, r3
 800d1ac:	2308      	movs	r3, #8
 800d1ae:	18fb      	adds	r3, r7, r3
 800d1b0:	0018      	movs	r0, r3
 800d1b2:	f7ff fcaf 	bl	800cb14 <find_volume>
 800d1b6:	0003      	movs	r3, r0
 800d1b8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800d1ba:	197b      	adds	r3, r7, r5
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d000      	beq.n	800d1c4 <f_open+0x48>
 800d1c2:	e1d1      	b.n	800d568 <f_open+0x3ec>
		dj.obj.fs = fs;
 800d1c4:	697a      	ldr	r2, [r7, #20]
 800d1c6:	2618      	movs	r6, #24
 800d1c8:	19bb      	adds	r3, r7, r6
 800d1ca:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d1cc:	68ba      	ldr	r2, [r7, #8]
 800d1ce:	197c      	adds	r4, r7, r5
 800d1d0:	19bb      	adds	r3, r7, r6
 800d1d2:	0011      	movs	r1, r2
 800d1d4:	0018      	movs	r0, r3
 800d1d6:	f7ff fb79 	bl	800c8cc <follow_path>
 800d1da:	0003      	movs	r3, r0
 800d1dc:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d1de:	0029      	movs	r1, r5
 800d1e0:	197b      	adds	r3, r7, r5
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d11b      	bne.n	800d220 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d1e8:	19bb      	adds	r3, r7, r6
 800d1ea:	222f      	movs	r2, #47	; 0x2f
 800d1ec:	5c9b      	ldrb	r3, [r3, r2]
 800d1ee:	b25b      	sxtb	r3, r3
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	da03      	bge.n	800d1fc <f_open+0x80>
				res = FR_INVALID_NAME;
 800d1f4:	187b      	adds	r3, r7, r1
 800d1f6:	2206      	movs	r2, #6
 800d1f8:	701a      	strb	r2, [r3, #0]
 800d1fa:	e011      	b.n	800d220 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d1fc:	1dfb      	adds	r3, r7, #7
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	2201      	movs	r2, #1
 800d202:	4393      	bics	r3, r2
 800d204:	1e5a      	subs	r2, r3, #1
 800d206:	4193      	sbcs	r3, r2
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	001a      	movs	r2, r3
 800d20c:	2367      	movs	r3, #103	; 0x67
 800d20e:	18fc      	adds	r4, r7, r3
 800d210:	2318      	movs	r3, #24
 800d212:	18fb      	adds	r3, r7, r3
 800d214:	0011      	movs	r1, r2
 800d216:	0018      	movs	r0, r3
 800d218:	f7fd fdba 	bl	800ad90 <chk_lock>
 800d21c:	0003      	movs	r3, r0
 800d21e:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d220:	1dfb      	adds	r3, r7, #7
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	221c      	movs	r2, #28
 800d226:	4013      	ands	r3, r2
 800d228:	d100      	bne.n	800d22c <f_open+0xb0>
 800d22a:	e096      	b.n	800d35a <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 800d22c:	2267      	movs	r2, #103	; 0x67
 800d22e:	18bb      	adds	r3, r7, r2
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d01a      	beq.n	800d26c <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d236:	18bb      	adds	r3, r7, r2
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	2b04      	cmp	r3, #4
 800d23c:	d10f      	bne.n	800d25e <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d23e:	f7fd fdff 	bl	800ae40 <enq_lock>
 800d242:	1e03      	subs	r3, r0, #0
 800d244:	d007      	beq.n	800d256 <f_open+0xda>
 800d246:	2318      	movs	r3, #24
 800d248:	18fb      	adds	r3, r7, r3
 800d24a:	0018      	movs	r0, r3
 800d24c:	f7ff f82a 	bl	800c2a4 <dir_register>
 800d250:	0003      	movs	r3, r0
 800d252:	001a      	movs	r2, r3
 800d254:	e000      	b.n	800d258 <f_open+0xdc>
 800d256:	2212      	movs	r2, #18
 800d258:	2367      	movs	r3, #103	; 0x67
 800d25a:	18fb      	adds	r3, r7, r3
 800d25c:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d25e:	1dfb      	adds	r3, r7, #7
 800d260:	1dfa      	adds	r2, r7, #7
 800d262:	7812      	ldrb	r2, [r2, #0]
 800d264:	2108      	movs	r1, #8
 800d266:	430a      	orrs	r2, r1
 800d268:	701a      	strb	r2, [r3, #0]
 800d26a:	e014      	b.n	800d296 <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d26c:	2318      	movs	r3, #24
 800d26e:	18fb      	adds	r3, r7, r3
 800d270:	799b      	ldrb	r3, [r3, #6]
 800d272:	001a      	movs	r2, r3
 800d274:	2311      	movs	r3, #17
 800d276:	4013      	ands	r3, r2
 800d278:	d004      	beq.n	800d284 <f_open+0x108>
					res = FR_DENIED;
 800d27a:	2367      	movs	r3, #103	; 0x67
 800d27c:	18fb      	adds	r3, r7, r3
 800d27e:	2207      	movs	r2, #7
 800d280:	701a      	strb	r2, [r3, #0]
 800d282:	e008      	b.n	800d296 <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d284:	1dfb      	adds	r3, r7, #7
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	2204      	movs	r2, #4
 800d28a:	4013      	ands	r3, r2
 800d28c:	d003      	beq.n	800d296 <f_open+0x11a>
 800d28e:	2367      	movs	r3, #103	; 0x67
 800d290:	18fb      	adds	r3, r7, r3
 800d292:	2208      	movs	r2, #8
 800d294:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d296:	2467      	movs	r4, #103	; 0x67
 800d298:	193b      	adds	r3, r7, r4
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d000      	beq.n	800d2a2 <f_open+0x126>
 800d2a0:	e07b      	b.n	800d39a <f_open+0x21e>
 800d2a2:	1dfb      	adds	r3, r7, #7
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	2208      	movs	r2, #8
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	d100      	bne.n	800d2ae <f_open+0x132>
 800d2ac:	e075      	b.n	800d39a <f_open+0x21e>
				dw = GET_FATTIME();
 800d2ae:	f7fd fb3f 	bl	800a930 <get_fattime>
 800d2b2:	0003      	movs	r3, r0
 800d2b4:	65bb      	str	r3, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d2b6:	2518      	movs	r5, #24
 800d2b8:	197b      	adds	r3, r7, r5
 800d2ba:	6a1b      	ldr	r3, [r3, #32]
 800d2bc:	330e      	adds	r3, #14
 800d2be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2c0:	0011      	movs	r1, r2
 800d2c2:	0018      	movs	r0, r3
 800d2c4:	f7fd fcc4 	bl	800ac50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d2c8:	197b      	adds	r3, r7, r5
 800d2ca:	6a1b      	ldr	r3, [r3, #32]
 800d2cc:	3316      	adds	r3, #22
 800d2ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2d0:	0011      	movs	r1, r2
 800d2d2:	0018      	movs	r0, r3
 800d2d4:	f7fd fcbc 	bl	800ac50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d2d8:	197b      	adds	r3, r7, r5
 800d2da:	6a1b      	ldr	r3, [r3, #32]
 800d2dc:	330b      	adds	r3, #11
 800d2de:	2220      	movs	r2, #32
 800d2e0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d2e2:	697a      	ldr	r2, [r7, #20]
 800d2e4:	197b      	adds	r3, r7, r5
 800d2e6:	6a1b      	ldr	r3, [r3, #32]
 800d2e8:	0019      	movs	r1, r3
 800d2ea:	0010      	movs	r0, r2
 800d2ec:	f7fe fcef 	bl	800bcce <ld_clust>
 800d2f0:	0003      	movs	r3, r0
 800d2f2:	657b      	str	r3, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d2f4:	6978      	ldr	r0, [r7, #20]
 800d2f6:	197b      	adds	r3, r7, r5
 800d2f8:	6a1b      	ldr	r3, [r3, #32]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	0019      	movs	r1, r3
 800d2fe:	f7fe fd05 	bl	800bd0c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d302:	197b      	adds	r3, r7, r5
 800d304:	6a1b      	ldr	r3, [r3, #32]
 800d306:	331c      	adds	r3, #28
 800d308:	2100      	movs	r1, #0
 800d30a:	0018      	movs	r0, r3
 800d30c:	f7fd fca0 	bl	800ac50 <st_dword>
					fs->wflag = 1;
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	2201      	movs	r2, #1
 800d314:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d03e      	beq.n	800d39a <f_open+0x21e>
						dw = fs->winsect;
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d320:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d322:	0026      	movs	r6, r4
 800d324:	193c      	adds	r4, r7, r4
 800d326:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d328:	197b      	adds	r3, r7, r5
 800d32a:	2200      	movs	r2, #0
 800d32c:	0018      	movs	r0, r3
 800d32e:	f7fe f9ba 	bl	800b6a6 <remove_chain>
 800d332:	0003      	movs	r3, r0
 800d334:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 800d336:	19bb      	adds	r3, r7, r6
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d12d      	bne.n	800d39a <f_open+0x21e>
							res = move_window(fs, dw);
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	19bc      	adds	r4, r7, r6
 800d342:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d344:	0011      	movs	r1, r2
 800d346:	0018      	movs	r0, r3
 800d348:	f7fd fed4 	bl	800b0f4 <move_window>
 800d34c:	0003      	movs	r3, r0
 800d34e:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d354:	3a01      	subs	r2, #1
 800d356:	615a      	str	r2, [r3, #20]
 800d358:	e01f      	b.n	800d39a <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d35a:	2167      	movs	r1, #103	; 0x67
 800d35c:	187b      	adds	r3, r7, r1
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d11a      	bne.n	800d39a <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d364:	2318      	movs	r3, #24
 800d366:	18fb      	adds	r3, r7, r3
 800d368:	799b      	ldrb	r3, [r3, #6]
 800d36a:	001a      	movs	r2, r3
 800d36c:	2310      	movs	r3, #16
 800d36e:	4013      	ands	r3, r2
 800d370:	d003      	beq.n	800d37a <f_open+0x1fe>
					res = FR_NO_FILE;
 800d372:	187b      	adds	r3, r7, r1
 800d374:	2204      	movs	r2, #4
 800d376:	701a      	strb	r2, [r3, #0]
 800d378:	e00f      	b.n	800d39a <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d37a:	1dfb      	adds	r3, r7, #7
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	2202      	movs	r2, #2
 800d380:	4013      	ands	r3, r2
 800d382:	d00a      	beq.n	800d39a <f_open+0x21e>
 800d384:	2318      	movs	r3, #24
 800d386:	18fb      	adds	r3, r7, r3
 800d388:	799b      	ldrb	r3, [r3, #6]
 800d38a:	001a      	movs	r2, r3
 800d38c:	2301      	movs	r3, #1
 800d38e:	4013      	ands	r3, r2
 800d390:	d003      	beq.n	800d39a <f_open+0x21e>
						res = FR_DENIED;
 800d392:	2367      	movs	r3, #103	; 0x67
 800d394:	18fb      	adds	r3, r7, r3
 800d396:	2207      	movs	r2, #7
 800d398:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 800d39a:	2367      	movs	r3, #103	; 0x67
 800d39c:	18fb      	adds	r3, r7, r3
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d12b      	bne.n	800d3fc <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d3a4:	1dfb      	adds	r3, r7, #7
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	2208      	movs	r2, #8
 800d3aa:	4013      	ands	r3, r2
 800d3ac:	d005      	beq.n	800d3ba <f_open+0x23e>
				mode |= FA_MODIFIED;
 800d3ae:	1dfb      	adds	r3, r7, #7
 800d3b0:	1dfa      	adds	r2, r7, #7
 800d3b2:	7812      	ldrb	r2, [r2, #0]
 800d3b4:	2140      	movs	r1, #64	; 0x40
 800d3b6:	430a      	orrs	r2, r1
 800d3b8:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d3c2:	2118      	movs	r1, #24
 800d3c4:	187b      	adds	r3, r7, r1
 800d3c6:	6a1a      	ldr	r2, [r3, #32]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d3cc:	1dfb      	adds	r3, r7, #7
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	4393      	bics	r3, r2
 800d3d4:	1e5a      	subs	r2, r3, #1
 800d3d6:	4193      	sbcs	r3, r2
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	001a      	movs	r2, r3
 800d3dc:	187b      	adds	r3, r7, r1
 800d3de:	0011      	movs	r1, r2
 800d3e0:	0018      	movs	r0, r3
 800d3e2:	f7fd fd4b 	bl	800ae7c <inc_lock>
 800d3e6:	0002      	movs	r2, r0
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	691b      	ldr	r3, [r3, #16]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d103      	bne.n	800d3fc <f_open+0x280>
 800d3f4:	2367      	movs	r3, #103	; 0x67
 800d3f6:	18fb      	adds	r3, r7, r3
 800d3f8:	2202      	movs	r2, #2
 800d3fa:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d3fc:	2367      	movs	r3, #103	; 0x67
 800d3fe:	18fb      	adds	r3, r7, r3
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d000      	beq.n	800d408 <f_open+0x28c>
 800d406:	e0af      	b.n	800d568 <f_open+0x3ec>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d408:	697a      	ldr	r2, [r7, #20]
 800d40a:	2418      	movs	r4, #24
 800d40c:	193b      	adds	r3, r7, r4
 800d40e:	6a1b      	ldr	r3, [r3, #32]
 800d410:	0019      	movs	r1, r3
 800d412:	0010      	movs	r0, r2
 800d414:	f7fe fc5b 	bl	800bcce <ld_clust>
 800d418:	0002      	movs	r2, r0
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d41e:	193b      	adds	r3, r7, r4
 800d420:	6a1b      	ldr	r3, [r3, #32]
 800d422:	331c      	adds	r3, #28
 800d424:	0018      	movs	r0, r3
 800d426:	f7fd fbd4 	bl	800abd2 <ld_dword>
 800d42a:	0002      	movs	r2, r0
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2200      	movs	r2, #0
 800d434:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d436:	697a      	ldr	r2, [r7, #20]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	88da      	ldrh	r2, [r3, #6]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	1dfa      	adds	r2, r7, #7
 800d448:	7812      	ldrb	r2, [r2, #0]
 800d44a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2200      	movs	r2, #0
 800d450:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2200      	movs	r2, #0
 800d45c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	3330      	adds	r3, #48	; 0x30
 800d462:	2280      	movs	r2, #128	; 0x80
 800d464:	0152      	lsls	r2, r2, #5
 800d466:	2100      	movs	r1, #0
 800d468:	0018      	movs	r0, r3
 800d46a:	f7fd fc3a 	bl	800ace2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d46e:	1dfb      	adds	r3, r7, #7
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	2220      	movs	r2, #32
 800d474:	4013      	ands	r3, r2
 800d476:	d100      	bne.n	800d47a <f_open+0x2fe>
 800d478:	e076      	b.n	800d568 <f_open+0x3ec>
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d100      	bne.n	800d484 <f_open+0x308>
 800d482:	e071      	b.n	800d568 <f_open+0x3ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	68da      	ldr	r2, [r3, #12]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	895b      	ldrh	r3, [r3, #10]
 800d490:	001a      	movs	r2, r3
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	899b      	ldrh	r3, [r3, #12]
 800d496:	4353      	muls	r3, r2
 800d498:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	689b      	ldr	r3, [r3, #8]
 800d49e:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4a6:	e019      	b.n	800d4dc <f_open+0x360>
					clst = get_fat(&fp->obj, clst);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4ac:	0011      	movs	r1, r2
 800d4ae:	0018      	movs	r0, r3
 800d4b0:	f7fd feee 	bl	800b290 <get_fat>
 800d4b4:	0003      	movs	r3, r0
 800d4b6:	663b      	str	r3, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d4b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d803      	bhi.n	800d4c6 <f_open+0x34a>
 800d4be:	2367      	movs	r3, #103	; 0x67
 800d4c0:	18fb      	adds	r3, r7, r3
 800d4c2:	2202      	movs	r2, #2
 800d4c4:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d4c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	d103      	bne.n	800d4d4 <f_open+0x358>
 800d4cc:	2367      	movs	r3, #103	; 0x67
 800d4ce:	18fb      	adds	r3, r7, r3
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d4d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d4d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4dc:	2367      	movs	r3, #103	; 0x67
 800d4de:	18fb      	adds	r3, r7, r3
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d103      	bne.n	800d4ee <f_open+0x372>
 800d4e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d4e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d8dc      	bhi.n	800d4a8 <f_open+0x32c>
				}
				fp->clust = clst;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4f2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d4f4:	2467      	movs	r4, #103	; 0x67
 800d4f6:	193b      	adds	r3, r7, r4
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d134      	bne.n	800d568 <f_open+0x3ec>
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	899b      	ldrh	r3, [r3, #12]
 800d502:	001a      	movs	r2, r3
 800d504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d506:	0011      	movs	r1, r2
 800d508:	0018      	movs	r0, r3
 800d50a:	f7f2 fe9f 	bl	800024c <__aeabi_uidivmod>
 800d50e:	1e0b      	subs	r3, r1, #0
 800d510:	d02a      	beq.n	800d568 <f_open+0x3ec>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d516:	0011      	movs	r1, r2
 800d518:	0018      	movs	r0, r3
 800d51a:	f7fd fe9d 	bl	800b258 <clust2sect>
 800d51e:	0003      	movs	r3, r0
 800d520:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d524:	2b00      	cmp	r3, #0
 800d526:	d103      	bne.n	800d530 <f_open+0x3b4>
						res = FR_INT_ERR;
 800d528:	193b      	adds	r3, r7, r4
 800d52a:	2202      	movs	r2, #2
 800d52c:	701a      	strb	r2, [r3, #0]
 800d52e:	e01b      	b.n	800d568 <f_open+0x3ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	899b      	ldrh	r3, [r3, #12]
 800d534:	0019      	movs	r1, r3
 800d536:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d538:	f7f2 fe02 	bl	8000140 <__udivsi3>
 800d53c:	0003      	movs	r3, r0
 800d53e:	001a      	movs	r2, r3
 800d540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d542:	18d2      	adds	r2, r2, r3
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	7858      	ldrb	r0, [r3, #1]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	3330      	adds	r3, #48	; 0x30
 800d550:	0019      	movs	r1, r3
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	6a1a      	ldr	r2, [r3, #32]
 800d556:	2301      	movs	r3, #1
 800d558:	f7fd faa8 	bl	800aaac <disk_read>
 800d55c:	1e03      	subs	r3, r0, #0
 800d55e:	d003      	beq.n	800d568 <f_open+0x3ec>
 800d560:	2367      	movs	r3, #103	; 0x67
 800d562:	18fb      	adds	r3, r7, r3
 800d564:	2201      	movs	r2, #1
 800d566:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d568:	2367      	movs	r3, #103	; 0x67
 800d56a:	18fb      	adds	r3, r7, r3
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d002      	beq.n	800d578 <f_open+0x3fc>
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2200      	movs	r2, #0
 800d576:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d578:	2367      	movs	r3, #103	; 0x67
 800d57a:	18fb      	adds	r3, r7, r3
 800d57c:	781b      	ldrb	r3, [r3, #0]
}
 800d57e:	0018      	movs	r0, r3
 800d580:	46bd      	mov	sp, r7
 800d582:	b01b      	add	sp, #108	; 0x6c
 800d584:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d586 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d586:	b5b0      	push	{r4, r5, r7, lr}
 800d588:	b08c      	sub	sp, #48	; 0x30
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	60f8      	str	r0, [r7, #12]
 800d58e:	60b9      	str	r1, [r7, #8]
 800d590:	607a      	str	r2, [r7, #4]
 800d592:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	2200      	movs	r2, #0
 800d59c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	252f      	movs	r5, #47	; 0x2f
 800d5a2:	197c      	adds	r4, r7, r5
 800d5a4:	2210      	movs	r2, #16
 800d5a6:	18ba      	adds	r2, r7, r2
 800d5a8:	0011      	movs	r1, r2
 800d5aa:	0018      	movs	r0, r3
 800d5ac:	f7ff fd5e 	bl	800d06c <validate>
 800d5b0:	0003      	movs	r3, r0
 800d5b2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d5b4:	197b      	adds	r3, r7, r5
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d107      	bne.n	800d5cc <f_write+0x46>
 800d5bc:	197b      	adds	r3, r7, r5
 800d5be:	68fa      	ldr	r2, [r7, #12]
 800d5c0:	7d52      	ldrb	r2, [r2, #21]
 800d5c2:	701a      	strb	r2, [r3, #0]
 800d5c4:	197b      	adds	r3, r7, r5
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d003      	beq.n	800d5d4 <f_write+0x4e>
 800d5cc:	232f      	movs	r3, #47	; 0x2f
 800d5ce:	18fb      	adds	r3, r7, r3
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	e16f      	b.n	800d8b4 <f_write+0x32e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	7d1b      	ldrb	r3, [r3, #20]
 800d5d8:	001a      	movs	r2, r3
 800d5da:	2302      	movs	r3, #2
 800d5dc:	4013      	ands	r3, r2
 800d5de:	d101      	bne.n	800d5e4 <f_write+0x5e>
 800d5e0:	2307      	movs	r3, #7
 800d5e2:	e167      	b.n	800d8b4 <f_write+0x32e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	699a      	ldr	r2, [r3, #24]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	18d2      	adds	r2, r2, r3
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	699b      	ldr	r3, [r3, #24]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d300      	bcc.n	800d5f6 <f_write+0x70>
 800d5f4:	e150      	b.n	800d898 <f_write+0x312>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	699b      	ldr	r3, [r3, #24]
 800d5fa:	43db      	mvns	r3, r3
 800d5fc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d5fe:	e14b      	b.n	800d898 <f_write+0x312>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	699a      	ldr	r2, [r3, #24]
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	899b      	ldrh	r3, [r3, #12]
 800d608:	0019      	movs	r1, r3
 800d60a:	0010      	movs	r0, r2
 800d60c:	f7f2 fe1e 	bl	800024c <__aeabi_uidivmod>
 800d610:	1e0b      	subs	r3, r1, #0
 800d612:	d000      	beq.n	800d616 <f_write+0x90>
 800d614:	e0f4      	b.n	800d800 <f_write+0x27a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	699a      	ldr	r2, [r3, #24]
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	899b      	ldrh	r3, [r3, #12]
 800d61e:	0019      	movs	r1, r3
 800d620:	0010      	movs	r0, r2
 800d622:	f7f2 fd8d 	bl	8000140 <__udivsi3>
 800d626:	0003      	movs	r3, r0
 800d628:	001a      	movs	r2, r3
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	895b      	ldrh	r3, [r3, #10]
 800d62e:	3b01      	subs	r3, #1
 800d630:	4013      	ands	r3, r2
 800d632:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d146      	bne.n	800d6c8 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	699b      	ldr	r3, [r3, #24]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d10d      	bne.n	800d65e <f_write+0xd8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d11e      	bne.n	800d68c <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2100      	movs	r1, #0
 800d652:	0018      	movs	r0, r3
 800d654:	f7fe f89a 	bl	800b78c <create_chain>
 800d658:	0003      	movs	r3, r0
 800d65a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d65c:	e016      	b.n	800d68c <f_write+0x106>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d662:	2b00      	cmp	r3, #0
 800d664:	d009      	beq.n	800d67a <f_write+0xf4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	699a      	ldr	r2, [r3, #24]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	0011      	movs	r1, r2
 800d66e:	0018      	movs	r0, r3
 800d670:	f7fe f932 	bl	800b8d8 <clmt_clust>
 800d674:	0003      	movs	r3, r0
 800d676:	62bb      	str	r3, [r7, #40]	; 0x28
 800d678:	e008      	b.n	800d68c <f_write+0x106>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	69db      	ldr	r3, [r3, #28]
 800d680:	0019      	movs	r1, r3
 800d682:	0010      	movs	r0, r2
 800d684:	f7fe f882 	bl	800b78c <create_chain>
 800d688:	0003      	movs	r3, r0
 800d68a:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d100      	bne.n	800d694 <f_write+0x10e>
 800d692:	e106      	b.n	800d8a2 <f_write+0x31c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d696:	2b01      	cmp	r3, #1
 800d698:	d104      	bne.n	800d6a4 <f_write+0x11e>
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2202      	movs	r2, #2
 800d69e:	755a      	strb	r2, [r3, #21]
 800d6a0:	2302      	movs	r3, #2
 800d6a2:	e107      	b.n	800d8b4 <f_write+0x32e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	d104      	bne.n	800d6b4 <f_write+0x12e>
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	755a      	strb	r2, [r3, #21]
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	e0ff      	b.n	800d8b4 <f_write+0x32e>
				fp->clust = clst;			/* Update current cluster */
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6b8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d102      	bne.n	800d6c8 <f_write+0x142>
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6c6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	7d1b      	ldrb	r3, [r3, #20]
 800d6cc:	b25b      	sxtb	r3, r3
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	da17      	bge.n	800d702 <f_write+0x17c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	7858      	ldrb	r0, [r3, #1]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	3330      	adds	r3, #48	; 0x30
 800d6da:	0019      	movs	r1, r3
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6a1a      	ldr	r2, [r3, #32]
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	f7fd fa0b 	bl	800aafc <disk_write>
 800d6e6:	1e03      	subs	r3, r0, #0
 800d6e8:	d004      	beq.n	800d6f4 <f_write+0x16e>
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	755a      	strb	r2, [r3, #21]
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	e0df      	b.n	800d8b4 <f_write+0x32e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	7d1b      	ldrb	r3, [r3, #20]
 800d6f8:	227f      	movs	r2, #127	; 0x7f
 800d6fa:	4013      	ands	r3, r2
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d702:	693a      	ldr	r2, [r7, #16]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	69db      	ldr	r3, [r3, #28]
 800d708:	0019      	movs	r1, r3
 800d70a:	0010      	movs	r0, r2
 800d70c:	f7fd fda4 	bl	800b258 <clust2sect>
 800d710:	0003      	movs	r3, r0
 800d712:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d104      	bne.n	800d724 <f_write+0x19e>
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2202      	movs	r2, #2
 800d71e:	755a      	strb	r2, [r3, #21]
 800d720:	2302      	movs	r3, #2
 800d722:	e0c7      	b.n	800d8b4 <f_write+0x32e>
			sect += csect;
 800d724:	697a      	ldr	r2, [r7, #20]
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	18d3      	adds	r3, r2, r3
 800d72a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	899b      	ldrh	r3, [r3, #12]
 800d730:	0019      	movs	r1, r3
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f7f2 fd04 	bl	8000140 <__udivsi3>
 800d738:	0003      	movs	r3, r0
 800d73a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d73c:	6a3b      	ldr	r3, [r7, #32]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d040      	beq.n	800d7c4 <f_write+0x23e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d742:	69ba      	ldr	r2, [r7, #24]
 800d744:	6a3b      	ldr	r3, [r7, #32]
 800d746:	18d3      	adds	r3, r2, r3
 800d748:	693a      	ldr	r2, [r7, #16]
 800d74a:	8952      	ldrh	r2, [r2, #10]
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d905      	bls.n	800d75c <f_write+0x1d6>
					cc = fs->csize - csect;
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	895b      	ldrh	r3, [r3, #10]
 800d754:	001a      	movs	r2, r3
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	1ad3      	subs	r3, r2, r3
 800d75a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	7858      	ldrb	r0, [r3, #1]
 800d760:	6a3b      	ldr	r3, [r7, #32]
 800d762:	697a      	ldr	r2, [r7, #20]
 800d764:	69f9      	ldr	r1, [r7, #28]
 800d766:	f7fd f9c9 	bl	800aafc <disk_write>
 800d76a:	1e03      	subs	r3, r0, #0
 800d76c:	d004      	beq.n	800d778 <f_write+0x1f2>
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2201      	movs	r2, #1
 800d772:	755a      	strb	r2, [r3, #21]
 800d774:	2301      	movs	r3, #1
 800d776:	e09d      	b.n	800d8b4 <f_write+0x32e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	6a1a      	ldr	r2, [r3, #32]
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	1ad3      	subs	r3, r2, r3
 800d780:	6a3a      	ldr	r2, [r7, #32]
 800d782:	429a      	cmp	r2, r3
 800d784:	d917      	bls.n	800d7b6 <f_write+0x230>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	3330      	adds	r3, #48	; 0x30
 800d78a:	0018      	movs	r0, r3
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6a1a      	ldr	r2, [r3, #32]
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	1ad3      	subs	r3, r2, r3
 800d794:	693a      	ldr	r2, [r7, #16]
 800d796:	8992      	ldrh	r2, [r2, #12]
 800d798:	4353      	muls	r3, r2
 800d79a:	69fa      	ldr	r2, [r7, #28]
 800d79c:	18d1      	adds	r1, r2, r3
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	899b      	ldrh	r3, [r3, #12]
 800d7a2:	001a      	movs	r2, r3
 800d7a4:	f7fd fa7e 	bl	800aca4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	7d1b      	ldrb	r3, [r3, #20]
 800d7ac:	227f      	movs	r2, #127	; 0x7f
 800d7ae:	4013      	ands	r3, r2
 800d7b0:	b2da      	uxtb	r2, r3
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	899b      	ldrh	r3, [r3, #12]
 800d7ba:	001a      	movs	r2, r3
 800d7bc:	6a3b      	ldr	r3, [r7, #32]
 800d7be:	4353      	muls	r3, r2
 800d7c0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d7c2:	e04b      	b.n	800d85c <f_write+0x2d6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6a1b      	ldr	r3, [r3, #32]
 800d7c8:	697a      	ldr	r2, [r7, #20]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d015      	beq.n	800d7fa <f_write+0x274>
				fp->fptr < fp->obj.objsize &&
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	699a      	ldr	r2, [r3, #24]
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d20f      	bcs.n	800d7fa <f_write+0x274>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	7858      	ldrb	r0, [r3, #1]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	3330      	adds	r3, #48	; 0x30
 800d7e2:	0019      	movs	r1, r3
 800d7e4:	697a      	ldr	r2, [r7, #20]
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	f7fd f960 	bl	800aaac <disk_read>
 800d7ec:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 800d7ee:	d004      	beq.n	800d7fa <f_write+0x274>
					ABORT(fs, FR_DISK_ERR);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	755a      	strb	r2, [r3, #21]
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	e05c      	b.n	800d8b4 <f_write+0x32e>
			}
#endif
			fp->sect = sect;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	697a      	ldr	r2, [r7, #20]
 800d7fe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	899b      	ldrh	r3, [r3, #12]
 800d804:	001c      	movs	r4, r3
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	699a      	ldr	r2, [r3, #24]
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	899b      	ldrh	r3, [r3, #12]
 800d80e:	0019      	movs	r1, r3
 800d810:	0010      	movs	r0, r2
 800d812:	f7f2 fd1b 	bl	800024c <__aeabi_uidivmod>
 800d816:	000b      	movs	r3, r1
 800d818:	1ae3      	subs	r3, r4, r3
 800d81a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d81c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	429a      	cmp	r2, r3
 800d822:	d901      	bls.n	800d828 <f_write+0x2a2>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	3330      	adds	r3, #48	; 0x30
 800d82c:	001c      	movs	r4, r3
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	699a      	ldr	r2, [r3, #24]
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	899b      	ldrh	r3, [r3, #12]
 800d836:	0019      	movs	r1, r3
 800d838:	0010      	movs	r0, r2
 800d83a:	f7f2 fd07 	bl	800024c <__aeabi_uidivmod>
 800d83e:	000b      	movs	r3, r1
 800d840:	18e3      	adds	r3, r4, r3
 800d842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d844:	69f9      	ldr	r1, [r7, #28]
 800d846:	0018      	movs	r0, r3
 800d848:	f7fd fa2c 	bl	800aca4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	7d1b      	ldrb	r3, [r3, #20]
 800d850:	2280      	movs	r2, #128	; 0x80
 800d852:	4252      	negs	r2, r2
 800d854:	4313      	orrs	r3, r2
 800d856:	b2da      	uxtb	r2, r3
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d85c:	69fa      	ldr	r2, [r7, #28]
 800d85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d860:	18d3      	adds	r3, r2, r3
 800d862:	61fb      	str	r3, [r7, #28]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	699a      	ldr	r2, [r3, #24]
 800d868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86a:	18d2      	adds	r2, r2, r3
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	619a      	str	r2, [r3, #24]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	68d9      	ldr	r1, [r3, #12]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	699a      	ldr	r2, [r3, #24]
 800d878:	000b      	movs	r3, r1
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d200      	bcs.n	800d880 <f_write+0x2fa>
 800d87e:	0013      	movs	r3, r2
 800d880:	68fa      	ldr	r2, [r7, #12]
 800d882:	60d3      	str	r3, [r2, #12]
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88a:	18d2      	adds	r2, r2, r3
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	601a      	str	r2, [r3, #0]
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d000      	beq.n	800d8a0 <f_write+0x31a>
 800d89e:	e6af      	b.n	800d600 <f_write+0x7a>
 800d8a0:	e000      	b.n	800d8a4 <f_write+0x31e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d8a2:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	7d1b      	ldrb	r3, [r3, #20]
 800d8a8:	2240      	movs	r2, #64	; 0x40
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d8b2:	2300      	movs	r3, #0
}
 800d8b4:	0018      	movs	r0, r3
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	b00c      	add	sp, #48	; 0x30
 800d8ba:	bdb0      	pop	{r4, r5, r7, pc}

0800d8bc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d8bc:	b5b0      	push	{r4, r5, r7, lr}
 800d8be:	b086      	sub	sp, #24
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2517      	movs	r5, #23
 800d8c8:	197c      	adds	r4, r7, r5
 800d8ca:	2208      	movs	r2, #8
 800d8cc:	18ba      	adds	r2, r7, r2
 800d8ce:	0011      	movs	r1, r2
 800d8d0:	0018      	movs	r0, r3
 800d8d2:	f7ff fbcb 	bl	800d06c <validate>
 800d8d6:	0003      	movs	r3, r0
 800d8d8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800d8da:	197b      	adds	r3, r7, r5
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d16e      	bne.n	800d9c0 <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	7d1b      	ldrb	r3, [r3, #20]
 800d8e6:	001a      	movs	r2, r3
 800d8e8:	2340      	movs	r3, #64	; 0x40
 800d8ea:	4013      	ands	r3, r2
 800d8ec:	d068      	beq.n	800d9c0 <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	7d1b      	ldrb	r3, [r3, #20]
 800d8f2:	b25b      	sxtb	r3, r3
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	da14      	bge.n	800d922 <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	7858      	ldrb	r0, [r3, #1]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	3330      	adds	r3, #48	; 0x30
 800d900:	0019      	movs	r1, r3
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6a1a      	ldr	r2, [r3, #32]
 800d906:	2301      	movs	r3, #1
 800d908:	f7fd f8f8 	bl	800aafc <disk_write>
 800d90c:	1e03      	subs	r3, r0, #0
 800d90e:	d001      	beq.n	800d914 <f_sync+0x58>
 800d910:	2301      	movs	r3, #1
 800d912:	e058      	b.n	800d9c6 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	7d1b      	ldrb	r3, [r3, #20]
 800d918:	227f      	movs	r2, #127	; 0x7f
 800d91a:	4013      	ands	r3, r2
 800d91c:	b2da      	uxtb	r2, r3
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d922:	f7fd f805 	bl	800a930 <get_fattime>
 800d926:	0003      	movs	r3, r0
 800d928:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d930:	2517      	movs	r5, #23
 800d932:	197c      	adds	r4, r7, r5
 800d934:	0019      	movs	r1, r3
 800d936:	0010      	movs	r0, r2
 800d938:	f7fd fbdc 	bl	800b0f4 <move_window>
 800d93c:	0003      	movs	r3, r0
 800d93e:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 800d940:	002c      	movs	r4, r5
 800d942:	193b      	adds	r3, r7, r4
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d13a      	bne.n	800d9c0 <f_sync+0x104>
					dir = fp->dir_ptr;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d94e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	330b      	adds	r3, #11
 800d954:	781a      	ldrb	r2, [r3, #0]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	330b      	adds	r3, #11
 800d95a:	2120      	movs	r1, #32
 800d95c:	430a      	orrs	r2, r1
 800d95e:	b2d2      	uxtb	r2, r2
 800d960:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6818      	ldr	r0, [r3, #0]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	689a      	ldr	r2, [r3, #8]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	0019      	movs	r1, r3
 800d96e:	f7fe f9cd 	bl	800bd0c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	331c      	adds	r3, #28
 800d976:	001a      	movs	r2, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	0019      	movs	r1, r3
 800d97e:	0010      	movs	r0, r2
 800d980:	f7fd f966 	bl	800ac50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	3316      	adds	r3, #22
 800d988:	693a      	ldr	r2, [r7, #16]
 800d98a:	0011      	movs	r1, r2
 800d98c:	0018      	movs	r0, r3
 800d98e:	f7fd f95f 	bl	800ac50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	3312      	adds	r3, #18
 800d996:	2100      	movs	r1, #0
 800d998:	0018      	movs	r0, r3
 800d99a:	f7fd f93b 	bl	800ac14 <st_word>
					fs->wflag = 1;
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	193c      	adds	r4, r7, r4
 800d9a8:	0018      	movs	r0, r3
 800d9aa:	f7fd fbd9 	bl	800b160 <sync_fs>
 800d9ae:	0003      	movs	r3, r0
 800d9b0:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	7d1b      	ldrb	r3, [r3, #20]
 800d9b6:	2240      	movs	r2, #64	; 0x40
 800d9b8:	4393      	bics	r3, r2
 800d9ba:	b2da      	uxtb	r2, r3
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d9c0:	2317      	movs	r3, #23
 800d9c2:	18fb      	adds	r3, r7, r3
 800d9c4:	781b      	ldrb	r3, [r3, #0]
}
 800d9c6:	0018      	movs	r0, r3
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	b006      	add	sp, #24
 800d9cc:	bdb0      	pop	{r4, r5, r7, pc}

0800d9ce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d9ce:	b5b0      	push	{r4, r5, r7, lr}
 800d9d0:	b084      	sub	sp, #16
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d9d6:	250f      	movs	r5, #15
 800d9d8:	197c      	adds	r4, r7, r5
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	0018      	movs	r0, r3
 800d9de:	f7ff ff6d 	bl	800d8bc <f_sync>
 800d9e2:	0003      	movs	r3, r0
 800d9e4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800d9e6:	197b      	adds	r3, r7, r5
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d11c      	bne.n	800da28 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	197c      	adds	r4, r7, r5
 800d9f2:	2208      	movs	r2, #8
 800d9f4:	18ba      	adds	r2, r7, r2
 800d9f6:	0011      	movs	r1, r2
 800d9f8:	0018      	movs	r0, r3
 800d9fa:	f7ff fb37 	bl	800d06c <validate>
 800d9fe:	0003      	movs	r3, r0
 800da00:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800da02:	197b      	adds	r3, r7, r5
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10e      	bne.n	800da28 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	691b      	ldr	r3, [r3, #16]
 800da0e:	197c      	adds	r4, r7, r5
 800da10:	0018      	movs	r0, r3
 800da12:	f7fd fabd 	bl	800af90 <dec_lock>
 800da16:	0003      	movs	r3, r0
 800da18:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 800da1a:	197b      	adds	r3, r7, r5
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d102      	bne.n	800da28 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2200      	movs	r2, #0
 800da26:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800da28:	230f      	movs	r3, #15
 800da2a:	18fb      	adds	r3, r7, r3
 800da2c:	781b      	ldrb	r3, [r3, #0]
}
 800da2e:	0018      	movs	r0, r3
 800da30:	46bd      	mov	sp, r7
 800da32:	b004      	add	sp, #16
 800da34:	bdb0      	pop	{r4, r5, r7, pc}

0800da36 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800da36:	b5b0      	push	{r4, r5, r7, lr}
 800da38:	b092      	sub	sp, #72	; 0x48
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	60f8      	str	r0, [r7, #12]
 800da3e:	60b9      	str	r1, [r7, #8]
 800da40:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800da42:	2547      	movs	r5, #71	; 0x47
 800da44:	197c      	adds	r4, r7, r5
 800da46:	2328      	movs	r3, #40	; 0x28
 800da48:	18f9      	adds	r1, r7, r3
 800da4a:	230c      	movs	r3, #12
 800da4c:	18fb      	adds	r3, r7, r3
 800da4e:	2200      	movs	r2, #0
 800da50:	0018      	movs	r0, r3
 800da52:	f7ff f85f 	bl	800cb14 <find_volume>
 800da56:	0003      	movs	r3, r0
 800da58:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800da5a:	197b      	adds	r3, r7, r5
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d000      	beq.n	800da64 <f_getfree+0x2e>
 800da62:	e09e      	b.n	800dba2 <f_getfree+0x16c>
		*fatfs = fs;				/* Return ptr to the fs object */
 800da64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800da6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6c:	699a      	ldr	r2, [r3, #24]
 800da6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da70:	69db      	ldr	r3, [r3, #28]
 800da72:	3b02      	subs	r3, #2
 800da74:	429a      	cmp	r2, r3
 800da76:	d804      	bhi.n	800da82 <f_getfree+0x4c>
			*nclst = fs->free_clst;
 800da78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7a:	699a      	ldr	r2, [r3, #24]
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	601a      	str	r2, [r3, #0]
 800da80:	e08f      	b.n	800dba2 <f_getfree+0x16c>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800da82:	2300      	movs	r3, #0
 800da84:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800da86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d12d      	bne.n	800daea <f_getfree+0xb4>
				clst = 2; obj.fs = fs;
 800da8e:	2302      	movs	r3, #2
 800da90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da94:	2314      	movs	r3, #20
 800da96:	18fb      	adds	r3, r7, r3
 800da98:	601a      	str	r2, [r3, #0]
				do {
					stat = get_fat(&obj, clst);
 800da9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da9c:	2314      	movs	r3, #20
 800da9e:	18fb      	adds	r3, r7, r3
 800daa0:	0011      	movs	r1, r2
 800daa2:	0018      	movs	r0, r3
 800daa4:	f7fd fbf4 	bl	800b290 <get_fat>
 800daa8:	0003      	movs	r3, r0
 800daaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800daac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daae:	3301      	adds	r3, #1
 800dab0:	d104      	bne.n	800dabc <f_getfree+0x86>
 800dab2:	2347      	movs	r3, #71	; 0x47
 800dab4:	18fb      	adds	r3, r7, r3
 800dab6:	2201      	movs	r2, #1
 800dab8:	701a      	strb	r2, [r3, #0]
 800daba:	e065      	b.n	800db88 <f_getfree+0x152>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800dabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d104      	bne.n	800dacc <f_getfree+0x96>
 800dac2:	2347      	movs	r3, #71	; 0x47
 800dac4:	18fb      	adds	r3, r7, r3
 800dac6:	2202      	movs	r2, #2
 800dac8:	701a      	strb	r2, [r3, #0]
 800daca:	e05d      	b.n	800db88 <f_getfree+0x152>
					if (stat == 0) nfree++;
 800dacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d102      	bne.n	800dad8 <f_getfree+0xa2>
 800dad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dad4:	3301      	adds	r3, #1
 800dad6:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800dad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dada:	3301      	adds	r3, #1
 800dadc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae0:	69db      	ldr	r3, [r3, #28]
 800dae2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d3d8      	bcc.n	800da9a <f_getfree+0x64>
 800dae8:	e04e      	b.n	800db88 <f_getfree+0x152>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800daea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daec:	69db      	ldr	r3, [r3, #28]
 800daee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800daf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daf4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800daf6:	2300      	movs	r3, #0
 800daf8:	637b      	str	r3, [r7, #52]	; 0x34
 800dafa:	2300      	movs	r3, #0
 800dafc:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800dafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db00:	2b00      	cmp	r3, #0
 800db02:	d114      	bne.n	800db2e <f_getfree+0xf8>
							res = move_window(fs, sect++);
 800db04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db08:	1c5a      	adds	r2, r3, #1
 800db0a:	63ba      	str	r2, [r7, #56]	; 0x38
 800db0c:	2547      	movs	r5, #71	; 0x47
 800db0e:	197c      	adds	r4, r7, r5
 800db10:	0019      	movs	r1, r3
 800db12:	f7fd faef 	bl	800b0f4 <move_window>
 800db16:	0003      	movs	r3, r0
 800db18:	7023      	strb	r3, [r4, #0]
							if (res != FR_OK) break;
 800db1a:	197b      	adds	r3, r7, r5
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d131      	bne.n	800db86 <f_getfree+0x150>
							p = fs->win;
 800db22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db24:	3338      	adds	r3, #56	; 0x38
 800db26:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800db28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db2a:	899b      	ldrh	r3, [r3, #12]
 800db2c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800db2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	2b02      	cmp	r3, #2
 800db34:	d10f      	bne.n	800db56 <f_getfree+0x120>
							if (ld_word(p) == 0) nfree++;
 800db36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db38:	0018      	movs	r0, r3
 800db3a:	f7fd f82f 	bl	800ab9c <ld_word>
 800db3e:	1e03      	subs	r3, r0, #0
 800db40:	d102      	bne.n	800db48 <f_getfree+0x112>
 800db42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db44:	3301      	adds	r3, #1
 800db46:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800db48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4a:	3302      	adds	r3, #2
 800db4c:	633b      	str	r3, [r7, #48]	; 0x30
 800db4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db50:	3b02      	subs	r3, #2
 800db52:	637b      	str	r3, [r7, #52]	; 0x34
 800db54:	e010      	b.n	800db78 <f_getfree+0x142>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800db56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db58:	0018      	movs	r0, r3
 800db5a:	f7fd f83a 	bl	800abd2 <ld_dword>
 800db5e:	0003      	movs	r3, r0
 800db60:	011b      	lsls	r3, r3, #4
 800db62:	091b      	lsrs	r3, r3, #4
 800db64:	d102      	bne.n	800db6c <f_getfree+0x136>
 800db66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db68:	3301      	adds	r3, #1
 800db6a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800db6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6e:	3304      	adds	r3, #4
 800db70:	633b      	str	r3, [r7, #48]	; 0x30
 800db72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db74:	3b04      	subs	r3, #4
 800db76:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800db78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db7a:	3b01      	subs	r3, #1
 800db7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db80:	2b00      	cmp	r3, #0
 800db82:	d1bc      	bne.n	800dafe <f_getfree+0xc8>
 800db84:	e000      	b.n	800db88 <f_getfree+0x152>
							if (res != FR_OK) break;
 800db86:	46c0      	nop			; (mov r8, r8)
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800db8c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800db8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800db92:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800db94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db96:	791a      	ldrb	r2, [r3, #4]
 800db98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9a:	2101      	movs	r1, #1
 800db9c:	430a      	orrs	r2, r1
 800db9e:	b2d2      	uxtb	r2, r2
 800dba0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800dba2:	2347      	movs	r3, #71	; 0x47
 800dba4:	18fb      	adds	r3, r7, r3
 800dba6:	781b      	ldrb	r3, [r3, #0]
}
 800dba8:	0018      	movs	r0, r3
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	b012      	add	sp, #72	; 0x48
 800dbae:	bdb0      	pop	{r4, r5, r7, pc}

0800dbb0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	000a      	movs	r2, r1
 800dbba:	1cfb      	adds	r3, r7, #3
 800dbbc:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800dbbe:	1cfb      	adds	r3, r7, #3
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	2b0a      	cmp	r3, #10
 800dbc4:	d104      	bne.n	800dbd0 <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	210d      	movs	r1, #13
 800dbca:	0018      	movs	r0, r3
 800dbcc:	f7ff fff0 	bl	800dbb0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	db26      	blt.n	800dc2a <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	1c5a      	adds	r2, r3, #1
 800dbe0:	60fa      	str	r2, [r7, #12]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	18d3      	adds	r3, r2, r3
 800dbe6:	1cfa      	adds	r2, r7, #3
 800dbe8:	7812      	ldrb	r2, [r2, #0]
 800dbea:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2b3c      	cmp	r3, #60	; 0x3c
 800dbf0:	dd12      	ble.n	800dc18 <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6818      	ldr	r0, [r3, #0]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	330c      	adds	r3, #12
 800dbfa:	0019      	movs	r1, r3
 800dbfc:	68fa      	ldr	r2, [r7, #12]
 800dbfe:	2308      	movs	r3, #8
 800dc00:	18fb      	adds	r3, r7, r3
 800dc02:	f7ff fcc0 	bl	800d586 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800dc06:	68ba      	ldr	r2, [r7, #8]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d101      	bne.n	800dc12 <putc_bfd+0x62>
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e001      	b.n	800dc16 <putc_bfd+0x66>
 800dc12:	2301      	movs	r3, #1
 800dc14:	425b      	negs	r3, r3
 800dc16:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	68fa      	ldr	r2, [r7, #12]
 800dc1c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	689b      	ldr	r3, [r3, #8]
 800dc22:	1c5a      	adds	r2, r3, #1
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	609a      	str	r2, [r3, #8]
 800dc28:	e000      	b.n	800dc2c <putc_bfd+0x7c>
	if (i < 0) return;
 800dc2a:	46c0      	nop			; (mov r8, r8)
}
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	b004      	add	sp, #16
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b084      	sub	sp, #16
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	db15      	blt.n	800dc6e <putc_flush+0x3c>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6818      	ldr	r0, [r3, #0]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	330c      	adds	r3, #12
 800dc4a:	0019      	movs	r1, r3
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	001a      	movs	r2, r3
 800dc52:	230c      	movs	r3, #12
 800dc54:	18fb      	adds	r3, r7, r3
 800dc56:	f7ff fc96 	bl	800d586 <f_write>
 800dc5a:	1e03      	subs	r3, r0, #0
 800dc5c:	d107      	bne.n	800dc6e <putc_flush+0x3c>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d102      	bne.n	800dc6e <putc_flush+0x3c>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	689b      	ldr	r3, [r3, #8]
 800dc6c:	e001      	b.n	800dc72 <putc_flush+0x40>
	return EOF;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	425b      	negs	r3, r3
}
 800dc72:	0018      	movs	r0, r3
 800dc74:	46bd      	mov	sp, r7
 800dc76:	b004      	add	sp, #16
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b082      	sub	sp, #8
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
 800dc82:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	683a      	ldr	r2, [r7, #0]
 800dc88:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	605a      	str	r2, [r3, #4]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	685a      	ldr	r2, [r3, #4]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	609a      	str	r2, [r3, #8]
}
 800dc98:	46c0      	nop			; (mov r8, r8)
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	b002      	add	sp, #8
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b096      	sub	sp, #88	; 0x58
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800dcaa:	683a      	ldr	r2, [r7, #0]
 800dcac:	230c      	movs	r3, #12
 800dcae:	18fb      	adds	r3, r7, r3
 800dcb0:	0011      	movs	r1, r2
 800dcb2:	0018      	movs	r0, r3
 800dcb4:	f7ff ffe1 	bl	800dc7a <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800dcb8:	e009      	b.n	800dcce <f_puts+0x2e>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	1c5a      	adds	r2, r3, #1
 800dcbe:	607a      	str	r2, [r7, #4]
 800dcc0:	781a      	ldrb	r2, [r3, #0]
 800dcc2:	230c      	movs	r3, #12
 800dcc4:	18fb      	adds	r3, r7, r3
 800dcc6:	0011      	movs	r1, r2
 800dcc8:	0018      	movs	r0, r3
 800dcca:	f7ff ff71 	bl	800dbb0 <putc_bfd>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1f1      	bne.n	800dcba <f_puts+0x1a>
	return putc_flush(&pb);
 800dcd6:	230c      	movs	r3, #12
 800dcd8:	18fb      	adds	r3, r7, r3
 800dcda:	0018      	movs	r0, r3
 800dcdc:	f7ff ffa9 	bl	800dc32 <putc_flush>
 800dce0:	0003      	movs	r3, r0
}
 800dce2:	0018      	movs	r0, r3
 800dce4:	46bd      	mov	sp, r7
 800dce6:	b016      	add	sp, #88	; 0x58
 800dce8:	bd80      	pop	{r7, pc}
	...

0800dcec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dcec:	b590      	push	{r4, r7, lr}
 800dcee:	b087      	sub	sp, #28
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	1dfb      	adds	r3, r7, #7
 800dcf8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800dcfa:	2417      	movs	r4, #23
 800dcfc:	193b      	adds	r3, r7, r4
 800dcfe:	2201      	movs	r2, #1
 800dd00:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800dd02:	2016      	movs	r0, #22
 800dd04:	183b      	adds	r3, r7, r0
 800dd06:	2200      	movs	r2, #0
 800dd08:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 800dd0a:	4b21      	ldr	r3, [pc, #132]	; (800dd90 <FATFS_LinkDriverEx+0xa4>)
 800dd0c:	7a5b      	ldrb	r3, [r3, #9]
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d136      	bne.n	800dd82 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dd14:	4b1e      	ldr	r3, [pc, #120]	; (800dd90 <FATFS_LinkDriverEx+0xa4>)
 800dd16:	7a5b      	ldrb	r3, [r3, #9]
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	001a      	movs	r2, r3
 800dd1c:	4b1c      	ldr	r3, [pc, #112]	; (800dd90 <FATFS_LinkDriverEx+0xa4>)
 800dd1e:	2100      	movs	r1, #0
 800dd20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dd22:	4b1b      	ldr	r3, [pc, #108]	; (800dd90 <FATFS_LinkDriverEx+0xa4>)
 800dd24:	7a5b      	ldrb	r3, [r3, #9]
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	4a19      	ldr	r2, [pc, #100]	; (800dd90 <FATFS_LinkDriverEx+0xa4>)
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	18d3      	adds	r3, r2, r3
 800dd2e:	3304      	adds	r3, #4
 800dd30:	68fa      	ldr	r2, [r7, #12]
 800dd32:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 800dd34:	4b16      	ldr	r3, [pc, #88]	; (800dd90 <FATFS_LinkDriverEx+0xa4>)
 800dd36:	7a5b      	ldrb	r3, [r3, #9]
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	001a      	movs	r2, r3
 800dd3c:	4b14      	ldr	r3, [pc, #80]	; (800dd90 <FATFS_LinkDriverEx+0xa4>)
 800dd3e:	189b      	adds	r3, r3, r2
 800dd40:	1dfa      	adds	r2, r7, #7
 800dd42:	7812      	ldrb	r2, [r2, #0]
 800dd44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dd46:	4b12      	ldr	r3, [pc, #72]	; (800dd90 <FATFS_LinkDriverEx+0xa4>)
 800dd48:	7a5b      	ldrb	r3, [r3, #9]
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	1c5a      	adds	r2, r3, #1
 800dd4e:	b2d1      	uxtb	r1, r2
 800dd50:	4a0f      	ldr	r2, [pc, #60]	; (800dd90 <FATFS_LinkDriverEx+0xa4>)
 800dd52:	7251      	strb	r1, [r2, #9]
 800dd54:	183a      	adds	r2, r7, r0
 800dd56:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800dd58:	183b      	adds	r3, r7, r0
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	3330      	adds	r3, #48	; 0x30
 800dd5e:	b2da      	uxtb	r2, r3
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	3301      	adds	r3, #1
 800dd68:	223a      	movs	r2, #58	; 0x3a
 800dd6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	3302      	adds	r3, #2
 800dd70:	222f      	movs	r2, #47	; 0x2f
 800dd72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	3303      	adds	r3, #3
 800dd78:	2200      	movs	r2, #0
 800dd7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dd7c:	193b      	adds	r3, r7, r4
 800dd7e:	2200      	movs	r2, #0
 800dd80:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800dd82:	2317      	movs	r3, #23
 800dd84:	18fb      	adds	r3, r7, r3
 800dd86:	781b      	ldrb	r3, [r3, #0]
}
 800dd88:	0018      	movs	r0, r3
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	b007      	add	sp, #28
 800dd8e:	bd90      	pop	{r4, r7, pc}
 800dd90:	20000f74 	.word	0x20000f74

0800dd94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dd9e:	6839      	ldr	r1, [r7, #0]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2200      	movs	r2, #0
 800dda4:	0018      	movs	r0, r3
 800dda6:	f7ff ffa1 	bl	800dcec <FATFS_LinkDriverEx>
 800ddaa:	0003      	movs	r3, r0
}
 800ddac:	0018      	movs	r0, r3
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	b002      	add	sp, #8
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	0002      	movs	r2, r0
 800ddbc:	6039      	str	r1, [r7, #0]
 800ddbe:	1dbb      	adds	r3, r7, #6
 800ddc0:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ddc2:	1dbb      	adds	r3, r7, #6
 800ddc4:	881b      	ldrh	r3, [r3, #0]
 800ddc6:	2b7f      	cmp	r3, #127	; 0x7f
 800ddc8:	d805      	bhi.n	800ddd6 <ff_convert+0x22>
		c = chr;
 800ddca:	230e      	movs	r3, #14
 800ddcc:	18fb      	adds	r3, r7, r3
 800ddce:	1dba      	adds	r2, r7, #6
 800ddd0:	8812      	ldrh	r2, [r2, #0]
 800ddd2:	801a      	strh	r2, [r3, #0]
 800ddd4:	e037      	b.n	800de46 <ff_convert+0x92>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d010      	beq.n	800ddfe <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dddc:	1dbb      	adds	r3, r7, #6
 800ddde:	881b      	ldrh	r3, [r3, #0]
 800dde0:	2bff      	cmp	r3, #255	; 0xff
 800dde2:	d807      	bhi.n	800ddf4 <ff_convert+0x40>
 800dde4:	1dbb      	adds	r3, r7, #6
 800dde6:	881b      	ldrh	r3, [r3, #0]
 800dde8:	3b80      	subs	r3, #128	; 0x80
 800ddea:	001a      	movs	r2, r3
 800ddec:	4b19      	ldr	r3, [pc, #100]	; (800de54 <ff_convert+0xa0>)
 800ddee:	0052      	lsls	r2, r2, #1
 800ddf0:	5ad2      	ldrh	r2, [r2, r3]
 800ddf2:	e000      	b.n	800ddf6 <ff_convert+0x42>
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	230e      	movs	r3, #14
 800ddf8:	18fb      	adds	r3, r7, r3
 800ddfa:	801a      	strh	r2, [r3, #0]
 800ddfc:	e023      	b.n	800de46 <ff_convert+0x92>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ddfe:	230e      	movs	r3, #14
 800de00:	18fb      	adds	r3, r7, r3
 800de02:	2200      	movs	r2, #0
 800de04:	801a      	strh	r2, [r3, #0]
 800de06:	e00e      	b.n	800de26 <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 800de08:	210e      	movs	r1, #14
 800de0a:	187b      	adds	r3, r7, r1
 800de0c:	881a      	ldrh	r2, [r3, #0]
 800de0e:	4b11      	ldr	r3, [pc, #68]	; (800de54 <ff_convert+0xa0>)
 800de10:	0052      	lsls	r2, r2, #1
 800de12:	5ad3      	ldrh	r3, [r2, r3]
 800de14:	1dba      	adds	r2, r7, #6
 800de16:	8812      	ldrh	r2, [r2, #0]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d00a      	beq.n	800de32 <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 800de1c:	187b      	adds	r3, r7, r1
 800de1e:	881a      	ldrh	r2, [r3, #0]
 800de20:	187b      	adds	r3, r7, r1
 800de22:	3201      	adds	r2, #1
 800de24:	801a      	strh	r2, [r3, #0]
 800de26:	230e      	movs	r3, #14
 800de28:	18fb      	adds	r3, r7, r3
 800de2a:	881b      	ldrh	r3, [r3, #0]
 800de2c:	2b7f      	cmp	r3, #127	; 0x7f
 800de2e:	d9eb      	bls.n	800de08 <ff_convert+0x54>
 800de30:	e000      	b.n	800de34 <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 800de32:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 800de34:	210e      	movs	r1, #14
 800de36:	187b      	adds	r3, r7, r1
 800de38:	881b      	ldrh	r3, [r3, #0]
 800de3a:	3380      	adds	r3, #128	; 0x80
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	187b      	adds	r3, r7, r1
 800de40:	21ff      	movs	r1, #255	; 0xff
 800de42:	400a      	ands	r2, r1
 800de44:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 800de46:	230e      	movs	r3, #14
 800de48:	18fb      	adds	r3, r7, r3
 800de4a:	881b      	ldrh	r3, [r3, #0]
}
 800de4c:	0018      	movs	r0, r3
 800de4e:	46bd      	mov	sp, r7
 800de50:	b004      	add	sp, #16
 800de52:	bd80      	pop	{r7, pc}
 800de54:	08013780 	.word	0x08013780

0800de58 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800de58:	b5b0      	push	{r4, r5, r7, lr}
 800de5a:	b086      	sub	sp, #24
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	0002      	movs	r2, r0
 800de60:	1dbb      	adds	r3, r7, #6
 800de62:	801a      	strh	r2, [r3, #0]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800de64:	1dbb      	adds	r3, r7, #6
 800de66:	881a      	ldrh	r2, [r3, #0]
 800de68:	2380      	movs	r3, #128	; 0x80
 800de6a:	015b      	lsls	r3, r3, #5
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d201      	bcs.n	800de74 <ff_wtoupper+0x1c>
 800de70:	4b4d      	ldr	r3, [pc, #308]	; (800dfa8 <ff_wtoupper+0x150>)
 800de72:	e000      	b.n	800de76 <ff_wtoupper+0x1e>
 800de74:	4b4d      	ldr	r3, [pc, #308]	; (800dfac <ff_wtoupper+0x154>)
 800de76:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	1c9a      	adds	r2, r3, #2
 800de7c:	617a      	str	r2, [r7, #20]
 800de7e:	2412      	movs	r4, #18
 800de80:	193a      	adds	r2, r7, r4
 800de82:	881b      	ldrh	r3, [r3, #0]
 800de84:	8013      	strh	r3, [r2, #0]
		if (!bc || chr < bc) break;
 800de86:	193b      	adds	r3, r7, r4
 800de88:	881b      	ldrh	r3, [r3, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d100      	bne.n	800de90 <ff_wtoupper+0x38>
 800de8e:	e084      	b.n	800df9a <ff_wtoupper+0x142>
 800de90:	1dba      	adds	r2, r7, #6
 800de92:	193b      	adds	r3, r7, r4
 800de94:	8812      	ldrh	r2, [r2, #0]
 800de96:	881b      	ldrh	r3, [r3, #0]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d200      	bcs.n	800de9e <ff_wtoupper+0x46>
 800de9c:	e07d      	b.n	800df9a <ff_wtoupper+0x142>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	1c9a      	adds	r2, r3, #2
 800dea2:	617a      	str	r2, [r7, #20]
 800dea4:	2010      	movs	r0, #16
 800dea6:	183a      	adds	r2, r7, r0
 800dea8:	881b      	ldrh	r3, [r3, #0]
 800deaa:	8013      	strh	r3, [r2, #0]
 800deac:	250e      	movs	r5, #14
 800deae:	197b      	adds	r3, r7, r5
 800deb0:	183a      	adds	r2, r7, r0
 800deb2:	8812      	ldrh	r2, [r2, #0]
 800deb4:	0a12      	lsrs	r2, r2, #8
 800deb6:	801a      	strh	r2, [r3, #0]
 800deb8:	183b      	adds	r3, r7, r0
 800deba:	183a      	adds	r2, r7, r0
 800debc:	8812      	ldrh	r2, [r2, #0]
 800debe:	21ff      	movs	r1, #255	; 0xff
 800dec0:	400a      	ands	r2, r1
 800dec2:	801a      	strh	r2, [r3, #0]
		if (chr < bc + nc) {	/* In the block? */
 800dec4:	1dbb      	adds	r3, r7, #6
 800dec6:	881a      	ldrh	r2, [r3, #0]
 800dec8:	193b      	adds	r3, r7, r4
 800deca:	8819      	ldrh	r1, [r3, #0]
 800decc:	183b      	adds	r3, r7, r0
 800dece:	881b      	ldrh	r3, [r3, #0]
 800ded0:	18cb      	adds	r3, r1, r3
 800ded2:	429a      	cmp	r2, r3
 800ded4:	da52      	bge.n	800df7c <ff_wtoupper+0x124>
			switch (cmd) {
 800ded6:	197b      	adds	r3, r7, r5
 800ded8:	881b      	ldrh	r3, [r3, #0]
 800deda:	2b08      	cmp	r3, #8
 800dedc:	d85c      	bhi.n	800df98 <ff_wtoupper+0x140>
 800dede:	009a      	lsls	r2, r3, #2
 800dee0:	4b33      	ldr	r3, [pc, #204]	; (800dfb0 <ff_wtoupper+0x158>)
 800dee2:	18d3      	adds	r3, r2, r3
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	469f      	mov	pc, r3
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800dee8:	1dbb      	adds	r3, r7, #6
 800deea:	881a      	ldrh	r2, [r3, #0]
 800deec:	2312      	movs	r3, #18
 800deee:	18fb      	adds	r3, r7, r3
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	1ad3      	subs	r3, r2, r3
 800def4:	005b      	lsls	r3, r3, #1
 800def6:	697a      	ldr	r2, [r7, #20]
 800def8:	18d2      	adds	r2, r2, r3
 800defa:	1dbb      	adds	r3, r7, #6
 800defc:	8812      	ldrh	r2, [r2, #0]
 800defe:	801a      	strh	r2, [r3, #0]
 800df00:	e03b      	b.n	800df7a <ff_wtoupper+0x122>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800df02:	1dba      	adds	r2, r7, #6
 800df04:	2312      	movs	r3, #18
 800df06:	18fb      	adds	r3, r7, r3
 800df08:	8812      	ldrh	r2, [r2, #0]
 800df0a:	881b      	ldrh	r3, [r3, #0]
 800df0c:	1ad3      	subs	r3, r2, r3
 800df0e:	b29b      	uxth	r3, r3
 800df10:	2201      	movs	r2, #1
 800df12:	4013      	ands	r3, r2
 800df14:	b29a      	uxth	r2, r3
 800df16:	1dbb      	adds	r3, r7, #6
 800df18:	1db9      	adds	r1, r7, #6
 800df1a:	8809      	ldrh	r1, [r1, #0]
 800df1c:	1a8a      	subs	r2, r1, r2
 800df1e:	801a      	strh	r2, [r3, #0]
 800df20:	e02b      	b.n	800df7a <ff_wtoupper+0x122>
			case 2: chr -= 16; break;				/* Shift -16 */
 800df22:	1dbb      	adds	r3, r7, #6
 800df24:	1dba      	adds	r2, r7, #6
 800df26:	8812      	ldrh	r2, [r2, #0]
 800df28:	3a10      	subs	r2, #16
 800df2a:	801a      	strh	r2, [r3, #0]
 800df2c:	e025      	b.n	800df7a <ff_wtoupper+0x122>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800df2e:	1dbb      	adds	r3, r7, #6
 800df30:	1dba      	adds	r2, r7, #6
 800df32:	8812      	ldrh	r2, [r2, #0]
 800df34:	3a20      	subs	r2, #32
 800df36:	801a      	strh	r2, [r3, #0]
 800df38:	e01f      	b.n	800df7a <ff_wtoupper+0x122>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800df3a:	1dbb      	adds	r3, r7, #6
 800df3c:	1dba      	adds	r2, r7, #6
 800df3e:	8812      	ldrh	r2, [r2, #0]
 800df40:	3a30      	subs	r2, #48	; 0x30
 800df42:	801a      	strh	r2, [r3, #0]
 800df44:	e019      	b.n	800df7a <ff_wtoupper+0x122>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800df46:	1dbb      	adds	r3, r7, #6
 800df48:	1dba      	adds	r2, r7, #6
 800df4a:	8812      	ldrh	r2, [r2, #0]
 800df4c:	3a1a      	subs	r2, #26
 800df4e:	801a      	strh	r2, [r3, #0]
 800df50:	e013      	b.n	800df7a <ff_wtoupper+0x122>
			case 6:	chr += 8; break;				/* Shift +8 */
 800df52:	1dbb      	adds	r3, r7, #6
 800df54:	1dba      	adds	r2, r7, #6
 800df56:	8812      	ldrh	r2, [r2, #0]
 800df58:	3208      	adds	r2, #8
 800df5a:	801a      	strh	r2, [r3, #0]
 800df5c:	e00d      	b.n	800df7a <ff_wtoupper+0x122>
			case 7: chr -= 80; break;				/* Shift -80 */
 800df5e:	1dbb      	adds	r3, r7, #6
 800df60:	1dba      	adds	r2, r7, #6
 800df62:	8812      	ldrh	r2, [r2, #0]
 800df64:	3a50      	subs	r2, #80	; 0x50
 800df66:	801a      	strh	r2, [r3, #0]
 800df68:	e007      	b.n	800df7a <ff_wtoupper+0x122>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800df6a:	1dbb      	adds	r3, r7, #6
 800df6c:	1dba      	adds	r2, r7, #6
 800df6e:	8812      	ldrh	r2, [r2, #0]
 800df70:	4910      	ldr	r1, [pc, #64]	; (800dfb4 <ff_wtoupper+0x15c>)
 800df72:	468c      	mov	ip, r1
 800df74:	4462      	add	r2, ip
 800df76:	801a      	strh	r2, [r3, #0]
 800df78:	46c0      	nop			; (mov r8, r8)
			}
			break;
 800df7a:	e00d      	b.n	800df98 <ff_wtoupper+0x140>
		}
		if (!cmd) p += nc;
 800df7c:	230e      	movs	r3, #14
 800df7e:	18fb      	adds	r3, r7, r3
 800df80:	881b      	ldrh	r3, [r3, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d000      	beq.n	800df88 <ff_wtoupper+0x130>
 800df86:	e777      	b.n	800de78 <ff_wtoupper+0x20>
 800df88:	2310      	movs	r3, #16
 800df8a:	18fb      	adds	r3, r7, r3
 800df8c:	881b      	ldrh	r3, [r3, #0]
 800df8e:	005b      	lsls	r3, r3, #1
 800df90:	697a      	ldr	r2, [r7, #20]
 800df92:	18d3      	adds	r3, r2, r3
 800df94:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800df96:	e76f      	b.n	800de78 <ff_wtoupper+0x20>
			break;
 800df98:	46c0      	nop			; (mov r8, r8)
	}

	return chr;
 800df9a:	1dbb      	adds	r3, r7, #6
 800df9c:	881b      	ldrh	r3, [r3, #0]
}
 800df9e:	0018      	movs	r0, r3
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	b006      	add	sp, #24
 800dfa4:	bdb0      	pop	{r4, r5, r7, pc}
 800dfa6:	46c0      	nop			; (mov r8, r8)
 800dfa8:	080138a4 	.word	0x080138a4
 800dfac:	08013a98 	.word	0x08013a98
 800dfb0:	08013880 	.word	0x08013880
 800dfb4:	ffffe3a0 	.word	0xffffe3a0

0800dfb8 <__cvt>:
 800dfb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfba:	001e      	movs	r6, r3
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	0014      	movs	r4, r2
 800dfc0:	b08b      	sub	sp, #44	; 0x2c
 800dfc2:	429e      	cmp	r6, r3
 800dfc4:	da04      	bge.n	800dfd0 <__cvt+0x18>
 800dfc6:	2180      	movs	r1, #128	; 0x80
 800dfc8:	0609      	lsls	r1, r1, #24
 800dfca:	1873      	adds	r3, r6, r1
 800dfcc:	001e      	movs	r6, r3
 800dfce:	232d      	movs	r3, #45	; 0x2d
 800dfd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dfd2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800dfd4:	7013      	strb	r3, [r2, #0]
 800dfd6:	2320      	movs	r3, #32
 800dfd8:	2203      	movs	r2, #3
 800dfda:	439f      	bics	r7, r3
 800dfdc:	2f46      	cmp	r7, #70	; 0x46
 800dfde:	d007      	beq.n	800dff0 <__cvt+0x38>
 800dfe0:	003b      	movs	r3, r7
 800dfe2:	3b45      	subs	r3, #69	; 0x45
 800dfe4:	4259      	negs	r1, r3
 800dfe6:	414b      	adcs	r3, r1
 800dfe8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800dfea:	3a01      	subs	r2, #1
 800dfec:	18cb      	adds	r3, r1, r3
 800dfee:	9310      	str	r3, [sp, #64]	; 0x40
 800dff0:	ab09      	add	r3, sp, #36	; 0x24
 800dff2:	9304      	str	r3, [sp, #16]
 800dff4:	ab08      	add	r3, sp, #32
 800dff6:	9303      	str	r3, [sp, #12]
 800dff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dffa:	9200      	str	r2, [sp, #0]
 800dffc:	9302      	str	r3, [sp, #8]
 800dffe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e000:	0022      	movs	r2, r4
 800e002:	9301      	str	r3, [sp, #4]
 800e004:	0033      	movs	r3, r6
 800e006:	f001 f8f1 	bl	800f1ec <_dtoa_r>
 800e00a:	0005      	movs	r5, r0
 800e00c:	2f47      	cmp	r7, #71	; 0x47
 800e00e:	d102      	bne.n	800e016 <__cvt+0x5e>
 800e010:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e012:	07db      	lsls	r3, r3, #31
 800e014:	d528      	bpl.n	800e068 <__cvt+0xb0>
 800e016:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e018:	18eb      	adds	r3, r5, r3
 800e01a:	9307      	str	r3, [sp, #28]
 800e01c:	2f46      	cmp	r7, #70	; 0x46
 800e01e:	d114      	bne.n	800e04a <__cvt+0x92>
 800e020:	782b      	ldrb	r3, [r5, #0]
 800e022:	2b30      	cmp	r3, #48	; 0x30
 800e024:	d10c      	bne.n	800e040 <__cvt+0x88>
 800e026:	2200      	movs	r2, #0
 800e028:	2300      	movs	r3, #0
 800e02a:	0020      	movs	r0, r4
 800e02c:	0031      	movs	r1, r6
 800e02e:	f7f2 fa0d 	bl	800044c <__aeabi_dcmpeq>
 800e032:	2800      	cmp	r0, #0
 800e034:	d104      	bne.n	800e040 <__cvt+0x88>
 800e036:	2301      	movs	r3, #1
 800e038:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e03a:	1a9b      	subs	r3, r3, r2
 800e03c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e03e:	6013      	str	r3, [r2, #0]
 800e040:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e042:	9a07      	ldr	r2, [sp, #28]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	18d3      	adds	r3, r2, r3
 800e048:	9307      	str	r3, [sp, #28]
 800e04a:	2200      	movs	r2, #0
 800e04c:	2300      	movs	r3, #0
 800e04e:	0020      	movs	r0, r4
 800e050:	0031      	movs	r1, r6
 800e052:	f7f2 f9fb 	bl	800044c <__aeabi_dcmpeq>
 800e056:	2800      	cmp	r0, #0
 800e058:	d001      	beq.n	800e05e <__cvt+0xa6>
 800e05a:	9b07      	ldr	r3, [sp, #28]
 800e05c:	9309      	str	r3, [sp, #36]	; 0x24
 800e05e:	2230      	movs	r2, #48	; 0x30
 800e060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e062:	9907      	ldr	r1, [sp, #28]
 800e064:	428b      	cmp	r3, r1
 800e066:	d306      	bcc.n	800e076 <__cvt+0xbe>
 800e068:	0028      	movs	r0, r5
 800e06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e06c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e06e:	1b5b      	subs	r3, r3, r5
 800e070:	6013      	str	r3, [r2, #0]
 800e072:	b00b      	add	sp, #44	; 0x2c
 800e074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e076:	1c59      	adds	r1, r3, #1
 800e078:	9109      	str	r1, [sp, #36]	; 0x24
 800e07a:	701a      	strb	r2, [r3, #0]
 800e07c:	e7f0      	b.n	800e060 <__cvt+0xa8>

0800e07e <__exponent>:
 800e07e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e080:	1c83      	adds	r3, r0, #2
 800e082:	b087      	sub	sp, #28
 800e084:	9303      	str	r3, [sp, #12]
 800e086:	0005      	movs	r5, r0
 800e088:	000c      	movs	r4, r1
 800e08a:	232b      	movs	r3, #43	; 0x2b
 800e08c:	7002      	strb	r2, [r0, #0]
 800e08e:	2900      	cmp	r1, #0
 800e090:	da01      	bge.n	800e096 <__exponent+0x18>
 800e092:	424c      	negs	r4, r1
 800e094:	3302      	adds	r3, #2
 800e096:	706b      	strb	r3, [r5, #1]
 800e098:	2c09      	cmp	r4, #9
 800e09a:	dd2f      	ble.n	800e0fc <__exponent+0x7e>
 800e09c:	270a      	movs	r7, #10
 800e09e:	ab04      	add	r3, sp, #16
 800e0a0:	1dde      	adds	r6, r3, #7
 800e0a2:	0020      	movs	r0, r4
 800e0a4:	0039      	movs	r1, r7
 800e0a6:	9601      	str	r6, [sp, #4]
 800e0a8:	f7f2 f9ba 	bl	8000420 <__aeabi_idivmod>
 800e0ac:	3e01      	subs	r6, #1
 800e0ae:	3130      	adds	r1, #48	; 0x30
 800e0b0:	0020      	movs	r0, r4
 800e0b2:	7031      	strb	r1, [r6, #0]
 800e0b4:	0039      	movs	r1, r7
 800e0b6:	9402      	str	r4, [sp, #8]
 800e0b8:	f7f2 f8cc 	bl	8000254 <__divsi3>
 800e0bc:	9b02      	ldr	r3, [sp, #8]
 800e0be:	0004      	movs	r4, r0
 800e0c0:	2b63      	cmp	r3, #99	; 0x63
 800e0c2:	dcee      	bgt.n	800e0a2 <__exponent+0x24>
 800e0c4:	9b01      	ldr	r3, [sp, #4]
 800e0c6:	3430      	adds	r4, #48	; 0x30
 800e0c8:	1e9a      	subs	r2, r3, #2
 800e0ca:	0013      	movs	r3, r2
 800e0cc:	9903      	ldr	r1, [sp, #12]
 800e0ce:	7014      	strb	r4, [r2, #0]
 800e0d0:	a804      	add	r0, sp, #16
 800e0d2:	3007      	adds	r0, #7
 800e0d4:	4298      	cmp	r0, r3
 800e0d6:	d80c      	bhi.n	800e0f2 <__exponent+0x74>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	4282      	cmp	r2, r0
 800e0dc:	d804      	bhi.n	800e0e8 <__exponent+0x6a>
 800e0de:	aa04      	add	r2, sp, #16
 800e0e0:	3309      	adds	r3, #9
 800e0e2:	189b      	adds	r3, r3, r2
 800e0e4:	9a01      	ldr	r2, [sp, #4]
 800e0e6:	1a9b      	subs	r3, r3, r2
 800e0e8:	9a03      	ldr	r2, [sp, #12]
 800e0ea:	18d3      	adds	r3, r2, r3
 800e0ec:	1b58      	subs	r0, r3, r5
 800e0ee:	b007      	add	sp, #28
 800e0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0f2:	7818      	ldrb	r0, [r3, #0]
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	7008      	strb	r0, [r1, #0]
 800e0f8:	3101      	adds	r1, #1
 800e0fa:	e7e9      	b.n	800e0d0 <__exponent+0x52>
 800e0fc:	2330      	movs	r3, #48	; 0x30
 800e0fe:	3430      	adds	r4, #48	; 0x30
 800e100:	70ab      	strb	r3, [r5, #2]
 800e102:	70ec      	strb	r4, [r5, #3]
 800e104:	1d2b      	adds	r3, r5, #4
 800e106:	e7f1      	b.n	800e0ec <__exponent+0x6e>

0800e108 <_printf_float>:
 800e108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e10a:	b095      	sub	sp, #84	; 0x54
 800e10c:	000c      	movs	r4, r1
 800e10e:	9208      	str	r2, [sp, #32]
 800e110:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800e112:	9309      	str	r3, [sp, #36]	; 0x24
 800e114:	0007      	movs	r7, r0
 800e116:	f000 ff41 	bl	800ef9c <_localeconv_r>
 800e11a:	6803      	ldr	r3, [r0, #0]
 800e11c:	0018      	movs	r0, r3
 800e11e:	930c      	str	r3, [sp, #48]	; 0x30
 800e120:	f7f1 fff2 	bl	8000108 <strlen>
 800e124:	2300      	movs	r3, #0
 800e126:	9312      	str	r3, [sp, #72]	; 0x48
 800e128:	7e23      	ldrb	r3, [r4, #24]
 800e12a:	2207      	movs	r2, #7
 800e12c:	930a      	str	r3, [sp, #40]	; 0x28
 800e12e:	6823      	ldr	r3, [r4, #0]
 800e130:	900d      	str	r0, [sp, #52]	; 0x34
 800e132:	930b      	str	r3, [sp, #44]	; 0x2c
 800e134:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e136:	682b      	ldr	r3, [r5, #0]
 800e138:	05c9      	lsls	r1, r1, #23
 800e13a:	d547      	bpl.n	800e1cc <_printf_float+0xc4>
 800e13c:	189b      	adds	r3, r3, r2
 800e13e:	4393      	bics	r3, r2
 800e140:	001a      	movs	r2, r3
 800e142:	3208      	adds	r2, #8
 800e144:	602a      	str	r2, [r5, #0]
 800e146:	681e      	ldr	r6, [r3, #0]
 800e148:	685d      	ldr	r5, [r3, #4]
 800e14a:	0032      	movs	r2, r6
 800e14c:	002b      	movs	r3, r5
 800e14e:	64a2      	str	r2, [r4, #72]	; 0x48
 800e150:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e152:	2201      	movs	r2, #1
 800e154:	006b      	lsls	r3, r5, #1
 800e156:	085b      	lsrs	r3, r3, #1
 800e158:	930e      	str	r3, [sp, #56]	; 0x38
 800e15a:	0030      	movs	r0, r6
 800e15c:	4bab      	ldr	r3, [pc, #684]	; (800e40c <_printf_float+0x304>)
 800e15e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e160:	4252      	negs	r2, r2
 800e162:	f7f4 fd19 	bl	8002b98 <__aeabi_dcmpun>
 800e166:	2800      	cmp	r0, #0
 800e168:	d132      	bne.n	800e1d0 <_printf_float+0xc8>
 800e16a:	2201      	movs	r2, #1
 800e16c:	0030      	movs	r0, r6
 800e16e:	4ba7      	ldr	r3, [pc, #668]	; (800e40c <_printf_float+0x304>)
 800e170:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e172:	4252      	negs	r2, r2
 800e174:	f7f2 f97a 	bl	800046c <__aeabi_dcmple>
 800e178:	2800      	cmp	r0, #0
 800e17a:	d129      	bne.n	800e1d0 <_printf_float+0xc8>
 800e17c:	2200      	movs	r2, #0
 800e17e:	2300      	movs	r3, #0
 800e180:	0030      	movs	r0, r6
 800e182:	0029      	movs	r1, r5
 800e184:	f7f2 f968 	bl	8000458 <__aeabi_dcmplt>
 800e188:	2800      	cmp	r0, #0
 800e18a:	d003      	beq.n	800e194 <_printf_float+0x8c>
 800e18c:	0023      	movs	r3, r4
 800e18e:	222d      	movs	r2, #45	; 0x2d
 800e190:	3343      	adds	r3, #67	; 0x43
 800e192:	701a      	strb	r2, [r3, #0]
 800e194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e196:	4d9e      	ldr	r5, [pc, #632]	; (800e410 <_printf_float+0x308>)
 800e198:	2b47      	cmp	r3, #71	; 0x47
 800e19a:	d900      	bls.n	800e19e <_printf_float+0x96>
 800e19c:	4d9d      	ldr	r5, [pc, #628]	; (800e414 <_printf_float+0x30c>)
 800e19e:	2303      	movs	r3, #3
 800e1a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e1a2:	6123      	str	r3, [r4, #16]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	439a      	bics	r2, r3
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	6022      	str	r2, [r4, #0]
 800e1ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1b0:	0021      	movs	r1, r4
 800e1b2:	9300      	str	r3, [sp, #0]
 800e1b4:	0038      	movs	r0, r7
 800e1b6:	9b08      	ldr	r3, [sp, #32]
 800e1b8:	aa13      	add	r2, sp, #76	; 0x4c
 800e1ba:	f000 f9fb 	bl	800e5b4 <_printf_common>
 800e1be:	3001      	adds	r0, #1
 800e1c0:	d000      	beq.n	800e1c4 <_printf_float+0xbc>
 800e1c2:	e0a3      	b.n	800e30c <_printf_float+0x204>
 800e1c4:	2001      	movs	r0, #1
 800e1c6:	4240      	negs	r0, r0
 800e1c8:	b015      	add	sp, #84	; 0x54
 800e1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1cc:	3307      	adds	r3, #7
 800e1ce:	e7b6      	b.n	800e13e <_printf_float+0x36>
 800e1d0:	0032      	movs	r2, r6
 800e1d2:	002b      	movs	r3, r5
 800e1d4:	0030      	movs	r0, r6
 800e1d6:	0029      	movs	r1, r5
 800e1d8:	f7f4 fcde 	bl	8002b98 <__aeabi_dcmpun>
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	d00b      	beq.n	800e1f8 <_printf_float+0xf0>
 800e1e0:	2d00      	cmp	r5, #0
 800e1e2:	da03      	bge.n	800e1ec <_printf_float+0xe4>
 800e1e4:	0023      	movs	r3, r4
 800e1e6:	222d      	movs	r2, #45	; 0x2d
 800e1e8:	3343      	adds	r3, #67	; 0x43
 800e1ea:	701a      	strb	r2, [r3, #0]
 800e1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1ee:	4d8a      	ldr	r5, [pc, #552]	; (800e418 <_printf_float+0x310>)
 800e1f0:	2b47      	cmp	r3, #71	; 0x47
 800e1f2:	d9d4      	bls.n	800e19e <_printf_float+0x96>
 800e1f4:	4d89      	ldr	r5, [pc, #548]	; (800e41c <_printf_float+0x314>)
 800e1f6:	e7d2      	b.n	800e19e <_printf_float+0x96>
 800e1f8:	2220      	movs	r2, #32
 800e1fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e1fc:	6863      	ldr	r3, [r4, #4]
 800e1fe:	4391      	bics	r1, r2
 800e200:	910e      	str	r1, [sp, #56]	; 0x38
 800e202:	1c5a      	adds	r2, r3, #1
 800e204:	d14a      	bne.n	800e29c <_printf_float+0x194>
 800e206:	3307      	adds	r3, #7
 800e208:	6063      	str	r3, [r4, #4]
 800e20a:	2380      	movs	r3, #128	; 0x80
 800e20c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e20e:	00db      	lsls	r3, r3, #3
 800e210:	4313      	orrs	r3, r2
 800e212:	2200      	movs	r2, #0
 800e214:	9206      	str	r2, [sp, #24]
 800e216:	aa12      	add	r2, sp, #72	; 0x48
 800e218:	9205      	str	r2, [sp, #20]
 800e21a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e21c:	6023      	str	r3, [r4, #0]
 800e21e:	9204      	str	r2, [sp, #16]
 800e220:	aa11      	add	r2, sp, #68	; 0x44
 800e222:	9203      	str	r2, [sp, #12]
 800e224:	2223      	movs	r2, #35	; 0x23
 800e226:	a908      	add	r1, sp, #32
 800e228:	9301      	str	r3, [sp, #4]
 800e22a:	6863      	ldr	r3, [r4, #4]
 800e22c:	1852      	adds	r2, r2, r1
 800e22e:	9202      	str	r2, [sp, #8]
 800e230:	9300      	str	r3, [sp, #0]
 800e232:	0032      	movs	r2, r6
 800e234:	002b      	movs	r3, r5
 800e236:	0038      	movs	r0, r7
 800e238:	f7ff febe 	bl	800dfb8 <__cvt>
 800e23c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e23e:	0005      	movs	r5, r0
 800e240:	2b47      	cmp	r3, #71	; 0x47
 800e242:	d109      	bne.n	800e258 <_printf_float+0x150>
 800e244:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e246:	1cda      	adds	r2, r3, #3
 800e248:	db02      	blt.n	800e250 <_printf_float+0x148>
 800e24a:	6862      	ldr	r2, [r4, #4]
 800e24c:	4293      	cmp	r3, r2
 800e24e:	dd49      	ble.n	800e2e4 <_printf_float+0x1dc>
 800e250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e252:	3b02      	subs	r3, #2
 800e254:	b2db      	uxtb	r3, r3
 800e256:	930a      	str	r3, [sp, #40]	; 0x28
 800e258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e25a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e25c:	2b65      	cmp	r3, #101	; 0x65
 800e25e:	d824      	bhi.n	800e2aa <_printf_float+0x1a2>
 800e260:	0020      	movs	r0, r4
 800e262:	001a      	movs	r2, r3
 800e264:	3901      	subs	r1, #1
 800e266:	3050      	adds	r0, #80	; 0x50
 800e268:	9111      	str	r1, [sp, #68]	; 0x44
 800e26a:	f7ff ff08 	bl	800e07e <__exponent>
 800e26e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e270:	900b      	str	r0, [sp, #44]	; 0x2c
 800e272:	1813      	adds	r3, r2, r0
 800e274:	6123      	str	r3, [r4, #16]
 800e276:	2a01      	cmp	r2, #1
 800e278:	dc02      	bgt.n	800e280 <_printf_float+0x178>
 800e27a:	6822      	ldr	r2, [r4, #0]
 800e27c:	07d2      	lsls	r2, r2, #31
 800e27e:	d501      	bpl.n	800e284 <_printf_float+0x17c>
 800e280:	3301      	adds	r3, #1
 800e282:	6123      	str	r3, [r4, #16]
 800e284:	2323      	movs	r3, #35	; 0x23
 800e286:	aa08      	add	r2, sp, #32
 800e288:	189b      	adds	r3, r3, r2
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d100      	bne.n	800e292 <_printf_float+0x18a>
 800e290:	e78d      	b.n	800e1ae <_printf_float+0xa6>
 800e292:	0023      	movs	r3, r4
 800e294:	222d      	movs	r2, #45	; 0x2d
 800e296:	3343      	adds	r3, #67	; 0x43
 800e298:	701a      	strb	r2, [r3, #0]
 800e29a:	e788      	b.n	800e1ae <_printf_float+0xa6>
 800e29c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e29e:	2a47      	cmp	r2, #71	; 0x47
 800e2a0:	d1b3      	bne.n	800e20a <_printf_float+0x102>
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d1b1      	bne.n	800e20a <_printf_float+0x102>
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	e7ae      	b.n	800e208 <_printf_float+0x100>
 800e2aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2ac:	2b66      	cmp	r3, #102	; 0x66
 800e2ae:	d11b      	bne.n	800e2e8 <_printf_float+0x1e0>
 800e2b0:	6863      	ldr	r3, [r4, #4]
 800e2b2:	2900      	cmp	r1, #0
 800e2b4:	dd09      	ble.n	800e2ca <_printf_float+0x1c2>
 800e2b6:	6121      	str	r1, [r4, #16]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d102      	bne.n	800e2c2 <_printf_float+0x1ba>
 800e2bc:	6822      	ldr	r2, [r4, #0]
 800e2be:	07d2      	lsls	r2, r2, #31
 800e2c0:	d50b      	bpl.n	800e2da <_printf_float+0x1d2>
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	185b      	adds	r3, r3, r1
 800e2c6:	6123      	str	r3, [r4, #16]
 800e2c8:	e007      	b.n	800e2da <_printf_float+0x1d2>
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d103      	bne.n	800e2d6 <_printf_float+0x1ce>
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	6821      	ldr	r1, [r4, #0]
 800e2d2:	4211      	tst	r1, r2
 800e2d4:	d000      	beq.n	800e2d8 <_printf_float+0x1d0>
 800e2d6:	1c9a      	adds	r2, r3, #2
 800e2d8:	6122      	str	r2, [r4, #16]
 800e2da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2dc:	65a3      	str	r3, [r4, #88]	; 0x58
 800e2de:	2300      	movs	r3, #0
 800e2e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2e2:	e7cf      	b.n	800e284 <_printf_float+0x17c>
 800e2e4:	2367      	movs	r3, #103	; 0x67
 800e2e6:	930a      	str	r3, [sp, #40]	; 0x28
 800e2e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e2ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e2ec:	4299      	cmp	r1, r3
 800e2ee:	db06      	blt.n	800e2fe <_printf_float+0x1f6>
 800e2f0:	6823      	ldr	r3, [r4, #0]
 800e2f2:	6121      	str	r1, [r4, #16]
 800e2f4:	07db      	lsls	r3, r3, #31
 800e2f6:	d5f0      	bpl.n	800e2da <_printf_float+0x1d2>
 800e2f8:	3101      	adds	r1, #1
 800e2fa:	6121      	str	r1, [r4, #16]
 800e2fc:	e7ed      	b.n	800e2da <_printf_float+0x1d2>
 800e2fe:	2201      	movs	r2, #1
 800e300:	2900      	cmp	r1, #0
 800e302:	dc01      	bgt.n	800e308 <_printf_float+0x200>
 800e304:	1892      	adds	r2, r2, r2
 800e306:	1a52      	subs	r2, r2, r1
 800e308:	189b      	adds	r3, r3, r2
 800e30a:	e7dc      	b.n	800e2c6 <_printf_float+0x1be>
 800e30c:	6822      	ldr	r2, [r4, #0]
 800e30e:	0553      	lsls	r3, r2, #21
 800e310:	d408      	bmi.n	800e324 <_printf_float+0x21c>
 800e312:	6923      	ldr	r3, [r4, #16]
 800e314:	002a      	movs	r2, r5
 800e316:	0038      	movs	r0, r7
 800e318:	9908      	ldr	r1, [sp, #32]
 800e31a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e31c:	47a8      	blx	r5
 800e31e:	3001      	adds	r0, #1
 800e320:	d12a      	bne.n	800e378 <_printf_float+0x270>
 800e322:	e74f      	b.n	800e1c4 <_printf_float+0xbc>
 800e324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e326:	2b65      	cmp	r3, #101	; 0x65
 800e328:	d800      	bhi.n	800e32c <_printf_float+0x224>
 800e32a:	e0ec      	b.n	800e506 <_printf_float+0x3fe>
 800e32c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800e32e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e330:	2200      	movs	r2, #0
 800e332:	2300      	movs	r3, #0
 800e334:	f7f2 f88a 	bl	800044c <__aeabi_dcmpeq>
 800e338:	2800      	cmp	r0, #0
 800e33a:	d034      	beq.n	800e3a6 <_printf_float+0x29e>
 800e33c:	2301      	movs	r3, #1
 800e33e:	0038      	movs	r0, r7
 800e340:	4a37      	ldr	r2, [pc, #220]	; (800e420 <_printf_float+0x318>)
 800e342:	9908      	ldr	r1, [sp, #32]
 800e344:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e346:	47a8      	blx	r5
 800e348:	3001      	adds	r0, #1
 800e34a:	d100      	bne.n	800e34e <_printf_float+0x246>
 800e34c:	e73a      	b.n	800e1c4 <_printf_float+0xbc>
 800e34e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e350:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e352:	429a      	cmp	r2, r3
 800e354:	db02      	blt.n	800e35c <_printf_float+0x254>
 800e356:	6823      	ldr	r3, [r4, #0]
 800e358:	07db      	lsls	r3, r3, #31
 800e35a:	d50d      	bpl.n	800e378 <_printf_float+0x270>
 800e35c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e35e:	0038      	movs	r0, r7
 800e360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e362:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e364:	9908      	ldr	r1, [sp, #32]
 800e366:	47a8      	blx	r5
 800e368:	2500      	movs	r5, #0
 800e36a:	3001      	adds	r0, #1
 800e36c:	d100      	bne.n	800e370 <_printf_float+0x268>
 800e36e:	e729      	b.n	800e1c4 <_printf_float+0xbc>
 800e370:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e372:	3b01      	subs	r3, #1
 800e374:	42ab      	cmp	r3, r5
 800e376:	dc0a      	bgt.n	800e38e <_printf_float+0x286>
 800e378:	6823      	ldr	r3, [r4, #0]
 800e37a:	079b      	lsls	r3, r3, #30
 800e37c:	d500      	bpl.n	800e380 <_printf_float+0x278>
 800e37e:	e116      	b.n	800e5ae <_printf_float+0x4a6>
 800e380:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e382:	68e0      	ldr	r0, [r4, #12]
 800e384:	4298      	cmp	r0, r3
 800e386:	db00      	blt.n	800e38a <_printf_float+0x282>
 800e388:	e71e      	b.n	800e1c8 <_printf_float+0xc0>
 800e38a:	0018      	movs	r0, r3
 800e38c:	e71c      	b.n	800e1c8 <_printf_float+0xc0>
 800e38e:	0022      	movs	r2, r4
 800e390:	2301      	movs	r3, #1
 800e392:	0038      	movs	r0, r7
 800e394:	9908      	ldr	r1, [sp, #32]
 800e396:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e398:	321a      	adds	r2, #26
 800e39a:	47b0      	blx	r6
 800e39c:	3001      	adds	r0, #1
 800e39e:	d100      	bne.n	800e3a2 <_printf_float+0x29a>
 800e3a0:	e710      	b.n	800e1c4 <_printf_float+0xbc>
 800e3a2:	3501      	adds	r5, #1
 800e3a4:	e7e4      	b.n	800e370 <_printf_float+0x268>
 800e3a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	dc3b      	bgt.n	800e424 <_printf_float+0x31c>
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	0038      	movs	r0, r7
 800e3b0:	4a1b      	ldr	r2, [pc, #108]	; (800e420 <_printf_float+0x318>)
 800e3b2:	9908      	ldr	r1, [sp, #32]
 800e3b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e3b6:	47b0      	blx	r6
 800e3b8:	3001      	adds	r0, #1
 800e3ba:	d100      	bne.n	800e3be <_printf_float+0x2b6>
 800e3bc:	e702      	b.n	800e1c4 <_printf_float+0xbc>
 800e3be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e3c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	d102      	bne.n	800e3cc <_printf_float+0x2c4>
 800e3c6:	6823      	ldr	r3, [r4, #0]
 800e3c8:	07db      	lsls	r3, r3, #31
 800e3ca:	d5d5      	bpl.n	800e378 <_printf_float+0x270>
 800e3cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3ce:	0038      	movs	r0, r7
 800e3d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e3d2:	9908      	ldr	r1, [sp, #32]
 800e3d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e3d6:	47b0      	blx	r6
 800e3d8:	2300      	movs	r3, #0
 800e3da:	3001      	adds	r0, #1
 800e3dc:	d100      	bne.n	800e3e0 <_printf_float+0x2d8>
 800e3de:	e6f1      	b.n	800e1c4 <_printf_float+0xbc>
 800e3e0:	930a      	str	r3, [sp, #40]	; 0x28
 800e3e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e3e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3e6:	425b      	negs	r3, r3
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	dc01      	bgt.n	800e3f0 <_printf_float+0x2e8>
 800e3ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e3ee:	e791      	b.n	800e314 <_printf_float+0x20c>
 800e3f0:	0022      	movs	r2, r4
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	0038      	movs	r0, r7
 800e3f6:	9908      	ldr	r1, [sp, #32]
 800e3f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e3fa:	321a      	adds	r2, #26
 800e3fc:	47b0      	blx	r6
 800e3fe:	3001      	adds	r0, #1
 800e400:	d100      	bne.n	800e404 <_printf_float+0x2fc>
 800e402:	e6df      	b.n	800e1c4 <_printf_float+0xbc>
 800e404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e406:	3301      	adds	r3, #1
 800e408:	e7ea      	b.n	800e3e0 <_printf_float+0x2d8>
 800e40a:	46c0      	nop			; (mov r8, r8)
 800e40c:	7fefffff 	.word	0x7fefffff
 800e410:	08013c55 	.word	0x08013c55
 800e414:	08013c59 	.word	0x08013c59
 800e418:	08013c5d 	.word	0x08013c5d
 800e41c:	08013c61 	.word	0x08013c61
 800e420:	08013c65 	.word	0x08013c65
 800e424:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e426:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e428:	920a      	str	r2, [sp, #40]	; 0x28
 800e42a:	429a      	cmp	r2, r3
 800e42c:	dd00      	ble.n	800e430 <_printf_float+0x328>
 800e42e:	930a      	str	r3, [sp, #40]	; 0x28
 800e430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e432:	2b00      	cmp	r3, #0
 800e434:	dc3d      	bgt.n	800e4b2 <_printf_float+0x3aa>
 800e436:	2300      	movs	r3, #0
 800e438:	930e      	str	r3, [sp, #56]	; 0x38
 800e43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e43c:	43db      	mvns	r3, r3
 800e43e:	17db      	asrs	r3, r3, #31
 800e440:	930f      	str	r3, [sp, #60]	; 0x3c
 800e442:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e446:	930b      	str	r3, [sp, #44]	; 0x2c
 800e448:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e44a:	4013      	ands	r3, r2
 800e44c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e44e:	1ad3      	subs	r3, r2, r3
 800e450:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e452:	4293      	cmp	r3, r2
 800e454:	dc36      	bgt.n	800e4c4 <_printf_float+0x3bc>
 800e456:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e458:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e45a:	429a      	cmp	r2, r3
 800e45c:	db40      	blt.n	800e4e0 <_printf_float+0x3d8>
 800e45e:	6823      	ldr	r3, [r4, #0]
 800e460:	07db      	lsls	r3, r3, #31
 800e462:	d43d      	bmi.n	800e4e0 <_printf_float+0x3d8>
 800e464:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800e466:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e46a:	1af3      	subs	r3, r6, r3
 800e46c:	1ab6      	subs	r6, r6, r2
 800e46e:	429e      	cmp	r6, r3
 800e470:	dd00      	ble.n	800e474 <_printf_float+0x36c>
 800e472:	001e      	movs	r6, r3
 800e474:	2e00      	cmp	r6, #0
 800e476:	dc3c      	bgt.n	800e4f2 <_printf_float+0x3ea>
 800e478:	2300      	movs	r3, #0
 800e47a:	930a      	str	r3, [sp, #40]	; 0x28
 800e47c:	43f3      	mvns	r3, r6
 800e47e:	17db      	asrs	r3, r3, #31
 800e480:	930b      	str	r3, [sp, #44]	; 0x2c
 800e482:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e484:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e486:	1a9b      	subs	r3, r3, r2
 800e488:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e48a:	4032      	ands	r2, r6
 800e48c:	1a9b      	subs	r3, r3, r2
 800e48e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e490:	4293      	cmp	r3, r2
 800e492:	dc00      	bgt.n	800e496 <_printf_float+0x38e>
 800e494:	e770      	b.n	800e378 <_printf_float+0x270>
 800e496:	0022      	movs	r2, r4
 800e498:	2301      	movs	r3, #1
 800e49a:	0038      	movs	r0, r7
 800e49c:	9908      	ldr	r1, [sp, #32]
 800e49e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e4a0:	321a      	adds	r2, #26
 800e4a2:	47a8      	blx	r5
 800e4a4:	3001      	adds	r0, #1
 800e4a6:	d100      	bne.n	800e4aa <_printf_float+0x3a2>
 800e4a8:	e68c      	b.n	800e1c4 <_printf_float+0xbc>
 800e4aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	930a      	str	r3, [sp, #40]	; 0x28
 800e4b0:	e7e7      	b.n	800e482 <_printf_float+0x37a>
 800e4b2:	002a      	movs	r2, r5
 800e4b4:	0038      	movs	r0, r7
 800e4b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4b8:	9908      	ldr	r1, [sp, #32]
 800e4ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e4bc:	47b0      	blx	r6
 800e4be:	3001      	adds	r0, #1
 800e4c0:	d1b9      	bne.n	800e436 <_printf_float+0x32e>
 800e4c2:	e67f      	b.n	800e1c4 <_printf_float+0xbc>
 800e4c4:	0022      	movs	r2, r4
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	0038      	movs	r0, r7
 800e4ca:	9908      	ldr	r1, [sp, #32]
 800e4cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e4ce:	321a      	adds	r2, #26
 800e4d0:	47b0      	blx	r6
 800e4d2:	3001      	adds	r0, #1
 800e4d4:	d100      	bne.n	800e4d8 <_printf_float+0x3d0>
 800e4d6:	e675      	b.n	800e1c4 <_printf_float+0xbc>
 800e4d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4da:	3301      	adds	r3, #1
 800e4dc:	930e      	str	r3, [sp, #56]	; 0x38
 800e4de:	e7b0      	b.n	800e442 <_printf_float+0x33a>
 800e4e0:	0038      	movs	r0, r7
 800e4e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e4e6:	9908      	ldr	r1, [sp, #32]
 800e4e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e4ea:	47b0      	blx	r6
 800e4ec:	3001      	adds	r0, #1
 800e4ee:	d1b9      	bne.n	800e464 <_printf_float+0x35c>
 800e4f0:	e668      	b.n	800e1c4 <_printf_float+0xbc>
 800e4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4f4:	0038      	movs	r0, r7
 800e4f6:	18ea      	adds	r2, r5, r3
 800e4f8:	9908      	ldr	r1, [sp, #32]
 800e4fa:	0033      	movs	r3, r6
 800e4fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e4fe:	47a8      	blx	r5
 800e500:	3001      	adds	r0, #1
 800e502:	d1b9      	bne.n	800e478 <_printf_float+0x370>
 800e504:	e65e      	b.n	800e1c4 <_printf_float+0xbc>
 800e506:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e508:	2b01      	cmp	r3, #1
 800e50a:	dc02      	bgt.n	800e512 <_printf_float+0x40a>
 800e50c:	2301      	movs	r3, #1
 800e50e:	421a      	tst	r2, r3
 800e510:	d03a      	beq.n	800e588 <_printf_float+0x480>
 800e512:	2301      	movs	r3, #1
 800e514:	002a      	movs	r2, r5
 800e516:	0038      	movs	r0, r7
 800e518:	9908      	ldr	r1, [sp, #32]
 800e51a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e51c:	47b0      	blx	r6
 800e51e:	3001      	adds	r0, #1
 800e520:	d100      	bne.n	800e524 <_printf_float+0x41c>
 800e522:	e64f      	b.n	800e1c4 <_printf_float+0xbc>
 800e524:	0038      	movs	r0, r7
 800e526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e528:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e52a:	9908      	ldr	r1, [sp, #32]
 800e52c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e52e:	47b0      	blx	r6
 800e530:	3001      	adds	r0, #1
 800e532:	d100      	bne.n	800e536 <_printf_float+0x42e>
 800e534:	e646      	b.n	800e1c4 <_printf_float+0xbc>
 800e536:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800e538:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e53a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e53c:	2200      	movs	r2, #0
 800e53e:	001e      	movs	r6, r3
 800e540:	2300      	movs	r3, #0
 800e542:	f7f1 ff83 	bl	800044c <__aeabi_dcmpeq>
 800e546:	2800      	cmp	r0, #0
 800e548:	d11c      	bne.n	800e584 <_printf_float+0x47c>
 800e54a:	0033      	movs	r3, r6
 800e54c:	1c6a      	adds	r2, r5, #1
 800e54e:	3b01      	subs	r3, #1
 800e550:	0038      	movs	r0, r7
 800e552:	9908      	ldr	r1, [sp, #32]
 800e554:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e556:	47a8      	blx	r5
 800e558:	3001      	adds	r0, #1
 800e55a:	d10f      	bne.n	800e57c <_printf_float+0x474>
 800e55c:	e632      	b.n	800e1c4 <_printf_float+0xbc>
 800e55e:	0022      	movs	r2, r4
 800e560:	2301      	movs	r3, #1
 800e562:	0038      	movs	r0, r7
 800e564:	9908      	ldr	r1, [sp, #32]
 800e566:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e568:	321a      	adds	r2, #26
 800e56a:	47b0      	blx	r6
 800e56c:	3001      	adds	r0, #1
 800e56e:	d100      	bne.n	800e572 <_printf_float+0x46a>
 800e570:	e628      	b.n	800e1c4 <_printf_float+0xbc>
 800e572:	3501      	adds	r5, #1
 800e574:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e576:	3b01      	subs	r3, #1
 800e578:	42ab      	cmp	r3, r5
 800e57a:	dcf0      	bgt.n	800e55e <_printf_float+0x456>
 800e57c:	0022      	movs	r2, r4
 800e57e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e580:	3250      	adds	r2, #80	; 0x50
 800e582:	e6c8      	b.n	800e316 <_printf_float+0x20e>
 800e584:	2500      	movs	r5, #0
 800e586:	e7f5      	b.n	800e574 <_printf_float+0x46c>
 800e588:	002a      	movs	r2, r5
 800e58a:	e7e1      	b.n	800e550 <_printf_float+0x448>
 800e58c:	0022      	movs	r2, r4
 800e58e:	2301      	movs	r3, #1
 800e590:	0038      	movs	r0, r7
 800e592:	9908      	ldr	r1, [sp, #32]
 800e594:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e596:	3219      	adds	r2, #25
 800e598:	47b0      	blx	r6
 800e59a:	3001      	adds	r0, #1
 800e59c:	d100      	bne.n	800e5a0 <_printf_float+0x498>
 800e59e:	e611      	b.n	800e1c4 <_printf_float+0xbc>
 800e5a0:	3501      	adds	r5, #1
 800e5a2:	68e3      	ldr	r3, [r4, #12]
 800e5a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e5a6:	1a9b      	subs	r3, r3, r2
 800e5a8:	42ab      	cmp	r3, r5
 800e5aa:	dcef      	bgt.n	800e58c <_printf_float+0x484>
 800e5ac:	e6e8      	b.n	800e380 <_printf_float+0x278>
 800e5ae:	2500      	movs	r5, #0
 800e5b0:	e7f7      	b.n	800e5a2 <_printf_float+0x49a>
 800e5b2:	46c0      	nop			; (mov r8, r8)

0800e5b4 <_printf_common>:
 800e5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5b6:	0016      	movs	r6, r2
 800e5b8:	9301      	str	r3, [sp, #4]
 800e5ba:	688a      	ldr	r2, [r1, #8]
 800e5bc:	690b      	ldr	r3, [r1, #16]
 800e5be:	000c      	movs	r4, r1
 800e5c0:	9000      	str	r0, [sp, #0]
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	da00      	bge.n	800e5c8 <_printf_common+0x14>
 800e5c6:	0013      	movs	r3, r2
 800e5c8:	0022      	movs	r2, r4
 800e5ca:	6033      	str	r3, [r6, #0]
 800e5cc:	3243      	adds	r2, #67	; 0x43
 800e5ce:	7812      	ldrb	r2, [r2, #0]
 800e5d0:	2a00      	cmp	r2, #0
 800e5d2:	d001      	beq.n	800e5d8 <_printf_common+0x24>
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	6033      	str	r3, [r6, #0]
 800e5d8:	6823      	ldr	r3, [r4, #0]
 800e5da:	069b      	lsls	r3, r3, #26
 800e5dc:	d502      	bpl.n	800e5e4 <_printf_common+0x30>
 800e5de:	6833      	ldr	r3, [r6, #0]
 800e5e0:	3302      	adds	r3, #2
 800e5e2:	6033      	str	r3, [r6, #0]
 800e5e4:	6822      	ldr	r2, [r4, #0]
 800e5e6:	2306      	movs	r3, #6
 800e5e8:	0015      	movs	r5, r2
 800e5ea:	401d      	ands	r5, r3
 800e5ec:	421a      	tst	r2, r3
 800e5ee:	d027      	beq.n	800e640 <_printf_common+0x8c>
 800e5f0:	0023      	movs	r3, r4
 800e5f2:	3343      	adds	r3, #67	; 0x43
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	1e5a      	subs	r2, r3, #1
 800e5f8:	4193      	sbcs	r3, r2
 800e5fa:	6822      	ldr	r2, [r4, #0]
 800e5fc:	0692      	lsls	r2, r2, #26
 800e5fe:	d430      	bmi.n	800e662 <_printf_common+0xae>
 800e600:	0022      	movs	r2, r4
 800e602:	9901      	ldr	r1, [sp, #4]
 800e604:	9800      	ldr	r0, [sp, #0]
 800e606:	9d08      	ldr	r5, [sp, #32]
 800e608:	3243      	adds	r2, #67	; 0x43
 800e60a:	47a8      	blx	r5
 800e60c:	3001      	adds	r0, #1
 800e60e:	d025      	beq.n	800e65c <_printf_common+0xa8>
 800e610:	2206      	movs	r2, #6
 800e612:	6823      	ldr	r3, [r4, #0]
 800e614:	2500      	movs	r5, #0
 800e616:	4013      	ands	r3, r2
 800e618:	2b04      	cmp	r3, #4
 800e61a:	d105      	bne.n	800e628 <_printf_common+0x74>
 800e61c:	6833      	ldr	r3, [r6, #0]
 800e61e:	68e5      	ldr	r5, [r4, #12]
 800e620:	1aed      	subs	r5, r5, r3
 800e622:	43eb      	mvns	r3, r5
 800e624:	17db      	asrs	r3, r3, #31
 800e626:	401d      	ands	r5, r3
 800e628:	68a3      	ldr	r3, [r4, #8]
 800e62a:	6922      	ldr	r2, [r4, #16]
 800e62c:	4293      	cmp	r3, r2
 800e62e:	dd01      	ble.n	800e634 <_printf_common+0x80>
 800e630:	1a9b      	subs	r3, r3, r2
 800e632:	18ed      	adds	r5, r5, r3
 800e634:	2600      	movs	r6, #0
 800e636:	42b5      	cmp	r5, r6
 800e638:	d120      	bne.n	800e67c <_printf_common+0xc8>
 800e63a:	2000      	movs	r0, #0
 800e63c:	e010      	b.n	800e660 <_printf_common+0xac>
 800e63e:	3501      	adds	r5, #1
 800e640:	68e3      	ldr	r3, [r4, #12]
 800e642:	6832      	ldr	r2, [r6, #0]
 800e644:	1a9b      	subs	r3, r3, r2
 800e646:	42ab      	cmp	r3, r5
 800e648:	ddd2      	ble.n	800e5f0 <_printf_common+0x3c>
 800e64a:	0022      	movs	r2, r4
 800e64c:	2301      	movs	r3, #1
 800e64e:	9901      	ldr	r1, [sp, #4]
 800e650:	9800      	ldr	r0, [sp, #0]
 800e652:	9f08      	ldr	r7, [sp, #32]
 800e654:	3219      	adds	r2, #25
 800e656:	47b8      	blx	r7
 800e658:	3001      	adds	r0, #1
 800e65a:	d1f0      	bne.n	800e63e <_printf_common+0x8a>
 800e65c:	2001      	movs	r0, #1
 800e65e:	4240      	negs	r0, r0
 800e660:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e662:	2030      	movs	r0, #48	; 0x30
 800e664:	18e1      	adds	r1, r4, r3
 800e666:	3143      	adds	r1, #67	; 0x43
 800e668:	7008      	strb	r0, [r1, #0]
 800e66a:	0021      	movs	r1, r4
 800e66c:	1c5a      	adds	r2, r3, #1
 800e66e:	3145      	adds	r1, #69	; 0x45
 800e670:	7809      	ldrb	r1, [r1, #0]
 800e672:	18a2      	adds	r2, r4, r2
 800e674:	3243      	adds	r2, #67	; 0x43
 800e676:	3302      	adds	r3, #2
 800e678:	7011      	strb	r1, [r2, #0]
 800e67a:	e7c1      	b.n	800e600 <_printf_common+0x4c>
 800e67c:	0022      	movs	r2, r4
 800e67e:	2301      	movs	r3, #1
 800e680:	9901      	ldr	r1, [sp, #4]
 800e682:	9800      	ldr	r0, [sp, #0]
 800e684:	9f08      	ldr	r7, [sp, #32]
 800e686:	321a      	adds	r2, #26
 800e688:	47b8      	blx	r7
 800e68a:	3001      	adds	r0, #1
 800e68c:	d0e6      	beq.n	800e65c <_printf_common+0xa8>
 800e68e:	3601      	adds	r6, #1
 800e690:	e7d1      	b.n	800e636 <_printf_common+0x82>
	...

0800e694 <_printf_i>:
 800e694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e696:	b08b      	sub	sp, #44	; 0x2c
 800e698:	9206      	str	r2, [sp, #24]
 800e69a:	000a      	movs	r2, r1
 800e69c:	3243      	adds	r2, #67	; 0x43
 800e69e:	9307      	str	r3, [sp, #28]
 800e6a0:	9005      	str	r0, [sp, #20]
 800e6a2:	9204      	str	r2, [sp, #16]
 800e6a4:	7e0a      	ldrb	r2, [r1, #24]
 800e6a6:	000c      	movs	r4, r1
 800e6a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e6aa:	2a78      	cmp	r2, #120	; 0x78
 800e6ac:	d809      	bhi.n	800e6c2 <_printf_i+0x2e>
 800e6ae:	2a62      	cmp	r2, #98	; 0x62
 800e6b0:	d80b      	bhi.n	800e6ca <_printf_i+0x36>
 800e6b2:	2a00      	cmp	r2, #0
 800e6b4:	d100      	bne.n	800e6b8 <_printf_i+0x24>
 800e6b6:	e0be      	b.n	800e836 <_printf_i+0x1a2>
 800e6b8:	497c      	ldr	r1, [pc, #496]	; (800e8ac <_printf_i+0x218>)
 800e6ba:	9103      	str	r1, [sp, #12]
 800e6bc:	2a58      	cmp	r2, #88	; 0x58
 800e6be:	d100      	bne.n	800e6c2 <_printf_i+0x2e>
 800e6c0:	e093      	b.n	800e7ea <_printf_i+0x156>
 800e6c2:	0026      	movs	r6, r4
 800e6c4:	3642      	adds	r6, #66	; 0x42
 800e6c6:	7032      	strb	r2, [r6, #0]
 800e6c8:	e022      	b.n	800e710 <_printf_i+0x7c>
 800e6ca:	0010      	movs	r0, r2
 800e6cc:	3863      	subs	r0, #99	; 0x63
 800e6ce:	2815      	cmp	r0, #21
 800e6d0:	d8f7      	bhi.n	800e6c2 <_printf_i+0x2e>
 800e6d2:	f7f1 fd2b 	bl	800012c <__gnu_thumb1_case_shi>
 800e6d6:	0016      	.short	0x0016
 800e6d8:	fff6001f 	.word	0xfff6001f
 800e6dc:	fff6fff6 	.word	0xfff6fff6
 800e6e0:	001ffff6 	.word	0x001ffff6
 800e6e4:	fff6fff6 	.word	0xfff6fff6
 800e6e8:	fff6fff6 	.word	0xfff6fff6
 800e6ec:	003600a3 	.word	0x003600a3
 800e6f0:	fff60083 	.word	0xfff60083
 800e6f4:	00b4fff6 	.word	0x00b4fff6
 800e6f8:	0036fff6 	.word	0x0036fff6
 800e6fc:	fff6fff6 	.word	0xfff6fff6
 800e700:	0087      	.short	0x0087
 800e702:	0026      	movs	r6, r4
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	3642      	adds	r6, #66	; 0x42
 800e708:	1d11      	adds	r1, r2, #4
 800e70a:	6019      	str	r1, [r3, #0]
 800e70c:	6813      	ldr	r3, [r2, #0]
 800e70e:	7033      	strb	r3, [r6, #0]
 800e710:	2301      	movs	r3, #1
 800e712:	e0a2      	b.n	800e85a <_printf_i+0x1c6>
 800e714:	6818      	ldr	r0, [r3, #0]
 800e716:	6809      	ldr	r1, [r1, #0]
 800e718:	1d02      	adds	r2, r0, #4
 800e71a:	060d      	lsls	r5, r1, #24
 800e71c:	d50b      	bpl.n	800e736 <_printf_i+0xa2>
 800e71e:	6805      	ldr	r5, [r0, #0]
 800e720:	601a      	str	r2, [r3, #0]
 800e722:	2d00      	cmp	r5, #0
 800e724:	da03      	bge.n	800e72e <_printf_i+0x9a>
 800e726:	232d      	movs	r3, #45	; 0x2d
 800e728:	9a04      	ldr	r2, [sp, #16]
 800e72a:	426d      	negs	r5, r5
 800e72c:	7013      	strb	r3, [r2, #0]
 800e72e:	4b5f      	ldr	r3, [pc, #380]	; (800e8ac <_printf_i+0x218>)
 800e730:	270a      	movs	r7, #10
 800e732:	9303      	str	r3, [sp, #12]
 800e734:	e01b      	b.n	800e76e <_printf_i+0xda>
 800e736:	6805      	ldr	r5, [r0, #0]
 800e738:	601a      	str	r2, [r3, #0]
 800e73a:	0649      	lsls	r1, r1, #25
 800e73c:	d5f1      	bpl.n	800e722 <_printf_i+0x8e>
 800e73e:	b22d      	sxth	r5, r5
 800e740:	e7ef      	b.n	800e722 <_printf_i+0x8e>
 800e742:	680d      	ldr	r5, [r1, #0]
 800e744:	6819      	ldr	r1, [r3, #0]
 800e746:	1d08      	adds	r0, r1, #4
 800e748:	6018      	str	r0, [r3, #0]
 800e74a:	062e      	lsls	r6, r5, #24
 800e74c:	d501      	bpl.n	800e752 <_printf_i+0xbe>
 800e74e:	680d      	ldr	r5, [r1, #0]
 800e750:	e003      	b.n	800e75a <_printf_i+0xc6>
 800e752:	066d      	lsls	r5, r5, #25
 800e754:	d5fb      	bpl.n	800e74e <_printf_i+0xba>
 800e756:	680d      	ldr	r5, [r1, #0]
 800e758:	b2ad      	uxth	r5, r5
 800e75a:	4b54      	ldr	r3, [pc, #336]	; (800e8ac <_printf_i+0x218>)
 800e75c:	2708      	movs	r7, #8
 800e75e:	9303      	str	r3, [sp, #12]
 800e760:	2a6f      	cmp	r2, #111	; 0x6f
 800e762:	d000      	beq.n	800e766 <_printf_i+0xd2>
 800e764:	3702      	adds	r7, #2
 800e766:	0023      	movs	r3, r4
 800e768:	2200      	movs	r2, #0
 800e76a:	3343      	adds	r3, #67	; 0x43
 800e76c:	701a      	strb	r2, [r3, #0]
 800e76e:	6863      	ldr	r3, [r4, #4]
 800e770:	60a3      	str	r3, [r4, #8]
 800e772:	2b00      	cmp	r3, #0
 800e774:	db03      	blt.n	800e77e <_printf_i+0xea>
 800e776:	2104      	movs	r1, #4
 800e778:	6822      	ldr	r2, [r4, #0]
 800e77a:	438a      	bics	r2, r1
 800e77c:	6022      	str	r2, [r4, #0]
 800e77e:	2d00      	cmp	r5, #0
 800e780:	d102      	bne.n	800e788 <_printf_i+0xf4>
 800e782:	9e04      	ldr	r6, [sp, #16]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d00c      	beq.n	800e7a2 <_printf_i+0x10e>
 800e788:	9e04      	ldr	r6, [sp, #16]
 800e78a:	0028      	movs	r0, r5
 800e78c:	0039      	movs	r1, r7
 800e78e:	f7f1 fd5d 	bl	800024c <__aeabi_uidivmod>
 800e792:	9b03      	ldr	r3, [sp, #12]
 800e794:	3e01      	subs	r6, #1
 800e796:	5c5b      	ldrb	r3, [r3, r1]
 800e798:	7033      	strb	r3, [r6, #0]
 800e79a:	002b      	movs	r3, r5
 800e79c:	0005      	movs	r5, r0
 800e79e:	429f      	cmp	r7, r3
 800e7a0:	d9f3      	bls.n	800e78a <_printf_i+0xf6>
 800e7a2:	2f08      	cmp	r7, #8
 800e7a4:	d109      	bne.n	800e7ba <_printf_i+0x126>
 800e7a6:	6823      	ldr	r3, [r4, #0]
 800e7a8:	07db      	lsls	r3, r3, #31
 800e7aa:	d506      	bpl.n	800e7ba <_printf_i+0x126>
 800e7ac:	6862      	ldr	r2, [r4, #4]
 800e7ae:	6923      	ldr	r3, [r4, #16]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	dc02      	bgt.n	800e7ba <_printf_i+0x126>
 800e7b4:	2330      	movs	r3, #48	; 0x30
 800e7b6:	3e01      	subs	r6, #1
 800e7b8:	7033      	strb	r3, [r6, #0]
 800e7ba:	9b04      	ldr	r3, [sp, #16]
 800e7bc:	1b9b      	subs	r3, r3, r6
 800e7be:	6123      	str	r3, [r4, #16]
 800e7c0:	9b07      	ldr	r3, [sp, #28]
 800e7c2:	0021      	movs	r1, r4
 800e7c4:	9300      	str	r3, [sp, #0]
 800e7c6:	9805      	ldr	r0, [sp, #20]
 800e7c8:	9b06      	ldr	r3, [sp, #24]
 800e7ca:	aa09      	add	r2, sp, #36	; 0x24
 800e7cc:	f7ff fef2 	bl	800e5b4 <_printf_common>
 800e7d0:	3001      	adds	r0, #1
 800e7d2:	d147      	bne.n	800e864 <_printf_i+0x1d0>
 800e7d4:	2001      	movs	r0, #1
 800e7d6:	4240      	negs	r0, r0
 800e7d8:	b00b      	add	sp, #44	; 0x2c
 800e7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7dc:	2220      	movs	r2, #32
 800e7de:	6809      	ldr	r1, [r1, #0]
 800e7e0:	430a      	orrs	r2, r1
 800e7e2:	6022      	str	r2, [r4, #0]
 800e7e4:	2278      	movs	r2, #120	; 0x78
 800e7e6:	4932      	ldr	r1, [pc, #200]	; (800e8b0 <_printf_i+0x21c>)
 800e7e8:	9103      	str	r1, [sp, #12]
 800e7ea:	0021      	movs	r1, r4
 800e7ec:	3145      	adds	r1, #69	; 0x45
 800e7ee:	700a      	strb	r2, [r1, #0]
 800e7f0:	6819      	ldr	r1, [r3, #0]
 800e7f2:	6822      	ldr	r2, [r4, #0]
 800e7f4:	c920      	ldmia	r1!, {r5}
 800e7f6:	0610      	lsls	r0, r2, #24
 800e7f8:	d402      	bmi.n	800e800 <_printf_i+0x16c>
 800e7fa:	0650      	lsls	r0, r2, #25
 800e7fc:	d500      	bpl.n	800e800 <_printf_i+0x16c>
 800e7fe:	b2ad      	uxth	r5, r5
 800e800:	6019      	str	r1, [r3, #0]
 800e802:	07d3      	lsls	r3, r2, #31
 800e804:	d502      	bpl.n	800e80c <_printf_i+0x178>
 800e806:	2320      	movs	r3, #32
 800e808:	4313      	orrs	r3, r2
 800e80a:	6023      	str	r3, [r4, #0]
 800e80c:	2710      	movs	r7, #16
 800e80e:	2d00      	cmp	r5, #0
 800e810:	d1a9      	bne.n	800e766 <_printf_i+0xd2>
 800e812:	2220      	movs	r2, #32
 800e814:	6823      	ldr	r3, [r4, #0]
 800e816:	4393      	bics	r3, r2
 800e818:	6023      	str	r3, [r4, #0]
 800e81a:	e7a4      	b.n	800e766 <_printf_i+0xd2>
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	680d      	ldr	r5, [r1, #0]
 800e820:	1d10      	adds	r0, r2, #4
 800e822:	6949      	ldr	r1, [r1, #20]
 800e824:	6018      	str	r0, [r3, #0]
 800e826:	6813      	ldr	r3, [r2, #0]
 800e828:	062e      	lsls	r6, r5, #24
 800e82a:	d501      	bpl.n	800e830 <_printf_i+0x19c>
 800e82c:	6019      	str	r1, [r3, #0]
 800e82e:	e002      	b.n	800e836 <_printf_i+0x1a2>
 800e830:	066d      	lsls	r5, r5, #25
 800e832:	d5fb      	bpl.n	800e82c <_printf_i+0x198>
 800e834:	8019      	strh	r1, [r3, #0]
 800e836:	2300      	movs	r3, #0
 800e838:	9e04      	ldr	r6, [sp, #16]
 800e83a:	6123      	str	r3, [r4, #16]
 800e83c:	e7c0      	b.n	800e7c0 <_printf_i+0x12c>
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	1d11      	adds	r1, r2, #4
 800e842:	6019      	str	r1, [r3, #0]
 800e844:	6816      	ldr	r6, [r2, #0]
 800e846:	2100      	movs	r1, #0
 800e848:	0030      	movs	r0, r6
 800e84a:	6862      	ldr	r2, [r4, #4]
 800e84c:	f000 fc25 	bl	800f09a <memchr>
 800e850:	2800      	cmp	r0, #0
 800e852:	d001      	beq.n	800e858 <_printf_i+0x1c4>
 800e854:	1b80      	subs	r0, r0, r6
 800e856:	6060      	str	r0, [r4, #4]
 800e858:	6863      	ldr	r3, [r4, #4]
 800e85a:	6123      	str	r3, [r4, #16]
 800e85c:	2300      	movs	r3, #0
 800e85e:	9a04      	ldr	r2, [sp, #16]
 800e860:	7013      	strb	r3, [r2, #0]
 800e862:	e7ad      	b.n	800e7c0 <_printf_i+0x12c>
 800e864:	0032      	movs	r2, r6
 800e866:	6923      	ldr	r3, [r4, #16]
 800e868:	9906      	ldr	r1, [sp, #24]
 800e86a:	9805      	ldr	r0, [sp, #20]
 800e86c:	9d07      	ldr	r5, [sp, #28]
 800e86e:	47a8      	blx	r5
 800e870:	3001      	adds	r0, #1
 800e872:	d0af      	beq.n	800e7d4 <_printf_i+0x140>
 800e874:	6823      	ldr	r3, [r4, #0]
 800e876:	079b      	lsls	r3, r3, #30
 800e878:	d415      	bmi.n	800e8a6 <_printf_i+0x212>
 800e87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e87c:	68e0      	ldr	r0, [r4, #12]
 800e87e:	4298      	cmp	r0, r3
 800e880:	daaa      	bge.n	800e7d8 <_printf_i+0x144>
 800e882:	0018      	movs	r0, r3
 800e884:	e7a8      	b.n	800e7d8 <_printf_i+0x144>
 800e886:	0022      	movs	r2, r4
 800e888:	2301      	movs	r3, #1
 800e88a:	9906      	ldr	r1, [sp, #24]
 800e88c:	9805      	ldr	r0, [sp, #20]
 800e88e:	9e07      	ldr	r6, [sp, #28]
 800e890:	3219      	adds	r2, #25
 800e892:	47b0      	blx	r6
 800e894:	3001      	adds	r0, #1
 800e896:	d09d      	beq.n	800e7d4 <_printf_i+0x140>
 800e898:	3501      	adds	r5, #1
 800e89a:	68e3      	ldr	r3, [r4, #12]
 800e89c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e89e:	1a9b      	subs	r3, r3, r2
 800e8a0:	42ab      	cmp	r3, r5
 800e8a2:	dcf0      	bgt.n	800e886 <_printf_i+0x1f2>
 800e8a4:	e7e9      	b.n	800e87a <_printf_i+0x1e6>
 800e8a6:	2500      	movs	r5, #0
 800e8a8:	e7f7      	b.n	800e89a <_printf_i+0x206>
 800e8aa:	46c0      	nop			; (mov r8, r8)
 800e8ac:	08013c67 	.word	0x08013c67
 800e8b0:	08013c78 	.word	0x08013c78

0800e8b4 <_scanf_float>:
 800e8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8b6:	b08b      	sub	sp, #44	; 0x2c
 800e8b8:	0016      	movs	r6, r2
 800e8ba:	9002      	str	r0, [sp, #8]
 800e8bc:	22ae      	movs	r2, #174	; 0xae
 800e8be:	2000      	movs	r0, #0
 800e8c0:	9307      	str	r3, [sp, #28]
 800e8c2:	688b      	ldr	r3, [r1, #8]
 800e8c4:	000f      	movs	r7, r1
 800e8c6:	1e59      	subs	r1, r3, #1
 800e8c8:	0052      	lsls	r2, r2, #1
 800e8ca:	9006      	str	r0, [sp, #24]
 800e8cc:	4291      	cmp	r1, r2
 800e8ce:	d905      	bls.n	800e8dc <_scanf_float+0x28>
 800e8d0:	3b5e      	subs	r3, #94	; 0x5e
 800e8d2:	3bff      	subs	r3, #255	; 0xff
 800e8d4:	9306      	str	r3, [sp, #24]
 800e8d6:	235e      	movs	r3, #94	; 0x5e
 800e8d8:	33ff      	adds	r3, #255	; 0xff
 800e8da:	60bb      	str	r3, [r7, #8]
 800e8dc:	23f0      	movs	r3, #240	; 0xf0
 800e8de:	683a      	ldr	r2, [r7, #0]
 800e8e0:	00db      	lsls	r3, r3, #3
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	603b      	str	r3, [r7, #0]
 800e8e6:	003b      	movs	r3, r7
 800e8e8:	2400      	movs	r4, #0
 800e8ea:	331c      	adds	r3, #28
 800e8ec:	001d      	movs	r5, r3
 800e8ee:	9304      	str	r3, [sp, #16]
 800e8f0:	9403      	str	r4, [sp, #12]
 800e8f2:	9409      	str	r4, [sp, #36]	; 0x24
 800e8f4:	9408      	str	r4, [sp, #32]
 800e8f6:	9401      	str	r4, [sp, #4]
 800e8f8:	9405      	str	r4, [sp, #20]
 800e8fa:	68ba      	ldr	r2, [r7, #8]
 800e8fc:	2a00      	cmp	r2, #0
 800e8fe:	d00a      	beq.n	800e916 <_scanf_float+0x62>
 800e900:	6833      	ldr	r3, [r6, #0]
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	2b4e      	cmp	r3, #78	; 0x4e
 800e906:	d844      	bhi.n	800e992 <_scanf_float+0xde>
 800e908:	0018      	movs	r0, r3
 800e90a:	2b40      	cmp	r3, #64	; 0x40
 800e90c:	d82c      	bhi.n	800e968 <_scanf_float+0xb4>
 800e90e:	382b      	subs	r0, #43	; 0x2b
 800e910:	b2c1      	uxtb	r1, r0
 800e912:	290e      	cmp	r1, #14
 800e914:	d92a      	bls.n	800e96c <_scanf_float+0xb8>
 800e916:	9b01      	ldr	r3, [sp, #4]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d003      	beq.n	800e924 <_scanf_float+0x70>
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	4aa3      	ldr	r2, [pc, #652]	; (800ebac <_scanf_float+0x2f8>)
 800e920:	4013      	ands	r3, r2
 800e922:	603b      	str	r3, [r7, #0]
 800e924:	9b03      	ldr	r3, [sp, #12]
 800e926:	3b01      	subs	r3, #1
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d900      	bls.n	800e92e <_scanf_float+0x7a>
 800e92c:	e0f9      	b.n	800eb22 <_scanf_float+0x26e>
 800e92e:	24be      	movs	r4, #190	; 0xbe
 800e930:	0064      	lsls	r4, r4, #1
 800e932:	9b04      	ldr	r3, [sp, #16]
 800e934:	429d      	cmp	r5, r3
 800e936:	d900      	bls.n	800e93a <_scanf_float+0x86>
 800e938:	e0e9      	b.n	800eb0e <_scanf_float+0x25a>
 800e93a:	2301      	movs	r3, #1
 800e93c:	9303      	str	r3, [sp, #12]
 800e93e:	e183      	b.n	800ec48 <_scanf_float+0x394>
 800e940:	0018      	movs	r0, r3
 800e942:	3861      	subs	r0, #97	; 0x61
 800e944:	280d      	cmp	r0, #13
 800e946:	d8e6      	bhi.n	800e916 <_scanf_float+0x62>
 800e948:	f7f1 fbf0 	bl	800012c <__gnu_thumb1_case_shi>
 800e94c:	ffe50083 	.word	0xffe50083
 800e950:	ffe5ffe5 	.word	0xffe5ffe5
 800e954:	00a200b6 	.word	0x00a200b6
 800e958:	ffe5ffe5 	.word	0xffe5ffe5
 800e95c:	ffe50089 	.word	0xffe50089
 800e960:	ffe5ffe5 	.word	0xffe5ffe5
 800e964:	0065ffe5 	.word	0x0065ffe5
 800e968:	3841      	subs	r0, #65	; 0x41
 800e96a:	e7eb      	b.n	800e944 <_scanf_float+0x90>
 800e96c:	280e      	cmp	r0, #14
 800e96e:	d8d2      	bhi.n	800e916 <_scanf_float+0x62>
 800e970:	f7f1 fbdc 	bl	800012c <__gnu_thumb1_case_shi>
 800e974:	ffd1004b 	.word	0xffd1004b
 800e978:	0098004b 	.word	0x0098004b
 800e97c:	0020ffd1 	.word	0x0020ffd1
 800e980:	00400040 	.word	0x00400040
 800e984:	00400040 	.word	0x00400040
 800e988:	00400040 	.word	0x00400040
 800e98c:	00400040 	.word	0x00400040
 800e990:	0040      	.short	0x0040
 800e992:	2b6e      	cmp	r3, #110	; 0x6e
 800e994:	d809      	bhi.n	800e9aa <_scanf_float+0xf6>
 800e996:	2b60      	cmp	r3, #96	; 0x60
 800e998:	d8d2      	bhi.n	800e940 <_scanf_float+0x8c>
 800e99a:	2b54      	cmp	r3, #84	; 0x54
 800e99c:	d07d      	beq.n	800ea9a <_scanf_float+0x1e6>
 800e99e:	2b59      	cmp	r3, #89	; 0x59
 800e9a0:	d1b9      	bne.n	800e916 <_scanf_float+0x62>
 800e9a2:	2c07      	cmp	r4, #7
 800e9a4:	d1b7      	bne.n	800e916 <_scanf_float+0x62>
 800e9a6:	2408      	movs	r4, #8
 800e9a8:	e02c      	b.n	800ea04 <_scanf_float+0x150>
 800e9aa:	2b74      	cmp	r3, #116	; 0x74
 800e9ac:	d075      	beq.n	800ea9a <_scanf_float+0x1e6>
 800e9ae:	2b79      	cmp	r3, #121	; 0x79
 800e9b0:	d0f7      	beq.n	800e9a2 <_scanf_float+0xee>
 800e9b2:	e7b0      	b.n	800e916 <_scanf_float+0x62>
 800e9b4:	6839      	ldr	r1, [r7, #0]
 800e9b6:	05c8      	lsls	r0, r1, #23
 800e9b8:	d51c      	bpl.n	800e9f4 <_scanf_float+0x140>
 800e9ba:	2380      	movs	r3, #128	; 0x80
 800e9bc:	4399      	bics	r1, r3
 800e9be:	9b01      	ldr	r3, [sp, #4]
 800e9c0:	6039      	str	r1, [r7, #0]
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	9301      	str	r3, [sp, #4]
 800e9c6:	9b06      	ldr	r3, [sp, #24]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d003      	beq.n	800e9d4 <_scanf_float+0x120>
 800e9cc:	3b01      	subs	r3, #1
 800e9ce:	3201      	adds	r2, #1
 800e9d0:	9306      	str	r3, [sp, #24]
 800e9d2:	60ba      	str	r2, [r7, #8]
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	3b01      	subs	r3, #1
 800e9d8:	60bb      	str	r3, [r7, #8]
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	3301      	adds	r3, #1
 800e9de:	613b      	str	r3, [r7, #16]
 800e9e0:	6873      	ldr	r3, [r6, #4]
 800e9e2:	3b01      	subs	r3, #1
 800e9e4:	6073      	str	r3, [r6, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	dc00      	bgt.n	800e9ec <_scanf_float+0x138>
 800e9ea:	e086      	b.n	800eafa <_scanf_float+0x246>
 800e9ec:	6833      	ldr	r3, [r6, #0]
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	6033      	str	r3, [r6, #0]
 800e9f2:	e782      	b.n	800e8fa <_scanf_float+0x46>
 800e9f4:	9a03      	ldr	r2, [sp, #12]
 800e9f6:	1912      	adds	r2, r2, r4
 800e9f8:	2a00      	cmp	r2, #0
 800e9fa:	d18c      	bne.n	800e916 <_scanf_float+0x62>
 800e9fc:	683a      	ldr	r2, [r7, #0]
 800e9fe:	496c      	ldr	r1, [pc, #432]	; (800ebb0 <_scanf_float+0x2fc>)
 800ea00:	400a      	ands	r2, r1
 800ea02:	603a      	str	r2, [r7, #0]
 800ea04:	702b      	strb	r3, [r5, #0]
 800ea06:	3501      	adds	r5, #1
 800ea08:	e7e4      	b.n	800e9d4 <_scanf_float+0x120>
 800ea0a:	2180      	movs	r1, #128	; 0x80
 800ea0c:	683a      	ldr	r2, [r7, #0]
 800ea0e:	420a      	tst	r2, r1
 800ea10:	d081      	beq.n	800e916 <_scanf_float+0x62>
 800ea12:	438a      	bics	r2, r1
 800ea14:	e7f5      	b.n	800ea02 <_scanf_float+0x14e>
 800ea16:	9a03      	ldr	r2, [sp, #12]
 800ea18:	2a00      	cmp	r2, #0
 800ea1a:	d10f      	bne.n	800ea3c <_scanf_float+0x188>
 800ea1c:	9a01      	ldr	r2, [sp, #4]
 800ea1e:	2a00      	cmp	r2, #0
 800ea20:	d10f      	bne.n	800ea42 <_scanf_float+0x18e>
 800ea22:	683a      	ldr	r2, [r7, #0]
 800ea24:	21e0      	movs	r1, #224	; 0xe0
 800ea26:	0010      	movs	r0, r2
 800ea28:	00c9      	lsls	r1, r1, #3
 800ea2a:	4008      	ands	r0, r1
 800ea2c:	4288      	cmp	r0, r1
 800ea2e:	d108      	bne.n	800ea42 <_scanf_float+0x18e>
 800ea30:	4960      	ldr	r1, [pc, #384]	; (800ebb4 <_scanf_float+0x300>)
 800ea32:	400a      	ands	r2, r1
 800ea34:	603a      	str	r2, [r7, #0]
 800ea36:	2201      	movs	r2, #1
 800ea38:	9203      	str	r2, [sp, #12]
 800ea3a:	e7e3      	b.n	800ea04 <_scanf_float+0x150>
 800ea3c:	9a03      	ldr	r2, [sp, #12]
 800ea3e:	2a02      	cmp	r2, #2
 800ea40:	d059      	beq.n	800eaf6 <_scanf_float+0x242>
 800ea42:	2c01      	cmp	r4, #1
 800ea44:	d002      	beq.n	800ea4c <_scanf_float+0x198>
 800ea46:	2c04      	cmp	r4, #4
 800ea48:	d000      	beq.n	800ea4c <_scanf_float+0x198>
 800ea4a:	e764      	b.n	800e916 <_scanf_float+0x62>
 800ea4c:	3401      	adds	r4, #1
 800ea4e:	b2e4      	uxtb	r4, r4
 800ea50:	e7d8      	b.n	800ea04 <_scanf_float+0x150>
 800ea52:	9a03      	ldr	r2, [sp, #12]
 800ea54:	2a01      	cmp	r2, #1
 800ea56:	d000      	beq.n	800ea5a <_scanf_float+0x1a6>
 800ea58:	e75d      	b.n	800e916 <_scanf_float+0x62>
 800ea5a:	2202      	movs	r2, #2
 800ea5c:	e7ec      	b.n	800ea38 <_scanf_float+0x184>
 800ea5e:	2c00      	cmp	r4, #0
 800ea60:	d110      	bne.n	800ea84 <_scanf_float+0x1d0>
 800ea62:	9a01      	ldr	r2, [sp, #4]
 800ea64:	2a00      	cmp	r2, #0
 800ea66:	d000      	beq.n	800ea6a <_scanf_float+0x1b6>
 800ea68:	e758      	b.n	800e91c <_scanf_float+0x68>
 800ea6a:	683a      	ldr	r2, [r7, #0]
 800ea6c:	21e0      	movs	r1, #224	; 0xe0
 800ea6e:	0010      	movs	r0, r2
 800ea70:	00c9      	lsls	r1, r1, #3
 800ea72:	4008      	ands	r0, r1
 800ea74:	4288      	cmp	r0, r1
 800ea76:	d000      	beq.n	800ea7a <_scanf_float+0x1c6>
 800ea78:	e754      	b.n	800e924 <_scanf_float+0x70>
 800ea7a:	494e      	ldr	r1, [pc, #312]	; (800ebb4 <_scanf_float+0x300>)
 800ea7c:	3401      	adds	r4, #1
 800ea7e:	400a      	ands	r2, r1
 800ea80:	603a      	str	r2, [r7, #0]
 800ea82:	e7bf      	b.n	800ea04 <_scanf_float+0x150>
 800ea84:	21fd      	movs	r1, #253	; 0xfd
 800ea86:	1ee2      	subs	r2, r4, #3
 800ea88:	420a      	tst	r2, r1
 800ea8a:	d000      	beq.n	800ea8e <_scanf_float+0x1da>
 800ea8c:	e743      	b.n	800e916 <_scanf_float+0x62>
 800ea8e:	e7dd      	b.n	800ea4c <_scanf_float+0x198>
 800ea90:	2c02      	cmp	r4, #2
 800ea92:	d000      	beq.n	800ea96 <_scanf_float+0x1e2>
 800ea94:	e73f      	b.n	800e916 <_scanf_float+0x62>
 800ea96:	2403      	movs	r4, #3
 800ea98:	e7b4      	b.n	800ea04 <_scanf_float+0x150>
 800ea9a:	2c06      	cmp	r4, #6
 800ea9c:	d000      	beq.n	800eaa0 <_scanf_float+0x1ec>
 800ea9e:	e73a      	b.n	800e916 <_scanf_float+0x62>
 800eaa0:	2407      	movs	r4, #7
 800eaa2:	e7af      	b.n	800ea04 <_scanf_float+0x150>
 800eaa4:	683a      	ldr	r2, [r7, #0]
 800eaa6:	0591      	lsls	r1, r2, #22
 800eaa8:	d400      	bmi.n	800eaac <_scanf_float+0x1f8>
 800eaaa:	e734      	b.n	800e916 <_scanf_float+0x62>
 800eaac:	4942      	ldr	r1, [pc, #264]	; (800ebb8 <_scanf_float+0x304>)
 800eaae:	400a      	ands	r2, r1
 800eab0:	603a      	str	r2, [r7, #0]
 800eab2:	9a01      	ldr	r2, [sp, #4]
 800eab4:	9205      	str	r2, [sp, #20]
 800eab6:	e7a5      	b.n	800ea04 <_scanf_float+0x150>
 800eab8:	21a0      	movs	r1, #160	; 0xa0
 800eaba:	2080      	movs	r0, #128	; 0x80
 800eabc:	683a      	ldr	r2, [r7, #0]
 800eabe:	00c9      	lsls	r1, r1, #3
 800eac0:	4011      	ands	r1, r2
 800eac2:	00c0      	lsls	r0, r0, #3
 800eac4:	4281      	cmp	r1, r0
 800eac6:	d006      	beq.n	800ead6 <_scanf_float+0x222>
 800eac8:	4202      	tst	r2, r0
 800eaca:	d100      	bne.n	800eace <_scanf_float+0x21a>
 800eacc:	e723      	b.n	800e916 <_scanf_float+0x62>
 800eace:	9901      	ldr	r1, [sp, #4]
 800ead0:	2900      	cmp	r1, #0
 800ead2:	d100      	bne.n	800ead6 <_scanf_float+0x222>
 800ead4:	e726      	b.n	800e924 <_scanf_float+0x70>
 800ead6:	0591      	lsls	r1, r2, #22
 800ead8:	d404      	bmi.n	800eae4 <_scanf_float+0x230>
 800eada:	9901      	ldr	r1, [sp, #4]
 800eadc:	9805      	ldr	r0, [sp, #20]
 800eade:	9509      	str	r5, [sp, #36]	; 0x24
 800eae0:	1a09      	subs	r1, r1, r0
 800eae2:	9108      	str	r1, [sp, #32]
 800eae4:	4933      	ldr	r1, [pc, #204]	; (800ebb4 <_scanf_float+0x300>)
 800eae6:	400a      	ands	r2, r1
 800eae8:	21c0      	movs	r1, #192	; 0xc0
 800eaea:	0049      	lsls	r1, r1, #1
 800eaec:	430a      	orrs	r2, r1
 800eaee:	603a      	str	r2, [r7, #0]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	9201      	str	r2, [sp, #4]
 800eaf4:	e786      	b.n	800ea04 <_scanf_float+0x150>
 800eaf6:	2203      	movs	r2, #3
 800eaf8:	e79e      	b.n	800ea38 <_scanf_float+0x184>
 800eafa:	23c0      	movs	r3, #192	; 0xc0
 800eafc:	005b      	lsls	r3, r3, #1
 800eafe:	0031      	movs	r1, r6
 800eb00:	58fb      	ldr	r3, [r7, r3]
 800eb02:	9802      	ldr	r0, [sp, #8]
 800eb04:	4798      	blx	r3
 800eb06:	2800      	cmp	r0, #0
 800eb08:	d100      	bne.n	800eb0c <_scanf_float+0x258>
 800eb0a:	e6f6      	b.n	800e8fa <_scanf_float+0x46>
 800eb0c:	e703      	b.n	800e916 <_scanf_float+0x62>
 800eb0e:	3d01      	subs	r5, #1
 800eb10:	593b      	ldr	r3, [r7, r4]
 800eb12:	0032      	movs	r2, r6
 800eb14:	7829      	ldrb	r1, [r5, #0]
 800eb16:	9802      	ldr	r0, [sp, #8]
 800eb18:	4798      	blx	r3
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	613b      	str	r3, [r7, #16]
 800eb20:	e707      	b.n	800e932 <_scanf_float+0x7e>
 800eb22:	1e63      	subs	r3, r4, #1
 800eb24:	2b06      	cmp	r3, #6
 800eb26:	d80e      	bhi.n	800eb46 <_scanf_float+0x292>
 800eb28:	9503      	str	r5, [sp, #12]
 800eb2a:	2c02      	cmp	r4, #2
 800eb2c:	d920      	bls.n	800eb70 <_scanf_float+0x2bc>
 800eb2e:	1b63      	subs	r3, r4, r5
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	9306      	str	r3, [sp, #24]
 800eb34:	9b03      	ldr	r3, [sp, #12]
 800eb36:	9a06      	ldr	r2, [sp, #24]
 800eb38:	189b      	adds	r3, r3, r2
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	2b03      	cmp	r3, #3
 800eb3e:	d827      	bhi.n	800eb90 <_scanf_float+0x2dc>
 800eb40:	3c03      	subs	r4, #3
 800eb42:	b2e4      	uxtb	r4, r4
 800eb44:	1b2d      	subs	r5, r5, r4
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	05da      	lsls	r2, r3, #23
 800eb4a:	d552      	bpl.n	800ebf2 <_scanf_float+0x33e>
 800eb4c:	055b      	lsls	r3, r3, #21
 800eb4e:	d535      	bpl.n	800ebbc <_scanf_float+0x308>
 800eb50:	24be      	movs	r4, #190	; 0xbe
 800eb52:	0064      	lsls	r4, r4, #1
 800eb54:	9b04      	ldr	r3, [sp, #16]
 800eb56:	429d      	cmp	r5, r3
 800eb58:	d800      	bhi.n	800eb5c <_scanf_float+0x2a8>
 800eb5a:	e6ee      	b.n	800e93a <_scanf_float+0x86>
 800eb5c:	3d01      	subs	r5, #1
 800eb5e:	593b      	ldr	r3, [r7, r4]
 800eb60:	0032      	movs	r2, r6
 800eb62:	7829      	ldrb	r1, [r5, #0]
 800eb64:	9802      	ldr	r0, [sp, #8]
 800eb66:	4798      	blx	r3
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	3b01      	subs	r3, #1
 800eb6c:	613b      	str	r3, [r7, #16]
 800eb6e:	e7f1      	b.n	800eb54 <_scanf_float+0x2a0>
 800eb70:	24be      	movs	r4, #190	; 0xbe
 800eb72:	0064      	lsls	r4, r4, #1
 800eb74:	9b04      	ldr	r3, [sp, #16]
 800eb76:	429d      	cmp	r5, r3
 800eb78:	d800      	bhi.n	800eb7c <_scanf_float+0x2c8>
 800eb7a:	e6de      	b.n	800e93a <_scanf_float+0x86>
 800eb7c:	3d01      	subs	r5, #1
 800eb7e:	593b      	ldr	r3, [r7, r4]
 800eb80:	0032      	movs	r2, r6
 800eb82:	7829      	ldrb	r1, [r5, #0]
 800eb84:	9802      	ldr	r0, [sp, #8]
 800eb86:	4798      	blx	r3
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	3b01      	subs	r3, #1
 800eb8c:	613b      	str	r3, [r7, #16]
 800eb8e:	e7f1      	b.n	800eb74 <_scanf_float+0x2c0>
 800eb90:	9b03      	ldr	r3, [sp, #12]
 800eb92:	0032      	movs	r2, r6
 800eb94:	3b01      	subs	r3, #1
 800eb96:	7819      	ldrb	r1, [r3, #0]
 800eb98:	9303      	str	r3, [sp, #12]
 800eb9a:	23be      	movs	r3, #190	; 0xbe
 800eb9c:	005b      	lsls	r3, r3, #1
 800eb9e:	58fb      	ldr	r3, [r7, r3]
 800eba0:	9802      	ldr	r0, [sp, #8]
 800eba2:	4798      	blx	r3
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	3b01      	subs	r3, #1
 800eba8:	613b      	str	r3, [r7, #16]
 800ebaa:	e7c3      	b.n	800eb34 <_scanf_float+0x280>
 800ebac:	fffffeff 	.word	0xfffffeff
 800ebb0:	fffffe7f 	.word	0xfffffe7f
 800ebb4:	fffff87f 	.word	0xfffff87f
 800ebb8:	fffffd7f 	.word	0xfffffd7f
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	1e6c      	subs	r4, r5, #1
 800ebc0:	7821      	ldrb	r1, [r4, #0]
 800ebc2:	3b01      	subs	r3, #1
 800ebc4:	613b      	str	r3, [r7, #16]
 800ebc6:	2965      	cmp	r1, #101	; 0x65
 800ebc8:	d00c      	beq.n	800ebe4 <_scanf_float+0x330>
 800ebca:	2945      	cmp	r1, #69	; 0x45
 800ebcc:	d00a      	beq.n	800ebe4 <_scanf_float+0x330>
 800ebce:	23be      	movs	r3, #190	; 0xbe
 800ebd0:	005b      	lsls	r3, r3, #1
 800ebd2:	58fb      	ldr	r3, [r7, r3]
 800ebd4:	0032      	movs	r2, r6
 800ebd6:	9802      	ldr	r0, [sp, #8]
 800ebd8:	4798      	blx	r3
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	1eac      	subs	r4, r5, #2
 800ebde:	3b01      	subs	r3, #1
 800ebe0:	7821      	ldrb	r1, [r4, #0]
 800ebe2:	613b      	str	r3, [r7, #16]
 800ebe4:	23be      	movs	r3, #190	; 0xbe
 800ebe6:	005b      	lsls	r3, r3, #1
 800ebe8:	0032      	movs	r2, r6
 800ebea:	58fb      	ldr	r3, [r7, r3]
 800ebec:	9802      	ldr	r0, [sp, #8]
 800ebee:	4798      	blx	r3
 800ebf0:	0025      	movs	r5, r4
 800ebf2:	683a      	ldr	r2, [r7, #0]
 800ebf4:	2310      	movs	r3, #16
 800ebf6:	0011      	movs	r1, r2
 800ebf8:	4019      	ands	r1, r3
 800ebfa:	9103      	str	r1, [sp, #12]
 800ebfc:	421a      	tst	r2, r3
 800ebfe:	d15b      	bne.n	800ecb8 <_scanf_float+0x404>
 800ec00:	22c0      	movs	r2, #192	; 0xc0
 800ec02:	7029      	strb	r1, [r5, #0]
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	00d2      	lsls	r2, r2, #3
 800ec08:	4013      	ands	r3, r2
 800ec0a:	2280      	movs	r2, #128	; 0x80
 800ec0c:	00d2      	lsls	r2, r2, #3
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d11d      	bne.n	800ec4e <_scanf_float+0x39a>
 800ec12:	9b05      	ldr	r3, [sp, #20]
 800ec14:	9a01      	ldr	r2, [sp, #4]
 800ec16:	9901      	ldr	r1, [sp, #4]
 800ec18:	1a9a      	subs	r2, r3, r2
 800ec1a:	428b      	cmp	r3, r1
 800ec1c:	d124      	bne.n	800ec68 <_scanf_float+0x3b4>
 800ec1e:	2200      	movs	r2, #0
 800ec20:	9904      	ldr	r1, [sp, #16]
 800ec22:	9802      	ldr	r0, [sp, #8]
 800ec24:	f002 fcd6 	bl	80115d4 <_strtod_r>
 800ec28:	9b07      	ldr	r3, [sp, #28]
 800ec2a:	683a      	ldr	r2, [r7, #0]
 800ec2c:	0004      	movs	r4, r0
 800ec2e:	000d      	movs	r5, r1
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	0791      	lsls	r1, r2, #30
 800ec34:	d525      	bpl.n	800ec82 <_scanf_float+0x3ce>
 800ec36:	9907      	ldr	r1, [sp, #28]
 800ec38:	1d1a      	adds	r2, r3, #4
 800ec3a:	600a      	str	r2, [r1, #0]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	601c      	str	r4, [r3, #0]
 800ec40:	605d      	str	r5, [r3, #4]
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	3301      	adds	r3, #1
 800ec46:	60fb      	str	r3, [r7, #12]
 800ec48:	9803      	ldr	r0, [sp, #12]
 800ec4a:	b00b      	add	sp, #44	; 0x2c
 800ec4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec4e:	9b08      	ldr	r3, [sp, #32]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d0e4      	beq.n	800ec1e <_scanf_float+0x36a>
 800ec54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec56:	9a03      	ldr	r2, [sp, #12]
 800ec58:	1c59      	adds	r1, r3, #1
 800ec5a:	9802      	ldr	r0, [sp, #8]
 800ec5c:	230a      	movs	r3, #10
 800ec5e:	f002 fd47 	bl	80116f0 <_strtol_r>
 800ec62:	9b08      	ldr	r3, [sp, #32]
 800ec64:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ec66:	1ac2      	subs	r2, r0, r3
 800ec68:	003b      	movs	r3, r7
 800ec6a:	3370      	adds	r3, #112	; 0x70
 800ec6c:	33ff      	adds	r3, #255	; 0xff
 800ec6e:	429d      	cmp	r5, r3
 800ec70:	d302      	bcc.n	800ec78 <_scanf_float+0x3c4>
 800ec72:	003d      	movs	r5, r7
 800ec74:	356f      	adds	r5, #111	; 0x6f
 800ec76:	35ff      	adds	r5, #255	; 0xff
 800ec78:	0028      	movs	r0, r5
 800ec7a:	4910      	ldr	r1, [pc, #64]	; (800ecbc <_scanf_float+0x408>)
 800ec7c:	f000 f91a 	bl	800eeb4 <siprintf>
 800ec80:	e7cd      	b.n	800ec1e <_scanf_float+0x36a>
 800ec82:	1d19      	adds	r1, r3, #4
 800ec84:	0752      	lsls	r2, r2, #29
 800ec86:	d502      	bpl.n	800ec8e <_scanf_float+0x3da>
 800ec88:	9a07      	ldr	r2, [sp, #28]
 800ec8a:	6011      	str	r1, [r2, #0]
 800ec8c:	e7d6      	b.n	800ec3c <_scanf_float+0x388>
 800ec8e:	9a07      	ldr	r2, [sp, #28]
 800ec90:	0020      	movs	r0, r4
 800ec92:	6011      	str	r1, [r2, #0]
 800ec94:	681e      	ldr	r6, [r3, #0]
 800ec96:	0022      	movs	r2, r4
 800ec98:	002b      	movs	r3, r5
 800ec9a:	0029      	movs	r1, r5
 800ec9c:	f7f3 ff7c 	bl	8002b98 <__aeabi_dcmpun>
 800eca0:	2800      	cmp	r0, #0
 800eca2:	d004      	beq.n	800ecae <_scanf_float+0x3fa>
 800eca4:	4806      	ldr	r0, [pc, #24]	; (800ecc0 <_scanf_float+0x40c>)
 800eca6:	f000 fa0d 	bl	800f0c4 <nanf>
 800ecaa:	6030      	str	r0, [r6, #0]
 800ecac:	e7c9      	b.n	800ec42 <_scanf_float+0x38e>
 800ecae:	0020      	movs	r0, r4
 800ecb0:	0029      	movs	r1, r5
 800ecb2:	f7f4 f863 	bl	8002d7c <__aeabi_d2f>
 800ecb6:	e7f8      	b.n	800ecaa <_scanf_float+0x3f6>
 800ecb8:	2300      	movs	r3, #0
 800ecba:	e63f      	b.n	800e93c <_scanf_float+0x88>
 800ecbc:	08013c89 	.word	0x08013c89
 800ecc0:	08013f1c 	.word	0x08013f1c

0800ecc4 <std>:
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	b510      	push	{r4, lr}
 800ecc8:	0004      	movs	r4, r0
 800ecca:	6003      	str	r3, [r0, #0]
 800eccc:	6043      	str	r3, [r0, #4]
 800ecce:	6083      	str	r3, [r0, #8]
 800ecd0:	8181      	strh	r1, [r0, #12]
 800ecd2:	6643      	str	r3, [r0, #100]	; 0x64
 800ecd4:	81c2      	strh	r2, [r0, #14]
 800ecd6:	6103      	str	r3, [r0, #16]
 800ecd8:	6143      	str	r3, [r0, #20]
 800ecda:	6183      	str	r3, [r0, #24]
 800ecdc:	0019      	movs	r1, r3
 800ecde:	2208      	movs	r2, #8
 800ece0:	305c      	adds	r0, #92	; 0x5c
 800ece2:	f000 f953 	bl	800ef8c <memset>
 800ece6:	4b0b      	ldr	r3, [pc, #44]	; (800ed14 <std+0x50>)
 800ece8:	6224      	str	r4, [r4, #32]
 800ecea:	6263      	str	r3, [r4, #36]	; 0x24
 800ecec:	4b0a      	ldr	r3, [pc, #40]	; (800ed18 <std+0x54>)
 800ecee:	62a3      	str	r3, [r4, #40]	; 0x28
 800ecf0:	4b0a      	ldr	r3, [pc, #40]	; (800ed1c <std+0x58>)
 800ecf2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ecf4:	4b0a      	ldr	r3, [pc, #40]	; (800ed20 <std+0x5c>)
 800ecf6:	6323      	str	r3, [r4, #48]	; 0x30
 800ecf8:	4b0a      	ldr	r3, [pc, #40]	; (800ed24 <std+0x60>)
 800ecfa:	429c      	cmp	r4, r3
 800ecfc:	d005      	beq.n	800ed0a <std+0x46>
 800ecfe:	4b0a      	ldr	r3, [pc, #40]	; (800ed28 <std+0x64>)
 800ed00:	429c      	cmp	r4, r3
 800ed02:	d002      	beq.n	800ed0a <std+0x46>
 800ed04:	4b09      	ldr	r3, [pc, #36]	; (800ed2c <std+0x68>)
 800ed06:	429c      	cmp	r4, r3
 800ed08:	d103      	bne.n	800ed12 <std+0x4e>
 800ed0a:	0020      	movs	r0, r4
 800ed0c:	3058      	adds	r0, #88	; 0x58
 800ed0e:	f000 f9c1 	bl	800f094 <__retarget_lock_init_recursive>
 800ed12:	bd10      	pop	{r4, pc}
 800ed14:	0800eef5 	.word	0x0800eef5
 800ed18:	0800ef1d 	.word	0x0800ef1d
 800ed1c:	0800ef55 	.word	0x0800ef55
 800ed20:	0800ef81 	.word	0x0800ef81
 800ed24:	20000f80 	.word	0x20000f80
 800ed28:	20000fe8 	.word	0x20000fe8
 800ed2c:	20001050 	.word	0x20001050

0800ed30 <stdio_exit_handler>:
 800ed30:	b510      	push	{r4, lr}
 800ed32:	4a03      	ldr	r2, [pc, #12]	; (800ed40 <stdio_exit_handler+0x10>)
 800ed34:	4903      	ldr	r1, [pc, #12]	; (800ed44 <stdio_exit_handler+0x14>)
 800ed36:	4804      	ldr	r0, [pc, #16]	; (800ed48 <stdio_exit_handler+0x18>)
 800ed38:	f000 f86c 	bl	800ee14 <_fwalk_sglue>
 800ed3c:	bd10      	pop	{r4, pc}
 800ed3e:	46c0      	nop			; (mov r8, r8)
 800ed40:	2000002c 	.word	0x2000002c
 800ed44:	08011ad1 	.word	0x08011ad1
 800ed48:	20000038 	.word	0x20000038

0800ed4c <cleanup_stdio>:
 800ed4c:	6841      	ldr	r1, [r0, #4]
 800ed4e:	4b0b      	ldr	r3, [pc, #44]	; (800ed7c <cleanup_stdio+0x30>)
 800ed50:	b510      	push	{r4, lr}
 800ed52:	0004      	movs	r4, r0
 800ed54:	4299      	cmp	r1, r3
 800ed56:	d001      	beq.n	800ed5c <cleanup_stdio+0x10>
 800ed58:	f002 feba 	bl	8011ad0 <_fflush_r>
 800ed5c:	68a1      	ldr	r1, [r4, #8]
 800ed5e:	4b08      	ldr	r3, [pc, #32]	; (800ed80 <cleanup_stdio+0x34>)
 800ed60:	4299      	cmp	r1, r3
 800ed62:	d002      	beq.n	800ed6a <cleanup_stdio+0x1e>
 800ed64:	0020      	movs	r0, r4
 800ed66:	f002 feb3 	bl	8011ad0 <_fflush_r>
 800ed6a:	68e1      	ldr	r1, [r4, #12]
 800ed6c:	4b05      	ldr	r3, [pc, #20]	; (800ed84 <cleanup_stdio+0x38>)
 800ed6e:	4299      	cmp	r1, r3
 800ed70:	d002      	beq.n	800ed78 <cleanup_stdio+0x2c>
 800ed72:	0020      	movs	r0, r4
 800ed74:	f002 feac 	bl	8011ad0 <_fflush_r>
 800ed78:	bd10      	pop	{r4, pc}
 800ed7a:	46c0      	nop			; (mov r8, r8)
 800ed7c:	20000f80 	.word	0x20000f80
 800ed80:	20000fe8 	.word	0x20000fe8
 800ed84:	20001050 	.word	0x20001050

0800ed88 <global_stdio_init.part.0>:
 800ed88:	b510      	push	{r4, lr}
 800ed8a:	4b09      	ldr	r3, [pc, #36]	; (800edb0 <global_stdio_init.part.0+0x28>)
 800ed8c:	4a09      	ldr	r2, [pc, #36]	; (800edb4 <global_stdio_init.part.0+0x2c>)
 800ed8e:	2104      	movs	r1, #4
 800ed90:	601a      	str	r2, [r3, #0]
 800ed92:	4809      	ldr	r0, [pc, #36]	; (800edb8 <global_stdio_init.part.0+0x30>)
 800ed94:	2200      	movs	r2, #0
 800ed96:	f7ff ff95 	bl	800ecc4 <std>
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	2109      	movs	r1, #9
 800ed9e:	4807      	ldr	r0, [pc, #28]	; (800edbc <global_stdio_init.part.0+0x34>)
 800eda0:	f7ff ff90 	bl	800ecc4 <std>
 800eda4:	2202      	movs	r2, #2
 800eda6:	2112      	movs	r1, #18
 800eda8:	4805      	ldr	r0, [pc, #20]	; (800edc0 <global_stdio_init.part.0+0x38>)
 800edaa:	f7ff ff8b 	bl	800ecc4 <std>
 800edae:	bd10      	pop	{r4, pc}
 800edb0:	200010b8 	.word	0x200010b8
 800edb4:	0800ed31 	.word	0x0800ed31
 800edb8:	20000f80 	.word	0x20000f80
 800edbc:	20000fe8 	.word	0x20000fe8
 800edc0:	20001050 	.word	0x20001050

0800edc4 <__sfp_lock_acquire>:
 800edc4:	b510      	push	{r4, lr}
 800edc6:	4802      	ldr	r0, [pc, #8]	; (800edd0 <__sfp_lock_acquire+0xc>)
 800edc8:	f000 f965 	bl	800f096 <__retarget_lock_acquire_recursive>
 800edcc:	bd10      	pop	{r4, pc}
 800edce:	46c0      	nop			; (mov r8, r8)
 800edd0:	200010c1 	.word	0x200010c1

0800edd4 <__sfp_lock_release>:
 800edd4:	b510      	push	{r4, lr}
 800edd6:	4802      	ldr	r0, [pc, #8]	; (800ede0 <__sfp_lock_release+0xc>)
 800edd8:	f000 f95e 	bl	800f098 <__retarget_lock_release_recursive>
 800eddc:	bd10      	pop	{r4, pc}
 800edde:	46c0      	nop			; (mov r8, r8)
 800ede0:	200010c1 	.word	0x200010c1

0800ede4 <__sinit>:
 800ede4:	b510      	push	{r4, lr}
 800ede6:	0004      	movs	r4, r0
 800ede8:	f7ff ffec 	bl	800edc4 <__sfp_lock_acquire>
 800edec:	6a23      	ldr	r3, [r4, #32]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d002      	beq.n	800edf8 <__sinit+0x14>
 800edf2:	f7ff ffef 	bl	800edd4 <__sfp_lock_release>
 800edf6:	bd10      	pop	{r4, pc}
 800edf8:	4b04      	ldr	r3, [pc, #16]	; (800ee0c <__sinit+0x28>)
 800edfa:	6223      	str	r3, [r4, #32]
 800edfc:	4b04      	ldr	r3, [pc, #16]	; (800ee10 <__sinit+0x2c>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d1f6      	bne.n	800edf2 <__sinit+0xe>
 800ee04:	f7ff ffc0 	bl	800ed88 <global_stdio_init.part.0>
 800ee08:	e7f3      	b.n	800edf2 <__sinit+0xe>
 800ee0a:	46c0      	nop			; (mov r8, r8)
 800ee0c:	0800ed4d 	.word	0x0800ed4d
 800ee10:	200010b8 	.word	0x200010b8

0800ee14 <_fwalk_sglue>:
 800ee14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee16:	0014      	movs	r4, r2
 800ee18:	2600      	movs	r6, #0
 800ee1a:	9000      	str	r0, [sp, #0]
 800ee1c:	9101      	str	r1, [sp, #4]
 800ee1e:	68a5      	ldr	r5, [r4, #8]
 800ee20:	6867      	ldr	r7, [r4, #4]
 800ee22:	3f01      	subs	r7, #1
 800ee24:	d504      	bpl.n	800ee30 <_fwalk_sglue+0x1c>
 800ee26:	6824      	ldr	r4, [r4, #0]
 800ee28:	2c00      	cmp	r4, #0
 800ee2a:	d1f8      	bne.n	800ee1e <_fwalk_sglue+0xa>
 800ee2c:	0030      	movs	r0, r6
 800ee2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ee30:	89ab      	ldrh	r3, [r5, #12]
 800ee32:	2b01      	cmp	r3, #1
 800ee34:	d908      	bls.n	800ee48 <_fwalk_sglue+0x34>
 800ee36:	220e      	movs	r2, #14
 800ee38:	5eab      	ldrsh	r3, [r5, r2]
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	d004      	beq.n	800ee48 <_fwalk_sglue+0x34>
 800ee3e:	0029      	movs	r1, r5
 800ee40:	9800      	ldr	r0, [sp, #0]
 800ee42:	9b01      	ldr	r3, [sp, #4]
 800ee44:	4798      	blx	r3
 800ee46:	4306      	orrs	r6, r0
 800ee48:	3568      	adds	r5, #104	; 0x68
 800ee4a:	e7ea      	b.n	800ee22 <_fwalk_sglue+0xe>

0800ee4c <sniprintf>:
 800ee4c:	b40c      	push	{r2, r3}
 800ee4e:	b530      	push	{r4, r5, lr}
 800ee50:	4b17      	ldr	r3, [pc, #92]	; (800eeb0 <sniprintf+0x64>)
 800ee52:	000c      	movs	r4, r1
 800ee54:	681d      	ldr	r5, [r3, #0]
 800ee56:	b09d      	sub	sp, #116	; 0x74
 800ee58:	2900      	cmp	r1, #0
 800ee5a:	da08      	bge.n	800ee6e <sniprintf+0x22>
 800ee5c:	238b      	movs	r3, #139	; 0x8b
 800ee5e:	2001      	movs	r0, #1
 800ee60:	602b      	str	r3, [r5, #0]
 800ee62:	4240      	negs	r0, r0
 800ee64:	b01d      	add	sp, #116	; 0x74
 800ee66:	bc30      	pop	{r4, r5}
 800ee68:	bc08      	pop	{r3}
 800ee6a:	b002      	add	sp, #8
 800ee6c:	4718      	bx	r3
 800ee6e:	2382      	movs	r3, #130	; 0x82
 800ee70:	466a      	mov	r2, sp
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	8293      	strh	r3, [r2, #20]
 800ee76:	2300      	movs	r3, #0
 800ee78:	9002      	str	r0, [sp, #8]
 800ee7a:	9006      	str	r0, [sp, #24]
 800ee7c:	4299      	cmp	r1, r3
 800ee7e:	d000      	beq.n	800ee82 <sniprintf+0x36>
 800ee80:	1e4b      	subs	r3, r1, #1
 800ee82:	9304      	str	r3, [sp, #16]
 800ee84:	9307      	str	r3, [sp, #28]
 800ee86:	2301      	movs	r3, #1
 800ee88:	466a      	mov	r2, sp
 800ee8a:	425b      	negs	r3, r3
 800ee8c:	82d3      	strh	r3, [r2, #22]
 800ee8e:	0028      	movs	r0, r5
 800ee90:	ab21      	add	r3, sp, #132	; 0x84
 800ee92:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ee94:	a902      	add	r1, sp, #8
 800ee96:	9301      	str	r3, [sp, #4]
 800ee98:	f002 fc90 	bl	80117bc <_svfiprintf_r>
 800ee9c:	1c43      	adds	r3, r0, #1
 800ee9e:	da01      	bge.n	800eea4 <sniprintf+0x58>
 800eea0:	238b      	movs	r3, #139	; 0x8b
 800eea2:	602b      	str	r3, [r5, #0]
 800eea4:	2c00      	cmp	r4, #0
 800eea6:	d0dd      	beq.n	800ee64 <sniprintf+0x18>
 800eea8:	2200      	movs	r2, #0
 800eeaa:	9b02      	ldr	r3, [sp, #8]
 800eeac:	701a      	strb	r2, [r3, #0]
 800eeae:	e7d9      	b.n	800ee64 <sniprintf+0x18>
 800eeb0:	20000084 	.word	0x20000084

0800eeb4 <siprintf>:
 800eeb4:	b40e      	push	{r1, r2, r3}
 800eeb6:	b500      	push	{lr}
 800eeb8:	490b      	ldr	r1, [pc, #44]	; (800eee8 <siprintf+0x34>)
 800eeba:	b09c      	sub	sp, #112	; 0x70
 800eebc:	ab1d      	add	r3, sp, #116	; 0x74
 800eebe:	9002      	str	r0, [sp, #8]
 800eec0:	9006      	str	r0, [sp, #24]
 800eec2:	9107      	str	r1, [sp, #28]
 800eec4:	9104      	str	r1, [sp, #16]
 800eec6:	4809      	ldr	r0, [pc, #36]	; (800eeec <siprintf+0x38>)
 800eec8:	4909      	ldr	r1, [pc, #36]	; (800eef0 <siprintf+0x3c>)
 800eeca:	cb04      	ldmia	r3!, {r2}
 800eecc:	9105      	str	r1, [sp, #20]
 800eece:	6800      	ldr	r0, [r0, #0]
 800eed0:	a902      	add	r1, sp, #8
 800eed2:	9301      	str	r3, [sp, #4]
 800eed4:	f002 fc72 	bl	80117bc <_svfiprintf_r>
 800eed8:	2200      	movs	r2, #0
 800eeda:	9b02      	ldr	r3, [sp, #8]
 800eedc:	701a      	strb	r2, [r3, #0]
 800eede:	b01c      	add	sp, #112	; 0x70
 800eee0:	bc08      	pop	{r3}
 800eee2:	b003      	add	sp, #12
 800eee4:	4718      	bx	r3
 800eee6:	46c0      	nop			; (mov r8, r8)
 800eee8:	7fffffff 	.word	0x7fffffff
 800eeec:	20000084 	.word	0x20000084
 800eef0:	ffff0208 	.word	0xffff0208

0800eef4 <__sread>:
 800eef4:	b570      	push	{r4, r5, r6, lr}
 800eef6:	000c      	movs	r4, r1
 800eef8:	250e      	movs	r5, #14
 800eefa:	5f49      	ldrsh	r1, [r1, r5]
 800eefc:	f000 f878 	bl	800eff0 <_read_r>
 800ef00:	2800      	cmp	r0, #0
 800ef02:	db03      	blt.n	800ef0c <__sread+0x18>
 800ef04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ef06:	181b      	adds	r3, r3, r0
 800ef08:	6563      	str	r3, [r4, #84]	; 0x54
 800ef0a:	bd70      	pop	{r4, r5, r6, pc}
 800ef0c:	89a3      	ldrh	r3, [r4, #12]
 800ef0e:	4a02      	ldr	r2, [pc, #8]	; (800ef18 <__sread+0x24>)
 800ef10:	4013      	ands	r3, r2
 800ef12:	81a3      	strh	r3, [r4, #12]
 800ef14:	e7f9      	b.n	800ef0a <__sread+0x16>
 800ef16:	46c0      	nop			; (mov r8, r8)
 800ef18:	ffffefff 	.word	0xffffefff

0800ef1c <__swrite>:
 800ef1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef1e:	001f      	movs	r7, r3
 800ef20:	898b      	ldrh	r3, [r1, #12]
 800ef22:	0005      	movs	r5, r0
 800ef24:	000c      	movs	r4, r1
 800ef26:	0016      	movs	r6, r2
 800ef28:	05db      	lsls	r3, r3, #23
 800ef2a:	d505      	bpl.n	800ef38 <__swrite+0x1c>
 800ef2c:	230e      	movs	r3, #14
 800ef2e:	5ec9      	ldrsh	r1, [r1, r3]
 800ef30:	2200      	movs	r2, #0
 800ef32:	2302      	movs	r3, #2
 800ef34:	f000 f848 	bl	800efc8 <_lseek_r>
 800ef38:	89a3      	ldrh	r3, [r4, #12]
 800ef3a:	4a05      	ldr	r2, [pc, #20]	; (800ef50 <__swrite+0x34>)
 800ef3c:	0028      	movs	r0, r5
 800ef3e:	4013      	ands	r3, r2
 800ef40:	81a3      	strh	r3, [r4, #12]
 800ef42:	0032      	movs	r2, r6
 800ef44:	230e      	movs	r3, #14
 800ef46:	5ee1      	ldrsh	r1, [r4, r3]
 800ef48:	003b      	movs	r3, r7
 800ef4a:	f000 f865 	bl	800f018 <_write_r>
 800ef4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef50:	ffffefff 	.word	0xffffefff

0800ef54 <__sseek>:
 800ef54:	b570      	push	{r4, r5, r6, lr}
 800ef56:	000c      	movs	r4, r1
 800ef58:	250e      	movs	r5, #14
 800ef5a:	5f49      	ldrsh	r1, [r1, r5]
 800ef5c:	f000 f834 	bl	800efc8 <_lseek_r>
 800ef60:	89a3      	ldrh	r3, [r4, #12]
 800ef62:	1c42      	adds	r2, r0, #1
 800ef64:	d103      	bne.n	800ef6e <__sseek+0x1a>
 800ef66:	4a05      	ldr	r2, [pc, #20]	; (800ef7c <__sseek+0x28>)
 800ef68:	4013      	ands	r3, r2
 800ef6a:	81a3      	strh	r3, [r4, #12]
 800ef6c:	bd70      	pop	{r4, r5, r6, pc}
 800ef6e:	2280      	movs	r2, #128	; 0x80
 800ef70:	0152      	lsls	r2, r2, #5
 800ef72:	4313      	orrs	r3, r2
 800ef74:	81a3      	strh	r3, [r4, #12]
 800ef76:	6560      	str	r0, [r4, #84]	; 0x54
 800ef78:	e7f8      	b.n	800ef6c <__sseek+0x18>
 800ef7a:	46c0      	nop			; (mov r8, r8)
 800ef7c:	ffffefff 	.word	0xffffefff

0800ef80 <__sclose>:
 800ef80:	b510      	push	{r4, lr}
 800ef82:	230e      	movs	r3, #14
 800ef84:	5ec9      	ldrsh	r1, [r1, r3]
 800ef86:	f000 f80d 	bl	800efa4 <_close_r>
 800ef8a:	bd10      	pop	{r4, pc}

0800ef8c <memset>:
 800ef8c:	0003      	movs	r3, r0
 800ef8e:	1882      	adds	r2, r0, r2
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d100      	bne.n	800ef96 <memset+0xa>
 800ef94:	4770      	bx	lr
 800ef96:	7019      	strb	r1, [r3, #0]
 800ef98:	3301      	adds	r3, #1
 800ef9a:	e7f9      	b.n	800ef90 <memset+0x4>

0800ef9c <_localeconv_r>:
 800ef9c:	4800      	ldr	r0, [pc, #0]	; (800efa0 <_localeconv_r+0x4>)
 800ef9e:	4770      	bx	lr
 800efa0:	20000178 	.word	0x20000178

0800efa4 <_close_r>:
 800efa4:	2300      	movs	r3, #0
 800efa6:	b570      	push	{r4, r5, r6, lr}
 800efa8:	4d06      	ldr	r5, [pc, #24]	; (800efc4 <_close_r+0x20>)
 800efaa:	0004      	movs	r4, r0
 800efac:	0008      	movs	r0, r1
 800efae:	602b      	str	r3, [r5, #0]
 800efb0:	f7f7 fb0b 	bl	80065ca <_close>
 800efb4:	1c43      	adds	r3, r0, #1
 800efb6:	d103      	bne.n	800efc0 <_close_r+0x1c>
 800efb8:	682b      	ldr	r3, [r5, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d000      	beq.n	800efc0 <_close_r+0x1c>
 800efbe:	6023      	str	r3, [r4, #0]
 800efc0:	bd70      	pop	{r4, r5, r6, pc}
 800efc2:	46c0      	nop			; (mov r8, r8)
 800efc4:	200010bc 	.word	0x200010bc

0800efc8 <_lseek_r>:
 800efc8:	b570      	push	{r4, r5, r6, lr}
 800efca:	0004      	movs	r4, r0
 800efcc:	0008      	movs	r0, r1
 800efce:	0011      	movs	r1, r2
 800efd0:	001a      	movs	r2, r3
 800efd2:	2300      	movs	r3, #0
 800efd4:	4d05      	ldr	r5, [pc, #20]	; (800efec <_lseek_r+0x24>)
 800efd6:	602b      	str	r3, [r5, #0]
 800efd8:	f7f7 fb18 	bl	800660c <_lseek>
 800efdc:	1c43      	adds	r3, r0, #1
 800efde:	d103      	bne.n	800efe8 <_lseek_r+0x20>
 800efe0:	682b      	ldr	r3, [r5, #0]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d000      	beq.n	800efe8 <_lseek_r+0x20>
 800efe6:	6023      	str	r3, [r4, #0]
 800efe8:	bd70      	pop	{r4, r5, r6, pc}
 800efea:	46c0      	nop			; (mov r8, r8)
 800efec:	200010bc 	.word	0x200010bc

0800eff0 <_read_r>:
 800eff0:	b570      	push	{r4, r5, r6, lr}
 800eff2:	0004      	movs	r4, r0
 800eff4:	0008      	movs	r0, r1
 800eff6:	0011      	movs	r1, r2
 800eff8:	001a      	movs	r2, r3
 800effa:	2300      	movs	r3, #0
 800effc:	4d05      	ldr	r5, [pc, #20]	; (800f014 <_read_r+0x24>)
 800effe:	602b      	str	r3, [r5, #0]
 800f000:	f7f7 faaa 	bl	8006558 <_read>
 800f004:	1c43      	adds	r3, r0, #1
 800f006:	d103      	bne.n	800f010 <_read_r+0x20>
 800f008:	682b      	ldr	r3, [r5, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d000      	beq.n	800f010 <_read_r+0x20>
 800f00e:	6023      	str	r3, [r4, #0]
 800f010:	bd70      	pop	{r4, r5, r6, pc}
 800f012:	46c0      	nop			; (mov r8, r8)
 800f014:	200010bc 	.word	0x200010bc

0800f018 <_write_r>:
 800f018:	b570      	push	{r4, r5, r6, lr}
 800f01a:	0004      	movs	r4, r0
 800f01c:	0008      	movs	r0, r1
 800f01e:	0011      	movs	r1, r2
 800f020:	001a      	movs	r2, r3
 800f022:	2300      	movs	r3, #0
 800f024:	4d05      	ldr	r5, [pc, #20]	; (800f03c <_write_r+0x24>)
 800f026:	602b      	str	r3, [r5, #0]
 800f028:	f7f7 fab3 	bl	8006592 <_write>
 800f02c:	1c43      	adds	r3, r0, #1
 800f02e:	d103      	bne.n	800f038 <_write_r+0x20>
 800f030:	682b      	ldr	r3, [r5, #0]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d000      	beq.n	800f038 <_write_r+0x20>
 800f036:	6023      	str	r3, [r4, #0]
 800f038:	bd70      	pop	{r4, r5, r6, pc}
 800f03a:	46c0      	nop			; (mov r8, r8)
 800f03c:	200010bc 	.word	0x200010bc

0800f040 <__errno>:
 800f040:	4b01      	ldr	r3, [pc, #4]	; (800f048 <__errno+0x8>)
 800f042:	6818      	ldr	r0, [r3, #0]
 800f044:	4770      	bx	lr
 800f046:	46c0      	nop			; (mov r8, r8)
 800f048:	20000084 	.word	0x20000084

0800f04c <__libc_init_array>:
 800f04c:	b570      	push	{r4, r5, r6, lr}
 800f04e:	2600      	movs	r6, #0
 800f050:	4c0c      	ldr	r4, [pc, #48]	; (800f084 <__libc_init_array+0x38>)
 800f052:	4d0d      	ldr	r5, [pc, #52]	; (800f088 <__libc_init_array+0x3c>)
 800f054:	1b64      	subs	r4, r4, r5
 800f056:	10a4      	asrs	r4, r4, #2
 800f058:	42a6      	cmp	r6, r4
 800f05a:	d109      	bne.n	800f070 <__libc_init_array+0x24>
 800f05c:	2600      	movs	r6, #0
 800f05e:	f003 fc71 	bl	8012944 <_init>
 800f062:	4c0a      	ldr	r4, [pc, #40]	; (800f08c <__libc_init_array+0x40>)
 800f064:	4d0a      	ldr	r5, [pc, #40]	; (800f090 <__libc_init_array+0x44>)
 800f066:	1b64      	subs	r4, r4, r5
 800f068:	10a4      	asrs	r4, r4, #2
 800f06a:	42a6      	cmp	r6, r4
 800f06c:	d105      	bne.n	800f07a <__libc_init_array+0x2e>
 800f06e:	bd70      	pop	{r4, r5, r6, pc}
 800f070:	00b3      	lsls	r3, r6, #2
 800f072:	58eb      	ldr	r3, [r5, r3]
 800f074:	4798      	blx	r3
 800f076:	3601      	adds	r6, #1
 800f078:	e7ee      	b.n	800f058 <__libc_init_array+0xc>
 800f07a:	00b3      	lsls	r3, r6, #2
 800f07c:	58eb      	ldr	r3, [r5, r3]
 800f07e:	4798      	blx	r3
 800f080:	3601      	adds	r6, #1
 800f082:	e7f2      	b.n	800f06a <__libc_init_array+0x1e>
 800f084:	08013f88 	.word	0x08013f88
 800f088:	08013f88 	.word	0x08013f88
 800f08c:	08013f8c 	.word	0x08013f8c
 800f090:	08013f88 	.word	0x08013f88

0800f094 <__retarget_lock_init_recursive>:
 800f094:	4770      	bx	lr

0800f096 <__retarget_lock_acquire_recursive>:
 800f096:	4770      	bx	lr

0800f098 <__retarget_lock_release_recursive>:
 800f098:	4770      	bx	lr

0800f09a <memchr>:
 800f09a:	b2c9      	uxtb	r1, r1
 800f09c:	1882      	adds	r2, r0, r2
 800f09e:	4290      	cmp	r0, r2
 800f0a0:	d101      	bne.n	800f0a6 <memchr+0xc>
 800f0a2:	2000      	movs	r0, #0
 800f0a4:	4770      	bx	lr
 800f0a6:	7803      	ldrb	r3, [r0, #0]
 800f0a8:	428b      	cmp	r3, r1
 800f0aa:	d0fb      	beq.n	800f0a4 <memchr+0xa>
 800f0ac:	3001      	adds	r0, #1
 800f0ae:	e7f6      	b.n	800f09e <memchr+0x4>

0800f0b0 <memcpy>:
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	b510      	push	{r4, lr}
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d100      	bne.n	800f0ba <memcpy+0xa>
 800f0b8:	bd10      	pop	{r4, pc}
 800f0ba:	5ccc      	ldrb	r4, [r1, r3]
 800f0bc:	54c4      	strb	r4, [r0, r3]
 800f0be:	3301      	adds	r3, #1
 800f0c0:	e7f8      	b.n	800f0b4 <memcpy+0x4>
	...

0800f0c4 <nanf>:
 800f0c4:	4800      	ldr	r0, [pc, #0]	; (800f0c8 <nanf+0x4>)
 800f0c6:	4770      	bx	lr
 800f0c8:	7fc00000 	.word	0x7fc00000

0800f0cc <quorem>:
 800f0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0ce:	6902      	ldr	r2, [r0, #16]
 800f0d0:	690b      	ldr	r3, [r1, #16]
 800f0d2:	b089      	sub	sp, #36	; 0x24
 800f0d4:	0007      	movs	r7, r0
 800f0d6:	9104      	str	r1, [sp, #16]
 800f0d8:	2000      	movs	r0, #0
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	db69      	blt.n	800f1b2 <quorem+0xe6>
 800f0de:	3b01      	subs	r3, #1
 800f0e0:	009c      	lsls	r4, r3, #2
 800f0e2:	9301      	str	r3, [sp, #4]
 800f0e4:	000b      	movs	r3, r1
 800f0e6:	3314      	adds	r3, #20
 800f0e8:	9306      	str	r3, [sp, #24]
 800f0ea:	191b      	adds	r3, r3, r4
 800f0ec:	9305      	str	r3, [sp, #20]
 800f0ee:	003b      	movs	r3, r7
 800f0f0:	3314      	adds	r3, #20
 800f0f2:	9303      	str	r3, [sp, #12]
 800f0f4:	191c      	adds	r4, r3, r4
 800f0f6:	9b05      	ldr	r3, [sp, #20]
 800f0f8:	6826      	ldr	r6, [r4, #0]
 800f0fa:	681d      	ldr	r5, [r3, #0]
 800f0fc:	0030      	movs	r0, r6
 800f0fe:	3501      	adds	r5, #1
 800f100:	0029      	movs	r1, r5
 800f102:	f7f1 f81d 	bl	8000140 <__udivsi3>
 800f106:	9002      	str	r0, [sp, #8]
 800f108:	42ae      	cmp	r6, r5
 800f10a:	d329      	bcc.n	800f160 <quorem+0x94>
 800f10c:	9b06      	ldr	r3, [sp, #24]
 800f10e:	2600      	movs	r6, #0
 800f110:	469c      	mov	ip, r3
 800f112:	9d03      	ldr	r5, [sp, #12]
 800f114:	9606      	str	r6, [sp, #24]
 800f116:	4662      	mov	r2, ip
 800f118:	ca08      	ldmia	r2!, {r3}
 800f11a:	6828      	ldr	r0, [r5, #0]
 800f11c:	4694      	mov	ip, r2
 800f11e:	9a02      	ldr	r2, [sp, #8]
 800f120:	b299      	uxth	r1, r3
 800f122:	4351      	muls	r1, r2
 800f124:	0c1b      	lsrs	r3, r3, #16
 800f126:	4353      	muls	r3, r2
 800f128:	1989      	adds	r1, r1, r6
 800f12a:	0c0a      	lsrs	r2, r1, #16
 800f12c:	189b      	adds	r3, r3, r2
 800f12e:	9307      	str	r3, [sp, #28]
 800f130:	0c1e      	lsrs	r6, r3, #16
 800f132:	9b06      	ldr	r3, [sp, #24]
 800f134:	b282      	uxth	r2, r0
 800f136:	18d2      	adds	r2, r2, r3
 800f138:	466b      	mov	r3, sp
 800f13a:	b289      	uxth	r1, r1
 800f13c:	8b9b      	ldrh	r3, [r3, #28]
 800f13e:	1a52      	subs	r2, r2, r1
 800f140:	0c01      	lsrs	r1, r0, #16
 800f142:	1ac9      	subs	r1, r1, r3
 800f144:	1413      	asrs	r3, r2, #16
 800f146:	18cb      	adds	r3, r1, r3
 800f148:	1419      	asrs	r1, r3, #16
 800f14a:	b292      	uxth	r2, r2
 800f14c:	041b      	lsls	r3, r3, #16
 800f14e:	4313      	orrs	r3, r2
 800f150:	c508      	stmia	r5!, {r3}
 800f152:	9b05      	ldr	r3, [sp, #20]
 800f154:	9106      	str	r1, [sp, #24]
 800f156:	4563      	cmp	r3, ip
 800f158:	d2dd      	bcs.n	800f116 <quorem+0x4a>
 800f15a:	6823      	ldr	r3, [r4, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d030      	beq.n	800f1c2 <quorem+0xf6>
 800f160:	0038      	movs	r0, r7
 800f162:	9904      	ldr	r1, [sp, #16]
 800f164:	f001 fa2a 	bl	80105bc <__mcmp>
 800f168:	2800      	cmp	r0, #0
 800f16a:	db21      	blt.n	800f1b0 <quorem+0xe4>
 800f16c:	0038      	movs	r0, r7
 800f16e:	2600      	movs	r6, #0
 800f170:	9b02      	ldr	r3, [sp, #8]
 800f172:	9c04      	ldr	r4, [sp, #16]
 800f174:	3301      	adds	r3, #1
 800f176:	9302      	str	r3, [sp, #8]
 800f178:	3014      	adds	r0, #20
 800f17a:	3414      	adds	r4, #20
 800f17c:	6803      	ldr	r3, [r0, #0]
 800f17e:	cc02      	ldmia	r4!, {r1}
 800f180:	b29d      	uxth	r5, r3
 800f182:	19ad      	adds	r5, r5, r6
 800f184:	b28a      	uxth	r2, r1
 800f186:	1aaa      	subs	r2, r5, r2
 800f188:	0c09      	lsrs	r1, r1, #16
 800f18a:	0c1b      	lsrs	r3, r3, #16
 800f18c:	1a5b      	subs	r3, r3, r1
 800f18e:	1411      	asrs	r1, r2, #16
 800f190:	185b      	adds	r3, r3, r1
 800f192:	141e      	asrs	r6, r3, #16
 800f194:	b292      	uxth	r2, r2
 800f196:	041b      	lsls	r3, r3, #16
 800f198:	4313      	orrs	r3, r2
 800f19a:	c008      	stmia	r0!, {r3}
 800f19c:	9b05      	ldr	r3, [sp, #20]
 800f19e:	42a3      	cmp	r3, r4
 800f1a0:	d2ec      	bcs.n	800f17c <quorem+0xb0>
 800f1a2:	9b01      	ldr	r3, [sp, #4]
 800f1a4:	9a03      	ldr	r2, [sp, #12]
 800f1a6:	009b      	lsls	r3, r3, #2
 800f1a8:	18d3      	adds	r3, r2, r3
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	2a00      	cmp	r2, #0
 800f1ae:	d015      	beq.n	800f1dc <quorem+0x110>
 800f1b0:	9802      	ldr	r0, [sp, #8]
 800f1b2:	b009      	add	sp, #36	; 0x24
 800f1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1b6:	6823      	ldr	r3, [r4, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d106      	bne.n	800f1ca <quorem+0xfe>
 800f1bc:	9b01      	ldr	r3, [sp, #4]
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	9301      	str	r3, [sp, #4]
 800f1c2:	9b03      	ldr	r3, [sp, #12]
 800f1c4:	3c04      	subs	r4, #4
 800f1c6:	42a3      	cmp	r3, r4
 800f1c8:	d3f5      	bcc.n	800f1b6 <quorem+0xea>
 800f1ca:	9b01      	ldr	r3, [sp, #4]
 800f1cc:	613b      	str	r3, [r7, #16]
 800f1ce:	e7c7      	b.n	800f160 <quorem+0x94>
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	2a00      	cmp	r2, #0
 800f1d4:	d106      	bne.n	800f1e4 <quorem+0x118>
 800f1d6:	9a01      	ldr	r2, [sp, #4]
 800f1d8:	3a01      	subs	r2, #1
 800f1da:	9201      	str	r2, [sp, #4]
 800f1dc:	9a03      	ldr	r2, [sp, #12]
 800f1de:	3b04      	subs	r3, #4
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d3f5      	bcc.n	800f1d0 <quorem+0x104>
 800f1e4:	9b01      	ldr	r3, [sp, #4]
 800f1e6:	613b      	str	r3, [r7, #16]
 800f1e8:	e7e2      	b.n	800f1b0 <quorem+0xe4>
	...

0800f1ec <_dtoa_r>:
 800f1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1ee:	0014      	movs	r4, r2
 800f1f0:	001d      	movs	r5, r3
 800f1f2:	69c6      	ldr	r6, [r0, #28]
 800f1f4:	b09d      	sub	sp, #116	; 0x74
 800f1f6:	9408      	str	r4, [sp, #32]
 800f1f8:	9509      	str	r5, [sp, #36]	; 0x24
 800f1fa:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800f1fc:	9004      	str	r0, [sp, #16]
 800f1fe:	2e00      	cmp	r6, #0
 800f200:	d10f      	bne.n	800f222 <_dtoa_r+0x36>
 800f202:	2010      	movs	r0, #16
 800f204:	f000 fe4a 	bl	800fe9c <malloc>
 800f208:	9b04      	ldr	r3, [sp, #16]
 800f20a:	1e02      	subs	r2, r0, #0
 800f20c:	61d8      	str	r0, [r3, #28]
 800f20e:	d104      	bne.n	800f21a <_dtoa_r+0x2e>
 800f210:	21ef      	movs	r1, #239	; 0xef
 800f212:	4bc6      	ldr	r3, [pc, #792]	; (800f52c <_dtoa_r+0x340>)
 800f214:	48c6      	ldr	r0, [pc, #792]	; (800f530 <_dtoa_r+0x344>)
 800f216:	f002 fcc3 	bl	8011ba0 <__assert_func>
 800f21a:	6046      	str	r6, [r0, #4]
 800f21c:	6086      	str	r6, [r0, #8]
 800f21e:	6006      	str	r6, [r0, #0]
 800f220:	60c6      	str	r6, [r0, #12]
 800f222:	9b04      	ldr	r3, [sp, #16]
 800f224:	69db      	ldr	r3, [r3, #28]
 800f226:	6819      	ldr	r1, [r3, #0]
 800f228:	2900      	cmp	r1, #0
 800f22a:	d00b      	beq.n	800f244 <_dtoa_r+0x58>
 800f22c:	685a      	ldr	r2, [r3, #4]
 800f22e:	2301      	movs	r3, #1
 800f230:	4093      	lsls	r3, r2
 800f232:	604a      	str	r2, [r1, #4]
 800f234:	608b      	str	r3, [r1, #8]
 800f236:	9804      	ldr	r0, [sp, #16]
 800f238:	f000 ff32 	bl	80100a0 <_Bfree>
 800f23c:	2200      	movs	r2, #0
 800f23e:	9b04      	ldr	r3, [sp, #16]
 800f240:	69db      	ldr	r3, [r3, #28]
 800f242:	601a      	str	r2, [r3, #0]
 800f244:	2d00      	cmp	r5, #0
 800f246:	da1e      	bge.n	800f286 <_dtoa_r+0x9a>
 800f248:	2301      	movs	r3, #1
 800f24a:	603b      	str	r3, [r7, #0]
 800f24c:	006b      	lsls	r3, r5, #1
 800f24e:	085b      	lsrs	r3, r3, #1
 800f250:	9309      	str	r3, [sp, #36]	; 0x24
 800f252:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f254:	4bb7      	ldr	r3, [pc, #732]	; (800f534 <_dtoa_r+0x348>)
 800f256:	4ab7      	ldr	r2, [pc, #732]	; (800f534 <_dtoa_r+0x348>)
 800f258:	403b      	ands	r3, r7
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d116      	bne.n	800f28c <_dtoa_r+0xa0>
 800f25e:	4bb6      	ldr	r3, [pc, #728]	; (800f538 <_dtoa_r+0x34c>)
 800f260:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f262:	6013      	str	r3, [r2, #0]
 800f264:	033b      	lsls	r3, r7, #12
 800f266:	0b1b      	lsrs	r3, r3, #12
 800f268:	4323      	orrs	r3, r4
 800f26a:	d101      	bne.n	800f270 <_dtoa_r+0x84>
 800f26c:	f000 fdb5 	bl	800fdda <_dtoa_r+0xbee>
 800f270:	4bb2      	ldr	r3, [pc, #712]	; (800f53c <_dtoa_r+0x350>)
 800f272:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f274:	9306      	str	r3, [sp, #24]
 800f276:	2a00      	cmp	r2, #0
 800f278:	d002      	beq.n	800f280 <_dtoa_r+0x94>
 800f27a:	4bb1      	ldr	r3, [pc, #708]	; (800f540 <_dtoa_r+0x354>)
 800f27c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f27e:	6013      	str	r3, [r2, #0]
 800f280:	9806      	ldr	r0, [sp, #24]
 800f282:	b01d      	add	sp, #116	; 0x74
 800f284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f286:	2300      	movs	r3, #0
 800f288:	603b      	str	r3, [r7, #0]
 800f28a:	e7e2      	b.n	800f252 <_dtoa_r+0x66>
 800f28c:	9a08      	ldr	r2, [sp, #32]
 800f28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f290:	9210      	str	r2, [sp, #64]	; 0x40
 800f292:	9311      	str	r3, [sp, #68]	; 0x44
 800f294:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f296:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f298:	2200      	movs	r2, #0
 800f29a:	2300      	movs	r3, #0
 800f29c:	f7f1 f8d6 	bl	800044c <__aeabi_dcmpeq>
 800f2a0:	1e06      	subs	r6, r0, #0
 800f2a2:	d009      	beq.n	800f2b8 <_dtoa_r+0xcc>
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f2a8:	6013      	str	r3, [r2, #0]
 800f2aa:	4ba6      	ldr	r3, [pc, #664]	; (800f544 <_dtoa_r+0x358>)
 800f2ac:	9306      	str	r3, [sp, #24]
 800f2ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d0e5      	beq.n	800f280 <_dtoa_r+0x94>
 800f2b4:	4ba4      	ldr	r3, [pc, #656]	; (800f548 <_dtoa_r+0x35c>)
 800f2b6:	e7e1      	b.n	800f27c <_dtoa_r+0x90>
 800f2b8:	ab1a      	add	r3, sp, #104	; 0x68
 800f2ba:	9301      	str	r3, [sp, #4]
 800f2bc:	ab1b      	add	r3, sp, #108	; 0x6c
 800f2be:	9300      	str	r3, [sp, #0]
 800f2c0:	9804      	ldr	r0, [sp, #16]
 800f2c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f2c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2c6:	f001 fa95 	bl	80107f4 <__d2b>
 800f2ca:	007a      	lsls	r2, r7, #1
 800f2cc:	9005      	str	r0, [sp, #20]
 800f2ce:	0d52      	lsrs	r2, r2, #21
 800f2d0:	d100      	bne.n	800f2d4 <_dtoa_r+0xe8>
 800f2d2:	e07b      	b.n	800f3cc <_dtoa_r+0x1e0>
 800f2d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2d6:	9617      	str	r6, [sp, #92]	; 0x5c
 800f2d8:	0319      	lsls	r1, r3, #12
 800f2da:	4b9c      	ldr	r3, [pc, #624]	; (800f54c <_dtoa_r+0x360>)
 800f2dc:	0b09      	lsrs	r1, r1, #12
 800f2de:	430b      	orrs	r3, r1
 800f2e0:	499b      	ldr	r1, [pc, #620]	; (800f550 <_dtoa_r+0x364>)
 800f2e2:	1857      	adds	r7, r2, r1
 800f2e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f2e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f2e8:	0019      	movs	r1, r3
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	4b99      	ldr	r3, [pc, #612]	; (800f554 <_dtoa_r+0x368>)
 800f2ee:	f7f3 f8d1 	bl	8002494 <__aeabi_dsub>
 800f2f2:	4a99      	ldr	r2, [pc, #612]	; (800f558 <_dtoa_r+0x36c>)
 800f2f4:	4b99      	ldr	r3, [pc, #612]	; (800f55c <_dtoa_r+0x370>)
 800f2f6:	f7f2 fe0b 	bl	8001f10 <__aeabi_dmul>
 800f2fa:	4a99      	ldr	r2, [pc, #612]	; (800f560 <_dtoa_r+0x374>)
 800f2fc:	4b99      	ldr	r3, [pc, #612]	; (800f564 <_dtoa_r+0x378>)
 800f2fe:	f7f1 fead 	bl	800105c <__aeabi_dadd>
 800f302:	0004      	movs	r4, r0
 800f304:	0038      	movs	r0, r7
 800f306:	000d      	movs	r5, r1
 800f308:	f7f3 fc9a 	bl	8002c40 <__aeabi_i2d>
 800f30c:	4a96      	ldr	r2, [pc, #600]	; (800f568 <_dtoa_r+0x37c>)
 800f30e:	4b97      	ldr	r3, [pc, #604]	; (800f56c <_dtoa_r+0x380>)
 800f310:	f7f2 fdfe 	bl	8001f10 <__aeabi_dmul>
 800f314:	0002      	movs	r2, r0
 800f316:	000b      	movs	r3, r1
 800f318:	0020      	movs	r0, r4
 800f31a:	0029      	movs	r1, r5
 800f31c:	f7f1 fe9e 	bl	800105c <__aeabi_dadd>
 800f320:	0004      	movs	r4, r0
 800f322:	000d      	movs	r5, r1
 800f324:	f7f3 fc56 	bl	8002bd4 <__aeabi_d2iz>
 800f328:	2200      	movs	r2, #0
 800f32a:	9003      	str	r0, [sp, #12]
 800f32c:	2300      	movs	r3, #0
 800f32e:	0020      	movs	r0, r4
 800f330:	0029      	movs	r1, r5
 800f332:	f7f1 f891 	bl	8000458 <__aeabi_dcmplt>
 800f336:	2800      	cmp	r0, #0
 800f338:	d00b      	beq.n	800f352 <_dtoa_r+0x166>
 800f33a:	9803      	ldr	r0, [sp, #12]
 800f33c:	f7f3 fc80 	bl	8002c40 <__aeabi_i2d>
 800f340:	002b      	movs	r3, r5
 800f342:	0022      	movs	r2, r4
 800f344:	f7f1 f882 	bl	800044c <__aeabi_dcmpeq>
 800f348:	4243      	negs	r3, r0
 800f34a:	4158      	adcs	r0, r3
 800f34c:	9b03      	ldr	r3, [sp, #12]
 800f34e:	1a1b      	subs	r3, r3, r0
 800f350:	9303      	str	r3, [sp, #12]
 800f352:	2301      	movs	r3, #1
 800f354:	9316      	str	r3, [sp, #88]	; 0x58
 800f356:	9b03      	ldr	r3, [sp, #12]
 800f358:	2b16      	cmp	r3, #22
 800f35a:	d810      	bhi.n	800f37e <_dtoa_r+0x192>
 800f35c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f35e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f360:	9a03      	ldr	r2, [sp, #12]
 800f362:	4b83      	ldr	r3, [pc, #524]	; (800f570 <_dtoa_r+0x384>)
 800f364:	00d2      	lsls	r2, r2, #3
 800f366:	189b      	adds	r3, r3, r2
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	685b      	ldr	r3, [r3, #4]
 800f36c:	f7f1 f874 	bl	8000458 <__aeabi_dcmplt>
 800f370:	2800      	cmp	r0, #0
 800f372:	d047      	beq.n	800f404 <_dtoa_r+0x218>
 800f374:	9b03      	ldr	r3, [sp, #12]
 800f376:	3b01      	subs	r3, #1
 800f378:	9303      	str	r3, [sp, #12]
 800f37a:	2300      	movs	r3, #0
 800f37c:	9316      	str	r3, [sp, #88]	; 0x58
 800f37e:	2200      	movs	r2, #0
 800f380:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f382:	920a      	str	r2, [sp, #40]	; 0x28
 800f384:	1bdb      	subs	r3, r3, r7
 800f386:	1e5a      	subs	r2, r3, #1
 800f388:	d53e      	bpl.n	800f408 <_dtoa_r+0x21c>
 800f38a:	2201      	movs	r2, #1
 800f38c:	1ad3      	subs	r3, r2, r3
 800f38e:	930a      	str	r3, [sp, #40]	; 0x28
 800f390:	2300      	movs	r3, #0
 800f392:	930c      	str	r3, [sp, #48]	; 0x30
 800f394:	9b03      	ldr	r3, [sp, #12]
 800f396:	2b00      	cmp	r3, #0
 800f398:	db38      	blt.n	800f40c <_dtoa_r+0x220>
 800f39a:	9a03      	ldr	r2, [sp, #12]
 800f39c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f39e:	4694      	mov	ip, r2
 800f3a0:	4463      	add	r3, ip
 800f3a2:	930c      	str	r3, [sp, #48]	; 0x30
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	9213      	str	r2, [sp, #76]	; 0x4c
 800f3a8:	930d      	str	r3, [sp, #52]	; 0x34
 800f3aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f3ac:	2401      	movs	r4, #1
 800f3ae:	2b09      	cmp	r3, #9
 800f3b0:	d867      	bhi.n	800f482 <_dtoa_r+0x296>
 800f3b2:	2b05      	cmp	r3, #5
 800f3b4:	dd02      	ble.n	800f3bc <_dtoa_r+0x1d0>
 800f3b6:	2400      	movs	r4, #0
 800f3b8:	3b04      	subs	r3, #4
 800f3ba:	9322      	str	r3, [sp, #136]	; 0x88
 800f3bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f3be:	1e98      	subs	r0, r3, #2
 800f3c0:	2803      	cmp	r0, #3
 800f3c2:	d867      	bhi.n	800f494 <_dtoa_r+0x2a8>
 800f3c4:	f7f0 fea8 	bl	8000118 <__gnu_thumb1_case_uqi>
 800f3c8:	5b383a2b 	.word	0x5b383a2b
 800f3cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f3ce:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800f3d0:	18f6      	adds	r6, r6, r3
 800f3d2:	4b68      	ldr	r3, [pc, #416]	; (800f574 <_dtoa_r+0x388>)
 800f3d4:	18f2      	adds	r2, r6, r3
 800f3d6:	2a20      	cmp	r2, #32
 800f3d8:	dd0f      	ble.n	800f3fa <_dtoa_r+0x20e>
 800f3da:	2340      	movs	r3, #64	; 0x40
 800f3dc:	1a9b      	subs	r3, r3, r2
 800f3de:	409f      	lsls	r7, r3
 800f3e0:	4b65      	ldr	r3, [pc, #404]	; (800f578 <_dtoa_r+0x38c>)
 800f3e2:	0038      	movs	r0, r7
 800f3e4:	18f3      	adds	r3, r6, r3
 800f3e6:	40dc      	lsrs	r4, r3
 800f3e8:	4320      	orrs	r0, r4
 800f3ea:	f7f3 fc59 	bl	8002ca0 <__aeabi_ui2d>
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	4b62      	ldr	r3, [pc, #392]	; (800f57c <_dtoa_r+0x390>)
 800f3f2:	1e77      	subs	r7, r6, #1
 800f3f4:	18cb      	adds	r3, r1, r3
 800f3f6:	9217      	str	r2, [sp, #92]	; 0x5c
 800f3f8:	e776      	b.n	800f2e8 <_dtoa_r+0xfc>
 800f3fa:	2320      	movs	r3, #32
 800f3fc:	0020      	movs	r0, r4
 800f3fe:	1a9b      	subs	r3, r3, r2
 800f400:	4098      	lsls	r0, r3
 800f402:	e7f2      	b.n	800f3ea <_dtoa_r+0x1fe>
 800f404:	9016      	str	r0, [sp, #88]	; 0x58
 800f406:	e7ba      	b.n	800f37e <_dtoa_r+0x192>
 800f408:	920c      	str	r2, [sp, #48]	; 0x30
 800f40a:	e7c3      	b.n	800f394 <_dtoa_r+0x1a8>
 800f40c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f40e:	9a03      	ldr	r2, [sp, #12]
 800f410:	1a9b      	subs	r3, r3, r2
 800f412:	930a      	str	r3, [sp, #40]	; 0x28
 800f414:	4253      	negs	r3, r2
 800f416:	930d      	str	r3, [sp, #52]	; 0x34
 800f418:	2300      	movs	r3, #0
 800f41a:	9313      	str	r3, [sp, #76]	; 0x4c
 800f41c:	e7c5      	b.n	800f3aa <_dtoa_r+0x1be>
 800f41e:	2300      	movs	r3, #0
 800f420:	930f      	str	r3, [sp, #60]	; 0x3c
 800f422:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f424:	930b      	str	r3, [sp, #44]	; 0x2c
 800f426:	9307      	str	r3, [sp, #28]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	dc13      	bgt.n	800f454 <_dtoa_r+0x268>
 800f42c:	2301      	movs	r3, #1
 800f42e:	001a      	movs	r2, r3
 800f430:	930b      	str	r3, [sp, #44]	; 0x2c
 800f432:	9307      	str	r3, [sp, #28]
 800f434:	9223      	str	r2, [sp, #140]	; 0x8c
 800f436:	e00d      	b.n	800f454 <_dtoa_r+0x268>
 800f438:	2301      	movs	r3, #1
 800f43a:	e7f1      	b.n	800f420 <_dtoa_r+0x234>
 800f43c:	2300      	movs	r3, #0
 800f43e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f440:	930f      	str	r3, [sp, #60]	; 0x3c
 800f442:	4694      	mov	ip, r2
 800f444:	9b03      	ldr	r3, [sp, #12]
 800f446:	4463      	add	r3, ip
 800f448:	930b      	str	r3, [sp, #44]	; 0x2c
 800f44a:	3301      	adds	r3, #1
 800f44c:	9307      	str	r3, [sp, #28]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	dc00      	bgt.n	800f454 <_dtoa_r+0x268>
 800f452:	2301      	movs	r3, #1
 800f454:	9a04      	ldr	r2, [sp, #16]
 800f456:	2100      	movs	r1, #0
 800f458:	69d0      	ldr	r0, [r2, #28]
 800f45a:	2204      	movs	r2, #4
 800f45c:	0015      	movs	r5, r2
 800f45e:	3514      	adds	r5, #20
 800f460:	429d      	cmp	r5, r3
 800f462:	d91b      	bls.n	800f49c <_dtoa_r+0x2b0>
 800f464:	6041      	str	r1, [r0, #4]
 800f466:	9804      	ldr	r0, [sp, #16]
 800f468:	f000 fdd6 	bl	8010018 <_Balloc>
 800f46c:	9006      	str	r0, [sp, #24]
 800f46e:	2800      	cmp	r0, #0
 800f470:	d117      	bne.n	800f4a2 <_dtoa_r+0x2b6>
 800f472:	21b0      	movs	r1, #176	; 0xb0
 800f474:	4b42      	ldr	r3, [pc, #264]	; (800f580 <_dtoa_r+0x394>)
 800f476:	482e      	ldr	r0, [pc, #184]	; (800f530 <_dtoa_r+0x344>)
 800f478:	9a06      	ldr	r2, [sp, #24]
 800f47a:	31ff      	adds	r1, #255	; 0xff
 800f47c:	e6cb      	b.n	800f216 <_dtoa_r+0x2a>
 800f47e:	2301      	movs	r3, #1
 800f480:	e7dd      	b.n	800f43e <_dtoa_r+0x252>
 800f482:	2300      	movs	r3, #0
 800f484:	940f      	str	r4, [sp, #60]	; 0x3c
 800f486:	9322      	str	r3, [sp, #136]	; 0x88
 800f488:	3b01      	subs	r3, #1
 800f48a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f48c:	9307      	str	r3, [sp, #28]
 800f48e:	2200      	movs	r2, #0
 800f490:	3313      	adds	r3, #19
 800f492:	e7cf      	b.n	800f434 <_dtoa_r+0x248>
 800f494:	2301      	movs	r3, #1
 800f496:	930f      	str	r3, [sp, #60]	; 0x3c
 800f498:	3b02      	subs	r3, #2
 800f49a:	e7f6      	b.n	800f48a <_dtoa_r+0x29e>
 800f49c:	3101      	adds	r1, #1
 800f49e:	0052      	lsls	r2, r2, #1
 800f4a0:	e7dc      	b.n	800f45c <_dtoa_r+0x270>
 800f4a2:	9b04      	ldr	r3, [sp, #16]
 800f4a4:	9a06      	ldr	r2, [sp, #24]
 800f4a6:	69db      	ldr	r3, [r3, #28]
 800f4a8:	601a      	str	r2, [r3, #0]
 800f4aa:	9b07      	ldr	r3, [sp, #28]
 800f4ac:	2b0e      	cmp	r3, #14
 800f4ae:	d900      	bls.n	800f4b2 <_dtoa_r+0x2c6>
 800f4b0:	e0e5      	b.n	800f67e <_dtoa_r+0x492>
 800f4b2:	2c00      	cmp	r4, #0
 800f4b4:	d100      	bne.n	800f4b8 <_dtoa_r+0x2cc>
 800f4b6:	e0e2      	b.n	800f67e <_dtoa_r+0x492>
 800f4b8:	9b03      	ldr	r3, [sp, #12]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	dd64      	ble.n	800f588 <_dtoa_r+0x39c>
 800f4be:	210f      	movs	r1, #15
 800f4c0:	9a03      	ldr	r2, [sp, #12]
 800f4c2:	4b2b      	ldr	r3, [pc, #172]	; (800f570 <_dtoa_r+0x384>)
 800f4c4:	400a      	ands	r2, r1
 800f4c6:	00d2      	lsls	r2, r2, #3
 800f4c8:	189b      	adds	r3, r3, r2
 800f4ca:	681e      	ldr	r6, [r3, #0]
 800f4cc:	685f      	ldr	r7, [r3, #4]
 800f4ce:	9b03      	ldr	r3, [sp, #12]
 800f4d0:	2402      	movs	r4, #2
 800f4d2:	111d      	asrs	r5, r3, #4
 800f4d4:	05db      	lsls	r3, r3, #23
 800f4d6:	d50a      	bpl.n	800f4ee <_dtoa_r+0x302>
 800f4d8:	4b2a      	ldr	r3, [pc, #168]	; (800f584 <_dtoa_r+0x398>)
 800f4da:	400d      	ands	r5, r1
 800f4dc:	6a1a      	ldr	r2, [r3, #32]
 800f4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f4e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f4e4:	f7f2 f91a 	bl	800171c <__aeabi_ddiv>
 800f4e8:	9008      	str	r0, [sp, #32]
 800f4ea:	9109      	str	r1, [sp, #36]	; 0x24
 800f4ec:	3401      	adds	r4, #1
 800f4ee:	4b25      	ldr	r3, [pc, #148]	; (800f584 <_dtoa_r+0x398>)
 800f4f0:	930e      	str	r3, [sp, #56]	; 0x38
 800f4f2:	2d00      	cmp	r5, #0
 800f4f4:	d108      	bne.n	800f508 <_dtoa_r+0x31c>
 800f4f6:	9808      	ldr	r0, [sp, #32]
 800f4f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4fa:	0032      	movs	r2, r6
 800f4fc:	003b      	movs	r3, r7
 800f4fe:	f7f2 f90d 	bl	800171c <__aeabi_ddiv>
 800f502:	9008      	str	r0, [sp, #32]
 800f504:	9109      	str	r1, [sp, #36]	; 0x24
 800f506:	e05a      	b.n	800f5be <_dtoa_r+0x3d2>
 800f508:	2301      	movs	r3, #1
 800f50a:	421d      	tst	r5, r3
 800f50c:	d009      	beq.n	800f522 <_dtoa_r+0x336>
 800f50e:	18e4      	adds	r4, r4, r3
 800f510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f512:	0030      	movs	r0, r6
 800f514:	681a      	ldr	r2, [r3, #0]
 800f516:	685b      	ldr	r3, [r3, #4]
 800f518:	0039      	movs	r1, r7
 800f51a:	f7f2 fcf9 	bl	8001f10 <__aeabi_dmul>
 800f51e:	0006      	movs	r6, r0
 800f520:	000f      	movs	r7, r1
 800f522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f524:	106d      	asrs	r5, r5, #1
 800f526:	3308      	adds	r3, #8
 800f528:	e7e2      	b.n	800f4f0 <_dtoa_r+0x304>
 800f52a:	46c0      	nop			; (mov r8, r8)
 800f52c:	08013c9b 	.word	0x08013c9b
 800f530:	08013cb2 	.word	0x08013cb2
 800f534:	7ff00000 	.word	0x7ff00000
 800f538:	0000270f 	.word	0x0000270f
 800f53c:	08013c97 	.word	0x08013c97
 800f540:	08013c9a 	.word	0x08013c9a
 800f544:	08013c65 	.word	0x08013c65
 800f548:	08013c66 	.word	0x08013c66
 800f54c:	3ff00000 	.word	0x3ff00000
 800f550:	fffffc01 	.word	0xfffffc01
 800f554:	3ff80000 	.word	0x3ff80000
 800f558:	636f4361 	.word	0x636f4361
 800f55c:	3fd287a7 	.word	0x3fd287a7
 800f560:	8b60c8b3 	.word	0x8b60c8b3
 800f564:	3fc68a28 	.word	0x3fc68a28
 800f568:	509f79fb 	.word	0x509f79fb
 800f56c:	3fd34413 	.word	0x3fd34413
 800f570:	08013da0 	.word	0x08013da0
 800f574:	00000432 	.word	0x00000432
 800f578:	00000412 	.word	0x00000412
 800f57c:	fe100000 	.word	0xfe100000
 800f580:	08013d0a 	.word	0x08013d0a
 800f584:	08013d78 	.word	0x08013d78
 800f588:	9b03      	ldr	r3, [sp, #12]
 800f58a:	2402      	movs	r4, #2
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d016      	beq.n	800f5be <_dtoa_r+0x3d2>
 800f590:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f592:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f594:	220f      	movs	r2, #15
 800f596:	425d      	negs	r5, r3
 800f598:	402a      	ands	r2, r5
 800f59a:	4bdd      	ldr	r3, [pc, #884]	; (800f910 <_dtoa_r+0x724>)
 800f59c:	00d2      	lsls	r2, r2, #3
 800f59e:	189b      	adds	r3, r3, r2
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	f7f2 fcb4 	bl	8001f10 <__aeabi_dmul>
 800f5a8:	2701      	movs	r7, #1
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	9008      	str	r0, [sp, #32]
 800f5ae:	9109      	str	r1, [sp, #36]	; 0x24
 800f5b0:	4ed8      	ldr	r6, [pc, #864]	; (800f914 <_dtoa_r+0x728>)
 800f5b2:	112d      	asrs	r5, r5, #4
 800f5b4:	2d00      	cmp	r5, #0
 800f5b6:	d000      	beq.n	800f5ba <_dtoa_r+0x3ce>
 800f5b8:	e091      	b.n	800f6de <_dtoa_r+0x4f2>
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d1a1      	bne.n	800f502 <_dtoa_r+0x316>
 800f5be:	9e08      	ldr	r6, [sp, #32]
 800f5c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f5c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d100      	bne.n	800f5ca <_dtoa_r+0x3de>
 800f5c8:	e094      	b.n	800f6f4 <_dtoa_r+0x508>
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	0030      	movs	r0, r6
 800f5ce:	0039      	movs	r1, r7
 800f5d0:	4bd1      	ldr	r3, [pc, #836]	; (800f918 <_dtoa_r+0x72c>)
 800f5d2:	f7f0 ff41 	bl	8000458 <__aeabi_dcmplt>
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	d100      	bne.n	800f5dc <_dtoa_r+0x3f0>
 800f5da:	e08b      	b.n	800f6f4 <_dtoa_r+0x508>
 800f5dc:	9b07      	ldr	r3, [sp, #28]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d100      	bne.n	800f5e4 <_dtoa_r+0x3f8>
 800f5e2:	e087      	b.n	800f6f4 <_dtoa_r+0x508>
 800f5e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	dd45      	ble.n	800f676 <_dtoa_r+0x48a>
 800f5ea:	9b03      	ldr	r3, [sp, #12]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	3b01      	subs	r3, #1
 800f5f0:	930e      	str	r3, [sp, #56]	; 0x38
 800f5f2:	0030      	movs	r0, r6
 800f5f4:	4bc9      	ldr	r3, [pc, #804]	; (800f91c <_dtoa_r+0x730>)
 800f5f6:	0039      	movs	r1, r7
 800f5f8:	f7f2 fc8a 	bl	8001f10 <__aeabi_dmul>
 800f5fc:	9008      	str	r0, [sp, #32]
 800f5fe:	9109      	str	r1, [sp, #36]	; 0x24
 800f600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f602:	3401      	adds	r4, #1
 800f604:	0020      	movs	r0, r4
 800f606:	9e08      	ldr	r6, [sp, #32]
 800f608:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f60a:	9312      	str	r3, [sp, #72]	; 0x48
 800f60c:	f7f3 fb18 	bl	8002c40 <__aeabi_i2d>
 800f610:	0032      	movs	r2, r6
 800f612:	003b      	movs	r3, r7
 800f614:	f7f2 fc7c 	bl	8001f10 <__aeabi_dmul>
 800f618:	2200      	movs	r2, #0
 800f61a:	4bc1      	ldr	r3, [pc, #772]	; (800f920 <_dtoa_r+0x734>)
 800f61c:	f7f1 fd1e 	bl	800105c <__aeabi_dadd>
 800f620:	4ac0      	ldr	r2, [pc, #768]	; (800f924 <_dtoa_r+0x738>)
 800f622:	9014      	str	r0, [sp, #80]	; 0x50
 800f624:	9115      	str	r1, [sp, #84]	; 0x54
 800f626:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f628:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800f62a:	4694      	mov	ip, r2
 800f62c:	9308      	str	r3, [sp, #32]
 800f62e:	9409      	str	r4, [sp, #36]	; 0x24
 800f630:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f632:	4463      	add	r3, ip
 800f634:	9318      	str	r3, [sp, #96]	; 0x60
 800f636:	9309      	str	r3, [sp, #36]	; 0x24
 800f638:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d15e      	bne.n	800f6fc <_dtoa_r+0x510>
 800f63e:	2200      	movs	r2, #0
 800f640:	4bb9      	ldr	r3, [pc, #740]	; (800f928 <_dtoa_r+0x73c>)
 800f642:	0030      	movs	r0, r6
 800f644:	0039      	movs	r1, r7
 800f646:	f7f2 ff25 	bl	8002494 <__aeabi_dsub>
 800f64a:	9a08      	ldr	r2, [sp, #32]
 800f64c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f64e:	0004      	movs	r4, r0
 800f650:	000d      	movs	r5, r1
 800f652:	f7f0 ff15 	bl	8000480 <__aeabi_dcmpgt>
 800f656:	2800      	cmp	r0, #0
 800f658:	d000      	beq.n	800f65c <_dtoa_r+0x470>
 800f65a:	e2b3      	b.n	800fbc4 <_dtoa_r+0x9d8>
 800f65c:	48b3      	ldr	r0, [pc, #716]	; (800f92c <_dtoa_r+0x740>)
 800f65e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f660:	4684      	mov	ip, r0
 800f662:	4461      	add	r1, ip
 800f664:	000b      	movs	r3, r1
 800f666:	0020      	movs	r0, r4
 800f668:	0029      	movs	r1, r5
 800f66a:	9a08      	ldr	r2, [sp, #32]
 800f66c:	f7f0 fef4 	bl	8000458 <__aeabi_dcmplt>
 800f670:	2800      	cmp	r0, #0
 800f672:	d000      	beq.n	800f676 <_dtoa_r+0x48a>
 800f674:	e2a3      	b.n	800fbbe <_dtoa_r+0x9d2>
 800f676:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f678:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f67a:	9308      	str	r3, [sp, #32]
 800f67c:	9409      	str	r4, [sp, #36]	; 0x24
 800f67e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f680:	2b00      	cmp	r3, #0
 800f682:	da00      	bge.n	800f686 <_dtoa_r+0x49a>
 800f684:	e179      	b.n	800f97a <_dtoa_r+0x78e>
 800f686:	9a03      	ldr	r2, [sp, #12]
 800f688:	2a0e      	cmp	r2, #14
 800f68a:	dd00      	ble.n	800f68e <_dtoa_r+0x4a2>
 800f68c:	e175      	b.n	800f97a <_dtoa_r+0x78e>
 800f68e:	4ba0      	ldr	r3, [pc, #640]	; (800f910 <_dtoa_r+0x724>)
 800f690:	00d2      	lsls	r2, r2, #3
 800f692:	189b      	adds	r3, r3, r2
 800f694:	681e      	ldr	r6, [r3, #0]
 800f696:	685f      	ldr	r7, [r3, #4]
 800f698:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	db00      	blt.n	800f6a0 <_dtoa_r+0x4b4>
 800f69e:	e0e5      	b.n	800f86c <_dtoa_r+0x680>
 800f6a0:	9b07      	ldr	r3, [sp, #28]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	dd00      	ble.n	800f6a8 <_dtoa_r+0x4bc>
 800f6a6:	e0e1      	b.n	800f86c <_dtoa_r+0x680>
 800f6a8:	d000      	beq.n	800f6ac <_dtoa_r+0x4c0>
 800f6aa:	e288      	b.n	800fbbe <_dtoa_r+0x9d2>
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	0030      	movs	r0, r6
 800f6b0:	0039      	movs	r1, r7
 800f6b2:	4b9d      	ldr	r3, [pc, #628]	; (800f928 <_dtoa_r+0x73c>)
 800f6b4:	f7f2 fc2c 	bl	8001f10 <__aeabi_dmul>
 800f6b8:	9a08      	ldr	r2, [sp, #32]
 800f6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6bc:	f7f0 feea 	bl	8000494 <__aeabi_dcmpge>
 800f6c0:	9e07      	ldr	r6, [sp, #28]
 800f6c2:	0037      	movs	r7, r6
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	d000      	beq.n	800f6ca <_dtoa_r+0x4de>
 800f6c8:	e25f      	b.n	800fb8a <_dtoa_r+0x99e>
 800f6ca:	9b06      	ldr	r3, [sp, #24]
 800f6cc:	9a06      	ldr	r2, [sp, #24]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	9308      	str	r3, [sp, #32]
 800f6d2:	2331      	movs	r3, #49	; 0x31
 800f6d4:	7013      	strb	r3, [r2, #0]
 800f6d6:	9b03      	ldr	r3, [sp, #12]
 800f6d8:	3301      	adds	r3, #1
 800f6da:	9303      	str	r3, [sp, #12]
 800f6dc:	e25a      	b.n	800fb94 <_dtoa_r+0x9a8>
 800f6de:	423d      	tst	r5, r7
 800f6e0:	d005      	beq.n	800f6ee <_dtoa_r+0x502>
 800f6e2:	6832      	ldr	r2, [r6, #0]
 800f6e4:	6873      	ldr	r3, [r6, #4]
 800f6e6:	f7f2 fc13 	bl	8001f10 <__aeabi_dmul>
 800f6ea:	003b      	movs	r3, r7
 800f6ec:	3401      	adds	r4, #1
 800f6ee:	106d      	asrs	r5, r5, #1
 800f6f0:	3608      	adds	r6, #8
 800f6f2:	e75f      	b.n	800f5b4 <_dtoa_r+0x3c8>
 800f6f4:	9b03      	ldr	r3, [sp, #12]
 800f6f6:	930e      	str	r3, [sp, #56]	; 0x38
 800f6f8:	9b07      	ldr	r3, [sp, #28]
 800f6fa:	e783      	b.n	800f604 <_dtoa_r+0x418>
 800f6fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f6fe:	4b84      	ldr	r3, [pc, #528]	; (800f910 <_dtoa_r+0x724>)
 800f700:	3a01      	subs	r2, #1
 800f702:	00d2      	lsls	r2, r2, #3
 800f704:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f706:	189b      	adds	r3, r3, r2
 800f708:	9c08      	ldr	r4, [sp, #32]
 800f70a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f70c:	681a      	ldr	r2, [r3, #0]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	2900      	cmp	r1, #0
 800f712:	d051      	beq.n	800f7b8 <_dtoa_r+0x5cc>
 800f714:	2000      	movs	r0, #0
 800f716:	4986      	ldr	r1, [pc, #536]	; (800f930 <_dtoa_r+0x744>)
 800f718:	f7f2 f800 	bl	800171c <__aeabi_ddiv>
 800f71c:	0022      	movs	r2, r4
 800f71e:	002b      	movs	r3, r5
 800f720:	f7f2 feb8 	bl	8002494 <__aeabi_dsub>
 800f724:	9a06      	ldr	r2, [sp, #24]
 800f726:	0004      	movs	r4, r0
 800f728:	4694      	mov	ip, r2
 800f72a:	000d      	movs	r5, r1
 800f72c:	9b06      	ldr	r3, [sp, #24]
 800f72e:	9314      	str	r3, [sp, #80]	; 0x50
 800f730:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f732:	4463      	add	r3, ip
 800f734:	9318      	str	r3, [sp, #96]	; 0x60
 800f736:	0039      	movs	r1, r7
 800f738:	0030      	movs	r0, r6
 800f73a:	f7f3 fa4b 	bl	8002bd4 <__aeabi_d2iz>
 800f73e:	9012      	str	r0, [sp, #72]	; 0x48
 800f740:	f7f3 fa7e 	bl	8002c40 <__aeabi_i2d>
 800f744:	0002      	movs	r2, r0
 800f746:	000b      	movs	r3, r1
 800f748:	0030      	movs	r0, r6
 800f74a:	0039      	movs	r1, r7
 800f74c:	f7f2 fea2 	bl	8002494 <__aeabi_dsub>
 800f750:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f752:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f754:	3301      	adds	r3, #1
 800f756:	9308      	str	r3, [sp, #32]
 800f758:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f75a:	0006      	movs	r6, r0
 800f75c:	3330      	adds	r3, #48	; 0x30
 800f75e:	7013      	strb	r3, [r2, #0]
 800f760:	0022      	movs	r2, r4
 800f762:	002b      	movs	r3, r5
 800f764:	000f      	movs	r7, r1
 800f766:	f7f0 fe77 	bl	8000458 <__aeabi_dcmplt>
 800f76a:	2800      	cmp	r0, #0
 800f76c:	d174      	bne.n	800f858 <_dtoa_r+0x66c>
 800f76e:	0032      	movs	r2, r6
 800f770:	003b      	movs	r3, r7
 800f772:	2000      	movs	r0, #0
 800f774:	4968      	ldr	r1, [pc, #416]	; (800f918 <_dtoa_r+0x72c>)
 800f776:	f7f2 fe8d 	bl	8002494 <__aeabi_dsub>
 800f77a:	0022      	movs	r2, r4
 800f77c:	002b      	movs	r3, r5
 800f77e:	f7f0 fe6b 	bl	8000458 <__aeabi_dcmplt>
 800f782:	2800      	cmp	r0, #0
 800f784:	d000      	beq.n	800f788 <_dtoa_r+0x59c>
 800f786:	e0d7      	b.n	800f938 <_dtoa_r+0x74c>
 800f788:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f78a:	9a08      	ldr	r2, [sp, #32]
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d100      	bne.n	800f792 <_dtoa_r+0x5a6>
 800f790:	e771      	b.n	800f676 <_dtoa_r+0x48a>
 800f792:	2200      	movs	r2, #0
 800f794:	0020      	movs	r0, r4
 800f796:	0029      	movs	r1, r5
 800f798:	4b60      	ldr	r3, [pc, #384]	; (800f91c <_dtoa_r+0x730>)
 800f79a:	f7f2 fbb9 	bl	8001f10 <__aeabi_dmul>
 800f79e:	4b5f      	ldr	r3, [pc, #380]	; (800f91c <_dtoa_r+0x730>)
 800f7a0:	0004      	movs	r4, r0
 800f7a2:	000d      	movs	r5, r1
 800f7a4:	0030      	movs	r0, r6
 800f7a6:	0039      	movs	r1, r7
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	f7f2 fbb1 	bl	8001f10 <__aeabi_dmul>
 800f7ae:	9b08      	ldr	r3, [sp, #32]
 800f7b0:	0006      	movs	r6, r0
 800f7b2:	000f      	movs	r7, r1
 800f7b4:	9314      	str	r3, [sp, #80]	; 0x50
 800f7b6:	e7be      	b.n	800f736 <_dtoa_r+0x54a>
 800f7b8:	0020      	movs	r0, r4
 800f7ba:	0029      	movs	r1, r5
 800f7bc:	f7f2 fba8 	bl	8001f10 <__aeabi_dmul>
 800f7c0:	9a06      	ldr	r2, [sp, #24]
 800f7c2:	9b06      	ldr	r3, [sp, #24]
 800f7c4:	4694      	mov	ip, r2
 800f7c6:	9308      	str	r3, [sp, #32]
 800f7c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f7ca:	9014      	str	r0, [sp, #80]	; 0x50
 800f7cc:	9115      	str	r1, [sp, #84]	; 0x54
 800f7ce:	4463      	add	r3, ip
 800f7d0:	9319      	str	r3, [sp, #100]	; 0x64
 800f7d2:	0030      	movs	r0, r6
 800f7d4:	0039      	movs	r1, r7
 800f7d6:	f7f3 f9fd 	bl	8002bd4 <__aeabi_d2iz>
 800f7da:	9018      	str	r0, [sp, #96]	; 0x60
 800f7dc:	f7f3 fa30 	bl	8002c40 <__aeabi_i2d>
 800f7e0:	0002      	movs	r2, r0
 800f7e2:	000b      	movs	r3, r1
 800f7e4:	0030      	movs	r0, r6
 800f7e6:	0039      	movs	r1, r7
 800f7e8:	f7f2 fe54 	bl	8002494 <__aeabi_dsub>
 800f7ec:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800f7ee:	9b08      	ldr	r3, [sp, #32]
 800f7f0:	3630      	adds	r6, #48	; 0x30
 800f7f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f7f4:	701e      	strb	r6, [r3, #0]
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	0004      	movs	r4, r0
 800f7fa:	000d      	movs	r5, r1
 800f7fc:	9308      	str	r3, [sp, #32]
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d12d      	bne.n	800f85e <_dtoa_r+0x672>
 800f802:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f804:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f806:	9a06      	ldr	r2, [sp, #24]
 800f808:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f80a:	4694      	mov	ip, r2
 800f80c:	4463      	add	r3, ip
 800f80e:	2200      	movs	r2, #0
 800f810:	9308      	str	r3, [sp, #32]
 800f812:	4b47      	ldr	r3, [pc, #284]	; (800f930 <_dtoa_r+0x744>)
 800f814:	f7f1 fc22 	bl	800105c <__aeabi_dadd>
 800f818:	0002      	movs	r2, r0
 800f81a:	000b      	movs	r3, r1
 800f81c:	0020      	movs	r0, r4
 800f81e:	0029      	movs	r1, r5
 800f820:	f7f0 fe2e 	bl	8000480 <__aeabi_dcmpgt>
 800f824:	2800      	cmp	r0, #0
 800f826:	d000      	beq.n	800f82a <_dtoa_r+0x63e>
 800f828:	e086      	b.n	800f938 <_dtoa_r+0x74c>
 800f82a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f82c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f82e:	2000      	movs	r0, #0
 800f830:	493f      	ldr	r1, [pc, #252]	; (800f930 <_dtoa_r+0x744>)
 800f832:	f7f2 fe2f 	bl	8002494 <__aeabi_dsub>
 800f836:	0002      	movs	r2, r0
 800f838:	000b      	movs	r3, r1
 800f83a:	0020      	movs	r0, r4
 800f83c:	0029      	movs	r1, r5
 800f83e:	f7f0 fe0b 	bl	8000458 <__aeabi_dcmplt>
 800f842:	2800      	cmp	r0, #0
 800f844:	d100      	bne.n	800f848 <_dtoa_r+0x65c>
 800f846:	e716      	b.n	800f676 <_dtoa_r+0x48a>
 800f848:	9b08      	ldr	r3, [sp, #32]
 800f84a:	001a      	movs	r2, r3
 800f84c:	3a01      	subs	r2, #1
 800f84e:	9208      	str	r2, [sp, #32]
 800f850:	7812      	ldrb	r2, [r2, #0]
 800f852:	2a30      	cmp	r2, #48	; 0x30
 800f854:	d0f8      	beq.n	800f848 <_dtoa_r+0x65c>
 800f856:	9308      	str	r3, [sp, #32]
 800f858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f85a:	9303      	str	r3, [sp, #12]
 800f85c:	e046      	b.n	800f8ec <_dtoa_r+0x700>
 800f85e:	2200      	movs	r2, #0
 800f860:	4b2e      	ldr	r3, [pc, #184]	; (800f91c <_dtoa_r+0x730>)
 800f862:	f7f2 fb55 	bl	8001f10 <__aeabi_dmul>
 800f866:	0006      	movs	r6, r0
 800f868:	000f      	movs	r7, r1
 800f86a:	e7b2      	b.n	800f7d2 <_dtoa_r+0x5e6>
 800f86c:	9b06      	ldr	r3, [sp, #24]
 800f86e:	9a06      	ldr	r2, [sp, #24]
 800f870:	930a      	str	r3, [sp, #40]	; 0x28
 800f872:	9b07      	ldr	r3, [sp, #28]
 800f874:	9c08      	ldr	r4, [sp, #32]
 800f876:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f878:	3b01      	subs	r3, #1
 800f87a:	189b      	adds	r3, r3, r2
 800f87c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f87e:	0032      	movs	r2, r6
 800f880:	003b      	movs	r3, r7
 800f882:	0020      	movs	r0, r4
 800f884:	0029      	movs	r1, r5
 800f886:	f7f1 ff49 	bl	800171c <__aeabi_ddiv>
 800f88a:	f7f3 f9a3 	bl	8002bd4 <__aeabi_d2iz>
 800f88e:	9007      	str	r0, [sp, #28]
 800f890:	f7f3 f9d6 	bl	8002c40 <__aeabi_i2d>
 800f894:	0032      	movs	r2, r6
 800f896:	003b      	movs	r3, r7
 800f898:	f7f2 fb3a 	bl	8001f10 <__aeabi_dmul>
 800f89c:	0002      	movs	r2, r0
 800f89e:	000b      	movs	r3, r1
 800f8a0:	0020      	movs	r0, r4
 800f8a2:	0029      	movs	r1, r5
 800f8a4:	f7f2 fdf6 	bl	8002494 <__aeabi_dsub>
 800f8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8aa:	001a      	movs	r2, r3
 800f8ac:	3201      	adds	r2, #1
 800f8ae:	920a      	str	r2, [sp, #40]	; 0x28
 800f8b0:	9208      	str	r2, [sp, #32]
 800f8b2:	9a07      	ldr	r2, [sp, #28]
 800f8b4:	3230      	adds	r2, #48	; 0x30
 800f8b6:	701a      	strb	r2, [r3, #0]
 800f8b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d14f      	bne.n	800f95e <_dtoa_r+0x772>
 800f8be:	0002      	movs	r2, r0
 800f8c0:	000b      	movs	r3, r1
 800f8c2:	f7f1 fbcb 	bl	800105c <__aeabi_dadd>
 800f8c6:	0032      	movs	r2, r6
 800f8c8:	003b      	movs	r3, r7
 800f8ca:	0004      	movs	r4, r0
 800f8cc:	000d      	movs	r5, r1
 800f8ce:	f7f0 fdd7 	bl	8000480 <__aeabi_dcmpgt>
 800f8d2:	2800      	cmp	r0, #0
 800f8d4:	d12e      	bne.n	800f934 <_dtoa_r+0x748>
 800f8d6:	0032      	movs	r2, r6
 800f8d8:	003b      	movs	r3, r7
 800f8da:	0020      	movs	r0, r4
 800f8dc:	0029      	movs	r1, r5
 800f8de:	f7f0 fdb5 	bl	800044c <__aeabi_dcmpeq>
 800f8e2:	2800      	cmp	r0, #0
 800f8e4:	d002      	beq.n	800f8ec <_dtoa_r+0x700>
 800f8e6:	9b07      	ldr	r3, [sp, #28]
 800f8e8:	07de      	lsls	r6, r3, #31
 800f8ea:	d423      	bmi.n	800f934 <_dtoa_r+0x748>
 800f8ec:	9905      	ldr	r1, [sp, #20]
 800f8ee:	9804      	ldr	r0, [sp, #16]
 800f8f0:	f000 fbd6 	bl	80100a0 <_Bfree>
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	9a08      	ldr	r2, [sp, #32]
 800f8f8:	7013      	strb	r3, [r2, #0]
 800f8fa:	9b03      	ldr	r3, [sp, #12]
 800f8fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f8fe:	3301      	adds	r3, #1
 800f900:	6013      	str	r3, [r2, #0]
 800f902:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f904:	2b00      	cmp	r3, #0
 800f906:	d100      	bne.n	800f90a <_dtoa_r+0x71e>
 800f908:	e4ba      	b.n	800f280 <_dtoa_r+0x94>
 800f90a:	9a08      	ldr	r2, [sp, #32]
 800f90c:	601a      	str	r2, [r3, #0]
 800f90e:	e4b7      	b.n	800f280 <_dtoa_r+0x94>
 800f910:	08013da0 	.word	0x08013da0
 800f914:	08013d78 	.word	0x08013d78
 800f918:	3ff00000 	.word	0x3ff00000
 800f91c:	40240000 	.word	0x40240000
 800f920:	401c0000 	.word	0x401c0000
 800f924:	fcc00000 	.word	0xfcc00000
 800f928:	40140000 	.word	0x40140000
 800f92c:	7cc00000 	.word	0x7cc00000
 800f930:	3fe00000 	.word	0x3fe00000
 800f934:	9b03      	ldr	r3, [sp, #12]
 800f936:	930e      	str	r3, [sp, #56]	; 0x38
 800f938:	9b08      	ldr	r3, [sp, #32]
 800f93a:	9308      	str	r3, [sp, #32]
 800f93c:	3b01      	subs	r3, #1
 800f93e:	781a      	ldrb	r2, [r3, #0]
 800f940:	2a39      	cmp	r2, #57	; 0x39
 800f942:	d108      	bne.n	800f956 <_dtoa_r+0x76a>
 800f944:	9a06      	ldr	r2, [sp, #24]
 800f946:	429a      	cmp	r2, r3
 800f948:	d1f7      	bne.n	800f93a <_dtoa_r+0x74e>
 800f94a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f94c:	9906      	ldr	r1, [sp, #24]
 800f94e:	3201      	adds	r2, #1
 800f950:	920e      	str	r2, [sp, #56]	; 0x38
 800f952:	2230      	movs	r2, #48	; 0x30
 800f954:	700a      	strb	r2, [r1, #0]
 800f956:	781a      	ldrb	r2, [r3, #0]
 800f958:	3201      	adds	r2, #1
 800f95a:	701a      	strb	r2, [r3, #0]
 800f95c:	e77c      	b.n	800f858 <_dtoa_r+0x66c>
 800f95e:	2200      	movs	r2, #0
 800f960:	4ba9      	ldr	r3, [pc, #676]	; (800fc08 <_dtoa_r+0xa1c>)
 800f962:	f7f2 fad5 	bl	8001f10 <__aeabi_dmul>
 800f966:	2200      	movs	r2, #0
 800f968:	2300      	movs	r3, #0
 800f96a:	0004      	movs	r4, r0
 800f96c:	000d      	movs	r5, r1
 800f96e:	f7f0 fd6d 	bl	800044c <__aeabi_dcmpeq>
 800f972:	2800      	cmp	r0, #0
 800f974:	d100      	bne.n	800f978 <_dtoa_r+0x78c>
 800f976:	e782      	b.n	800f87e <_dtoa_r+0x692>
 800f978:	e7b8      	b.n	800f8ec <_dtoa_r+0x700>
 800f97a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800f97c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f97e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f980:	2f00      	cmp	r7, #0
 800f982:	d012      	beq.n	800f9aa <_dtoa_r+0x7be>
 800f984:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f986:	2a01      	cmp	r2, #1
 800f988:	dc6e      	bgt.n	800fa68 <_dtoa_r+0x87c>
 800f98a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f98c:	2a00      	cmp	r2, #0
 800f98e:	d065      	beq.n	800fa5c <_dtoa_r+0x870>
 800f990:	4a9e      	ldr	r2, [pc, #632]	; (800fc0c <_dtoa_r+0xa20>)
 800f992:	189b      	adds	r3, r3, r2
 800f994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f996:	2101      	movs	r1, #1
 800f998:	18d2      	adds	r2, r2, r3
 800f99a:	920a      	str	r2, [sp, #40]	; 0x28
 800f99c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f99e:	9804      	ldr	r0, [sp, #16]
 800f9a0:	18d3      	adds	r3, r2, r3
 800f9a2:	930c      	str	r3, [sp, #48]	; 0x30
 800f9a4:	f000 fc78 	bl	8010298 <__i2b>
 800f9a8:	0007      	movs	r7, r0
 800f9aa:	2c00      	cmp	r4, #0
 800f9ac:	d00e      	beq.n	800f9cc <_dtoa_r+0x7e0>
 800f9ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	dd0b      	ble.n	800f9cc <_dtoa_r+0x7e0>
 800f9b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f9b6:	0023      	movs	r3, r4
 800f9b8:	4294      	cmp	r4, r2
 800f9ba:	dd00      	ble.n	800f9be <_dtoa_r+0x7d2>
 800f9bc:	0013      	movs	r3, r2
 800f9be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9c0:	1ae4      	subs	r4, r4, r3
 800f9c2:	1ad2      	subs	r2, r2, r3
 800f9c4:	920a      	str	r2, [sp, #40]	; 0x28
 800f9c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f9c8:	1ad3      	subs	r3, r2, r3
 800f9ca:	930c      	str	r3, [sp, #48]	; 0x30
 800f9cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d01e      	beq.n	800fa10 <_dtoa_r+0x824>
 800f9d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d05c      	beq.n	800fa92 <_dtoa_r+0x8a6>
 800f9d8:	2d00      	cmp	r5, #0
 800f9da:	dd10      	ble.n	800f9fe <_dtoa_r+0x812>
 800f9dc:	0039      	movs	r1, r7
 800f9de:	002a      	movs	r2, r5
 800f9e0:	9804      	ldr	r0, [sp, #16]
 800f9e2:	f000 fd21 	bl	8010428 <__pow5mult>
 800f9e6:	9a05      	ldr	r2, [sp, #20]
 800f9e8:	0001      	movs	r1, r0
 800f9ea:	0007      	movs	r7, r0
 800f9ec:	9804      	ldr	r0, [sp, #16]
 800f9ee:	f000 fc6b 	bl	80102c8 <__multiply>
 800f9f2:	0006      	movs	r6, r0
 800f9f4:	9905      	ldr	r1, [sp, #20]
 800f9f6:	9804      	ldr	r0, [sp, #16]
 800f9f8:	f000 fb52 	bl	80100a0 <_Bfree>
 800f9fc:	9605      	str	r6, [sp, #20]
 800f9fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa00:	1b5a      	subs	r2, r3, r5
 800fa02:	42ab      	cmp	r3, r5
 800fa04:	d004      	beq.n	800fa10 <_dtoa_r+0x824>
 800fa06:	9905      	ldr	r1, [sp, #20]
 800fa08:	9804      	ldr	r0, [sp, #16]
 800fa0a:	f000 fd0d 	bl	8010428 <__pow5mult>
 800fa0e:	9005      	str	r0, [sp, #20]
 800fa10:	2101      	movs	r1, #1
 800fa12:	9804      	ldr	r0, [sp, #16]
 800fa14:	f000 fc40 	bl	8010298 <__i2b>
 800fa18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa1a:	0006      	movs	r6, r0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	dd3a      	ble.n	800fa96 <_dtoa_r+0x8aa>
 800fa20:	001a      	movs	r2, r3
 800fa22:	0001      	movs	r1, r0
 800fa24:	9804      	ldr	r0, [sp, #16]
 800fa26:	f000 fcff 	bl	8010428 <__pow5mult>
 800fa2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fa2c:	0006      	movs	r6, r0
 800fa2e:	2500      	movs	r5, #0
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	dc38      	bgt.n	800faa6 <_dtoa_r+0x8ba>
 800fa34:	2500      	movs	r5, #0
 800fa36:	9b08      	ldr	r3, [sp, #32]
 800fa38:	42ab      	cmp	r3, r5
 800fa3a:	d130      	bne.n	800fa9e <_dtoa_r+0x8b2>
 800fa3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa3e:	031b      	lsls	r3, r3, #12
 800fa40:	42ab      	cmp	r3, r5
 800fa42:	d12c      	bne.n	800fa9e <_dtoa_r+0x8b2>
 800fa44:	4b72      	ldr	r3, [pc, #456]	; (800fc10 <_dtoa_r+0xa24>)
 800fa46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa48:	4213      	tst	r3, r2
 800fa4a:	d028      	beq.n	800fa9e <_dtoa_r+0x8b2>
 800fa4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa4e:	3501      	adds	r5, #1
 800fa50:	3301      	adds	r3, #1
 800fa52:	930a      	str	r3, [sp, #40]	; 0x28
 800fa54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa56:	3301      	adds	r3, #1
 800fa58:	930c      	str	r3, [sp, #48]	; 0x30
 800fa5a:	e020      	b.n	800fa9e <_dtoa_r+0x8b2>
 800fa5c:	2336      	movs	r3, #54	; 0x36
 800fa5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fa60:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fa62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fa64:	1a9b      	subs	r3, r3, r2
 800fa66:	e795      	b.n	800f994 <_dtoa_r+0x7a8>
 800fa68:	9b07      	ldr	r3, [sp, #28]
 800fa6a:	1e5d      	subs	r5, r3, #1
 800fa6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa6e:	42ab      	cmp	r3, r5
 800fa70:	db07      	blt.n	800fa82 <_dtoa_r+0x896>
 800fa72:	1b5d      	subs	r5, r3, r5
 800fa74:	9b07      	ldr	r3, [sp, #28]
 800fa76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	da8b      	bge.n	800f994 <_dtoa_r+0x7a8>
 800fa7c:	1ae4      	subs	r4, r4, r3
 800fa7e:	2300      	movs	r3, #0
 800fa80:	e788      	b.n	800f994 <_dtoa_r+0x7a8>
 800fa82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fa86:	1aeb      	subs	r3, r5, r3
 800fa88:	18d3      	adds	r3, r2, r3
 800fa8a:	950d      	str	r5, [sp, #52]	; 0x34
 800fa8c:	9313      	str	r3, [sp, #76]	; 0x4c
 800fa8e:	2500      	movs	r5, #0
 800fa90:	e7f0      	b.n	800fa74 <_dtoa_r+0x888>
 800fa92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa94:	e7b7      	b.n	800fa06 <_dtoa_r+0x81a>
 800fa96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fa98:	2500      	movs	r5, #0
 800fa9a:	2b01      	cmp	r3, #1
 800fa9c:	ddca      	ble.n	800fa34 <_dtoa_r+0x848>
 800fa9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800faa0:	2001      	movs	r0, #1
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d008      	beq.n	800fab8 <_dtoa_r+0x8cc>
 800faa6:	6933      	ldr	r3, [r6, #16]
 800faa8:	3303      	adds	r3, #3
 800faaa:	009b      	lsls	r3, r3, #2
 800faac:	18f3      	adds	r3, r6, r3
 800faae:	6858      	ldr	r0, [r3, #4]
 800fab0:	f000 fbaa 	bl	8010208 <__hi0bits>
 800fab4:	2320      	movs	r3, #32
 800fab6:	1a18      	subs	r0, r3, r0
 800fab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800faba:	1818      	adds	r0, r3, r0
 800fabc:	0002      	movs	r2, r0
 800fabe:	231f      	movs	r3, #31
 800fac0:	401a      	ands	r2, r3
 800fac2:	4218      	tst	r0, r3
 800fac4:	d047      	beq.n	800fb56 <_dtoa_r+0x96a>
 800fac6:	3301      	adds	r3, #1
 800fac8:	1a9b      	subs	r3, r3, r2
 800faca:	2b04      	cmp	r3, #4
 800facc:	dd3f      	ble.n	800fb4e <_dtoa_r+0x962>
 800face:	231c      	movs	r3, #28
 800fad0:	1a9b      	subs	r3, r3, r2
 800fad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fad4:	18e4      	adds	r4, r4, r3
 800fad6:	18d2      	adds	r2, r2, r3
 800fad8:	920a      	str	r2, [sp, #40]	; 0x28
 800fada:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fadc:	18d3      	adds	r3, r2, r3
 800fade:	930c      	str	r3, [sp, #48]	; 0x30
 800fae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	dd05      	ble.n	800faf2 <_dtoa_r+0x906>
 800fae6:	001a      	movs	r2, r3
 800fae8:	9905      	ldr	r1, [sp, #20]
 800faea:	9804      	ldr	r0, [sp, #16]
 800faec:	f000 fcf8 	bl	80104e0 <__lshift>
 800faf0:	9005      	str	r0, [sp, #20]
 800faf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	dd05      	ble.n	800fb04 <_dtoa_r+0x918>
 800faf8:	0031      	movs	r1, r6
 800fafa:	001a      	movs	r2, r3
 800fafc:	9804      	ldr	r0, [sp, #16]
 800fafe:	f000 fcef 	bl	80104e0 <__lshift>
 800fb02:	0006      	movs	r6, r0
 800fb04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d027      	beq.n	800fb5a <_dtoa_r+0x96e>
 800fb0a:	0031      	movs	r1, r6
 800fb0c:	9805      	ldr	r0, [sp, #20]
 800fb0e:	f000 fd55 	bl	80105bc <__mcmp>
 800fb12:	2800      	cmp	r0, #0
 800fb14:	da21      	bge.n	800fb5a <_dtoa_r+0x96e>
 800fb16:	9b03      	ldr	r3, [sp, #12]
 800fb18:	220a      	movs	r2, #10
 800fb1a:	3b01      	subs	r3, #1
 800fb1c:	9303      	str	r3, [sp, #12]
 800fb1e:	9905      	ldr	r1, [sp, #20]
 800fb20:	2300      	movs	r3, #0
 800fb22:	9804      	ldr	r0, [sp, #16]
 800fb24:	f000 fae0 	bl	80100e8 <__multadd>
 800fb28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb2a:	9005      	str	r0, [sp, #20]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d100      	bne.n	800fb32 <_dtoa_r+0x946>
 800fb30:	e15d      	b.n	800fdee <_dtoa_r+0xc02>
 800fb32:	2300      	movs	r3, #0
 800fb34:	0039      	movs	r1, r7
 800fb36:	220a      	movs	r2, #10
 800fb38:	9804      	ldr	r0, [sp, #16]
 800fb3a:	f000 fad5 	bl	80100e8 <__multadd>
 800fb3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb40:	0007      	movs	r7, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	dc49      	bgt.n	800fbda <_dtoa_r+0x9ee>
 800fb46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fb48:	2b02      	cmp	r3, #2
 800fb4a:	dc0e      	bgt.n	800fb6a <_dtoa_r+0x97e>
 800fb4c:	e045      	b.n	800fbda <_dtoa_r+0x9ee>
 800fb4e:	2b04      	cmp	r3, #4
 800fb50:	d0c6      	beq.n	800fae0 <_dtoa_r+0x8f4>
 800fb52:	331c      	adds	r3, #28
 800fb54:	e7bd      	b.n	800fad2 <_dtoa_r+0x8e6>
 800fb56:	0013      	movs	r3, r2
 800fb58:	e7fb      	b.n	800fb52 <_dtoa_r+0x966>
 800fb5a:	9b07      	ldr	r3, [sp, #28]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	dc36      	bgt.n	800fbce <_dtoa_r+0x9e2>
 800fb60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fb62:	2b02      	cmp	r3, #2
 800fb64:	dd33      	ble.n	800fbce <_dtoa_r+0x9e2>
 800fb66:	9b07      	ldr	r3, [sp, #28]
 800fb68:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d10c      	bne.n	800fb8a <_dtoa_r+0x99e>
 800fb70:	0031      	movs	r1, r6
 800fb72:	2205      	movs	r2, #5
 800fb74:	9804      	ldr	r0, [sp, #16]
 800fb76:	f000 fab7 	bl	80100e8 <__multadd>
 800fb7a:	0006      	movs	r6, r0
 800fb7c:	0001      	movs	r1, r0
 800fb7e:	9805      	ldr	r0, [sp, #20]
 800fb80:	f000 fd1c 	bl	80105bc <__mcmp>
 800fb84:	2800      	cmp	r0, #0
 800fb86:	dd00      	ble.n	800fb8a <_dtoa_r+0x99e>
 800fb88:	e59f      	b.n	800f6ca <_dtoa_r+0x4de>
 800fb8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fb8c:	43db      	mvns	r3, r3
 800fb8e:	9303      	str	r3, [sp, #12]
 800fb90:	9b06      	ldr	r3, [sp, #24]
 800fb92:	9308      	str	r3, [sp, #32]
 800fb94:	2500      	movs	r5, #0
 800fb96:	0031      	movs	r1, r6
 800fb98:	9804      	ldr	r0, [sp, #16]
 800fb9a:	f000 fa81 	bl	80100a0 <_Bfree>
 800fb9e:	2f00      	cmp	r7, #0
 800fba0:	d100      	bne.n	800fba4 <_dtoa_r+0x9b8>
 800fba2:	e6a3      	b.n	800f8ec <_dtoa_r+0x700>
 800fba4:	2d00      	cmp	r5, #0
 800fba6:	d005      	beq.n	800fbb4 <_dtoa_r+0x9c8>
 800fba8:	42bd      	cmp	r5, r7
 800fbaa:	d003      	beq.n	800fbb4 <_dtoa_r+0x9c8>
 800fbac:	0029      	movs	r1, r5
 800fbae:	9804      	ldr	r0, [sp, #16]
 800fbb0:	f000 fa76 	bl	80100a0 <_Bfree>
 800fbb4:	0039      	movs	r1, r7
 800fbb6:	9804      	ldr	r0, [sp, #16]
 800fbb8:	f000 fa72 	bl	80100a0 <_Bfree>
 800fbbc:	e696      	b.n	800f8ec <_dtoa_r+0x700>
 800fbbe:	2600      	movs	r6, #0
 800fbc0:	0037      	movs	r7, r6
 800fbc2:	e7e2      	b.n	800fb8a <_dtoa_r+0x99e>
 800fbc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbc6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800fbc8:	9303      	str	r3, [sp, #12]
 800fbca:	0037      	movs	r7, r6
 800fbcc:	e57d      	b.n	800f6ca <_dtoa_r+0x4de>
 800fbce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d100      	bne.n	800fbd6 <_dtoa_r+0x9ea>
 800fbd4:	e0c3      	b.n	800fd5e <_dtoa_r+0xb72>
 800fbd6:	9b07      	ldr	r3, [sp, #28]
 800fbd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800fbda:	2c00      	cmp	r4, #0
 800fbdc:	dd05      	ble.n	800fbea <_dtoa_r+0x9fe>
 800fbde:	0039      	movs	r1, r7
 800fbe0:	0022      	movs	r2, r4
 800fbe2:	9804      	ldr	r0, [sp, #16]
 800fbe4:	f000 fc7c 	bl	80104e0 <__lshift>
 800fbe8:	0007      	movs	r7, r0
 800fbea:	0038      	movs	r0, r7
 800fbec:	2d00      	cmp	r5, #0
 800fbee:	d024      	beq.n	800fc3a <_dtoa_r+0xa4e>
 800fbf0:	6879      	ldr	r1, [r7, #4]
 800fbf2:	9804      	ldr	r0, [sp, #16]
 800fbf4:	f000 fa10 	bl	8010018 <_Balloc>
 800fbf8:	1e04      	subs	r4, r0, #0
 800fbfa:	d111      	bne.n	800fc20 <_dtoa_r+0xa34>
 800fbfc:	0022      	movs	r2, r4
 800fbfe:	4b05      	ldr	r3, [pc, #20]	; (800fc14 <_dtoa_r+0xa28>)
 800fc00:	4805      	ldr	r0, [pc, #20]	; (800fc18 <_dtoa_r+0xa2c>)
 800fc02:	4906      	ldr	r1, [pc, #24]	; (800fc1c <_dtoa_r+0xa30>)
 800fc04:	f7ff fb07 	bl	800f216 <_dtoa_r+0x2a>
 800fc08:	40240000 	.word	0x40240000
 800fc0c:	00000433 	.word	0x00000433
 800fc10:	7ff00000 	.word	0x7ff00000
 800fc14:	08013d0a 	.word	0x08013d0a
 800fc18:	08013cb2 	.word	0x08013cb2
 800fc1c:	000002ef 	.word	0x000002ef
 800fc20:	0039      	movs	r1, r7
 800fc22:	693a      	ldr	r2, [r7, #16]
 800fc24:	310c      	adds	r1, #12
 800fc26:	3202      	adds	r2, #2
 800fc28:	0092      	lsls	r2, r2, #2
 800fc2a:	300c      	adds	r0, #12
 800fc2c:	f7ff fa40 	bl	800f0b0 <memcpy>
 800fc30:	2201      	movs	r2, #1
 800fc32:	0021      	movs	r1, r4
 800fc34:	9804      	ldr	r0, [sp, #16]
 800fc36:	f000 fc53 	bl	80104e0 <__lshift>
 800fc3a:	9b06      	ldr	r3, [sp, #24]
 800fc3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fc3e:	9307      	str	r3, [sp, #28]
 800fc40:	3b01      	subs	r3, #1
 800fc42:	189b      	adds	r3, r3, r2
 800fc44:	2201      	movs	r2, #1
 800fc46:	003d      	movs	r5, r7
 800fc48:	0007      	movs	r7, r0
 800fc4a:	930e      	str	r3, [sp, #56]	; 0x38
 800fc4c:	9b08      	ldr	r3, [sp, #32]
 800fc4e:	4013      	ands	r3, r2
 800fc50:	930d      	str	r3, [sp, #52]	; 0x34
 800fc52:	0031      	movs	r1, r6
 800fc54:	9805      	ldr	r0, [sp, #20]
 800fc56:	f7ff fa39 	bl	800f0cc <quorem>
 800fc5a:	0029      	movs	r1, r5
 800fc5c:	0004      	movs	r4, r0
 800fc5e:	900b      	str	r0, [sp, #44]	; 0x2c
 800fc60:	9805      	ldr	r0, [sp, #20]
 800fc62:	f000 fcab 	bl	80105bc <__mcmp>
 800fc66:	003a      	movs	r2, r7
 800fc68:	900c      	str	r0, [sp, #48]	; 0x30
 800fc6a:	0031      	movs	r1, r6
 800fc6c:	9804      	ldr	r0, [sp, #16]
 800fc6e:	f000 fcc1 	bl	80105f4 <__mdiff>
 800fc72:	2201      	movs	r2, #1
 800fc74:	68c3      	ldr	r3, [r0, #12]
 800fc76:	3430      	adds	r4, #48	; 0x30
 800fc78:	9008      	str	r0, [sp, #32]
 800fc7a:	920a      	str	r2, [sp, #40]	; 0x28
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d104      	bne.n	800fc8a <_dtoa_r+0xa9e>
 800fc80:	0001      	movs	r1, r0
 800fc82:	9805      	ldr	r0, [sp, #20]
 800fc84:	f000 fc9a 	bl	80105bc <__mcmp>
 800fc88:	900a      	str	r0, [sp, #40]	; 0x28
 800fc8a:	9908      	ldr	r1, [sp, #32]
 800fc8c:	9804      	ldr	r0, [sp, #16]
 800fc8e:	f000 fa07 	bl	80100a0 <_Bfree>
 800fc92:	9b07      	ldr	r3, [sp, #28]
 800fc94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc96:	3301      	adds	r3, #1
 800fc98:	9308      	str	r3, [sp, #32]
 800fc9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fc9c:	4313      	orrs	r3, r2
 800fc9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fca0:	4313      	orrs	r3, r2
 800fca2:	d109      	bne.n	800fcb8 <_dtoa_r+0xacc>
 800fca4:	2c39      	cmp	r4, #57	; 0x39
 800fca6:	d022      	beq.n	800fcee <_dtoa_r+0xb02>
 800fca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	dd01      	ble.n	800fcb2 <_dtoa_r+0xac6>
 800fcae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800fcb0:	3431      	adds	r4, #49	; 0x31
 800fcb2:	9b07      	ldr	r3, [sp, #28]
 800fcb4:	701c      	strb	r4, [r3, #0]
 800fcb6:	e76e      	b.n	800fb96 <_dtoa_r+0x9aa>
 800fcb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	db04      	blt.n	800fcc8 <_dtoa_r+0xadc>
 800fcbe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fcc4:	4313      	orrs	r3, r2
 800fcc6:	d11e      	bne.n	800fd06 <_dtoa_r+0xb1a>
 800fcc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	ddf1      	ble.n	800fcb2 <_dtoa_r+0xac6>
 800fcce:	9905      	ldr	r1, [sp, #20]
 800fcd0:	2201      	movs	r2, #1
 800fcd2:	9804      	ldr	r0, [sp, #16]
 800fcd4:	f000 fc04 	bl	80104e0 <__lshift>
 800fcd8:	0031      	movs	r1, r6
 800fcda:	9005      	str	r0, [sp, #20]
 800fcdc:	f000 fc6e 	bl	80105bc <__mcmp>
 800fce0:	2800      	cmp	r0, #0
 800fce2:	dc02      	bgt.n	800fcea <_dtoa_r+0xafe>
 800fce4:	d1e5      	bne.n	800fcb2 <_dtoa_r+0xac6>
 800fce6:	07e3      	lsls	r3, r4, #31
 800fce8:	d5e3      	bpl.n	800fcb2 <_dtoa_r+0xac6>
 800fcea:	2c39      	cmp	r4, #57	; 0x39
 800fcec:	d1df      	bne.n	800fcae <_dtoa_r+0xac2>
 800fcee:	2339      	movs	r3, #57	; 0x39
 800fcf0:	9a07      	ldr	r2, [sp, #28]
 800fcf2:	7013      	strb	r3, [r2, #0]
 800fcf4:	9b08      	ldr	r3, [sp, #32]
 800fcf6:	9308      	str	r3, [sp, #32]
 800fcf8:	3b01      	subs	r3, #1
 800fcfa:	781a      	ldrb	r2, [r3, #0]
 800fcfc:	2a39      	cmp	r2, #57	; 0x39
 800fcfe:	d063      	beq.n	800fdc8 <_dtoa_r+0xbdc>
 800fd00:	3201      	adds	r2, #1
 800fd02:	701a      	strb	r2, [r3, #0]
 800fd04:	e747      	b.n	800fb96 <_dtoa_r+0x9aa>
 800fd06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	dd03      	ble.n	800fd14 <_dtoa_r+0xb28>
 800fd0c:	2c39      	cmp	r4, #57	; 0x39
 800fd0e:	d0ee      	beq.n	800fcee <_dtoa_r+0xb02>
 800fd10:	3401      	adds	r4, #1
 800fd12:	e7ce      	b.n	800fcb2 <_dtoa_r+0xac6>
 800fd14:	9b07      	ldr	r3, [sp, #28]
 800fd16:	9a07      	ldr	r2, [sp, #28]
 800fd18:	701c      	strb	r4, [r3, #0]
 800fd1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d03e      	beq.n	800fd9e <_dtoa_r+0xbb2>
 800fd20:	2300      	movs	r3, #0
 800fd22:	220a      	movs	r2, #10
 800fd24:	9905      	ldr	r1, [sp, #20]
 800fd26:	9804      	ldr	r0, [sp, #16]
 800fd28:	f000 f9de 	bl	80100e8 <__multadd>
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	9005      	str	r0, [sp, #20]
 800fd30:	220a      	movs	r2, #10
 800fd32:	0029      	movs	r1, r5
 800fd34:	9804      	ldr	r0, [sp, #16]
 800fd36:	42bd      	cmp	r5, r7
 800fd38:	d106      	bne.n	800fd48 <_dtoa_r+0xb5c>
 800fd3a:	f000 f9d5 	bl	80100e8 <__multadd>
 800fd3e:	0005      	movs	r5, r0
 800fd40:	0007      	movs	r7, r0
 800fd42:	9b08      	ldr	r3, [sp, #32]
 800fd44:	9307      	str	r3, [sp, #28]
 800fd46:	e784      	b.n	800fc52 <_dtoa_r+0xa66>
 800fd48:	f000 f9ce 	bl	80100e8 <__multadd>
 800fd4c:	0039      	movs	r1, r7
 800fd4e:	0005      	movs	r5, r0
 800fd50:	2300      	movs	r3, #0
 800fd52:	220a      	movs	r2, #10
 800fd54:	9804      	ldr	r0, [sp, #16]
 800fd56:	f000 f9c7 	bl	80100e8 <__multadd>
 800fd5a:	0007      	movs	r7, r0
 800fd5c:	e7f1      	b.n	800fd42 <_dtoa_r+0xb56>
 800fd5e:	9b07      	ldr	r3, [sp, #28]
 800fd60:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd62:	2500      	movs	r5, #0
 800fd64:	0031      	movs	r1, r6
 800fd66:	9805      	ldr	r0, [sp, #20]
 800fd68:	f7ff f9b0 	bl	800f0cc <quorem>
 800fd6c:	9b06      	ldr	r3, [sp, #24]
 800fd6e:	3030      	adds	r0, #48	; 0x30
 800fd70:	5558      	strb	r0, [r3, r5]
 800fd72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd74:	3501      	adds	r5, #1
 800fd76:	0004      	movs	r4, r0
 800fd78:	42ab      	cmp	r3, r5
 800fd7a:	dd07      	ble.n	800fd8c <_dtoa_r+0xba0>
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	220a      	movs	r2, #10
 800fd80:	9905      	ldr	r1, [sp, #20]
 800fd82:	9804      	ldr	r0, [sp, #16]
 800fd84:	f000 f9b0 	bl	80100e8 <__multadd>
 800fd88:	9005      	str	r0, [sp, #20]
 800fd8a:	e7eb      	b.n	800fd64 <_dtoa_r+0xb78>
 800fd8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fd8e:	2301      	movs	r3, #1
 800fd90:	2a00      	cmp	r2, #0
 800fd92:	dd00      	ble.n	800fd96 <_dtoa_r+0xbaa>
 800fd94:	0013      	movs	r3, r2
 800fd96:	2500      	movs	r5, #0
 800fd98:	9a06      	ldr	r2, [sp, #24]
 800fd9a:	18d3      	adds	r3, r2, r3
 800fd9c:	9308      	str	r3, [sp, #32]
 800fd9e:	9905      	ldr	r1, [sp, #20]
 800fda0:	2201      	movs	r2, #1
 800fda2:	9804      	ldr	r0, [sp, #16]
 800fda4:	f000 fb9c 	bl	80104e0 <__lshift>
 800fda8:	0031      	movs	r1, r6
 800fdaa:	9005      	str	r0, [sp, #20]
 800fdac:	f000 fc06 	bl	80105bc <__mcmp>
 800fdb0:	2800      	cmp	r0, #0
 800fdb2:	dc9f      	bgt.n	800fcf4 <_dtoa_r+0xb08>
 800fdb4:	d101      	bne.n	800fdba <_dtoa_r+0xbce>
 800fdb6:	07e4      	lsls	r4, r4, #31
 800fdb8:	d49c      	bmi.n	800fcf4 <_dtoa_r+0xb08>
 800fdba:	9b08      	ldr	r3, [sp, #32]
 800fdbc:	9308      	str	r3, [sp, #32]
 800fdbe:	3b01      	subs	r3, #1
 800fdc0:	781a      	ldrb	r2, [r3, #0]
 800fdc2:	2a30      	cmp	r2, #48	; 0x30
 800fdc4:	d0fa      	beq.n	800fdbc <_dtoa_r+0xbd0>
 800fdc6:	e6e6      	b.n	800fb96 <_dtoa_r+0x9aa>
 800fdc8:	9a06      	ldr	r2, [sp, #24]
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d193      	bne.n	800fcf6 <_dtoa_r+0xb0a>
 800fdce:	9b03      	ldr	r3, [sp, #12]
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	9303      	str	r3, [sp, #12]
 800fdd4:	2331      	movs	r3, #49	; 0x31
 800fdd6:	7013      	strb	r3, [r2, #0]
 800fdd8:	e6dd      	b.n	800fb96 <_dtoa_r+0x9aa>
 800fdda:	4b09      	ldr	r3, [pc, #36]	; (800fe00 <_dtoa_r+0xc14>)
 800fddc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fdde:	9306      	str	r3, [sp, #24]
 800fde0:	4b08      	ldr	r3, [pc, #32]	; (800fe04 <_dtoa_r+0xc18>)
 800fde2:	2a00      	cmp	r2, #0
 800fde4:	d001      	beq.n	800fdea <_dtoa_r+0xbfe>
 800fde6:	f7ff fa49 	bl	800f27c <_dtoa_r+0x90>
 800fdea:	f7ff fa49 	bl	800f280 <_dtoa_r+0x94>
 800fdee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	dcb6      	bgt.n	800fd62 <_dtoa_r+0xb76>
 800fdf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fdf6:	2b02      	cmp	r3, #2
 800fdf8:	dd00      	ble.n	800fdfc <_dtoa_r+0xc10>
 800fdfa:	e6b6      	b.n	800fb6a <_dtoa_r+0x97e>
 800fdfc:	e7b1      	b.n	800fd62 <_dtoa_r+0xb76>
 800fdfe:	46c0      	nop			; (mov r8, r8)
 800fe00:	08013c8e 	.word	0x08013c8e
 800fe04:	08013c96 	.word	0x08013c96

0800fe08 <_free_r>:
 800fe08:	b570      	push	{r4, r5, r6, lr}
 800fe0a:	0005      	movs	r5, r0
 800fe0c:	2900      	cmp	r1, #0
 800fe0e:	d010      	beq.n	800fe32 <_free_r+0x2a>
 800fe10:	1f0c      	subs	r4, r1, #4
 800fe12:	6823      	ldr	r3, [r4, #0]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	da00      	bge.n	800fe1a <_free_r+0x12>
 800fe18:	18e4      	adds	r4, r4, r3
 800fe1a:	0028      	movs	r0, r5
 800fe1c:	f000 f8ec 	bl	800fff8 <__malloc_lock>
 800fe20:	4a1d      	ldr	r2, [pc, #116]	; (800fe98 <_free_r+0x90>)
 800fe22:	6813      	ldr	r3, [r2, #0]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d105      	bne.n	800fe34 <_free_r+0x2c>
 800fe28:	6063      	str	r3, [r4, #4]
 800fe2a:	6014      	str	r4, [r2, #0]
 800fe2c:	0028      	movs	r0, r5
 800fe2e:	f000 f8eb 	bl	8010008 <__malloc_unlock>
 800fe32:	bd70      	pop	{r4, r5, r6, pc}
 800fe34:	42a3      	cmp	r3, r4
 800fe36:	d908      	bls.n	800fe4a <_free_r+0x42>
 800fe38:	6820      	ldr	r0, [r4, #0]
 800fe3a:	1821      	adds	r1, r4, r0
 800fe3c:	428b      	cmp	r3, r1
 800fe3e:	d1f3      	bne.n	800fe28 <_free_r+0x20>
 800fe40:	6819      	ldr	r1, [r3, #0]
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	1809      	adds	r1, r1, r0
 800fe46:	6021      	str	r1, [r4, #0]
 800fe48:	e7ee      	b.n	800fe28 <_free_r+0x20>
 800fe4a:	001a      	movs	r2, r3
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d001      	beq.n	800fe56 <_free_r+0x4e>
 800fe52:	42a3      	cmp	r3, r4
 800fe54:	d9f9      	bls.n	800fe4a <_free_r+0x42>
 800fe56:	6811      	ldr	r1, [r2, #0]
 800fe58:	1850      	adds	r0, r2, r1
 800fe5a:	42a0      	cmp	r0, r4
 800fe5c:	d10b      	bne.n	800fe76 <_free_r+0x6e>
 800fe5e:	6820      	ldr	r0, [r4, #0]
 800fe60:	1809      	adds	r1, r1, r0
 800fe62:	1850      	adds	r0, r2, r1
 800fe64:	6011      	str	r1, [r2, #0]
 800fe66:	4283      	cmp	r3, r0
 800fe68:	d1e0      	bne.n	800fe2c <_free_r+0x24>
 800fe6a:	6818      	ldr	r0, [r3, #0]
 800fe6c:	685b      	ldr	r3, [r3, #4]
 800fe6e:	1841      	adds	r1, r0, r1
 800fe70:	6011      	str	r1, [r2, #0]
 800fe72:	6053      	str	r3, [r2, #4]
 800fe74:	e7da      	b.n	800fe2c <_free_r+0x24>
 800fe76:	42a0      	cmp	r0, r4
 800fe78:	d902      	bls.n	800fe80 <_free_r+0x78>
 800fe7a:	230c      	movs	r3, #12
 800fe7c:	602b      	str	r3, [r5, #0]
 800fe7e:	e7d5      	b.n	800fe2c <_free_r+0x24>
 800fe80:	6820      	ldr	r0, [r4, #0]
 800fe82:	1821      	adds	r1, r4, r0
 800fe84:	428b      	cmp	r3, r1
 800fe86:	d103      	bne.n	800fe90 <_free_r+0x88>
 800fe88:	6819      	ldr	r1, [r3, #0]
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	1809      	adds	r1, r1, r0
 800fe8e:	6021      	str	r1, [r4, #0]
 800fe90:	6063      	str	r3, [r4, #4]
 800fe92:	6054      	str	r4, [r2, #4]
 800fe94:	e7ca      	b.n	800fe2c <_free_r+0x24>
 800fe96:	46c0      	nop			; (mov r8, r8)
 800fe98:	200010c4 	.word	0x200010c4

0800fe9c <malloc>:
 800fe9c:	b510      	push	{r4, lr}
 800fe9e:	4b03      	ldr	r3, [pc, #12]	; (800feac <malloc+0x10>)
 800fea0:	0001      	movs	r1, r0
 800fea2:	6818      	ldr	r0, [r3, #0]
 800fea4:	f000 f826 	bl	800fef4 <_malloc_r>
 800fea8:	bd10      	pop	{r4, pc}
 800feaa:	46c0      	nop			; (mov r8, r8)
 800feac:	20000084 	.word	0x20000084

0800feb0 <sbrk_aligned>:
 800feb0:	b570      	push	{r4, r5, r6, lr}
 800feb2:	4e0f      	ldr	r6, [pc, #60]	; (800fef0 <sbrk_aligned+0x40>)
 800feb4:	000d      	movs	r5, r1
 800feb6:	6831      	ldr	r1, [r6, #0]
 800feb8:	0004      	movs	r4, r0
 800feba:	2900      	cmp	r1, #0
 800febc:	d102      	bne.n	800fec4 <sbrk_aligned+0x14>
 800febe:	f001 fe57 	bl	8011b70 <_sbrk_r>
 800fec2:	6030      	str	r0, [r6, #0]
 800fec4:	0029      	movs	r1, r5
 800fec6:	0020      	movs	r0, r4
 800fec8:	f001 fe52 	bl	8011b70 <_sbrk_r>
 800fecc:	1c43      	adds	r3, r0, #1
 800fece:	d00a      	beq.n	800fee6 <sbrk_aligned+0x36>
 800fed0:	2303      	movs	r3, #3
 800fed2:	1cc5      	adds	r5, r0, #3
 800fed4:	439d      	bics	r5, r3
 800fed6:	42a8      	cmp	r0, r5
 800fed8:	d007      	beq.n	800feea <sbrk_aligned+0x3a>
 800feda:	1a29      	subs	r1, r5, r0
 800fedc:	0020      	movs	r0, r4
 800fede:	f001 fe47 	bl	8011b70 <_sbrk_r>
 800fee2:	3001      	adds	r0, #1
 800fee4:	d101      	bne.n	800feea <sbrk_aligned+0x3a>
 800fee6:	2501      	movs	r5, #1
 800fee8:	426d      	negs	r5, r5
 800feea:	0028      	movs	r0, r5
 800feec:	bd70      	pop	{r4, r5, r6, pc}
 800feee:	46c0      	nop			; (mov r8, r8)
 800fef0:	200010c8 	.word	0x200010c8

0800fef4 <_malloc_r>:
 800fef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fef6:	2203      	movs	r2, #3
 800fef8:	1ccb      	adds	r3, r1, #3
 800fefa:	4393      	bics	r3, r2
 800fefc:	3308      	adds	r3, #8
 800fefe:	0006      	movs	r6, r0
 800ff00:	001f      	movs	r7, r3
 800ff02:	2b0c      	cmp	r3, #12
 800ff04:	d238      	bcs.n	800ff78 <_malloc_r+0x84>
 800ff06:	270c      	movs	r7, #12
 800ff08:	42b9      	cmp	r1, r7
 800ff0a:	d837      	bhi.n	800ff7c <_malloc_r+0x88>
 800ff0c:	0030      	movs	r0, r6
 800ff0e:	f000 f873 	bl	800fff8 <__malloc_lock>
 800ff12:	4b38      	ldr	r3, [pc, #224]	; (800fff4 <_malloc_r+0x100>)
 800ff14:	9300      	str	r3, [sp, #0]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	001c      	movs	r4, r3
 800ff1a:	2c00      	cmp	r4, #0
 800ff1c:	d133      	bne.n	800ff86 <_malloc_r+0x92>
 800ff1e:	0039      	movs	r1, r7
 800ff20:	0030      	movs	r0, r6
 800ff22:	f7ff ffc5 	bl	800feb0 <sbrk_aligned>
 800ff26:	0004      	movs	r4, r0
 800ff28:	1c43      	adds	r3, r0, #1
 800ff2a:	d15e      	bne.n	800ffea <_malloc_r+0xf6>
 800ff2c:	9b00      	ldr	r3, [sp, #0]
 800ff2e:	681c      	ldr	r4, [r3, #0]
 800ff30:	0025      	movs	r5, r4
 800ff32:	2d00      	cmp	r5, #0
 800ff34:	d14e      	bne.n	800ffd4 <_malloc_r+0xe0>
 800ff36:	2c00      	cmp	r4, #0
 800ff38:	d051      	beq.n	800ffde <_malloc_r+0xea>
 800ff3a:	6823      	ldr	r3, [r4, #0]
 800ff3c:	0029      	movs	r1, r5
 800ff3e:	18e3      	adds	r3, r4, r3
 800ff40:	0030      	movs	r0, r6
 800ff42:	9301      	str	r3, [sp, #4]
 800ff44:	f001 fe14 	bl	8011b70 <_sbrk_r>
 800ff48:	9b01      	ldr	r3, [sp, #4]
 800ff4a:	4283      	cmp	r3, r0
 800ff4c:	d147      	bne.n	800ffde <_malloc_r+0xea>
 800ff4e:	6823      	ldr	r3, [r4, #0]
 800ff50:	0030      	movs	r0, r6
 800ff52:	1aff      	subs	r7, r7, r3
 800ff54:	0039      	movs	r1, r7
 800ff56:	f7ff ffab 	bl	800feb0 <sbrk_aligned>
 800ff5a:	3001      	adds	r0, #1
 800ff5c:	d03f      	beq.n	800ffde <_malloc_r+0xea>
 800ff5e:	6823      	ldr	r3, [r4, #0]
 800ff60:	19db      	adds	r3, r3, r7
 800ff62:	6023      	str	r3, [r4, #0]
 800ff64:	9b00      	ldr	r3, [sp, #0]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d040      	beq.n	800ffee <_malloc_r+0xfa>
 800ff6c:	685a      	ldr	r2, [r3, #4]
 800ff6e:	42a2      	cmp	r2, r4
 800ff70:	d133      	bne.n	800ffda <_malloc_r+0xe6>
 800ff72:	2200      	movs	r2, #0
 800ff74:	605a      	str	r2, [r3, #4]
 800ff76:	e014      	b.n	800ffa2 <_malloc_r+0xae>
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	dac5      	bge.n	800ff08 <_malloc_r+0x14>
 800ff7c:	230c      	movs	r3, #12
 800ff7e:	2500      	movs	r5, #0
 800ff80:	6033      	str	r3, [r6, #0]
 800ff82:	0028      	movs	r0, r5
 800ff84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ff86:	6821      	ldr	r1, [r4, #0]
 800ff88:	1bc9      	subs	r1, r1, r7
 800ff8a:	d420      	bmi.n	800ffce <_malloc_r+0xda>
 800ff8c:	290b      	cmp	r1, #11
 800ff8e:	d918      	bls.n	800ffc2 <_malloc_r+0xce>
 800ff90:	19e2      	adds	r2, r4, r7
 800ff92:	6027      	str	r7, [r4, #0]
 800ff94:	42a3      	cmp	r3, r4
 800ff96:	d112      	bne.n	800ffbe <_malloc_r+0xca>
 800ff98:	9b00      	ldr	r3, [sp, #0]
 800ff9a:	601a      	str	r2, [r3, #0]
 800ff9c:	6863      	ldr	r3, [r4, #4]
 800ff9e:	6011      	str	r1, [r2, #0]
 800ffa0:	6053      	str	r3, [r2, #4]
 800ffa2:	0030      	movs	r0, r6
 800ffa4:	0025      	movs	r5, r4
 800ffa6:	f000 f82f 	bl	8010008 <__malloc_unlock>
 800ffaa:	2207      	movs	r2, #7
 800ffac:	350b      	adds	r5, #11
 800ffae:	1d23      	adds	r3, r4, #4
 800ffb0:	4395      	bics	r5, r2
 800ffb2:	1aea      	subs	r2, r5, r3
 800ffb4:	429d      	cmp	r5, r3
 800ffb6:	d0e4      	beq.n	800ff82 <_malloc_r+0x8e>
 800ffb8:	1b5b      	subs	r3, r3, r5
 800ffba:	50a3      	str	r3, [r4, r2]
 800ffbc:	e7e1      	b.n	800ff82 <_malloc_r+0x8e>
 800ffbe:	605a      	str	r2, [r3, #4]
 800ffc0:	e7ec      	b.n	800ff9c <_malloc_r+0xa8>
 800ffc2:	6862      	ldr	r2, [r4, #4]
 800ffc4:	42a3      	cmp	r3, r4
 800ffc6:	d1d5      	bne.n	800ff74 <_malloc_r+0x80>
 800ffc8:	9b00      	ldr	r3, [sp, #0]
 800ffca:	601a      	str	r2, [r3, #0]
 800ffcc:	e7e9      	b.n	800ffa2 <_malloc_r+0xae>
 800ffce:	0023      	movs	r3, r4
 800ffd0:	6864      	ldr	r4, [r4, #4]
 800ffd2:	e7a2      	b.n	800ff1a <_malloc_r+0x26>
 800ffd4:	002c      	movs	r4, r5
 800ffd6:	686d      	ldr	r5, [r5, #4]
 800ffd8:	e7ab      	b.n	800ff32 <_malloc_r+0x3e>
 800ffda:	0013      	movs	r3, r2
 800ffdc:	e7c4      	b.n	800ff68 <_malloc_r+0x74>
 800ffde:	230c      	movs	r3, #12
 800ffe0:	0030      	movs	r0, r6
 800ffe2:	6033      	str	r3, [r6, #0]
 800ffe4:	f000 f810 	bl	8010008 <__malloc_unlock>
 800ffe8:	e7cb      	b.n	800ff82 <_malloc_r+0x8e>
 800ffea:	6027      	str	r7, [r4, #0]
 800ffec:	e7d9      	b.n	800ffa2 <_malloc_r+0xae>
 800ffee:	605b      	str	r3, [r3, #4]
 800fff0:	deff      	udf	#255	; 0xff
 800fff2:	46c0      	nop			; (mov r8, r8)
 800fff4:	200010c4 	.word	0x200010c4

0800fff8 <__malloc_lock>:
 800fff8:	b510      	push	{r4, lr}
 800fffa:	4802      	ldr	r0, [pc, #8]	; (8010004 <__malloc_lock+0xc>)
 800fffc:	f7ff f84b 	bl	800f096 <__retarget_lock_acquire_recursive>
 8010000:	bd10      	pop	{r4, pc}
 8010002:	46c0      	nop			; (mov r8, r8)
 8010004:	200010c0 	.word	0x200010c0

08010008 <__malloc_unlock>:
 8010008:	b510      	push	{r4, lr}
 801000a:	4802      	ldr	r0, [pc, #8]	; (8010014 <__malloc_unlock+0xc>)
 801000c:	f7ff f844 	bl	800f098 <__retarget_lock_release_recursive>
 8010010:	bd10      	pop	{r4, pc}
 8010012:	46c0      	nop			; (mov r8, r8)
 8010014:	200010c0 	.word	0x200010c0

08010018 <_Balloc>:
 8010018:	b570      	push	{r4, r5, r6, lr}
 801001a:	69c5      	ldr	r5, [r0, #28]
 801001c:	0006      	movs	r6, r0
 801001e:	000c      	movs	r4, r1
 8010020:	2d00      	cmp	r5, #0
 8010022:	d10e      	bne.n	8010042 <_Balloc+0x2a>
 8010024:	2010      	movs	r0, #16
 8010026:	f7ff ff39 	bl	800fe9c <malloc>
 801002a:	1e02      	subs	r2, r0, #0
 801002c:	61f0      	str	r0, [r6, #28]
 801002e:	d104      	bne.n	801003a <_Balloc+0x22>
 8010030:	216b      	movs	r1, #107	; 0x6b
 8010032:	4b19      	ldr	r3, [pc, #100]	; (8010098 <_Balloc+0x80>)
 8010034:	4819      	ldr	r0, [pc, #100]	; (801009c <_Balloc+0x84>)
 8010036:	f001 fdb3 	bl	8011ba0 <__assert_func>
 801003a:	6045      	str	r5, [r0, #4]
 801003c:	6085      	str	r5, [r0, #8]
 801003e:	6005      	str	r5, [r0, #0]
 8010040:	60c5      	str	r5, [r0, #12]
 8010042:	69f5      	ldr	r5, [r6, #28]
 8010044:	68eb      	ldr	r3, [r5, #12]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d013      	beq.n	8010072 <_Balloc+0x5a>
 801004a:	69f3      	ldr	r3, [r6, #28]
 801004c:	00a2      	lsls	r2, r4, #2
 801004e:	68db      	ldr	r3, [r3, #12]
 8010050:	189b      	adds	r3, r3, r2
 8010052:	6818      	ldr	r0, [r3, #0]
 8010054:	2800      	cmp	r0, #0
 8010056:	d118      	bne.n	801008a <_Balloc+0x72>
 8010058:	2101      	movs	r1, #1
 801005a:	000d      	movs	r5, r1
 801005c:	40a5      	lsls	r5, r4
 801005e:	1d6a      	adds	r2, r5, #5
 8010060:	0030      	movs	r0, r6
 8010062:	0092      	lsls	r2, r2, #2
 8010064:	f001 fdba 	bl	8011bdc <_calloc_r>
 8010068:	2800      	cmp	r0, #0
 801006a:	d00c      	beq.n	8010086 <_Balloc+0x6e>
 801006c:	6044      	str	r4, [r0, #4]
 801006e:	6085      	str	r5, [r0, #8]
 8010070:	e00d      	b.n	801008e <_Balloc+0x76>
 8010072:	2221      	movs	r2, #33	; 0x21
 8010074:	2104      	movs	r1, #4
 8010076:	0030      	movs	r0, r6
 8010078:	f001 fdb0 	bl	8011bdc <_calloc_r>
 801007c:	69f3      	ldr	r3, [r6, #28]
 801007e:	60e8      	str	r0, [r5, #12]
 8010080:	68db      	ldr	r3, [r3, #12]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d1e1      	bne.n	801004a <_Balloc+0x32>
 8010086:	2000      	movs	r0, #0
 8010088:	bd70      	pop	{r4, r5, r6, pc}
 801008a:	6802      	ldr	r2, [r0, #0]
 801008c:	601a      	str	r2, [r3, #0]
 801008e:	2300      	movs	r3, #0
 8010090:	6103      	str	r3, [r0, #16]
 8010092:	60c3      	str	r3, [r0, #12]
 8010094:	e7f8      	b.n	8010088 <_Balloc+0x70>
 8010096:	46c0      	nop			; (mov r8, r8)
 8010098:	08013c9b 	.word	0x08013c9b
 801009c:	08013d1b 	.word	0x08013d1b

080100a0 <_Bfree>:
 80100a0:	b570      	push	{r4, r5, r6, lr}
 80100a2:	69c6      	ldr	r6, [r0, #28]
 80100a4:	0005      	movs	r5, r0
 80100a6:	000c      	movs	r4, r1
 80100a8:	2e00      	cmp	r6, #0
 80100aa:	d10e      	bne.n	80100ca <_Bfree+0x2a>
 80100ac:	2010      	movs	r0, #16
 80100ae:	f7ff fef5 	bl	800fe9c <malloc>
 80100b2:	1e02      	subs	r2, r0, #0
 80100b4:	61e8      	str	r0, [r5, #28]
 80100b6:	d104      	bne.n	80100c2 <_Bfree+0x22>
 80100b8:	218f      	movs	r1, #143	; 0x8f
 80100ba:	4b09      	ldr	r3, [pc, #36]	; (80100e0 <_Bfree+0x40>)
 80100bc:	4809      	ldr	r0, [pc, #36]	; (80100e4 <_Bfree+0x44>)
 80100be:	f001 fd6f 	bl	8011ba0 <__assert_func>
 80100c2:	6046      	str	r6, [r0, #4]
 80100c4:	6086      	str	r6, [r0, #8]
 80100c6:	6006      	str	r6, [r0, #0]
 80100c8:	60c6      	str	r6, [r0, #12]
 80100ca:	2c00      	cmp	r4, #0
 80100cc:	d007      	beq.n	80100de <_Bfree+0x3e>
 80100ce:	69eb      	ldr	r3, [r5, #28]
 80100d0:	6862      	ldr	r2, [r4, #4]
 80100d2:	68db      	ldr	r3, [r3, #12]
 80100d4:	0092      	lsls	r2, r2, #2
 80100d6:	189b      	adds	r3, r3, r2
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	6022      	str	r2, [r4, #0]
 80100dc:	601c      	str	r4, [r3, #0]
 80100de:	bd70      	pop	{r4, r5, r6, pc}
 80100e0:	08013c9b 	.word	0x08013c9b
 80100e4:	08013d1b 	.word	0x08013d1b

080100e8 <__multadd>:
 80100e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100ea:	000e      	movs	r6, r1
 80100ec:	9001      	str	r0, [sp, #4]
 80100ee:	000c      	movs	r4, r1
 80100f0:	001d      	movs	r5, r3
 80100f2:	2000      	movs	r0, #0
 80100f4:	690f      	ldr	r7, [r1, #16]
 80100f6:	3614      	adds	r6, #20
 80100f8:	6833      	ldr	r3, [r6, #0]
 80100fa:	3001      	adds	r0, #1
 80100fc:	b299      	uxth	r1, r3
 80100fe:	4351      	muls	r1, r2
 8010100:	0c1b      	lsrs	r3, r3, #16
 8010102:	4353      	muls	r3, r2
 8010104:	1949      	adds	r1, r1, r5
 8010106:	0c0d      	lsrs	r5, r1, #16
 8010108:	195b      	adds	r3, r3, r5
 801010a:	0c1d      	lsrs	r5, r3, #16
 801010c:	b289      	uxth	r1, r1
 801010e:	041b      	lsls	r3, r3, #16
 8010110:	185b      	adds	r3, r3, r1
 8010112:	c608      	stmia	r6!, {r3}
 8010114:	4287      	cmp	r7, r0
 8010116:	dcef      	bgt.n	80100f8 <__multadd+0x10>
 8010118:	2d00      	cmp	r5, #0
 801011a:	d022      	beq.n	8010162 <__multadd+0x7a>
 801011c:	68a3      	ldr	r3, [r4, #8]
 801011e:	42bb      	cmp	r3, r7
 8010120:	dc19      	bgt.n	8010156 <__multadd+0x6e>
 8010122:	6861      	ldr	r1, [r4, #4]
 8010124:	9801      	ldr	r0, [sp, #4]
 8010126:	3101      	adds	r1, #1
 8010128:	f7ff ff76 	bl	8010018 <_Balloc>
 801012c:	1e06      	subs	r6, r0, #0
 801012e:	d105      	bne.n	801013c <__multadd+0x54>
 8010130:	0032      	movs	r2, r6
 8010132:	21ba      	movs	r1, #186	; 0xba
 8010134:	4b0c      	ldr	r3, [pc, #48]	; (8010168 <__multadd+0x80>)
 8010136:	480d      	ldr	r0, [pc, #52]	; (801016c <__multadd+0x84>)
 8010138:	f001 fd32 	bl	8011ba0 <__assert_func>
 801013c:	0021      	movs	r1, r4
 801013e:	6922      	ldr	r2, [r4, #16]
 8010140:	310c      	adds	r1, #12
 8010142:	3202      	adds	r2, #2
 8010144:	0092      	lsls	r2, r2, #2
 8010146:	300c      	adds	r0, #12
 8010148:	f7fe ffb2 	bl	800f0b0 <memcpy>
 801014c:	0021      	movs	r1, r4
 801014e:	9801      	ldr	r0, [sp, #4]
 8010150:	f7ff ffa6 	bl	80100a0 <_Bfree>
 8010154:	0034      	movs	r4, r6
 8010156:	1d3b      	adds	r3, r7, #4
 8010158:	009b      	lsls	r3, r3, #2
 801015a:	18e3      	adds	r3, r4, r3
 801015c:	605d      	str	r5, [r3, #4]
 801015e:	1c7b      	adds	r3, r7, #1
 8010160:	6123      	str	r3, [r4, #16]
 8010162:	0020      	movs	r0, r4
 8010164:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010166:	46c0      	nop			; (mov r8, r8)
 8010168:	08013d0a 	.word	0x08013d0a
 801016c:	08013d1b 	.word	0x08013d1b

08010170 <__s2b>:
 8010170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010172:	0006      	movs	r6, r0
 8010174:	0018      	movs	r0, r3
 8010176:	000c      	movs	r4, r1
 8010178:	3008      	adds	r0, #8
 801017a:	2109      	movs	r1, #9
 801017c:	9301      	str	r3, [sp, #4]
 801017e:	0015      	movs	r5, r2
 8010180:	f7f0 f868 	bl	8000254 <__divsi3>
 8010184:	2301      	movs	r3, #1
 8010186:	2100      	movs	r1, #0
 8010188:	4283      	cmp	r3, r0
 801018a:	db0a      	blt.n	80101a2 <__s2b+0x32>
 801018c:	0030      	movs	r0, r6
 801018e:	f7ff ff43 	bl	8010018 <_Balloc>
 8010192:	1e01      	subs	r1, r0, #0
 8010194:	d108      	bne.n	80101a8 <__s2b+0x38>
 8010196:	000a      	movs	r2, r1
 8010198:	4b19      	ldr	r3, [pc, #100]	; (8010200 <__s2b+0x90>)
 801019a:	481a      	ldr	r0, [pc, #104]	; (8010204 <__s2b+0x94>)
 801019c:	31d3      	adds	r1, #211	; 0xd3
 801019e:	f001 fcff 	bl	8011ba0 <__assert_func>
 80101a2:	005b      	lsls	r3, r3, #1
 80101a4:	3101      	adds	r1, #1
 80101a6:	e7ef      	b.n	8010188 <__s2b+0x18>
 80101a8:	9b08      	ldr	r3, [sp, #32]
 80101aa:	6143      	str	r3, [r0, #20]
 80101ac:	2301      	movs	r3, #1
 80101ae:	6103      	str	r3, [r0, #16]
 80101b0:	2d09      	cmp	r5, #9
 80101b2:	dd18      	ble.n	80101e6 <__s2b+0x76>
 80101b4:	0023      	movs	r3, r4
 80101b6:	3309      	adds	r3, #9
 80101b8:	001f      	movs	r7, r3
 80101ba:	9300      	str	r3, [sp, #0]
 80101bc:	1964      	adds	r4, r4, r5
 80101be:	783b      	ldrb	r3, [r7, #0]
 80101c0:	220a      	movs	r2, #10
 80101c2:	0030      	movs	r0, r6
 80101c4:	3b30      	subs	r3, #48	; 0x30
 80101c6:	f7ff ff8f 	bl	80100e8 <__multadd>
 80101ca:	3701      	adds	r7, #1
 80101cc:	0001      	movs	r1, r0
 80101ce:	42a7      	cmp	r7, r4
 80101d0:	d1f5      	bne.n	80101be <__s2b+0x4e>
 80101d2:	002c      	movs	r4, r5
 80101d4:	9b00      	ldr	r3, [sp, #0]
 80101d6:	3c08      	subs	r4, #8
 80101d8:	191c      	adds	r4, r3, r4
 80101da:	002f      	movs	r7, r5
 80101dc:	9b01      	ldr	r3, [sp, #4]
 80101de:	429f      	cmp	r7, r3
 80101e0:	db04      	blt.n	80101ec <__s2b+0x7c>
 80101e2:	0008      	movs	r0, r1
 80101e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80101e6:	2509      	movs	r5, #9
 80101e8:	340a      	adds	r4, #10
 80101ea:	e7f6      	b.n	80101da <__s2b+0x6a>
 80101ec:	1b63      	subs	r3, r4, r5
 80101ee:	5ddb      	ldrb	r3, [r3, r7]
 80101f0:	220a      	movs	r2, #10
 80101f2:	0030      	movs	r0, r6
 80101f4:	3b30      	subs	r3, #48	; 0x30
 80101f6:	f7ff ff77 	bl	80100e8 <__multadd>
 80101fa:	3701      	adds	r7, #1
 80101fc:	0001      	movs	r1, r0
 80101fe:	e7ed      	b.n	80101dc <__s2b+0x6c>
 8010200:	08013d0a 	.word	0x08013d0a
 8010204:	08013d1b 	.word	0x08013d1b

08010208 <__hi0bits>:
 8010208:	0003      	movs	r3, r0
 801020a:	0c02      	lsrs	r2, r0, #16
 801020c:	2000      	movs	r0, #0
 801020e:	4282      	cmp	r2, r0
 8010210:	d101      	bne.n	8010216 <__hi0bits+0xe>
 8010212:	041b      	lsls	r3, r3, #16
 8010214:	3010      	adds	r0, #16
 8010216:	0e1a      	lsrs	r2, r3, #24
 8010218:	d101      	bne.n	801021e <__hi0bits+0x16>
 801021a:	3008      	adds	r0, #8
 801021c:	021b      	lsls	r3, r3, #8
 801021e:	0f1a      	lsrs	r2, r3, #28
 8010220:	d101      	bne.n	8010226 <__hi0bits+0x1e>
 8010222:	3004      	adds	r0, #4
 8010224:	011b      	lsls	r3, r3, #4
 8010226:	0f9a      	lsrs	r2, r3, #30
 8010228:	d101      	bne.n	801022e <__hi0bits+0x26>
 801022a:	3002      	adds	r0, #2
 801022c:	009b      	lsls	r3, r3, #2
 801022e:	2b00      	cmp	r3, #0
 8010230:	db03      	blt.n	801023a <__hi0bits+0x32>
 8010232:	3001      	adds	r0, #1
 8010234:	005b      	lsls	r3, r3, #1
 8010236:	d400      	bmi.n	801023a <__hi0bits+0x32>
 8010238:	2020      	movs	r0, #32
 801023a:	4770      	bx	lr

0801023c <__lo0bits>:
 801023c:	6803      	ldr	r3, [r0, #0]
 801023e:	0001      	movs	r1, r0
 8010240:	2207      	movs	r2, #7
 8010242:	0018      	movs	r0, r3
 8010244:	4010      	ands	r0, r2
 8010246:	4213      	tst	r3, r2
 8010248:	d00d      	beq.n	8010266 <__lo0bits+0x2a>
 801024a:	3a06      	subs	r2, #6
 801024c:	2000      	movs	r0, #0
 801024e:	4213      	tst	r3, r2
 8010250:	d105      	bne.n	801025e <__lo0bits+0x22>
 8010252:	3002      	adds	r0, #2
 8010254:	4203      	tst	r3, r0
 8010256:	d003      	beq.n	8010260 <__lo0bits+0x24>
 8010258:	40d3      	lsrs	r3, r2
 801025a:	0010      	movs	r0, r2
 801025c:	600b      	str	r3, [r1, #0]
 801025e:	4770      	bx	lr
 8010260:	089b      	lsrs	r3, r3, #2
 8010262:	600b      	str	r3, [r1, #0]
 8010264:	e7fb      	b.n	801025e <__lo0bits+0x22>
 8010266:	b29a      	uxth	r2, r3
 8010268:	2a00      	cmp	r2, #0
 801026a:	d101      	bne.n	8010270 <__lo0bits+0x34>
 801026c:	2010      	movs	r0, #16
 801026e:	0c1b      	lsrs	r3, r3, #16
 8010270:	b2da      	uxtb	r2, r3
 8010272:	2a00      	cmp	r2, #0
 8010274:	d101      	bne.n	801027a <__lo0bits+0x3e>
 8010276:	3008      	adds	r0, #8
 8010278:	0a1b      	lsrs	r3, r3, #8
 801027a:	071a      	lsls	r2, r3, #28
 801027c:	d101      	bne.n	8010282 <__lo0bits+0x46>
 801027e:	3004      	adds	r0, #4
 8010280:	091b      	lsrs	r3, r3, #4
 8010282:	079a      	lsls	r2, r3, #30
 8010284:	d101      	bne.n	801028a <__lo0bits+0x4e>
 8010286:	3002      	adds	r0, #2
 8010288:	089b      	lsrs	r3, r3, #2
 801028a:	07da      	lsls	r2, r3, #31
 801028c:	d4e9      	bmi.n	8010262 <__lo0bits+0x26>
 801028e:	3001      	adds	r0, #1
 8010290:	085b      	lsrs	r3, r3, #1
 8010292:	d1e6      	bne.n	8010262 <__lo0bits+0x26>
 8010294:	2020      	movs	r0, #32
 8010296:	e7e2      	b.n	801025e <__lo0bits+0x22>

08010298 <__i2b>:
 8010298:	b510      	push	{r4, lr}
 801029a:	000c      	movs	r4, r1
 801029c:	2101      	movs	r1, #1
 801029e:	f7ff febb 	bl	8010018 <_Balloc>
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d107      	bne.n	80102b6 <__i2b+0x1e>
 80102a6:	2146      	movs	r1, #70	; 0x46
 80102a8:	4c05      	ldr	r4, [pc, #20]	; (80102c0 <__i2b+0x28>)
 80102aa:	0002      	movs	r2, r0
 80102ac:	4b05      	ldr	r3, [pc, #20]	; (80102c4 <__i2b+0x2c>)
 80102ae:	0020      	movs	r0, r4
 80102b0:	31ff      	adds	r1, #255	; 0xff
 80102b2:	f001 fc75 	bl	8011ba0 <__assert_func>
 80102b6:	2301      	movs	r3, #1
 80102b8:	6144      	str	r4, [r0, #20]
 80102ba:	6103      	str	r3, [r0, #16]
 80102bc:	bd10      	pop	{r4, pc}
 80102be:	46c0      	nop			; (mov r8, r8)
 80102c0:	08013d1b 	.word	0x08013d1b
 80102c4:	08013d0a 	.word	0x08013d0a

080102c8 <__multiply>:
 80102c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ca:	0015      	movs	r5, r2
 80102cc:	690a      	ldr	r2, [r1, #16]
 80102ce:	692b      	ldr	r3, [r5, #16]
 80102d0:	000c      	movs	r4, r1
 80102d2:	b08b      	sub	sp, #44	; 0x2c
 80102d4:	429a      	cmp	r2, r3
 80102d6:	da01      	bge.n	80102dc <__multiply+0x14>
 80102d8:	002c      	movs	r4, r5
 80102da:	000d      	movs	r5, r1
 80102dc:	6927      	ldr	r7, [r4, #16]
 80102de:	692e      	ldr	r6, [r5, #16]
 80102e0:	6861      	ldr	r1, [r4, #4]
 80102e2:	19bb      	adds	r3, r7, r6
 80102e4:	9303      	str	r3, [sp, #12]
 80102e6:	68a3      	ldr	r3, [r4, #8]
 80102e8:	19ba      	adds	r2, r7, r6
 80102ea:	4293      	cmp	r3, r2
 80102ec:	da00      	bge.n	80102f0 <__multiply+0x28>
 80102ee:	3101      	adds	r1, #1
 80102f0:	f7ff fe92 	bl	8010018 <_Balloc>
 80102f4:	9002      	str	r0, [sp, #8]
 80102f6:	2800      	cmp	r0, #0
 80102f8:	d106      	bne.n	8010308 <__multiply+0x40>
 80102fa:	21b1      	movs	r1, #177	; 0xb1
 80102fc:	4b48      	ldr	r3, [pc, #288]	; (8010420 <__multiply+0x158>)
 80102fe:	4849      	ldr	r0, [pc, #292]	; (8010424 <__multiply+0x15c>)
 8010300:	9a02      	ldr	r2, [sp, #8]
 8010302:	0049      	lsls	r1, r1, #1
 8010304:	f001 fc4c 	bl	8011ba0 <__assert_func>
 8010308:	9b02      	ldr	r3, [sp, #8]
 801030a:	2200      	movs	r2, #0
 801030c:	3314      	adds	r3, #20
 801030e:	469c      	mov	ip, r3
 8010310:	19bb      	adds	r3, r7, r6
 8010312:	009b      	lsls	r3, r3, #2
 8010314:	4463      	add	r3, ip
 8010316:	9304      	str	r3, [sp, #16]
 8010318:	4663      	mov	r3, ip
 801031a:	9904      	ldr	r1, [sp, #16]
 801031c:	428b      	cmp	r3, r1
 801031e:	d32a      	bcc.n	8010376 <__multiply+0xae>
 8010320:	0023      	movs	r3, r4
 8010322:	00bf      	lsls	r7, r7, #2
 8010324:	3314      	adds	r3, #20
 8010326:	3514      	adds	r5, #20
 8010328:	9308      	str	r3, [sp, #32]
 801032a:	00b6      	lsls	r6, r6, #2
 801032c:	19db      	adds	r3, r3, r7
 801032e:	9305      	str	r3, [sp, #20]
 8010330:	19ab      	adds	r3, r5, r6
 8010332:	9309      	str	r3, [sp, #36]	; 0x24
 8010334:	2304      	movs	r3, #4
 8010336:	9306      	str	r3, [sp, #24]
 8010338:	0023      	movs	r3, r4
 801033a:	9a05      	ldr	r2, [sp, #20]
 801033c:	3315      	adds	r3, #21
 801033e:	9501      	str	r5, [sp, #4]
 8010340:	429a      	cmp	r2, r3
 8010342:	d305      	bcc.n	8010350 <__multiply+0x88>
 8010344:	1b13      	subs	r3, r2, r4
 8010346:	3b15      	subs	r3, #21
 8010348:	089b      	lsrs	r3, r3, #2
 801034a:	3301      	adds	r3, #1
 801034c:	009b      	lsls	r3, r3, #2
 801034e:	9306      	str	r3, [sp, #24]
 8010350:	9b01      	ldr	r3, [sp, #4]
 8010352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010354:	4293      	cmp	r3, r2
 8010356:	d310      	bcc.n	801037a <__multiply+0xb2>
 8010358:	9b03      	ldr	r3, [sp, #12]
 801035a:	2b00      	cmp	r3, #0
 801035c:	dd05      	ble.n	801036a <__multiply+0xa2>
 801035e:	9b04      	ldr	r3, [sp, #16]
 8010360:	3b04      	subs	r3, #4
 8010362:	9304      	str	r3, [sp, #16]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d056      	beq.n	8010418 <__multiply+0x150>
 801036a:	9b02      	ldr	r3, [sp, #8]
 801036c:	9a03      	ldr	r2, [sp, #12]
 801036e:	0018      	movs	r0, r3
 8010370:	611a      	str	r2, [r3, #16]
 8010372:	b00b      	add	sp, #44	; 0x2c
 8010374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010376:	c304      	stmia	r3!, {r2}
 8010378:	e7cf      	b.n	801031a <__multiply+0x52>
 801037a:	9b01      	ldr	r3, [sp, #4]
 801037c:	6818      	ldr	r0, [r3, #0]
 801037e:	b280      	uxth	r0, r0
 8010380:	2800      	cmp	r0, #0
 8010382:	d01e      	beq.n	80103c2 <__multiply+0xfa>
 8010384:	4667      	mov	r7, ip
 8010386:	2500      	movs	r5, #0
 8010388:	9e08      	ldr	r6, [sp, #32]
 801038a:	ce02      	ldmia	r6!, {r1}
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	9307      	str	r3, [sp, #28]
 8010390:	b28b      	uxth	r3, r1
 8010392:	4343      	muls	r3, r0
 8010394:	001a      	movs	r2, r3
 8010396:	466b      	mov	r3, sp
 8010398:	8b9b      	ldrh	r3, [r3, #28]
 801039a:	18d3      	adds	r3, r2, r3
 801039c:	195b      	adds	r3, r3, r5
 801039e:	0c0d      	lsrs	r5, r1, #16
 80103a0:	4345      	muls	r5, r0
 80103a2:	9a07      	ldr	r2, [sp, #28]
 80103a4:	0c11      	lsrs	r1, r2, #16
 80103a6:	1869      	adds	r1, r5, r1
 80103a8:	0c1a      	lsrs	r2, r3, #16
 80103aa:	188a      	adds	r2, r1, r2
 80103ac:	b29b      	uxth	r3, r3
 80103ae:	0c15      	lsrs	r5, r2, #16
 80103b0:	0412      	lsls	r2, r2, #16
 80103b2:	431a      	orrs	r2, r3
 80103b4:	9b05      	ldr	r3, [sp, #20]
 80103b6:	c704      	stmia	r7!, {r2}
 80103b8:	42b3      	cmp	r3, r6
 80103ba:	d8e6      	bhi.n	801038a <__multiply+0xc2>
 80103bc:	4663      	mov	r3, ip
 80103be:	9a06      	ldr	r2, [sp, #24]
 80103c0:	509d      	str	r5, [r3, r2]
 80103c2:	9b01      	ldr	r3, [sp, #4]
 80103c4:	6818      	ldr	r0, [r3, #0]
 80103c6:	0c00      	lsrs	r0, r0, #16
 80103c8:	d020      	beq.n	801040c <__multiply+0x144>
 80103ca:	4663      	mov	r3, ip
 80103cc:	0025      	movs	r5, r4
 80103ce:	4661      	mov	r1, ip
 80103d0:	2700      	movs	r7, #0
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	3514      	adds	r5, #20
 80103d6:	682a      	ldr	r2, [r5, #0]
 80103d8:	680e      	ldr	r6, [r1, #0]
 80103da:	b292      	uxth	r2, r2
 80103dc:	4342      	muls	r2, r0
 80103de:	0c36      	lsrs	r6, r6, #16
 80103e0:	1992      	adds	r2, r2, r6
 80103e2:	19d2      	adds	r2, r2, r7
 80103e4:	0416      	lsls	r6, r2, #16
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	431e      	orrs	r6, r3
 80103ea:	600e      	str	r6, [r1, #0]
 80103ec:	cd40      	ldmia	r5!, {r6}
 80103ee:	684b      	ldr	r3, [r1, #4]
 80103f0:	0c36      	lsrs	r6, r6, #16
 80103f2:	4346      	muls	r6, r0
 80103f4:	b29b      	uxth	r3, r3
 80103f6:	0c12      	lsrs	r2, r2, #16
 80103f8:	18f3      	adds	r3, r6, r3
 80103fa:	189b      	adds	r3, r3, r2
 80103fc:	9a05      	ldr	r2, [sp, #20]
 80103fe:	0c1f      	lsrs	r7, r3, #16
 8010400:	3104      	adds	r1, #4
 8010402:	42aa      	cmp	r2, r5
 8010404:	d8e7      	bhi.n	80103d6 <__multiply+0x10e>
 8010406:	4662      	mov	r2, ip
 8010408:	9906      	ldr	r1, [sp, #24]
 801040a:	5053      	str	r3, [r2, r1]
 801040c:	9b01      	ldr	r3, [sp, #4]
 801040e:	3304      	adds	r3, #4
 8010410:	9301      	str	r3, [sp, #4]
 8010412:	2304      	movs	r3, #4
 8010414:	449c      	add	ip, r3
 8010416:	e79b      	b.n	8010350 <__multiply+0x88>
 8010418:	9b03      	ldr	r3, [sp, #12]
 801041a:	3b01      	subs	r3, #1
 801041c:	9303      	str	r3, [sp, #12]
 801041e:	e79b      	b.n	8010358 <__multiply+0x90>
 8010420:	08013d0a 	.word	0x08013d0a
 8010424:	08013d1b 	.word	0x08013d1b

08010428 <__pow5mult>:
 8010428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801042a:	2303      	movs	r3, #3
 801042c:	0015      	movs	r5, r2
 801042e:	0007      	movs	r7, r0
 8010430:	000e      	movs	r6, r1
 8010432:	401a      	ands	r2, r3
 8010434:	421d      	tst	r5, r3
 8010436:	d008      	beq.n	801044a <__pow5mult+0x22>
 8010438:	4925      	ldr	r1, [pc, #148]	; (80104d0 <__pow5mult+0xa8>)
 801043a:	3a01      	subs	r2, #1
 801043c:	0092      	lsls	r2, r2, #2
 801043e:	5852      	ldr	r2, [r2, r1]
 8010440:	2300      	movs	r3, #0
 8010442:	0031      	movs	r1, r6
 8010444:	f7ff fe50 	bl	80100e8 <__multadd>
 8010448:	0006      	movs	r6, r0
 801044a:	10ad      	asrs	r5, r5, #2
 801044c:	d03d      	beq.n	80104ca <__pow5mult+0xa2>
 801044e:	69fc      	ldr	r4, [r7, #28]
 8010450:	2c00      	cmp	r4, #0
 8010452:	d10f      	bne.n	8010474 <__pow5mult+0x4c>
 8010454:	2010      	movs	r0, #16
 8010456:	f7ff fd21 	bl	800fe9c <malloc>
 801045a:	1e02      	subs	r2, r0, #0
 801045c:	61f8      	str	r0, [r7, #28]
 801045e:	d105      	bne.n	801046c <__pow5mult+0x44>
 8010460:	21b4      	movs	r1, #180	; 0xb4
 8010462:	4b1c      	ldr	r3, [pc, #112]	; (80104d4 <__pow5mult+0xac>)
 8010464:	481c      	ldr	r0, [pc, #112]	; (80104d8 <__pow5mult+0xb0>)
 8010466:	31ff      	adds	r1, #255	; 0xff
 8010468:	f001 fb9a 	bl	8011ba0 <__assert_func>
 801046c:	6044      	str	r4, [r0, #4]
 801046e:	6084      	str	r4, [r0, #8]
 8010470:	6004      	str	r4, [r0, #0]
 8010472:	60c4      	str	r4, [r0, #12]
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	689c      	ldr	r4, [r3, #8]
 8010478:	9301      	str	r3, [sp, #4]
 801047a:	2c00      	cmp	r4, #0
 801047c:	d108      	bne.n	8010490 <__pow5mult+0x68>
 801047e:	0038      	movs	r0, r7
 8010480:	4916      	ldr	r1, [pc, #88]	; (80104dc <__pow5mult+0xb4>)
 8010482:	f7ff ff09 	bl	8010298 <__i2b>
 8010486:	9b01      	ldr	r3, [sp, #4]
 8010488:	0004      	movs	r4, r0
 801048a:	6098      	str	r0, [r3, #8]
 801048c:	2300      	movs	r3, #0
 801048e:	6003      	str	r3, [r0, #0]
 8010490:	2301      	movs	r3, #1
 8010492:	421d      	tst	r5, r3
 8010494:	d00a      	beq.n	80104ac <__pow5mult+0x84>
 8010496:	0031      	movs	r1, r6
 8010498:	0022      	movs	r2, r4
 801049a:	0038      	movs	r0, r7
 801049c:	f7ff ff14 	bl	80102c8 <__multiply>
 80104a0:	0031      	movs	r1, r6
 80104a2:	9001      	str	r0, [sp, #4]
 80104a4:	0038      	movs	r0, r7
 80104a6:	f7ff fdfb 	bl	80100a0 <_Bfree>
 80104aa:	9e01      	ldr	r6, [sp, #4]
 80104ac:	106d      	asrs	r5, r5, #1
 80104ae:	d00c      	beq.n	80104ca <__pow5mult+0xa2>
 80104b0:	6820      	ldr	r0, [r4, #0]
 80104b2:	2800      	cmp	r0, #0
 80104b4:	d107      	bne.n	80104c6 <__pow5mult+0x9e>
 80104b6:	0022      	movs	r2, r4
 80104b8:	0021      	movs	r1, r4
 80104ba:	0038      	movs	r0, r7
 80104bc:	f7ff ff04 	bl	80102c8 <__multiply>
 80104c0:	2300      	movs	r3, #0
 80104c2:	6020      	str	r0, [r4, #0]
 80104c4:	6003      	str	r3, [r0, #0]
 80104c6:	0004      	movs	r4, r0
 80104c8:	e7e2      	b.n	8010490 <__pow5mult+0x68>
 80104ca:	0030      	movs	r0, r6
 80104cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80104ce:	46c0      	nop			; (mov r8, r8)
 80104d0:	08013e68 	.word	0x08013e68
 80104d4:	08013c9b 	.word	0x08013c9b
 80104d8:	08013d1b 	.word	0x08013d1b
 80104dc:	00000271 	.word	0x00000271

080104e0 <__lshift>:
 80104e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104e2:	000c      	movs	r4, r1
 80104e4:	0017      	movs	r7, r2
 80104e6:	6923      	ldr	r3, [r4, #16]
 80104e8:	1155      	asrs	r5, r2, #5
 80104ea:	b087      	sub	sp, #28
 80104ec:	18eb      	adds	r3, r5, r3
 80104ee:	9302      	str	r3, [sp, #8]
 80104f0:	3301      	adds	r3, #1
 80104f2:	9301      	str	r3, [sp, #4]
 80104f4:	6849      	ldr	r1, [r1, #4]
 80104f6:	68a3      	ldr	r3, [r4, #8]
 80104f8:	9004      	str	r0, [sp, #16]
 80104fa:	9a01      	ldr	r2, [sp, #4]
 80104fc:	4293      	cmp	r3, r2
 80104fe:	db10      	blt.n	8010522 <__lshift+0x42>
 8010500:	9804      	ldr	r0, [sp, #16]
 8010502:	f7ff fd89 	bl	8010018 <_Balloc>
 8010506:	2300      	movs	r3, #0
 8010508:	0002      	movs	r2, r0
 801050a:	0006      	movs	r6, r0
 801050c:	0019      	movs	r1, r3
 801050e:	3214      	adds	r2, #20
 8010510:	4298      	cmp	r0, r3
 8010512:	d10c      	bne.n	801052e <__lshift+0x4e>
 8010514:	31df      	adds	r1, #223	; 0xdf
 8010516:	0032      	movs	r2, r6
 8010518:	4b26      	ldr	r3, [pc, #152]	; (80105b4 <__lshift+0xd4>)
 801051a:	4827      	ldr	r0, [pc, #156]	; (80105b8 <__lshift+0xd8>)
 801051c:	31ff      	adds	r1, #255	; 0xff
 801051e:	f001 fb3f 	bl	8011ba0 <__assert_func>
 8010522:	3101      	adds	r1, #1
 8010524:	005b      	lsls	r3, r3, #1
 8010526:	e7e8      	b.n	80104fa <__lshift+0x1a>
 8010528:	0098      	lsls	r0, r3, #2
 801052a:	5011      	str	r1, [r2, r0]
 801052c:	3301      	adds	r3, #1
 801052e:	42ab      	cmp	r3, r5
 8010530:	dbfa      	blt.n	8010528 <__lshift+0x48>
 8010532:	43eb      	mvns	r3, r5
 8010534:	17db      	asrs	r3, r3, #31
 8010536:	401d      	ands	r5, r3
 8010538:	211f      	movs	r1, #31
 801053a:	0023      	movs	r3, r4
 801053c:	0038      	movs	r0, r7
 801053e:	00ad      	lsls	r5, r5, #2
 8010540:	1955      	adds	r5, r2, r5
 8010542:	6922      	ldr	r2, [r4, #16]
 8010544:	3314      	adds	r3, #20
 8010546:	0092      	lsls	r2, r2, #2
 8010548:	4008      	ands	r0, r1
 801054a:	4684      	mov	ip, r0
 801054c:	189a      	adds	r2, r3, r2
 801054e:	420f      	tst	r7, r1
 8010550:	d02a      	beq.n	80105a8 <__lshift+0xc8>
 8010552:	3101      	adds	r1, #1
 8010554:	1a09      	subs	r1, r1, r0
 8010556:	9105      	str	r1, [sp, #20]
 8010558:	2100      	movs	r1, #0
 801055a:	9503      	str	r5, [sp, #12]
 801055c:	4667      	mov	r7, ip
 801055e:	6818      	ldr	r0, [r3, #0]
 8010560:	40b8      	lsls	r0, r7
 8010562:	4308      	orrs	r0, r1
 8010564:	9903      	ldr	r1, [sp, #12]
 8010566:	c101      	stmia	r1!, {r0}
 8010568:	9103      	str	r1, [sp, #12]
 801056a:	9805      	ldr	r0, [sp, #20]
 801056c:	cb02      	ldmia	r3!, {r1}
 801056e:	40c1      	lsrs	r1, r0
 8010570:	429a      	cmp	r2, r3
 8010572:	d8f3      	bhi.n	801055c <__lshift+0x7c>
 8010574:	0020      	movs	r0, r4
 8010576:	3015      	adds	r0, #21
 8010578:	2304      	movs	r3, #4
 801057a:	4282      	cmp	r2, r0
 801057c:	d304      	bcc.n	8010588 <__lshift+0xa8>
 801057e:	1b13      	subs	r3, r2, r4
 8010580:	3b15      	subs	r3, #21
 8010582:	089b      	lsrs	r3, r3, #2
 8010584:	3301      	adds	r3, #1
 8010586:	009b      	lsls	r3, r3, #2
 8010588:	50e9      	str	r1, [r5, r3]
 801058a:	2900      	cmp	r1, #0
 801058c:	d002      	beq.n	8010594 <__lshift+0xb4>
 801058e:	9b02      	ldr	r3, [sp, #8]
 8010590:	3302      	adds	r3, #2
 8010592:	9301      	str	r3, [sp, #4]
 8010594:	9b01      	ldr	r3, [sp, #4]
 8010596:	9804      	ldr	r0, [sp, #16]
 8010598:	3b01      	subs	r3, #1
 801059a:	0021      	movs	r1, r4
 801059c:	6133      	str	r3, [r6, #16]
 801059e:	f7ff fd7f 	bl	80100a0 <_Bfree>
 80105a2:	0030      	movs	r0, r6
 80105a4:	b007      	add	sp, #28
 80105a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105a8:	cb02      	ldmia	r3!, {r1}
 80105aa:	c502      	stmia	r5!, {r1}
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d8fb      	bhi.n	80105a8 <__lshift+0xc8>
 80105b0:	e7f0      	b.n	8010594 <__lshift+0xb4>
 80105b2:	46c0      	nop			; (mov r8, r8)
 80105b4:	08013d0a 	.word	0x08013d0a
 80105b8:	08013d1b 	.word	0x08013d1b

080105bc <__mcmp>:
 80105bc:	b530      	push	{r4, r5, lr}
 80105be:	690b      	ldr	r3, [r1, #16]
 80105c0:	6904      	ldr	r4, [r0, #16]
 80105c2:	0002      	movs	r2, r0
 80105c4:	1ae0      	subs	r0, r4, r3
 80105c6:	429c      	cmp	r4, r3
 80105c8:	d10e      	bne.n	80105e8 <__mcmp+0x2c>
 80105ca:	3214      	adds	r2, #20
 80105cc:	009b      	lsls	r3, r3, #2
 80105ce:	3114      	adds	r1, #20
 80105d0:	0014      	movs	r4, r2
 80105d2:	18c9      	adds	r1, r1, r3
 80105d4:	18d2      	adds	r2, r2, r3
 80105d6:	3a04      	subs	r2, #4
 80105d8:	3904      	subs	r1, #4
 80105da:	6815      	ldr	r5, [r2, #0]
 80105dc:	680b      	ldr	r3, [r1, #0]
 80105de:	429d      	cmp	r5, r3
 80105e0:	d003      	beq.n	80105ea <__mcmp+0x2e>
 80105e2:	2001      	movs	r0, #1
 80105e4:	429d      	cmp	r5, r3
 80105e6:	d303      	bcc.n	80105f0 <__mcmp+0x34>
 80105e8:	bd30      	pop	{r4, r5, pc}
 80105ea:	4294      	cmp	r4, r2
 80105ec:	d3f3      	bcc.n	80105d6 <__mcmp+0x1a>
 80105ee:	e7fb      	b.n	80105e8 <__mcmp+0x2c>
 80105f0:	4240      	negs	r0, r0
 80105f2:	e7f9      	b.n	80105e8 <__mcmp+0x2c>

080105f4 <__mdiff>:
 80105f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105f6:	000e      	movs	r6, r1
 80105f8:	0007      	movs	r7, r0
 80105fa:	0011      	movs	r1, r2
 80105fc:	0030      	movs	r0, r6
 80105fe:	b087      	sub	sp, #28
 8010600:	0014      	movs	r4, r2
 8010602:	f7ff ffdb 	bl	80105bc <__mcmp>
 8010606:	1e05      	subs	r5, r0, #0
 8010608:	d110      	bne.n	801062c <__mdiff+0x38>
 801060a:	0001      	movs	r1, r0
 801060c:	0038      	movs	r0, r7
 801060e:	f7ff fd03 	bl	8010018 <_Balloc>
 8010612:	1e02      	subs	r2, r0, #0
 8010614:	d104      	bne.n	8010620 <__mdiff+0x2c>
 8010616:	4b3f      	ldr	r3, [pc, #252]	; (8010714 <__mdiff+0x120>)
 8010618:	483f      	ldr	r0, [pc, #252]	; (8010718 <__mdiff+0x124>)
 801061a:	4940      	ldr	r1, [pc, #256]	; (801071c <__mdiff+0x128>)
 801061c:	f001 fac0 	bl	8011ba0 <__assert_func>
 8010620:	2301      	movs	r3, #1
 8010622:	6145      	str	r5, [r0, #20]
 8010624:	6103      	str	r3, [r0, #16]
 8010626:	0010      	movs	r0, r2
 8010628:	b007      	add	sp, #28
 801062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801062c:	2301      	movs	r3, #1
 801062e:	9301      	str	r3, [sp, #4]
 8010630:	2800      	cmp	r0, #0
 8010632:	db04      	blt.n	801063e <__mdiff+0x4a>
 8010634:	0023      	movs	r3, r4
 8010636:	0034      	movs	r4, r6
 8010638:	001e      	movs	r6, r3
 801063a:	2300      	movs	r3, #0
 801063c:	9301      	str	r3, [sp, #4]
 801063e:	0038      	movs	r0, r7
 8010640:	6861      	ldr	r1, [r4, #4]
 8010642:	f7ff fce9 	bl	8010018 <_Balloc>
 8010646:	1e02      	subs	r2, r0, #0
 8010648:	d103      	bne.n	8010652 <__mdiff+0x5e>
 801064a:	4b32      	ldr	r3, [pc, #200]	; (8010714 <__mdiff+0x120>)
 801064c:	4832      	ldr	r0, [pc, #200]	; (8010718 <__mdiff+0x124>)
 801064e:	4934      	ldr	r1, [pc, #208]	; (8010720 <__mdiff+0x12c>)
 8010650:	e7e4      	b.n	801061c <__mdiff+0x28>
 8010652:	9b01      	ldr	r3, [sp, #4]
 8010654:	2700      	movs	r7, #0
 8010656:	60c3      	str	r3, [r0, #12]
 8010658:	6920      	ldr	r0, [r4, #16]
 801065a:	3414      	adds	r4, #20
 801065c:	0083      	lsls	r3, r0, #2
 801065e:	18e3      	adds	r3, r4, r3
 8010660:	0021      	movs	r1, r4
 8010662:	9401      	str	r4, [sp, #4]
 8010664:	0034      	movs	r4, r6
 8010666:	9302      	str	r3, [sp, #8]
 8010668:	6933      	ldr	r3, [r6, #16]
 801066a:	3414      	adds	r4, #20
 801066c:	009b      	lsls	r3, r3, #2
 801066e:	18e3      	adds	r3, r4, r3
 8010670:	9303      	str	r3, [sp, #12]
 8010672:	0013      	movs	r3, r2
 8010674:	3314      	adds	r3, #20
 8010676:	469c      	mov	ip, r3
 8010678:	9305      	str	r3, [sp, #20]
 801067a:	9104      	str	r1, [sp, #16]
 801067c:	9b04      	ldr	r3, [sp, #16]
 801067e:	cc02      	ldmia	r4!, {r1}
 8010680:	cb20      	ldmia	r3!, {r5}
 8010682:	9304      	str	r3, [sp, #16]
 8010684:	b2ab      	uxth	r3, r5
 8010686:	19df      	adds	r7, r3, r7
 8010688:	b28b      	uxth	r3, r1
 801068a:	1afb      	subs	r3, r7, r3
 801068c:	0c09      	lsrs	r1, r1, #16
 801068e:	0c2d      	lsrs	r5, r5, #16
 8010690:	1a6d      	subs	r5, r5, r1
 8010692:	1419      	asrs	r1, r3, #16
 8010694:	1869      	adds	r1, r5, r1
 8010696:	b29b      	uxth	r3, r3
 8010698:	140f      	asrs	r7, r1, #16
 801069a:	0409      	lsls	r1, r1, #16
 801069c:	4319      	orrs	r1, r3
 801069e:	4663      	mov	r3, ip
 80106a0:	c302      	stmia	r3!, {r1}
 80106a2:	469c      	mov	ip, r3
 80106a4:	9b03      	ldr	r3, [sp, #12]
 80106a6:	42a3      	cmp	r3, r4
 80106a8:	d8e8      	bhi.n	801067c <__mdiff+0x88>
 80106aa:	0031      	movs	r1, r6
 80106ac:	9c03      	ldr	r4, [sp, #12]
 80106ae:	3115      	adds	r1, #21
 80106b0:	2304      	movs	r3, #4
 80106b2:	428c      	cmp	r4, r1
 80106b4:	d304      	bcc.n	80106c0 <__mdiff+0xcc>
 80106b6:	1ba3      	subs	r3, r4, r6
 80106b8:	3b15      	subs	r3, #21
 80106ba:	089b      	lsrs	r3, r3, #2
 80106bc:	3301      	adds	r3, #1
 80106be:	009b      	lsls	r3, r3, #2
 80106c0:	9901      	ldr	r1, [sp, #4]
 80106c2:	18cd      	adds	r5, r1, r3
 80106c4:	9905      	ldr	r1, [sp, #20]
 80106c6:	002e      	movs	r6, r5
 80106c8:	18cb      	adds	r3, r1, r3
 80106ca:	469c      	mov	ip, r3
 80106cc:	9902      	ldr	r1, [sp, #8]
 80106ce:	428e      	cmp	r6, r1
 80106d0:	d310      	bcc.n	80106f4 <__mdiff+0x100>
 80106d2:	9e02      	ldr	r6, [sp, #8]
 80106d4:	1ee9      	subs	r1, r5, #3
 80106d6:	2400      	movs	r4, #0
 80106d8:	428e      	cmp	r6, r1
 80106da:	d304      	bcc.n	80106e6 <__mdiff+0xf2>
 80106dc:	0031      	movs	r1, r6
 80106de:	3103      	adds	r1, #3
 80106e0:	1b49      	subs	r1, r1, r5
 80106e2:	0889      	lsrs	r1, r1, #2
 80106e4:	008c      	lsls	r4, r1, #2
 80106e6:	191b      	adds	r3, r3, r4
 80106e8:	3b04      	subs	r3, #4
 80106ea:	6819      	ldr	r1, [r3, #0]
 80106ec:	2900      	cmp	r1, #0
 80106ee:	d00f      	beq.n	8010710 <__mdiff+0x11c>
 80106f0:	6110      	str	r0, [r2, #16]
 80106f2:	e798      	b.n	8010626 <__mdiff+0x32>
 80106f4:	ce02      	ldmia	r6!, {r1}
 80106f6:	b28c      	uxth	r4, r1
 80106f8:	19e4      	adds	r4, r4, r7
 80106fa:	0c0f      	lsrs	r7, r1, #16
 80106fc:	1421      	asrs	r1, r4, #16
 80106fe:	1879      	adds	r1, r7, r1
 8010700:	b2a4      	uxth	r4, r4
 8010702:	140f      	asrs	r7, r1, #16
 8010704:	0409      	lsls	r1, r1, #16
 8010706:	4321      	orrs	r1, r4
 8010708:	4664      	mov	r4, ip
 801070a:	c402      	stmia	r4!, {r1}
 801070c:	46a4      	mov	ip, r4
 801070e:	e7dd      	b.n	80106cc <__mdiff+0xd8>
 8010710:	3801      	subs	r0, #1
 8010712:	e7e9      	b.n	80106e8 <__mdiff+0xf4>
 8010714:	08013d0a 	.word	0x08013d0a
 8010718:	08013d1b 	.word	0x08013d1b
 801071c:	00000237 	.word	0x00000237
 8010720:	00000245 	.word	0x00000245

08010724 <__ulp>:
 8010724:	2000      	movs	r0, #0
 8010726:	4b0b      	ldr	r3, [pc, #44]	; (8010754 <__ulp+0x30>)
 8010728:	4019      	ands	r1, r3
 801072a:	4b0b      	ldr	r3, [pc, #44]	; (8010758 <__ulp+0x34>)
 801072c:	18c9      	adds	r1, r1, r3
 801072e:	4281      	cmp	r1, r0
 8010730:	dc06      	bgt.n	8010740 <__ulp+0x1c>
 8010732:	4249      	negs	r1, r1
 8010734:	150b      	asrs	r3, r1, #20
 8010736:	2b13      	cmp	r3, #19
 8010738:	dc03      	bgt.n	8010742 <__ulp+0x1e>
 801073a:	2180      	movs	r1, #128	; 0x80
 801073c:	0309      	lsls	r1, r1, #12
 801073e:	4119      	asrs	r1, r3
 8010740:	4770      	bx	lr
 8010742:	3b14      	subs	r3, #20
 8010744:	2001      	movs	r0, #1
 8010746:	2b1e      	cmp	r3, #30
 8010748:	dc02      	bgt.n	8010750 <__ulp+0x2c>
 801074a:	2080      	movs	r0, #128	; 0x80
 801074c:	0600      	lsls	r0, r0, #24
 801074e:	40d8      	lsrs	r0, r3
 8010750:	2100      	movs	r1, #0
 8010752:	e7f5      	b.n	8010740 <__ulp+0x1c>
 8010754:	7ff00000 	.word	0x7ff00000
 8010758:	fcc00000 	.word	0xfcc00000

0801075c <__b2d>:
 801075c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801075e:	0006      	movs	r6, r0
 8010760:	6903      	ldr	r3, [r0, #16]
 8010762:	3614      	adds	r6, #20
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	18f3      	adds	r3, r6, r3
 8010768:	1f1d      	subs	r5, r3, #4
 801076a:	682c      	ldr	r4, [r5, #0]
 801076c:	000f      	movs	r7, r1
 801076e:	0020      	movs	r0, r4
 8010770:	9301      	str	r3, [sp, #4]
 8010772:	f7ff fd49 	bl	8010208 <__hi0bits>
 8010776:	2220      	movs	r2, #32
 8010778:	1a12      	subs	r2, r2, r0
 801077a:	603a      	str	r2, [r7, #0]
 801077c:	0003      	movs	r3, r0
 801077e:	4a1c      	ldr	r2, [pc, #112]	; (80107f0 <__b2d+0x94>)
 8010780:	280a      	cmp	r0, #10
 8010782:	dc15      	bgt.n	80107b0 <__b2d+0x54>
 8010784:	210b      	movs	r1, #11
 8010786:	0027      	movs	r7, r4
 8010788:	1a09      	subs	r1, r1, r0
 801078a:	40cf      	lsrs	r7, r1
 801078c:	433a      	orrs	r2, r7
 801078e:	468c      	mov	ip, r1
 8010790:	0011      	movs	r1, r2
 8010792:	2200      	movs	r2, #0
 8010794:	42ae      	cmp	r6, r5
 8010796:	d202      	bcs.n	801079e <__b2d+0x42>
 8010798:	9a01      	ldr	r2, [sp, #4]
 801079a:	3a08      	subs	r2, #8
 801079c:	6812      	ldr	r2, [r2, #0]
 801079e:	3315      	adds	r3, #21
 80107a0:	409c      	lsls	r4, r3
 80107a2:	4663      	mov	r3, ip
 80107a4:	0027      	movs	r7, r4
 80107a6:	40da      	lsrs	r2, r3
 80107a8:	4317      	orrs	r7, r2
 80107aa:	0038      	movs	r0, r7
 80107ac:	b003      	add	sp, #12
 80107ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107b0:	2700      	movs	r7, #0
 80107b2:	42ae      	cmp	r6, r5
 80107b4:	d202      	bcs.n	80107bc <__b2d+0x60>
 80107b6:	9d01      	ldr	r5, [sp, #4]
 80107b8:	3d08      	subs	r5, #8
 80107ba:	682f      	ldr	r7, [r5, #0]
 80107bc:	210b      	movs	r1, #11
 80107be:	4249      	negs	r1, r1
 80107c0:	468c      	mov	ip, r1
 80107c2:	449c      	add	ip, r3
 80107c4:	2b0b      	cmp	r3, #11
 80107c6:	d010      	beq.n	80107ea <__b2d+0x8e>
 80107c8:	4661      	mov	r1, ip
 80107ca:	2320      	movs	r3, #32
 80107cc:	408c      	lsls	r4, r1
 80107ce:	1a5b      	subs	r3, r3, r1
 80107d0:	0039      	movs	r1, r7
 80107d2:	40d9      	lsrs	r1, r3
 80107d4:	430c      	orrs	r4, r1
 80107d6:	4322      	orrs	r2, r4
 80107d8:	0011      	movs	r1, r2
 80107da:	2200      	movs	r2, #0
 80107dc:	42b5      	cmp	r5, r6
 80107de:	d901      	bls.n	80107e4 <__b2d+0x88>
 80107e0:	3d04      	subs	r5, #4
 80107e2:	682a      	ldr	r2, [r5, #0]
 80107e4:	4664      	mov	r4, ip
 80107e6:	40a7      	lsls	r7, r4
 80107e8:	e7dd      	b.n	80107a6 <__b2d+0x4a>
 80107ea:	4322      	orrs	r2, r4
 80107ec:	0011      	movs	r1, r2
 80107ee:	e7dc      	b.n	80107aa <__b2d+0x4e>
 80107f0:	3ff00000 	.word	0x3ff00000

080107f4 <__d2b>:
 80107f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107f6:	2101      	movs	r1, #1
 80107f8:	0014      	movs	r4, r2
 80107fa:	001d      	movs	r5, r3
 80107fc:	9f08      	ldr	r7, [sp, #32]
 80107fe:	f7ff fc0b 	bl	8010018 <_Balloc>
 8010802:	1e06      	subs	r6, r0, #0
 8010804:	d105      	bne.n	8010812 <__d2b+0x1e>
 8010806:	0032      	movs	r2, r6
 8010808:	4b24      	ldr	r3, [pc, #144]	; (801089c <__d2b+0xa8>)
 801080a:	4825      	ldr	r0, [pc, #148]	; (80108a0 <__d2b+0xac>)
 801080c:	4925      	ldr	r1, [pc, #148]	; (80108a4 <__d2b+0xb0>)
 801080e:	f001 f9c7 	bl	8011ba0 <__assert_func>
 8010812:	032b      	lsls	r3, r5, #12
 8010814:	006d      	lsls	r5, r5, #1
 8010816:	0b1b      	lsrs	r3, r3, #12
 8010818:	0d6d      	lsrs	r5, r5, #21
 801081a:	d125      	bne.n	8010868 <__d2b+0x74>
 801081c:	9301      	str	r3, [sp, #4]
 801081e:	2c00      	cmp	r4, #0
 8010820:	d028      	beq.n	8010874 <__d2b+0x80>
 8010822:	4668      	mov	r0, sp
 8010824:	9400      	str	r4, [sp, #0]
 8010826:	f7ff fd09 	bl	801023c <__lo0bits>
 801082a:	9b01      	ldr	r3, [sp, #4]
 801082c:	9900      	ldr	r1, [sp, #0]
 801082e:	2800      	cmp	r0, #0
 8010830:	d01e      	beq.n	8010870 <__d2b+0x7c>
 8010832:	2220      	movs	r2, #32
 8010834:	001c      	movs	r4, r3
 8010836:	1a12      	subs	r2, r2, r0
 8010838:	4094      	lsls	r4, r2
 801083a:	0022      	movs	r2, r4
 801083c:	40c3      	lsrs	r3, r0
 801083e:	430a      	orrs	r2, r1
 8010840:	6172      	str	r2, [r6, #20]
 8010842:	9301      	str	r3, [sp, #4]
 8010844:	9c01      	ldr	r4, [sp, #4]
 8010846:	61b4      	str	r4, [r6, #24]
 8010848:	1e63      	subs	r3, r4, #1
 801084a:	419c      	sbcs	r4, r3
 801084c:	3401      	adds	r4, #1
 801084e:	6134      	str	r4, [r6, #16]
 8010850:	2d00      	cmp	r5, #0
 8010852:	d017      	beq.n	8010884 <__d2b+0x90>
 8010854:	2435      	movs	r4, #53	; 0x35
 8010856:	4b14      	ldr	r3, [pc, #80]	; (80108a8 <__d2b+0xb4>)
 8010858:	18ed      	adds	r5, r5, r3
 801085a:	182d      	adds	r5, r5, r0
 801085c:	603d      	str	r5, [r7, #0]
 801085e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010860:	1a24      	subs	r4, r4, r0
 8010862:	601c      	str	r4, [r3, #0]
 8010864:	0030      	movs	r0, r6
 8010866:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010868:	2280      	movs	r2, #128	; 0x80
 801086a:	0352      	lsls	r2, r2, #13
 801086c:	4313      	orrs	r3, r2
 801086e:	e7d5      	b.n	801081c <__d2b+0x28>
 8010870:	6171      	str	r1, [r6, #20]
 8010872:	e7e7      	b.n	8010844 <__d2b+0x50>
 8010874:	a801      	add	r0, sp, #4
 8010876:	f7ff fce1 	bl	801023c <__lo0bits>
 801087a:	9b01      	ldr	r3, [sp, #4]
 801087c:	2401      	movs	r4, #1
 801087e:	6173      	str	r3, [r6, #20]
 8010880:	3020      	adds	r0, #32
 8010882:	e7e4      	b.n	801084e <__d2b+0x5a>
 8010884:	4b09      	ldr	r3, [pc, #36]	; (80108ac <__d2b+0xb8>)
 8010886:	18c0      	adds	r0, r0, r3
 8010888:	4b09      	ldr	r3, [pc, #36]	; (80108b0 <__d2b+0xbc>)
 801088a:	6038      	str	r0, [r7, #0]
 801088c:	18e3      	adds	r3, r4, r3
 801088e:	009b      	lsls	r3, r3, #2
 8010890:	18f3      	adds	r3, r6, r3
 8010892:	6958      	ldr	r0, [r3, #20]
 8010894:	f7ff fcb8 	bl	8010208 <__hi0bits>
 8010898:	0164      	lsls	r4, r4, #5
 801089a:	e7e0      	b.n	801085e <__d2b+0x6a>
 801089c:	08013d0a 	.word	0x08013d0a
 80108a0:	08013d1b 	.word	0x08013d1b
 80108a4:	0000030f 	.word	0x0000030f
 80108a8:	fffffbcd 	.word	0xfffffbcd
 80108ac:	fffffbce 	.word	0xfffffbce
 80108b0:	3fffffff 	.word	0x3fffffff

080108b4 <__ratio>:
 80108b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108b6:	b087      	sub	sp, #28
 80108b8:	000f      	movs	r7, r1
 80108ba:	a904      	add	r1, sp, #16
 80108bc:	0006      	movs	r6, r0
 80108be:	f7ff ff4d 	bl	801075c <__b2d>
 80108c2:	9000      	str	r0, [sp, #0]
 80108c4:	9101      	str	r1, [sp, #4]
 80108c6:	9c00      	ldr	r4, [sp, #0]
 80108c8:	9d01      	ldr	r5, [sp, #4]
 80108ca:	0038      	movs	r0, r7
 80108cc:	a905      	add	r1, sp, #20
 80108ce:	f7ff ff45 	bl	801075c <__b2d>
 80108d2:	9002      	str	r0, [sp, #8]
 80108d4:	9103      	str	r1, [sp, #12]
 80108d6:	9a02      	ldr	r2, [sp, #8]
 80108d8:	9b03      	ldr	r3, [sp, #12]
 80108da:	6930      	ldr	r0, [r6, #16]
 80108dc:	6939      	ldr	r1, [r7, #16]
 80108de:	9e04      	ldr	r6, [sp, #16]
 80108e0:	1a40      	subs	r0, r0, r1
 80108e2:	9905      	ldr	r1, [sp, #20]
 80108e4:	0140      	lsls	r0, r0, #5
 80108e6:	1a71      	subs	r1, r6, r1
 80108e8:	1841      	adds	r1, r0, r1
 80108ea:	0508      	lsls	r0, r1, #20
 80108ec:	2900      	cmp	r1, #0
 80108ee:	dd07      	ble.n	8010900 <__ratio+0x4c>
 80108f0:	9901      	ldr	r1, [sp, #4]
 80108f2:	1845      	adds	r5, r0, r1
 80108f4:	0020      	movs	r0, r4
 80108f6:	0029      	movs	r1, r5
 80108f8:	f7f0 ff10 	bl	800171c <__aeabi_ddiv>
 80108fc:	b007      	add	sp, #28
 80108fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010900:	9903      	ldr	r1, [sp, #12]
 8010902:	1a0b      	subs	r3, r1, r0
 8010904:	e7f6      	b.n	80108f4 <__ratio+0x40>

08010906 <__copybits>:
 8010906:	b570      	push	{r4, r5, r6, lr}
 8010908:	0014      	movs	r4, r2
 801090a:	0005      	movs	r5, r0
 801090c:	3901      	subs	r1, #1
 801090e:	6913      	ldr	r3, [r2, #16]
 8010910:	1149      	asrs	r1, r1, #5
 8010912:	3101      	adds	r1, #1
 8010914:	0089      	lsls	r1, r1, #2
 8010916:	3414      	adds	r4, #20
 8010918:	009b      	lsls	r3, r3, #2
 801091a:	1841      	adds	r1, r0, r1
 801091c:	18e3      	adds	r3, r4, r3
 801091e:	42a3      	cmp	r3, r4
 8010920:	d80d      	bhi.n	801093e <__copybits+0x38>
 8010922:	0014      	movs	r4, r2
 8010924:	3411      	adds	r4, #17
 8010926:	2500      	movs	r5, #0
 8010928:	429c      	cmp	r4, r3
 801092a:	d803      	bhi.n	8010934 <__copybits+0x2e>
 801092c:	1a9b      	subs	r3, r3, r2
 801092e:	3b11      	subs	r3, #17
 8010930:	089b      	lsrs	r3, r3, #2
 8010932:	009d      	lsls	r5, r3, #2
 8010934:	2300      	movs	r3, #0
 8010936:	1940      	adds	r0, r0, r5
 8010938:	4281      	cmp	r1, r0
 801093a:	d803      	bhi.n	8010944 <__copybits+0x3e>
 801093c:	bd70      	pop	{r4, r5, r6, pc}
 801093e:	cc40      	ldmia	r4!, {r6}
 8010940:	c540      	stmia	r5!, {r6}
 8010942:	e7ec      	b.n	801091e <__copybits+0x18>
 8010944:	c008      	stmia	r0!, {r3}
 8010946:	e7f7      	b.n	8010938 <__copybits+0x32>

08010948 <__any_on>:
 8010948:	0002      	movs	r2, r0
 801094a:	6900      	ldr	r0, [r0, #16]
 801094c:	b510      	push	{r4, lr}
 801094e:	3214      	adds	r2, #20
 8010950:	114b      	asrs	r3, r1, #5
 8010952:	4298      	cmp	r0, r3
 8010954:	db13      	blt.n	801097e <__any_on+0x36>
 8010956:	dd0c      	ble.n	8010972 <__any_on+0x2a>
 8010958:	241f      	movs	r4, #31
 801095a:	0008      	movs	r0, r1
 801095c:	4020      	ands	r0, r4
 801095e:	4221      	tst	r1, r4
 8010960:	d007      	beq.n	8010972 <__any_on+0x2a>
 8010962:	0099      	lsls	r1, r3, #2
 8010964:	588c      	ldr	r4, [r1, r2]
 8010966:	0021      	movs	r1, r4
 8010968:	40c1      	lsrs	r1, r0
 801096a:	4081      	lsls	r1, r0
 801096c:	2001      	movs	r0, #1
 801096e:	428c      	cmp	r4, r1
 8010970:	d104      	bne.n	801097c <__any_on+0x34>
 8010972:	009b      	lsls	r3, r3, #2
 8010974:	18d3      	adds	r3, r2, r3
 8010976:	4293      	cmp	r3, r2
 8010978:	d803      	bhi.n	8010982 <__any_on+0x3a>
 801097a:	2000      	movs	r0, #0
 801097c:	bd10      	pop	{r4, pc}
 801097e:	0003      	movs	r3, r0
 8010980:	e7f7      	b.n	8010972 <__any_on+0x2a>
 8010982:	3b04      	subs	r3, #4
 8010984:	6819      	ldr	r1, [r3, #0]
 8010986:	2900      	cmp	r1, #0
 8010988:	d0f5      	beq.n	8010976 <__any_on+0x2e>
 801098a:	2001      	movs	r0, #1
 801098c:	e7f6      	b.n	801097c <__any_on+0x34>
	...

08010990 <sulp>:
 8010990:	b570      	push	{r4, r5, r6, lr}
 8010992:	0016      	movs	r6, r2
 8010994:	000d      	movs	r5, r1
 8010996:	f7ff fec5 	bl	8010724 <__ulp>
 801099a:	2e00      	cmp	r6, #0
 801099c:	d00d      	beq.n	80109ba <sulp+0x2a>
 801099e:	236b      	movs	r3, #107	; 0x6b
 80109a0:	006a      	lsls	r2, r5, #1
 80109a2:	0d52      	lsrs	r2, r2, #21
 80109a4:	1a9b      	subs	r3, r3, r2
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	dd07      	ble.n	80109ba <sulp+0x2a>
 80109aa:	2400      	movs	r4, #0
 80109ac:	4a03      	ldr	r2, [pc, #12]	; (80109bc <sulp+0x2c>)
 80109ae:	051b      	lsls	r3, r3, #20
 80109b0:	189d      	adds	r5, r3, r2
 80109b2:	002b      	movs	r3, r5
 80109b4:	0022      	movs	r2, r4
 80109b6:	f7f1 faab 	bl	8001f10 <__aeabi_dmul>
 80109ba:	bd70      	pop	{r4, r5, r6, pc}
 80109bc:	3ff00000 	.word	0x3ff00000

080109c0 <_strtod_l>:
 80109c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109c2:	b0a1      	sub	sp, #132	; 0x84
 80109c4:	9219      	str	r2, [sp, #100]	; 0x64
 80109c6:	2200      	movs	r2, #0
 80109c8:	2600      	movs	r6, #0
 80109ca:	2700      	movs	r7, #0
 80109cc:	9004      	str	r0, [sp, #16]
 80109ce:	9107      	str	r1, [sp, #28]
 80109d0:	921c      	str	r2, [sp, #112]	; 0x70
 80109d2:	911b      	str	r1, [sp, #108]	; 0x6c
 80109d4:	780a      	ldrb	r2, [r1, #0]
 80109d6:	2a2b      	cmp	r2, #43	; 0x2b
 80109d8:	d055      	beq.n	8010a86 <_strtod_l+0xc6>
 80109da:	d841      	bhi.n	8010a60 <_strtod_l+0xa0>
 80109dc:	2a0d      	cmp	r2, #13
 80109de:	d83b      	bhi.n	8010a58 <_strtod_l+0x98>
 80109e0:	2a08      	cmp	r2, #8
 80109e2:	d83b      	bhi.n	8010a5c <_strtod_l+0x9c>
 80109e4:	2a00      	cmp	r2, #0
 80109e6:	d044      	beq.n	8010a72 <_strtod_l+0xb2>
 80109e8:	2200      	movs	r2, #0
 80109ea:	920f      	str	r2, [sp, #60]	; 0x3c
 80109ec:	2100      	movs	r1, #0
 80109ee:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80109f0:	9109      	str	r1, [sp, #36]	; 0x24
 80109f2:	782a      	ldrb	r2, [r5, #0]
 80109f4:	2a30      	cmp	r2, #48	; 0x30
 80109f6:	d000      	beq.n	80109fa <_strtod_l+0x3a>
 80109f8:	e085      	b.n	8010b06 <_strtod_l+0x146>
 80109fa:	786a      	ldrb	r2, [r5, #1]
 80109fc:	3120      	adds	r1, #32
 80109fe:	438a      	bics	r2, r1
 8010a00:	2a58      	cmp	r2, #88	; 0x58
 8010a02:	d000      	beq.n	8010a06 <_strtod_l+0x46>
 8010a04:	e075      	b.n	8010af2 <_strtod_l+0x132>
 8010a06:	9302      	str	r3, [sp, #8]
 8010a08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a0a:	4a97      	ldr	r2, [pc, #604]	; (8010c68 <_strtod_l+0x2a8>)
 8010a0c:	9301      	str	r3, [sp, #4]
 8010a0e:	ab1c      	add	r3, sp, #112	; 0x70
 8010a10:	9300      	str	r3, [sp, #0]
 8010a12:	9804      	ldr	r0, [sp, #16]
 8010a14:	ab1d      	add	r3, sp, #116	; 0x74
 8010a16:	a91b      	add	r1, sp, #108	; 0x6c
 8010a18:	f001 f978 	bl	8011d0c <__gethex>
 8010a1c:	230f      	movs	r3, #15
 8010a1e:	0002      	movs	r2, r0
 8010a20:	401a      	ands	r2, r3
 8010a22:	0004      	movs	r4, r0
 8010a24:	9205      	str	r2, [sp, #20]
 8010a26:	4218      	tst	r0, r3
 8010a28:	d005      	beq.n	8010a36 <_strtod_l+0x76>
 8010a2a:	2a06      	cmp	r2, #6
 8010a2c:	d12d      	bne.n	8010a8a <_strtod_l+0xca>
 8010a2e:	1c6b      	adds	r3, r5, #1
 8010a30:	931b      	str	r3, [sp, #108]	; 0x6c
 8010a32:	2300      	movs	r3, #0
 8010a34:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d002      	beq.n	8010a42 <_strtod_l+0x82>
 8010a3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010a3e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010a40:	6013      	str	r3, [r2, #0]
 8010a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d01b      	beq.n	8010a80 <_strtod_l+0xc0>
 8010a48:	2380      	movs	r3, #128	; 0x80
 8010a4a:	0032      	movs	r2, r6
 8010a4c:	061b      	lsls	r3, r3, #24
 8010a4e:	18fb      	adds	r3, r7, r3
 8010a50:	0010      	movs	r0, r2
 8010a52:	0019      	movs	r1, r3
 8010a54:	b021      	add	sp, #132	; 0x84
 8010a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a58:	2a20      	cmp	r2, #32
 8010a5a:	d1c5      	bne.n	80109e8 <_strtod_l+0x28>
 8010a5c:	3101      	adds	r1, #1
 8010a5e:	e7b8      	b.n	80109d2 <_strtod_l+0x12>
 8010a60:	2a2d      	cmp	r2, #45	; 0x2d
 8010a62:	d1c1      	bne.n	80109e8 <_strtod_l+0x28>
 8010a64:	3a2c      	subs	r2, #44	; 0x2c
 8010a66:	920f      	str	r2, [sp, #60]	; 0x3c
 8010a68:	1c4a      	adds	r2, r1, #1
 8010a6a:	921b      	str	r2, [sp, #108]	; 0x6c
 8010a6c:	784a      	ldrb	r2, [r1, #1]
 8010a6e:	2a00      	cmp	r2, #0
 8010a70:	d1bc      	bne.n	80109ec <_strtod_l+0x2c>
 8010a72:	9b07      	ldr	r3, [sp, #28]
 8010a74:	931b      	str	r3, [sp, #108]	; 0x6c
 8010a76:	2300      	movs	r3, #0
 8010a78:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d1dd      	bne.n	8010a3c <_strtod_l+0x7c>
 8010a80:	0032      	movs	r2, r6
 8010a82:	003b      	movs	r3, r7
 8010a84:	e7e4      	b.n	8010a50 <_strtod_l+0x90>
 8010a86:	2200      	movs	r2, #0
 8010a88:	e7ed      	b.n	8010a66 <_strtod_l+0xa6>
 8010a8a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010a8c:	2a00      	cmp	r2, #0
 8010a8e:	d007      	beq.n	8010aa0 <_strtod_l+0xe0>
 8010a90:	2135      	movs	r1, #53	; 0x35
 8010a92:	a81e      	add	r0, sp, #120	; 0x78
 8010a94:	f7ff ff37 	bl	8010906 <__copybits>
 8010a98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010a9a:	9804      	ldr	r0, [sp, #16]
 8010a9c:	f7ff fb00 	bl	80100a0 <_Bfree>
 8010aa0:	9805      	ldr	r0, [sp, #20]
 8010aa2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010aa4:	3801      	subs	r0, #1
 8010aa6:	2804      	cmp	r0, #4
 8010aa8:	d806      	bhi.n	8010ab8 <_strtod_l+0xf8>
 8010aaa:	f7ef fb35 	bl	8000118 <__gnu_thumb1_case_uqi>
 8010aae:	0312      	.short	0x0312
 8010ab0:	1e1c      	.short	0x1e1c
 8010ab2:	12          	.byte	0x12
 8010ab3:	00          	.byte	0x00
 8010ab4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8010ab6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8010ab8:	05e4      	lsls	r4, r4, #23
 8010aba:	d502      	bpl.n	8010ac2 <_strtod_l+0x102>
 8010abc:	2380      	movs	r3, #128	; 0x80
 8010abe:	061b      	lsls	r3, r3, #24
 8010ac0:	431f      	orrs	r7, r3
 8010ac2:	4b6a      	ldr	r3, [pc, #424]	; (8010c6c <_strtod_l+0x2ac>)
 8010ac4:	423b      	tst	r3, r7
 8010ac6:	d1b6      	bne.n	8010a36 <_strtod_l+0x76>
 8010ac8:	f7fe faba 	bl	800f040 <__errno>
 8010acc:	2322      	movs	r3, #34	; 0x22
 8010ace:	6003      	str	r3, [r0, #0]
 8010ad0:	e7b1      	b.n	8010a36 <_strtod_l+0x76>
 8010ad2:	4967      	ldr	r1, [pc, #412]	; (8010c70 <_strtod_l+0x2b0>)
 8010ad4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010ad6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8010ad8:	400a      	ands	r2, r1
 8010ada:	4966      	ldr	r1, [pc, #408]	; (8010c74 <_strtod_l+0x2b4>)
 8010adc:	185b      	adds	r3, r3, r1
 8010ade:	051b      	lsls	r3, r3, #20
 8010ae0:	431a      	orrs	r2, r3
 8010ae2:	0017      	movs	r7, r2
 8010ae4:	e7e8      	b.n	8010ab8 <_strtod_l+0xf8>
 8010ae6:	4f61      	ldr	r7, [pc, #388]	; (8010c6c <_strtod_l+0x2ac>)
 8010ae8:	e7e6      	b.n	8010ab8 <_strtod_l+0xf8>
 8010aea:	2601      	movs	r6, #1
 8010aec:	4f62      	ldr	r7, [pc, #392]	; (8010c78 <_strtod_l+0x2b8>)
 8010aee:	4276      	negs	r6, r6
 8010af0:	e7e2      	b.n	8010ab8 <_strtod_l+0xf8>
 8010af2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010af4:	1c5a      	adds	r2, r3, #1
 8010af6:	921b      	str	r2, [sp, #108]	; 0x6c
 8010af8:	785b      	ldrb	r3, [r3, #1]
 8010afa:	2b30      	cmp	r3, #48	; 0x30
 8010afc:	d0f9      	beq.n	8010af2 <_strtod_l+0x132>
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d099      	beq.n	8010a36 <_strtod_l+0x76>
 8010b02:	2301      	movs	r3, #1
 8010b04:	9309      	str	r3, [sp, #36]	; 0x24
 8010b06:	2500      	movs	r5, #0
 8010b08:	220a      	movs	r2, #10
 8010b0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010b0c:	950d      	str	r5, [sp, #52]	; 0x34
 8010b0e:	9310      	str	r3, [sp, #64]	; 0x40
 8010b10:	9508      	str	r5, [sp, #32]
 8010b12:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010b14:	7804      	ldrb	r4, [r0, #0]
 8010b16:	0023      	movs	r3, r4
 8010b18:	3b30      	subs	r3, #48	; 0x30
 8010b1a:	b2d9      	uxtb	r1, r3
 8010b1c:	2909      	cmp	r1, #9
 8010b1e:	d927      	bls.n	8010b70 <_strtod_l+0x1b0>
 8010b20:	2201      	movs	r2, #1
 8010b22:	4956      	ldr	r1, [pc, #344]	; (8010c7c <_strtod_l+0x2bc>)
 8010b24:	f001 f812 	bl	8011b4c <strncmp>
 8010b28:	2800      	cmp	r0, #0
 8010b2a:	d031      	beq.n	8010b90 <_strtod_l+0x1d0>
 8010b2c:	2000      	movs	r0, #0
 8010b2e:	0023      	movs	r3, r4
 8010b30:	4684      	mov	ip, r0
 8010b32:	9a08      	ldr	r2, [sp, #32]
 8010b34:	900c      	str	r0, [sp, #48]	; 0x30
 8010b36:	9205      	str	r2, [sp, #20]
 8010b38:	2220      	movs	r2, #32
 8010b3a:	0019      	movs	r1, r3
 8010b3c:	4391      	bics	r1, r2
 8010b3e:	000a      	movs	r2, r1
 8010b40:	2100      	movs	r1, #0
 8010b42:	9106      	str	r1, [sp, #24]
 8010b44:	2a45      	cmp	r2, #69	; 0x45
 8010b46:	d000      	beq.n	8010b4a <_strtod_l+0x18a>
 8010b48:	e0c2      	b.n	8010cd0 <_strtod_l+0x310>
 8010b4a:	9b05      	ldr	r3, [sp, #20]
 8010b4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b4e:	4303      	orrs	r3, r0
 8010b50:	4313      	orrs	r3, r2
 8010b52:	428b      	cmp	r3, r1
 8010b54:	d08d      	beq.n	8010a72 <_strtod_l+0xb2>
 8010b56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010b58:	9307      	str	r3, [sp, #28]
 8010b5a:	3301      	adds	r3, #1
 8010b5c:	931b      	str	r3, [sp, #108]	; 0x6c
 8010b5e:	9b07      	ldr	r3, [sp, #28]
 8010b60:	785b      	ldrb	r3, [r3, #1]
 8010b62:	2b2b      	cmp	r3, #43	; 0x2b
 8010b64:	d071      	beq.n	8010c4a <_strtod_l+0x28a>
 8010b66:	000c      	movs	r4, r1
 8010b68:	2b2d      	cmp	r3, #45	; 0x2d
 8010b6a:	d174      	bne.n	8010c56 <_strtod_l+0x296>
 8010b6c:	2401      	movs	r4, #1
 8010b6e:	e06d      	b.n	8010c4c <_strtod_l+0x28c>
 8010b70:	9908      	ldr	r1, [sp, #32]
 8010b72:	2908      	cmp	r1, #8
 8010b74:	dc09      	bgt.n	8010b8a <_strtod_l+0x1ca>
 8010b76:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010b78:	4351      	muls	r1, r2
 8010b7a:	185b      	adds	r3, r3, r1
 8010b7c:	930d      	str	r3, [sp, #52]	; 0x34
 8010b7e:	9b08      	ldr	r3, [sp, #32]
 8010b80:	3001      	adds	r0, #1
 8010b82:	3301      	adds	r3, #1
 8010b84:	9308      	str	r3, [sp, #32]
 8010b86:	901b      	str	r0, [sp, #108]	; 0x6c
 8010b88:	e7c3      	b.n	8010b12 <_strtod_l+0x152>
 8010b8a:	4355      	muls	r5, r2
 8010b8c:	195d      	adds	r5, r3, r5
 8010b8e:	e7f6      	b.n	8010b7e <_strtod_l+0x1be>
 8010b90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010b92:	1c5a      	adds	r2, r3, #1
 8010b94:	921b      	str	r2, [sp, #108]	; 0x6c
 8010b96:	9a08      	ldr	r2, [sp, #32]
 8010b98:	785b      	ldrb	r3, [r3, #1]
 8010b9a:	2a00      	cmp	r2, #0
 8010b9c:	d03a      	beq.n	8010c14 <_strtod_l+0x254>
 8010b9e:	900c      	str	r0, [sp, #48]	; 0x30
 8010ba0:	9205      	str	r2, [sp, #20]
 8010ba2:	001a      	movs	r2, r3
 8010ba4:	3a30      	subs	r2, #48	; 0x30
 8010ba6:	2a09      	cmp	r2, #9
 8010ba8:	d912      	bls.n	8010bd0 <_strtod_l+0x210>
 8010baa:	2201      	movs	r2, #1
 8010bac:	4694      	mov	ip, r2
 8010bae:	e7c3      	b.n	8010b38 <_strtod_l+0x178>
 8010bb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010bb2:	3001      	adds	r0, #1
 8010bb4:	1c5a      	adds	r2, r3, #1
 8010bb6:	921b      	str	r2, [sp, #108]	; 0x6c
 8010bb8:	785b      	ldrb	r3, [r3, #1]
 8010bba:	2b30      	cmp	r3, #48	; 0x30
 8010bbc:	d0f8      	beq.n	8010bb0 <_strtod_l+0x1f0>
 8010bbe:	001a      	movs	r2, r3
 8010bc0:	3a31      	subs	r2, #49	; 0x31
 8010bc2:	2a08      	cmp	r2, #8
 8010bc4:	d83c      	bhi.n	8010c40 <_strtod_l+0x280>
 8010bc6:	900c      	str	r0, [sp, #48]	; 0x30
 8010bc8:	2000      	movs	r0, #0
 8010bca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010bcc:	9005      	str	r0, [sp, #20]
 8010bce:	9210      	str	r2, [sp, #64]	; 0x40
 8010bd0:	001a      	movs	r2, r3
 8010bd2:	1c41      	adds	r1, r0, #1
 8010bd4:	3a30      	subs	r2, #48	; 0x30
 8010bd6:	2b30      	cmp	r3, #48	; 0x30
 8010bd8:	d016      	beq.n	8010c08 <_strtod_l+0x248>
 8010bda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010bdc:	185b      	adds	r3, r3, r1
 8010bde:	930c      	str	r3, [sp, #48]	; 0x30
 8010be0:	9b05      	ldr	r3, [sp, #20]
 8010be2:	210a      	movs	r1, #10
 8010be4:	469c      	mov	ip, r3
 8010be6:	4484      	add	ip, r0
 8010be8:	4563      	cmp	r3, ip
 8010bea:	d115      	bne.n	8010c18 <_strtod_l+0x258>
 8010bec:	9905      	ldr	r1, [sp, #20]
 8010bee:	9b05      	ldr	r3, [sp, #20]
 8010bf0:	3101      	adds	r1, #1
 8010bf2:	1809      	adds	r1, r1, r0
 8010bf4:	181b      	adds	r3, r3, r0
 8010bf6:	9105      	str	r1, [sp, #20]
 8010bf8:	2b08      	cmp	r3, #8
 8010bfa:	dc19      	bgt.n	8010c30 <_strtod_l+0x270>
 8010bfc:	230a      	movs	r3, #10
 8010bfe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010c00:	434b      	muls	r3, r1
 8010c02:	2100      	movs	r1, #0
 8010c04:	18d3      	adds	r3, r2, r3
 8010c06:	930d      	str	r3, [sp, #52]	; 0x34
 8010c08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010c0a:	0008      	movs	r0, r1
 8010c0c:	1c5a      	adds	r2, r3, #1
 8010c0e:	921b      	str	r2, [sp, #108]	; 0x6c
 8010c10:	785b      	ldrb	r3, [r3, #1]
 8010c12:	e7c6      	b.n	8010ba2 <_strtod_l+0x1e2>
 8010c14:	9808      	ldr	r0, [sp, #32]
 8010c16:	e7d0      	b.n	8010bba <_strtod_l+0x1fa>
 8010c18:	1c5c      	adds	r4, r3, #1
 8010c1a:	2b08      	cmp	r3, #8
 8010c1c:	dc04      	bgt.n	8010c28 <_strtod_l+0x268>
 8010c1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c20:	434b      	muls	r3, r1
 8010c22:	930d      	str	r3, [sp, #52]	; 0x34
 8010c24:	0023      	movs	r3, r4
 8010c26:	e7df      	b.n	8010be8 <_strtod_l+0x228>
 8010c28:	2c10      	cmp	r4, #16
 8010c2a:	dcfb      	bgt.n	8010c24 <_strtod_l+0x264>
 8010c2c:	434d      	muls	r5, r1
 8010c2e:	e7f9      	b.n	8010c24 <_strtod_l+0x264>
 8010c30:	9b05      	ldr	r3, [sp, #20]
 8010c32:	2100      	movs	r1, #0
 8010c34:	2b10      	cmp	r3, #16
 8010c36:	dce7      	bgt.n	8010c08 <_strtod_l+0x248>
 8010c38:	230a      	movs	r3, #10
 8010c3a:	435d      	muls	r5, r3
 8010c3c:	1955      	adds	r5, r2, r5
 8010c3e:	e7e3      	b.n	8010c08 <_strtod_l+0x248>
 8010c40:	2200      	movs	r2, #0
 8010c42:	920c      	str	r2, [sp, #48]	; 0x30
 8010c44:	9205      	str	r2, [sp, #20]
 8010c46:	3201      	adds	r2, #1
 8010c48:	e7b0      	b.n	8010bac <_strtod_l+0x1ec>
 8010c4a:	2400      	movs	r4, #0
 8010c4c:	9b07      	ldr	r3, [sp, #28]
 8010c4e:	3302      	adds	r3, #2
 8010c50:	931b      	str	r3, [sp, #108]	; 0x6c
 8010c52:	9b07      	ldr	r3, [sp, #28]
 8010c54:	789b      	ldrb	r3, [r3, #2]
 8010c56:	001a      	movs	r2, r3
 8010c58:	3a30      	subs	r2, #48	; 0x30
 8010c5a:	2a09      	cmp	r2, #9
 8010c5c:	d914      	bls.n	8010c88 <_strtod_l+0x2c8>
 8010c5e:	9a07      	ldr	r2, [sp, #28]
 8010c60:	921b      	str	r2, [sp, #108]	; 0x6c
 8010c62:	2200      	movs	r2, #0
 8010c64:	e033      	b.n	8010cce <_strtod_l+0x30e>
 8010c66:	46c0      	nop			; (mov r8, r8)
 8010c68:	08013e78 	.word	0x08013e78
 8010c6c:	7ff00000 	.word	0x7ff00000
 8010c70:	ffefffff 	.word	0xffefffff
 8010c74:	00000433 	.word	0x00000433
 8010c78:	7fffffff 	.word	0x7fffffff
 8010c7c:	08013e74 	.word	0x08013e74
 8010c80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010c82:	1c5a      	adds	r2, r3, #1
 8010c84:	921b      	str	r2, [sp, #108]	; 0x6c
 8010c86:	785b      	ldrb	r3, [r3, #1]
 8010c88:	2b30      	cmp	r3, #48	; 0x30
 8010c8a:	d0f9      	beq.n	8010c80 <_strtod_l+0x2c0>
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	9206      	str	r2, [sp, #24]
 8010c90:	001a      	movs	r2, r3
 8010c92:	3a31      	subs	r2, #49	; 0x31
 8010c94:	2a08      	cmp	r2, #8
 8010c96:	d81b      	bhi.n	8010cd0 <_strtod_l+0x310>
 8010c98:	3b30      	subs	r3, #48	; 0x30
 8010c9a:	930e      	str	r3, [sp, #56]	; 0x38
 8010c9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010c9e:	9306      	str	r3, [sp, #24]
 8010ca0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010ca2:	1c59      	adds	r1, r3, #1
 8010ca4:	911b      	str	r1, [sp, #108]	; 0x6c
 8010ca6:	785b      	ldrb	r3, [r3, #1]
 8010ca8:	001a      	movs	r2, r3
 8010caa:	3a30      	subs	r2, #48	; 0x30
 8010cac:	2a09      	cmp	r2, #9
 8010cae:	d93a      	bls.n	8010d26 <_strtod_l+0x366>
 8010cb0:	9a06      	ldr	r2, [sp, #24]
 8010cb2:	1a8a      	subs	r2, r1, r2
 8010cb4:	49b2      	ldr	r1, [pc, #712]	; (8010f80 <_strtod_l+0x5c0>)
 8010cb6:	9106      	str	r1, [sp, #24]
 8010cb8:	2a08      	cmp	r2, #8
 8010cba:	dc04      	bgt.n	8010cc6 <_strtod_l+0x306>
 8010cbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010cbe:	9206      	str	r2, [sp, #24]
 8010cc0:	428a      	cmp	r2, r1
 8010cc2:	dd00      	ble.n	8010cc6 <_strtod_l+0x306>
 8010cc4:	9106      	str	r1, [sp, #24]
 8010cc6:	2c00      	cmp	r4, #0
 8010cc8:	d002      	beq.n	8010cd0 <_strtod_l+0x310>
 8010cca:	9a06      	ldr	r2, [sp, #24]
 8010ccc:	4252      	negs	r2, r2
 8010cce:	9206      	str	r2, [sp, #24]
 8010cd0:	9a05      	ldr	r2, [sp, #20]
 8010cd2:	2a00      	cmp	r2, #0
 8010cd4:	d14d      	bne.n	8010d72 <_strtod_l+0x3b2>
 8010cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cd8:	4310      	orrs	r0, r2
 8010cda:	d000      	beq.n	8010cde <_strtod_l+0x31e>
 8010cdc:	e6ab      	b.n	8010a36 <_strtod_l+0x76>
 8010cde:	4662      	mov	r2, ip
 8010ce0:	2a00      	cmp	r2, #0
 8010ce2:	d000      	beq.n	8010ce6 <_strtod_l+0x326>
 8010ce4:	e6c5      	b.n	8010a72 <_strtod_l+0xb2>
 8010ce6:	2b69      	cmp	r3, #105	; 0x69
 8010ce8:	d027      	beq.n	8010d3a <_strtod_l+0x37a>
 8010cea:	dc23      	bgt.n	8010d34 <_strtod_l+0x374>
 8010cec:	2b49      	cmp	r3, #73	; 0x49
 8010cee:	d024      	beq.n	8010d3a <_strtod_l+0x37a>
 8010cf0:	2b4e      	cmp	r3, #78	; 0x4e
 8010cf2:	d000      	beq.n	8010cf6 <_strtod_l+0x336>
 8010cf4:	e6bd      	b.n	8010a72 <_strtod_l+0xb2>
 8010cf6:	49a3      	ldr	r1, [pc, #652]	; (8010f84 <_strtod_l+0x5c4>)
 8010cf8:	a81b      	add	r0, sp, #108	; 0x6c
 8010cfa:	f001 fa3d 	bl	8012178 <__match>
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	d100      	bne.n	8010d04 <_strtod_l+0x344>
 8010d02:	e6b6      	b.n	8010a72 <_strtod_l+0xb2>
 8010d04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	2b28      	cmp	r3, #40	; 0x28
 8010d0a:	d12c      	bne.n	8010d66 <_strtod_l+0x3a6>
 8010d0c:	499e      	ldr	r1, [pc, #632]	; (8010f88 <_strtod_l+0x5c8>)
 8010d0e:	aa1e      	add	r2, sp, #120	; 0x78
 8010d10:	a81b      	add	r0, sp, #108	; 0x6c
 8010d12:	f001 fa45 	bl	80121a0 <__hexnan>
 8010d16:	2805      	cmp	r0, #5
 8010d18:	d125      	bne.n	8010d66 <_strtod_l+0x3a6>
 8010d1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010d1c:	4a9b      	ldr	r2, [pc, #620]	; (8010f8c <_strtod_l+0x5cc>)
 8010d1e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8010d20:	431a      	orrs	r2, r3
 8010d22:	0017      	movs	r7, r2
 8010d24:	e687      	b.n	8010a36 <_strtod_l+0x76>
 8010d26:	220a      	movs	r2, #10
 8010d28:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010d2a:	434a      	muls	r2, r1
 8010d2c:	18d2      	adds	r2, r2, r3
 8010d2e:	3a30      	subs	r2, #48	; 0x30
 8010d30:	920e      	str	r2, [sp, #56]	; 0x38
 8010d32:	e7b5      	b.n	8010ca0 <_strtod_l+0x2e0>
 8010d34:	2b6e      	cmp	r3, #110	; 0x6e
 8010d36:	d0de      	beq.n	8010cf6 <_strtod_l+0x336>
 8010d38:	e69b      	b.n	8010a72 <_strtod_l+0xb2>
 8010d3a:	4995      	ldr	r1, [pc, #596]	; (8010f90 <_strtod_l+0x5d0>)
 8010d3c:	a81b      	add	r0, sp, #108	; 0x6c
 8010d3e:	f001 fa1b 	bl	8012178 <__match>
 8010d42:	2800      	cmp	r0, #0
 8010d44:	d100      	bne.n	8010d48 <_strtod_l+0x388>
 8010d46:	e694      	b.n	8010a72 <_strtod_l+0xb2>
 8010d48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010d4a:	4992      	ldr	r1, [pc, #584]	; (8010f94 <_strtod_l+0x5d4>)
 8010d4c:	3b01      	subs	r3, #1
 8010d4e:	a81b      	add	r0, sp, #108	; 0x6c
 8010d50:	931b      	str	r3, [sp, #108]	; 0x6c
 8010d52:	f001 fa11 	bl	8012178 <__match>
 8010d56:	2800      	cmp	r0, #0
 8010d58:	d102      	bne.n	8010d60 <_strtod_l+0x3a0>
 8010d5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010d5c:	3301      	adds	r3, #1
 8010d5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8010d60:	2600      	movs	r6, #0
 8010d62:	4f8a      	ldr	r7, [pc, #552]	; (8010f8c <_strtod_l+0x5cc>)
 8010d64:	e667      	b.n	8010a36 <_strtod_l+0x76>
 8010d66:	488c      	ldr	r0, [pc, #560]	; (8010f98 <_strtod_l+0x5d8>)
 8010d68:	f000 ff14 	bl	8011b94 <nan>
 8010d6c:	0006      	movs	r6, r0
 8010d6e:	000f      	movs	r7, r1
 8010d70:	e661      	b.n	8010a36 <_strtod_l+0x76>
 8010d72:	9b06      	ldr	r3, [sp, #24]
 8010d74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d76:	1a9b      	subs	r3, r3, r2
 8010d78:	9309      	str	r3, [sp, #36]	; 0x24
 8010d7a:	9b08      	ldr	r3, [sp, #32]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d101      	bne.n	8010d84 <_strtod_l+0x3c4>
 8010d80:	9b05      	ldr	r3, [sp, #20]
 8010d82:	9308      	str	r3, [sp, #32]
 8010d84:	9c05      	ldr	r4, [sp, #20]
 8010d86:	2c10      	cmp	r4, #16
 8010d88:	dd00      	ble.n	8010d8c <_strtod_l+0x3cc>
 8010d8a:	2410      	movs	r4, #16
 8010d8c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010d8e:	f7f1 ff87 	bl	8002ca0 <__aeabi_ui2d>
 8010d92:	9b05      	ldr	r3, [sp, #20]
 8010d94:	0006      	movs	r6, r0
 8010d96:	000f      	movs	r7, r1
 8010d98:	2b09      	cmp	r3, #9
 8010d9a:	dd15      	ble.n	8010dc8 <_strtod_l+0x408>
 8010d9c:	0022      	movs	r2, r4
 8010d9e:	4b7f      	ldr	r3, [pc, #508]	; (8010f9c <_strtod_l+0x5dc>)
 8010da0:	3a09      	subs	r2, #9
 8010da2:	00d2      	lsls	r2, r2, #3
 8010da4:	189b      	adds	r3, r3, r2
 8010da6:	681a      	ldr	r2, [r3, #0]
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	f7f1 f8b1 	bl	8001f10 <__aeabi_dmul>
 8010dae:	0006      	movs	r6, r0
 8010db0:	0028      	movs	r0, r5
 8010db2:	000f      	movs	r7, r1
 8010db4:	f7f1 ff74 	bl	8002ca0 <__aeabi_ui2d>
 8010db8:	0002      	movs	r2, r0
 8010dba:	000b      	movs	r3, r1
 8010dbc:	0030      	movs	r0, r6
 8010dbe:	0039      	movs	r1, r7
 8010dc0:	f7f0 f94c 	bl	800105c <__aeabi_dadd>
 8010dc4:	0006      	movs	r6, r0
 8010dc6:	000f      	movs	r7, r1
 8010dc8:	9b05      	ldr	r3, [sp, #20]
 8010dca:	2b0f      	cmp	r3, #15
 8010dcc:	dc39      	bgt.n	8010e42 <_strtod_l+0x482>
 8010dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d100      	bne.n	8010dd6 <_strtod_l+0x416>
 8010dd4:	e62f      	b.n	8010a36 <_strtod_l+0x76>
 8010dd6:	dd24      	ble.n	8010e22 <_strtod_l+0x462>
 8010dd8:	2b16      	cmp	r3, #22
 8010dda:	dc09      	bgt.n	8010df0 <_strtod_l+0x430>
 8010ddc:	496f      	ldr	r1, [pc, #444]	; (8010f9c <_strtod_l+0x5dc>)
 8010dde:	00db      	lsls	r3, r3, #3
 8010de0:	18c9      	adds	r1, r1, r3
 8010de2:	0032      	movs	r2, r6
 8010de4:	6808      	ldr	r0, [r1, #0]
 8010de6:	6849      	ldr	r1, [r1, #4]
 8010de8:	003b      	movs	r3, r7
 8010dea:	f7f1 f891 	bl	8001f10 <__aeabi_dmul>
 8010dee:	e7bd      	b.n	8010d6c <_strtod_l+0x3ac>
 8010df0:	2325      	movs	r3, #37	; 0x25
 8010df2:	9a05      	ldr	r2, [sp, #20]
 8010df4:	1a9b      	subs	r3, r3, r2
 8010df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	db22      	blt.n	8010e42 <_strtod_l+0x482>
 8010dfc:	240f      	movs	r4, #15
 8010dfe:	9b05      	ldr	r3, [sp, #20]
 8010e00:	4d66      	ldr	r5, [pc, #408]	; (8010f9c <_strtod_l+0x5dc>)
 8010e02:	1ae4      	subs	r4, r4, r3
 8010e04:	00e1      	lsls	r1, r4, #3
 8010e06:	1869      	adds	r1, r5, r1
 8010e08:	0032      	movs	r2, r6
 8010e0a:	6808      	ldr	r0, [r1, #0]
 8010e0c:	6849      	ldr	r1, [r1, #4]
 8010e0e:	003b      	movs	r3, r7
 8010e10:	f7f1 f87e 	bl	8001f10 <__aeabi_dmul>
 8010e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e16:	1b1c      	subs	r4, r3, r4
 8010e18:	00e4      	lsls	r4, r4, #3
 8010e1a:	192d      	adds	r5, r5, r4
 8010e1c:	682a      	ldr	r2, [r5, #0]
 8010e1e:	686b      	ldr	r3, [r5, #4]
 8010e20:	e7e3      	b.n	8010dea <_strtod_l+0x42a>
 8010e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e24:	3316      	adds	r3, #22
 8010e26:	db0c      	blt.n	8010e42 <_strtod_l+0x482>
 8010e28:	9906      	ldr	r1, [sp, #24]
 8010e2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e2c:	4b5b      	ldr	r3, [pc, #364]	; (8010f9c <_strtod_l+0x5dc>)
 8010e2e:	1a52      	subs	r2, r2, r1
 8010e30:	00d2      	lsls	r2, r2, #3
 8010e32:	189b      	adds	r3, r3, r2
 8010e34:	0030      	movs	r0, r6
 8010e36:	681a      	ldr	r2, [r3, #0]
 8010e38:	685b      	ldr	r3, [r3, #4]
 8010e3a:	0039      	movs	r1, r7
 8010e3c:	f7f0 fc6e 	bl	800171c <__aeabi_ddiv>
 8010e40:	e794      	b.n	8010d6c <_strtod_l+0x3ac>
 8010e42:	9b05      	ldr	r3, [sp, #20]
 8010e44:	1b1c      	subs	r4, r3, r4
 8010e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e48:	18e4      	adds	r4, r4, r3
 8010e4a:	2c00      	cmp	r4, #0
 8010e4c:	dd72      	ble.n	8010f34 <_strtod_l+0x574>
 8010e4e:	220f      	movs	r2, #15
 8010e50:	0023      	movs	r3, r4
 8010e52:	4013      	ands	r3, r2
 8010e54:	4214      	tst	r4, r2
 8010e56:	d00a      	beq.n	8010e6e <_strtod_l+0x4ae>
 8010e58:	4950      	ldr	r1, [pc, #320]	; (8010f9c <_strtod_l+0x5dc>)
 8010e5a:	00db      	lsls	r3, r3, #3
 8010e5c:	18c9      	adds	r1, r1, r3
 8010e5e:	0032      	movs	r2, r6
 8010e60:	6808      	ldr	r0, [r1, #0]
 8010e62:	6849      	ldr	r1, [r1, #4]
 8010e64:	003b      	movs	r3, r7
 8010e66:	f7f1 f853 	bl	8001f10 <__aeabi_dmul>
 8010e6a:	0006      	movs	r6, r0
 8010e6c:	000f      	movs	r7, r1
 8010e6e:	230f      	movs	r3, #15
 8010e70:	439c      	bics	r4, r3
 8010e72:	d04a      	beq.n	8010f0a <_strtod_l+0x54a>
 8010e74:	3326      	adds	r3, #38	; 0x26
 8010e76:	33ff      	adds	r3, #255	; 0xff
 8010e78:	429c      	cmp	r4, r3
 8010e7a:	dd22      	ble.n	8010ec2 <_strtod_l+0x502>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	9305      	str	r3, [sp, #20]
 8010e80:	9306      	str	r3, [sp, #24]
 8010e82:	930d      	str	r3, [sp, #52]	; 0x34
 8010e84:	9308      	str	r3, [sp, #32]
 8010e86:	2322      	movs	r3, #34	; 0x22
 8010e88:	2600      	movs	r6, #0
 8010e8a:	9a04      	ldr	r2, [sp, #16]
 8010e8c:	4f3f      	ldr	r7, [pc, #252]	; (8010f8c <_strtod_l+0x5cc>)
 8010e8e:	6013      	str	r3, [r2, #0]
 8010e90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e92:	42b3      	cmp	r3, r6
 8010e94:	d100      	bne.n	8010e98 <_strtod_l+0x4d8>
 8010e96:	e5ce      	b.n	8010a36 <_strtod_l+0x76>
 8010e98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010e9a:	9804      	ldr	r0, [sp, #16]
 8010e9c:	f7ff f900 	bl	80100a0 <_Bfree>
 8010ea0:	9908      	ldr	r1, [sp, #32]
 8010ea2:	9804      	ldr	r0, [sp, #16]
 8010ea4:	f7ff f8fc 	bl	80100a0 <_Bfree>
 8010ea8:	9906      	ldr	r1, [sp, #24]
 8010eaa:	9804      	ldr	r0, [sp, #16]
 8010eac:	f7ff f8f8 	bl	80100a0 <_Bfree>
 8010eb0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010eb2:	9804      	ldr	r0, [sp, #16]
 8010eb4:	f7ff f8f4 	bl	80100a0 <_Bfree>
 8010eb8:	9905      	ldr	r1, [sp, #20]
 8010eba:	9804      	ldr	r0, [sp, #16]
 8010ebc:	f7ff f8f0 	bl	80100a0 <_Bfree>
 8010ec0:	e5b9      	b.n	8010a36 <_strtod_l+0x76>
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	0030      	movs	r0, r6
 8010ec6:	0039      	movs	r1, r7
 8010ec8:	4d35      	ldr	r5, [pc, #212]	; (8010fa0 <_strtod_l+0x5e0>)
 8010eca:	1124      	asrs	r4, r4, #4
 8010ecc:	9307      	str	r3, [sp, #28]
 8010ece:	2c01      	cmp	r4, #1
 8010ed0:	dc1e      	bgt.n	8010f10 <_strtod_l+0x550>
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d001      	beq.n	8010eda <_strtod_l+0x51a>
 8010ed6:	0006      	movs	r6, r0
 8010ed8:	000f      	movs	r7, r1
 8010eda:	4b32      	ldr	r3, [pc, #200]	; (8010fa4 <_strtod_l+0x5e4>)
 8010edc:	9a07      	ldr	r2, [sp, #28]
 8010ede:	18ff      	adds	r7, r7, r3
 8010ee0:	4b2f      	ldr	r3, [pc, #188]	; (8010fa0 <_strtod_l+0x5e0>)
 8010ee2:	00d2      	lsls	r2, r2, #3
 8010ee4:	189d      	adds	r5, r3, r2
 8010ee6:	6828      	ldr	r0, [r5, #0]
 8010ee8:	6869      	ldr	r1, [r5, #4]
 8010eea:	0032      	movs	r2, r6
 8010eec:	003b      	movs	r3, r7
 8010eee:	f7f1 f80f 	bl	8001f10 <__aeabi_dmul>
 8010ef2:	4b26      	ldr	r3, [pc, #152]	; (8010f8c <_strtod_l+0x5cc>)
 8010ef4:	4a2c      	ldr	r2, [pc, #176]	; (8010fa8 <_strtod_l+0x5e8>)
 8010ef6:	0006      	movs	r6, r0
 8010ef8:	400b      	ands	r3, r1
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d8be      	bhi.n	8010e7c <_strtod_l+0x4bc>
 8010efe:	4a2b      	ldr	r2, [pc, #172]	; (8010fac <_strtod_l+0x5ec>)
 8010f00:	4293      	cmp	r3, r2
 8010f02:	d913      	bls.n	8010f2c <_strtod_l+0x56c>
 8010f04:	2601      	movs	r6, #1
 8010f06:	4f2a      	ldr	r7, [pc, #168]	; (8010fb0 <_strtod_l+0x5f0>)
 8010f08:	4276      	negs	r6, r6
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	9307      	str	r3, [sp, #28]
 8010f0e:	e088      	b.n	8011022 <_strtod_l+0x662>
 8010f10:	2201      	movs	r2, #1
 8010f12:	4214      	tst	r4, r2
 8010f14:	d004      	beq.n	8010f20 <_strtod_l+0x560>
 8010f16:	682a      	ldr	r2, [r5, #0]
 8010f18:	686b      	ldr	r3, [r5, #4]
 8010f1a:	f7f0 fff9 	bl	8001f10 <__aeabi_dmul>
 8010f1e:	2301      	movs	r3, #1
 8010f20:	9a07      	ldr	r2, [sp, #28]
 8010f22:	1064      	asrs	r4, r4, #1
 8010f24:	3201      	adds	r2, #1
 8010f26:	9207      	str	r2, [sp, #28]
 8010f28:	3508      	adds	r5, #8
 8010f2a:	e7d0      	b.n	8010ece <_strtod_l+0x50e>
 8010f2c:	23d4      	movs	r3, #212	; 0xd4
 8010f2e:	049b      	lsls	r3, r3, #18
 8010f30:	18cf      	adds	r7, r1, r3
 8010f32:	e7ea      	b.n	8010f0a <_strtod_l+0x54a>
 8010f34:	2c00      	cmp	r4, #0
 8010f36:	d0e8      	beq.n	8010f0a <_strtod_l+0x54a>
 8010f38:	4264      	negs	r4, r4
 8010f3a:	230f      	movs	r3, #15
 8010f3c:	0022      	movs	r2, r4
 8010f3e:	401a      	ands	r2, r3
 8010f40:	421c      	tst	r4, r3
 8010f42:	d00a      	beq.n	8010f5a <_strtod_l+0x59a>
 8010f44:	4b15      	ldr	r3, [pc, #84]	; (8010f9c <_strtod_l+0x5dc>)
 8010f46:	00d2      	lsls	r2, r2, #3
 8010f48:	189b      	adds	r3, r3, r2
 8010f4a:	0030      	movs	r0, r6
 8010f4c:	681a      	ldr	r2, [r3, #0]
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	0039      	movs	r1, r7
 8010f52:	f7f0 fbe3 	bl	800171c <__aeabi_ddiv>
 8010f56:	0006      	movs	r6, r0
 8010f58:	000f      	movs	r7, r1
 8010f5a:	1124      	asrs	r4, r4, #4
 8010f5c:	d0d5      	beq.n	8010f0a <_strtod_l+0x54a>
 8010f5e:	2c1f      	cmp	r4, #31
 8010f60:	dd28      	ble.n	8010fb4 <_strtod_l+0x5f4>
 8010f62:	2300      	movs	r3, #0
 8010f64:	9305      	str	r3, [sp, #20]
 8010f66:	9306      	str	r3, [sp, #24]
 8010f68:	930d      	str	r3, [sp, #52]	; 0x34
 8010f6a:	9308      	str	r3, [sp, #32]
 8010f6c:	2322      	movs	r3, #34	; 0x22
 8010f6e:	9a04      	ldr	r2, [sp, #16]
 8010f70:	2600      	movs	r6, #0
 8010f72:	6013      	str	r3, [r2, #0]
 8010f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f76:	2700      	movs	r7, #0
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d18d      	bne.n	8010e98 <_strtod_l+0x4d8>
 8010f7c:	e55b      	b.n	8010a36 <_strtod_l+0x76>
 8010f7e:	46c0      	nop			; (mov r8, r8)
 8010f80:	00004e1f 	.word	0x00004e1f
 8010f84:	08013c62 	.word	0x08013c62
 8010f88:	08013e8c 	.word	0x08013e8c
 8010f8c:	7ff00000 	.word	0x7ff00000
 8010f90:	08013c5a 	.word	0x08013c5a
 8010f94:	08013c91 	.word	0x08013c91
 8010f98:	08013f1c 	.word	0x08013f1c
 8010f9c:	08013da0 	.word	0x08013da0
 8010fa0:	08013d78 	.word	0x08013d78
 8010fa4:	fcb00000 	.word	0xfcb00000
 8010fa8:	7ca00000 	.word	0x7ca00000
 8010fac:	7c900000 	.word	0x7c900000
 8010fb0:	7fefffff 	.word	0x7fefffff
 8010fb4:	2310      	movs	r3, #16
 8010fb6:	0022      	movs	r2, r4
 8010fb8:	401a      	ands	r2, r3
 8010fba:	9207      	str	r2, [sp, #28]
 8010fbc:	421c      	tst	r4, r3
 8010fbe:	d001      	beq.n	8010fc4 <_strtod_l+0x604>
 8010fc0:	335a      	adds	r3, #90	; 0x5a
 8010fc2:	9307      	str	r3, [sp, #28]
 8010fc4:	0030      	movs	r0, r6
 8010fc6:	0039      	movs	r1, r7
 8010fc8:	2300      	movs	r3, #0
 8010fca:	4dc4      	ldr	r5, [pc, #784]	; (80112dc <_strtod_l+0x91c>)
 8010fcc:	2201      	movs	r2, #1
 8010fce:	4214      	tst	r4, r2
 8010fd0:	d004      	beq.n	8010fdc <_strtod_l+0x61c>
 8010fd2:	682a      	ldr	r2, [r5, #0]
 8010fd4:	686b      	ldr	r3, [r5, #4]
 8010fd6:	f7f0 ff9b 	bl	8001f10 <__aeabi_dmul>
 8010fda:	2301      	movs	r3, #1
 8010fdc:	1064      	asrs	r4, r4, #1
 8010fde:	3508      	adds	r5, #8
 8010fe0:	2c00      	cmp	r4, #0
 8010fe2:	d1f3      	bne.n	8010fcc <_strtod_l+0x60c>
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d001      	beq.n	8010fec <_strtod_l+0x62c>
 8010fe8:	0006      	movs	r6, r0
 8010fea:	000f      	movs	r7, r1
 8010fec:	9b07      	ldr	r3, [sp, #28]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d00f      	beq.n	8011012 <_strtod_l+0x652>
 8010ff2:	236b      	movs	r3, #107	; 0x6b
 8010ff4:	007a      	lsls	r2, r7, #1
 8010ff6:	0d52      	lsrs	r2, r2, #21
 8010ff8:	0039      	movs	r1, r7
 8010ffa:	1a9b      	subs	r3, r3, r2
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	dd08      	ble.n	8011012 <_strtod_l+0x652>
 8011000:	2b1f      	cmp	r3, #31
 8011002:	dc00      	bgt.n	8011006 <_strtod_l+0x646>
 8011004:	e121      	b.n	801124a <_strtod_l+0x88a>
 8011006:	2600      	movs	r6, #0
 8011008:	2b34      	cmp	r3, #52	; 0x34
 801100a:	dc00      	bgt.n	801100e <_strtod_l+0x64e>
 801100c:	e116      	b.n	801123c <_strtod_l+0x87c>
 801100e:	27dc      	movs	r7, #220	; 0xdc
 8011010:	04bf      	lsls	r7, r7, #18
 8011012:	2200      	movs	r2, #0
 8011014:	2300      	movs	r3, #0
 8011016:	0030      	movs	r0, r6
 8011018:	0039      	movs	r1, r7
 801101a:	f7ef fa17 	bl	800044c <__aeabi_dcmpeq>
 801101e:	2800      	cmp	r0, #0
 8011020:	d19f      	bne.n	8010f62 <_strtod_l+0x5a2>
 8011022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011024:	9a08      	ldr	r2, [sp, #32]
 8011026:	9300      	str	r3, [sp, #0]
 8011028:	9910      	ldr	r1, [sp, #64]	; 0x40
 801102a:	9b05      	ldr	r3, [sp, #20]
 801102c:	9804      	ldr	r0, [sp, #16]
 801102e:	f7ff f89f 	bl	8010170 <__s2b>
 8011032:	900d      	str	r0, [sp, #52]	; 0x34
 8011034:	2800      	cmp	r0, #0
 8011036:	d100      	bne.n	801103a <_strtod_l+0x67a>
 8011038:	e720      	b.n	8010e7c <_strtod_l+0x4bc>
 801103a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801103c:	9906      	ldr	r1, [sp, #24]
 801103e:	17da      	asrs	r2, r3, #31
 8011040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011042:	1a5b      	subs	r3, r3, r1
 8011044:	401a      	ands	r2, r3
 8011046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011048:	9215      	str	r2, [sp, #84]	; 0x54
 801104a:	43db      	mvns	r3, r3
 801104c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801104e:	17db      	asrs	r3, r3, #31
 8011050:	401a      	ands	r2, r3
 8011052:	2300      	movs	r3, #0
 8011054:	9218      	str	r2, [sp, #96]	; 0x60
 8011056:	9305      	str	r3, [sp, #20]
 8011058:	9306      	str	r3, [sp, #24]
 801105a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801105c:	9804      	ldr	r0, [sp, #16]
 801105e:	6859      	ldr	r1, [r3, #4]
 8011060:	f7fe ffda 	bl	8010018 <_Balloc>
 8011064:	9008      	str	r0, [sp, #32]
 8011066:	2800      	cmp	r0, #0
 8011068:	d100      	bne.n	801106c <_strtod_l+0x6ac>
 801106a:	e70c      	b.n	8010e86 <_strtod_l+0x4c6>
 801106c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801106e:	300c      	adds	r0, #12
 8011070:	0019      	movs	r1, r3
 8011072:	691a      	ldr	r2, [r3, #16]
 8011074:	310c      	adds	r1, #12
 8011076:	3202      	adds	r2, #2
 8011078:	0092      	lsls	r2, r2, #2
 801107a:	f7fe f819 	bl	800f0b0 <memcpy>
 801107e:	ab1e      	add	r3, sp, #120	; 0x78
 8011080:	9301      	str	r3, [sp, #4]
 8011082:	ab1d      	add	r3, sp, #116	; 0x74
 8011084:	9300      	str	r3, [sp, #0]
 8011086:	0032      	movs	r2, r6
 8011088:	003b      	movs	r3, r7
 801108a:	9804      	ldr	r0, [sp, #16]
 801108c:	9610      	str	r6, [sp, #64]	; 0x40
 801108e:	9711      	str	r7, [sp, #68]	; 0x44
 8011090:	f7ff fbb0 	bl	80107f4 <__d2b>
 8011094:	901c      	str	r0, [sp, #112]	; 0x70
 8011096:	2800      	cmp	r0, #0
 8011098:	d100      	bne.n	801109c <_strtod_l+0x6dc>
 801109a:	e6f4      	b.n	8010e86 <_strtod_l+0x4c6>
 801109c:	2101      	movs	r1, #1
 801109e:	9804      	ldr	r0, [sp, #16]
 80110a0:	f7ff f8fa 	bl	8010298 <__i2b>
 80110a4:	9006      	str	r0, [sp, #24]
 80110a6:	2800      	cmp	r0, #0
 80110a8:	d100      	bne.n	80110ac <_strtod_l+0x6ec>
 80110aa:	e6ec      	b.n	8010e86 <_strtod_l+0x4c6>
 80110ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80110ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80110b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80110b2:	1ad4      	subs	r4, r2, r3
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	db01      	blt.n	80110bc <_strtod_l+0x6fc>
 80110b8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80110ba:	195d      	adds	r5, r3, r5
 80110bc:	9907      	ldr	r1, [sp, #28]
 80110be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80110c0:	1a5b      	subs	r3, r3, r1
 80110c2:	2136      	movs	r1, #54	; 0x36
 80110c4:	189b      	adds	r3, r3, r2
 80110c6:	1a8a      	subs	r2, r1, r2
 80110c8:	4985      	ldr	r1, [pc, #532]	; (80112e0 <_strtod_l+0x920>)
 80110ca:	2001      	movs	r0, #1
 80110cc:	468c      	mov	ip, r1
 80110ce:	2100      	movs	r1, #0
 80110d0:	3b01      	subs	r3, #1
 80110d2:	9114      	str	r1, [sp, #80]	; 0x50
 80110d4:	9012      	str	r0, [sp, #72]	; 0x48
 80110d6:	4563      	cmp	r3, ip
 80110d8:	da07      	bge.n	80110ea <_strtod_l+0x72a>
 80110da:	4661      	mov	r1, ip
 80110dc:	1ac9      	subs	r1, r1, r3
 80110de:	1a52      	subs	r2, r2, r1
 80110e0:	291f      	cmp	r1, #31
 80110e2:	dd00      	ble.n	80110e6 <_strtod_l+0x726>
 80110e4:	e0b6      	b.n	8011254 <_strtod_l+0x894>
 80110e6:	4088      	lsls	r0, r1
 80110e8:	9012      	str	r0, [sp, #72]	; 0x48
 80110ea:	18ab      	adds	r3, r5, r2
 80110ec:	930c      	str	r3, [sp, #48]	; 0x30
 80110ee:	18a4      	adds	r4, r4, r2
 80110f0:	9b07      	ldr	r3, [sp, #28]
 80110f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80110f4:	191c      	adds	r4, r3, r4
 80110f6:	002b      	movs	r3, r5
 80110f8:	4295      	cmp	r5, r2
 80110fa:	dd00      	ble.n	80110fe <_strtod_l+0x73e>
 80110fc:	0013      	movs	r3, r2
 80110fe:	42a3      	cmp	r3, r4
 8011100:	dd00      	ble.n	8011104 <_strtod_l+0x744>
 8011102:	0023      	movs	r3, r4
 8011104:	2b00      	cmp	r3, #0
 8011106:	dd04      	ble.n	8011112 <_strtod_l+0x752>
 8011108:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801110a:	1ae4      	subs	r4, r4, r3
 801110c:	1ad2      	subs	r2, r2, r3
 801110e:	920c      	str	r2, [sp, #48]	; 0x30
 8011110:	1aed      	subs	r5, r5, r3
 8011112:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011114:	2b00      	cmp	r3, #0
 8011116:	dd17      	ble.n	8011148 <_strtod_l+0x788>
 8011118:	001a      	movs	r2, r3
 801111a:	9906      	ldr	r1, [sp, #24]
 801111c:	9804      	ldr	r0, [sp, #16]
 801111e:	f7ff f983 	bl	8010428 <__pow5mult>
 8011122:	9006      	str	r0, [sp, #24]
 8011124:	2800      	cmp	r0, #0
 8011126:	d100      	bne.n	801112a <_strtod_l+0x76a>
 8011128:	e6ad      	b.n	8010e86 <_strtod_l+0x4c6>
 801112a:	0001      	movs	r1, r0
 801112c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801112e:	9804      	ldr	r0, [sp, #16]
 8011130:	f7ff f8ca 	bl	80102c8 <__multiply>
 8011134:	900e      	str	r0, [sp, #56]	; 0x38
 8011136:	2800      	cmp	r0, #0
 8011138:	d100      	bne.n	801113c <_strtod_l+0x77c>
 801113a:	e6a4      	b.n	8010e86 <_strtod_l+0x4c6>
 801113c:	991c      	ldr	r1, [sp, #112]	; 0x70
 801113e:	9804      	ldr	r0, [sp, #16]
 8011140:	f7fe ffae 	bl	80100a0 <_Bfree>
 8011144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011146:	931c      	str	r3, [sp, #112]	; 0x70
 8011148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801114a:	2b00      	cmp	r3, #0
 801114c:	dd00      	ble.n	8011150 <_strtod_l+0x790>
 801114e:	e087      	b.n	8011260 <_strtod_l+0x8a0>
 8011150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011152:	2b00      	cmp	r3, #0
 8011154:	dd08      	ble.n	8011168 <_strtod_l+0x7a8>
 8011156:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011158:	9908      	ldr	r1, [sp, #32]
 801115a:	9804      	ldr	r0, [sp, #16]
 801115c:	f7ff f964 	bl	8010428 <__pow5mult>
 8011160:	9008      	str	r0, [sp, #32]
 8011162:	2800      	cmp	r0, #0
 8011164:	d100      	bne.n	8011168 <_strtod_l+0x7a8>
 8011166:	e68e      	b.n	8010e86 <_strtod_l+0x4c6>
 8011168:	2c00      	cmp	r4, #0
 801116a:	dd08      	ble.n	801117e <_strtod_l+0x7be>
 801116c:	0022      	movs	r2, r4
 801116e:	9908      	ldr	r1, [sp, #32]
 8011170:	9804      	ldr	r0, [sp, #16]
 8011172:	f7ff f9b5 	bl	80104e0 <__lshift>
 8011176:	9008      	str	r0, [sp, #32]
 8011178:	2800      	cmp	r0, #0
 801117a:	d100      	bne.n	801117e <_strtod_l+0x7be>
 801117c:	e683      	b.n	8010e86 <_strtod_l+0x4c6>
 801117e:	2d00      	cmp	r5, #0
 8011180:	dd08      	ble.n	8011194 <_strtod_l+0x7d4>
 8011182:	002a      	movs	r2, r5
 8011184:	9906      	ldr	r1, [sp, #24]
 8011186:	9804      	ldr	r0, [sp, #16]
 8011188:	f7ff f9aa 	bl	80104e0 <__lshift>
 801118c:	9006      	str	r0, [sp, #24]
 801118e:	2800      	cmp	r0, #0
 8011190:	d100      	bne.n	8011194 <_strtod_l+0x7d4>
 8011192:	e678      	b.n	8010e86 <_strtod_l+0x4c6>
 8011194:	9a08      	ldr	r2, [sp, #32]
 8011196:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011198:	9804      	ldr	r0, [sp, #16]
 801119a:	f7ff fa2b 	bl	80105f4 <__mdiff>
 801119e:	9005      	str	r0, [sp, #20]
 80111a0:	2800      	cmp	r0, #0
 80111a2:	d100      	bne.n	80111a6 <_strtod_l+0x7e6>
 80111a4:	e66f      	b.n	8010e86 <_strtod_l+0x4c6>
 80111a6:	2200      	movs	r2, #0
 80111a8:	68c3      	ldr	r3, [r0, #12]
 80111aa:	9906      	ldr	r1, [sp, #24]
 80111ac:	60c2      	str	r2, [r0, #12]
 80111ae:	930c      	str	r3, [sp, #48]	; 0x30
 80111b0:	f7ff fa04 	bl	80105bc <__mcmp>
 80111b4:	2800      	cmp	r0, #0
 80111b6:	da5d      	bge.n	8011274 <_strtod_l+0x8b4>
 80111b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111ba:	4333      	orrs	r3, r6
 80111bc:	d000      	beq.n	80111c0 <_strtod_l+0x800>
 80111be:	e088      	b.n	80112d2 <_strtod_l+0x912>
 80111c0:	033b      	lsls	r3, r7, #12
 80111c2:	d000      	beq.n	80111c6 <_strtod_l+0x806>
 80111c4:	e085      	b.n	80112d2 <_strtod_l+0x912>
 80111c6:	22d6      	movs	r2, #214	; 0xd6
 80111c8:	4b46      	ldr	r3, [pc, #280]	; (80112e4 <_strtod_l+0x924>)
 80111ca:	04d2      	lsls	r2, r2, #19
 80111cc:	403b      	ands	r3, r7
 80111ce:	4293      	cmp	r3, r2
 80111d0:	d97f      	bls.n	80112d2 <_strtod_l+0x912>
 80111d2:	9b05      	ldr	r3, [sp, #20]
 80111d4:	695b      	ldr	r3, [r3, #20]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d103      	bne.n	80111e2 <_strtod_l+0x822>
 80111da:	9b05      	ldr	r3, [sp, #20]
 80111dc:	691b      	ldr	r3, [r3, #16]
 80111de:	2b01      	cmp	r3, #1
 80111e0:	dd77      	ble.n	80112d2 <_strtod_l+0x912>
 80111e2:	9905      	ldr	r1, [sp, #20]
 80111e4:	2201      	movs	r2, #1
 80111e6:	9804      	ldr	r0, [sp, #16]
 80111e8:	f7ff f97a 	bl	80104e0 <__lshift>
 80111ec:	9906      	ldr	r1, [sp, #24]
 80111ee:	9005      	str	r0, [sp, #20]
 80111f0:	f7ff f9e4 	bl	80105bc <__mcmp>
 80111f4:	2800      	cmp	r0, #0
 80111f6:	dd6c      	ble.n	80112d2 <_strtod_l+0x912>
 80111f8:	9907      	ldr	r1, [sp, #28]
 80111fa:	003b      	movs	r3, r7
 80111fc:	4a39      	ldr	r2, [pc, #228]	; (80112e4 <_strtod_l+0x924>)
 80111fe:	2900      	cmp	r1, #0
 8011200:	d100      	bne.n	8011204 <_strtod_l+0x844>
 8011202:	e094      	b.n	801132e <_strtod_l+0x96e>
 8011204:	0011      	movs	r1, r2
 8011206:	20d6      	movs	r0, #214	; 0xd6
 8011208:	4039      	ands	r1, r7
 801120a:	04c0      	lsls	r0, r0, #19
 801120c:	4281      	cmp	r1, r0
 801120e:	dd00      	ble.n	8011212 <_strtod_l+0x852>
 8011210:	e08d      	b.n	801132e <_strtod_l+0x96e>
 8011212:	23dc      	movs	r3, #220	; 0xdc
 8011214:	049b      	lsls	r3, r3, #18
 8011216:	4299      	cmp	r1, r3
 8011218:	dc00      	bgt.n	801121c <_strtod_l+0x85c>
 801121a:	e6a7      	b.n	8010f6c <_strtod_l+0x5ac>
 801121c:	0030      	movs	r0, r6
 801121e:	0039      	movs	r1, r7
 8011220:	4b31      	ldr	r3, [pc, #196]	; (80112e8 <_strtod_l+0x928>)
 8011222:	2200      	movs	r2, #0
 8011224:	f7f0 fe74 	bl	8001f10 <__aeabi_dmul>
 8011228:	4b2e      	ldr	r3, [pc, #184]	; (80112e4 <_strtod_l+0x924>)
 801122a:	0006      	movs	r6, r0
 801122c:	000f      	movs	r7, r1
 801122e:	420b      	tst	r3, r1
 8011230:	d000      	beq.n	8011234 <_strtod_l+0x874>
 8011232:	e631      	b.n	8010e98 <_strtod_l+0x4d8>
 8011234:	2322      	movs	r3, #34	; 0x22
 8011236:	9a04      	ldr	r2, [sp, #16]
 8011238:	6013      	str	r3, [r2, #0]
 801123a:	e62d      	b.n	8010e98 <_strtod_l+0x4d8>
 801123c:	234b      	movs	r3, #75	; 0x4b
 801123e:	1a9a      	subs	r2, r3, r2
 8011240:	3b4c      	subs	r3, #76	; 0x4c
 8011242:	4093      	lsls	r3, r2
 8011244:	4019      	ands	r1, r3
 8011246:	000f      	movs	r7, r1
 8011248:	e6e3      	b.n	8011012 <_strtod_l+0x652>
 801124a:	2201      	movs	r2, #1
 801124c:	4252      	negs	r2, r2
 801124e:	409a      	lsls	r2, r3
 8011250:	4016      	ands	r6, r2
 8011252:	e6de      	b.n	8011012 <_strtod_l+0x652>
 8011254:	4925      	ldr	r1, [pc, #148]	; (80112ec <_strtod_l+0x92c>)
 8011256:	1acb      	subs	r3, r1, r3
 8011258:	0001      	movs	r1, r0
 801125a:	4099      	lsls	r1, r3
 801125c:	9114      	str	r1, [sp, #80]	; 0x50
 801125e:	e743      	b.n	80110e8 <_strtod_l+0x728>
 8011260:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011262:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011264:	9804      	ldr	r0, [sp, #16]
 8011266:	f7ff f93b 	bl	80104e0 <__lshift>
 801126a:	901c      	str	r0, [sp, #112]	; 0x70
 801126c:	2800      	cmp	r0, #0
 801126e:	d000      	beq.n	8011272 <_strtod_l+0x8b2>
 8011270:	e76e      	b.n	8011150 <_strtod_l+0x790>
 8011272:	e608      	b.n	8010e86 <_strtod_l+0x4c6>
 8011274:	970e      	str	r7, [sp, #56]	; 0x38
 8011276:	2800      	cmp	r0, #0
 8011278:	d177      	bne.n	801136a <_strtod_l+0x9aa>
 801127a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801127c:	033b      	lsls	r3, r7, #12
 801127e:	0b1b      	lsrs	r3, r3, #12
 8011280:	2a00      	cmp	r2, #0
 8011282:	d039      	beq.n	80112f8 <_strtod_l+0x938>
 8011284:	4a1a      	ldr	r2, [pc, #104]	; (80112f0 <_strtod_l+0x930>)
 8011286:	4293      	cmp	r3, r2
 8011288:	d139      	bne.n	80112fe <_strtod_l+0x93e>
 801128a:	2101      	movs	r1, #1
 801128c:	9b07      	ldr	r3, [sp, #28]
 801128e:	4249      	negs	r1, r1
 8011290:	0032      	movs	r2, r6
 8011292:	0008      	movs	r0, r1
 8011294:	2b00      	cmp	r3, #0
 8011296:	d00b      	beq.n	80112b0 <_strtod_l+0x8f0>
 8011298:	24d4      	movs	r4, #212	; 0xd4
 801129a:	4b12      	ldr	r3, [pc, #72]	; (80112e4 <_strtod_l+0x924>)
 801129c:	0008      	movs	r0, r1
 801129e:	403b      	ands	r3, r7
 80112a0:	04e4      	lsls	r4, r4, #19
 80112a2:	42a3      	cmp	r3, r4
 80112a4:	d804      	bhi.n	80112b0 <_strtod_l+0x8f0>
 80112a6:	306c      	adds	r0, #108	; 0x6c
 80112a8:	0d1b      	lsrs	r3, r3, #20
 80112aa:	1ac3      	subs	r3, r0, r3
 80112ac:	4099      	lsls	r1, r3
 80112ae:	0008      	movs	r0, r1
 80112b0:	4282      	cmp	r2, r0
 80112b2:	d124      	bne.n	80112fe <_strtod_l+0x93e>
 80112b4:	4b0f      	ldr	r3, [pc, #60]	; (80112f4 <_strtod_l+0x934>)
 80112b6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80112b8:	4299      	cmp	r1, r3
 80112ba:	d102      	bne.n	80112c2 <_strtod_l+0x902>
 80112bc:	3201      	adds	r2, #1
 80112be:	d100      	bne.n	80112c2 <_strtod_l+0x902>
 80112c0:	e5e1      	b.n	8010e86 <_strtod_l+0x4c6>
 80112c2:	4b08      	ldr	r3, [pc, #32]	; (80112e4 <_strtod_l+0x924>)
 80112c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80112c6:	2600      	movs	r6, #0
 80112c8:	401a      	ands	r2, r3
 80112ca:	0013      	movs	r3, r2
 80112cc:	2280      	movs	r2, #128	; 0x80
 80112ce:	0352      	lsls	r2, r2, #13
 80112d0:	189f      	adds	r7, r3, r2
 80112d2:	9b07      	ldr	r3, [sp, #28]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d1a1      	bne.n	801121c <_strtod_l+0x85c>
 80112d8:	e5de      	b.n	8010e98 <_strtod_l+0x4d8>
 80112da:	46c0      	nop			; (mov r8, r8)
 80112dc:	08013ea0 	.word	0x08013ea0
 80112e0:	fffffc02 	.word	0xfffffc02
 80112e4:	7ff00000 	.word	0x7ff00000
 80112e8:	39500000 	.word	0x39500000
 80112ec:	fffffbe2 	.word	0xfffffbe2
 80112f0:	000fffff 	.word	0x000fffff
 80112f4:	7fefffff 	.word	0x7fefffff
 80112f8:	4333      	orrs	r3, r6
 80112fa:	d100      	bne.n	80112fe <_strtod_l+0x93e>
 80112fc:	e77c      	b.n	80111f8 <_strtod_l+0x838>
 80112fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011300:	2b00      	cmp	r3, #0
 8011302:	d01d      	beq.n	8011340 <_strtod_l+0x980>
 8011304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011306:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011308:	4213      	tst	r3, r2
 801130a:	d0e2      	beq.n	80112d2 <_strtod_l+0x912>
 801130c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801130e:	0030      	movs	r0, r6
 8011310:	0039      	movs	r1, r7
 8011312:	9a07      	ldr	r2, [sp, #28]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d017      	beq.n	8011348 <_strtod_l+0x988>
 8011318:	f7ff fb3a 	bl	8010990 <sulp>
 801131c:	0002      	movs	r2, r0
 801131e:	000b      	movs	r3, r1
 8011320:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011322:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011324:	f7ef fe9a 	bl	800105c <__aeabi_dadd>
 8011328:	0006      	movs	r6, r0
 801132a:	000f      	movs	r7, r1
 801132c:	e7d1      	b.n	80112d2 <_strtod_l+0x912>
 801132e:	2601      	movs	r6, #1
 8011330:	4013      	ands	r3, r2
 8011332:	4a98      	ldr	r2, [pc, #608]	; (8011594 <_strtod_l+0xbd4>)
 8011334:	4276      	negs	r6, r6
 8011336:	189b      	adds	r3, r3, r2
 8011338:	4a97      	ldr	r2, [pc, #604]	; (8011598 <_strtod_l+0xbd8>)
 801133a:	431a      	orrs	r2, r3
 801133c:	0017      	movs	r7, r2
 801133e:	e7c8      	b.n	80112d2 <_strtod_l+0x912>
 8011340:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011342:	4233      	tst	r3, r6
 8011344:	d0c5      	beq.n	80112d2 <_strtod_l+0x912>
 8011346:	e7e1      	b.n	801130c <_strtod_l+0x94c>
 8011348:	f7ff fb22 	bl	8010990 <sulp>
 801134c:	0002      	movs	r2, r0
 801134e:	000b      	movs	r3, r1
 8011350:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011352:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011354:	f7f1 f89e 	bl	8002494 <__aeabi_dsub>
 8011358:	2200      	movs	r2, #0
 801135a:	2300      	movs	r3, #0
 801135c:	0006      	movs	r6, r0
 801135e:	000f      	movs	r7, r1
 8011360:	f7ef f874 	bl	800044c <__aeabi_dcmpeq>
 8011364:	2800      	cmp	r0, #0
 8011366:	d0b4      	beq.n	80112d2 <_strtod_l+0x912>
 8011368:	e600      	b.n	8010f6c <_strtod_l+0x5ac>
 801136a:	9906      	ldr	r1, [sp, #24]
 801136c:	9805      	ldr	r0, [sp, #20]
 801136e:	f7ff faa1 	bl	80108b4 <__ratio>
 8011372:	2380      	movs	r3, #128	; 0x80
 8011374:	2200      	movs	r2, #0
 8011376:	05db      	lsls	r3, r3, #23
 8011378:	0004      	movs	r4, r0
 801137a:	000d      	movs	r5, r1
 801137c:	f7ef f876 	bl	800046c <__aeabi_dcmple>
 8011380:	2800      	cmp	r0, #0
 8011382:	d06d      	beq.n	8011460 <_strtod_l+0xaa0>
 8011384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011386:	2b00      	cmp	r3, #0
 8011388:	d000      	beq.n	801138c <_strtod_l+0x9cc>
 801138a:	e07e      	b.n	801148a <_strtod_l+0xaca>
 801138c:	2e00      	cmp	r6, #0
 801138e:	d158      	bne.n	8011442 <_strtod_l+0xa82>
 8011390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011392:	031b      	lsls	r3, r3, #12
 8011394:	d000      	beq.n	8011398 <_strtod_l+0x9d8>
 8011396:	e07f      	b.n	8011498 <_strtod_l+0xad8>
 8011398:	2200      	movs	r2, #0
 801139a:	0020      	movs	r0, r4
 801139c:	0029      	movs	r1, r5
 801139e:	4b7f      	ldr	r3, [pc, #508]	; (801159c <_strtod_l+0xbdc>)
 80113a0:	f7ef f85a 	bl	8000458 <__aeabi_dcmplt>
 80113a4:	2800      	cmp	r0, #0
 80113a6:	d158      	bne.n	801145a <_strtod_l+0xa9a>
 80113a8:	0020      	movs	r0, r4
 80113aa:	0029      	movs	r1, r5
 80113ac:	2200      	movs	r2, #0
 80113ae:	4b7c      	ldr	r3, [pc, #496]	; (80115a0 <_strtod_l+0xbe0>)
 80113b0:	f7f0 fdae 	bl	8001f10 <__aeabi_dmul>
 80113b4:	0004      	movs	r4, r0
 80113b6:	000d      	movs	r5, r1
 80113b8:	2380      	movs	r3, #128	; 0x80
 80113ba:	061b      	lsls	r3, r3, #24
 80113bc:	940a      	str	r4, [sp, #40]	; 0x28
 80113be:	18eb      	adds	r3, r5, r3
 80113c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80113c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80113c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113c6:	9212      	str	r2, [sp, #72]	; 0x48
 80113c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80113ca:	4a76      	ldr	r2, [pc, #472]	; (80115a4 <_strtod_l+0xbe4>)
 80113cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113ce:	4013      	ands	r3, r2
 80113d0:	9314      	str	r3, [sp, #80]	; 0x50
 80113d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80113d4:	4b74      	ldr	r3, [pc, #464]	; (80115a8 <_strtod_l+0xbe8>)
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d000      	beq.n	80113dc <_strtod_l+0xa1c>
 80113da:	e091      	b.n	8011500 <_strtod_l+0xb40>
 80113dc:	4a73      	ldr	r2, [pc, #460]	; (80115ac <_strtod_l+0xbec>)
 80113de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113e0:	4694      	mov	ip, r2
 80113e2:	4463      	add	r3, ip
 80113e4:	001f      	movs	r7, r3
 80113e6:	0030      	movs	r0, r6
 80113e8:	0019      	movs	r1, r3
 80113ea:	f7ff f99b 	bl	8010724 <__ulp>
 80113ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80113f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113f2:	f7f0 fd8d 	bl	8001f10 <__aeabi_dmul>
 80113f6:	0032      	movs	r2, r6
 80113f8:	003b      	movs	r3, r7
 80113fa:	f7ef fe2f 	bl	800105c <__aeabi_dadd>
 80113fe:	4a69      	ldr	r2, [pc, #420]	; (80115a4 <_strtod_l+0xbe4>)
 8011400:	4b6b      	ldr	r3, [pc, #428]	; (80115b0 <_strtod_l+0xbf0>)
 8011402:	0006      	movs	r6, r0
 8011404:	400a      	ands	r2, r1
 8011406:	429a      	cmp	r2, r3
 8011408:	d949      	bls.n	801149e <_strtod_l+0xade>
 801140a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801140c:	4b69      	ldr	r3, [pc, #420]	; (80115b4 <_strtod_l+0xbf4>)
 801140e:	429a      	cmp	r2, r3
 8011410:	d103      	bne.n	801141a <_strtod_l+0xa5a>
 8011412:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011414:	3301      	adds	r3, #1
 8011416:	d100      	bne.n	801141a <_strtod_l+0xa5a>
 8011418:	e535      	b.n	8010e86 <_strtod_l+0x4c6>
 801141a:	2601      	movs	r6, #1
 801141c:	4f65      	ldr	r7, [pc, #404]	; (80115b4 <_strtod_l+0xbf4>)
 801141e:	4276      	negs	r6, r6
 8011420:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011422:	9804      	ldr	r0, [sp, #16]
 8011424:	f7fe fe3c 	bl	80100a0 <_Bfree>
 8011428:	9908      	ldr	r1, [sp, #32]
 801142a:	9804      	ldr	r0, [sp, #16]
 801142c:	f7fe fe38 	bl	80100a0 <_Bfree>
 8011430:	9906      	ldr	r1, [sp, #24]
 8011432:	9804      	ldr	r0, [sp, #16]
 8011434:	f7fe fe34 	bl	80100a0 <_Bfree>
 8011438:	9905      	ldr	r1, [sp, #20]
 801143a:	9804      	ldr	r0, [sp, #16]
 801143c:	f7fe fe30 	bl	80100a0 <_Bfree>
 8011440:	e60b      	b.n	801105a <_strtod_l+0x69a>
 8011442:	2e01      	cmp	r6, #1
 8011444:	d103      	bne.n	801144e <_strtod_l+0xa8e>
 8011446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011448:	2b00      	cmp	r3, #0
 801144a:	d100      	bne.n	801144e <_strtod_l+0xa8e>
 801144c:	e58e      	b.n	8010f6c <_strtod_l+0x5ac>
 801144e:	2300      	movs	r3, #0
 8011450:	4c59      	ldr	r4, [pc, #356]	; (80115b8 <_strtod_l+0xbf8>)
 8011452:	930a      	str	r3, [sp, #40]	; 0x28
 8011454:	940b      	str	r4, [sp, #44]	; 0x2c
 8011456:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011458:	e01c      	b.n	8011494 <_strtod_l+0xad4>
 801145a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801145c:	4d50      	ldr	r5, [pc, #320]	; (80115a0 <_strtod_l+0xbe0>)
 801145e:	e7ab      	b.n	80113b8 <_strtod_l+0x9f8>
 8011460:	2200      	movs	r2, #0
 8011462:	0020      	movs	r0, r4
 8011464:	0029      	movs	r1, r5
 8011466:	4b4e      	ldr	r3, [pc, #312]	; (80115a0 <_strtod_l+0xbe0>)
 8011468:	f7f0 fd52 	bl	8001f10 <__aeabi_dmul>
 801146c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801146e:	0004      	movs	r4, r0
 8011470:	000b      	movs	r3, r1
 8011472:	000d      	movs	r5, r1
 8011474:	2a00      	cmp	r2, #0
 8011476:	d104      	bne.n	8011482 <_strtod_l+0xac2>
 8011478:	2280      	movs	r2, #128	; 0x80
 801147a:	0612      	lsls	r2, r2, #24
 801147c:	900a      	str	r0, [sp, #40]	; 0x28
 801147e:	188b      	adds	r3, r1, r2
 8011480:	e79e      	b.n	80113c0 <_strtod_l+0xa00>
 8011482:	0002      	movs	r2, r0
 8011484:	920a      	str	r2, [sp, #40]	; 0x28
 8011486:	930b      	str	r3, [sp, #44]	; 0x2c
 8011488:	e79b      	b.n	80113c2 <_strtod_l+0xa02>
 801148a:	2300      	movs	r3, #0
 801148c:	4c43      	ldr	r4, [pc, #268]	; (801159c <_strtod_l+0xbdc>)
 801148e:	930a      	str	r3, [sp, #40]	; 0x28
 8011490:	940b      	str	r4, [sp, #44]	; 0x2c
 8011492:	2400      	movs	r4, #0
 8011494:	4d41      	ldr	r5, [pc, #260]	; (801159c <_strtod_l+0xbdc>)
 8011496:	e794      	b.n	80113c2 <_strtod_l+0xa02>
 8011498:	2300      	movs	r3, #0
 801149a:	4c47      	ldr	r4, [pc, #284]	; (80115b8 <_strtod_l+0xbf8>)
 801149c:	e7f7      	b.n	801148e <_strtod_l+0xace>
 801149e:	23d4      	movs	r3, #212	; 0xd4
 80114a0:	049b      	lsls	r3, r3, #18
 80114a2:	18cf      	adds	r7, r1, r3
 80114a4:	9b07      	ldr	r3, [sp, #28]
 80114a6:	970e      	str	r7, [sp, #56]	; 0x38
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d1b9      	bne.n	8011420 <_strtod_l+0xa60>
 80114ac:	4b3d      	ldr	r3, [pc, #244]	; (80115a4 <_strtod_l+0xbe4>)
 80114ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80114b0:	403b      	ands	r3, r7
 80114b2:	429a      	cmp	r2, r3
 80114b4:	d1b4      	bne.n	8011420 <_strtod_l+0xa60>
 80114b6:	0020      	movs	r0, r4
 80114b8:	0029      	movs	r1, r5
 80114ba:	f7ef f861 	bl	8000580 <__aeabi_d2lz>
 80114be:	f7ef f89b 	bl	80005f8 <__aeabi_l2d>
 80114c2:	0002      	movs	r2, r0
 80114c4:	000b      	movs	r3, r1
 80114c6:	0020      	movs	r0, r4
 80114c8:	0029      	movs	r1, r5
 80114ca:	f7f0 ffe3 	bl	8002494 <__aeabi_dsub>
 80114ce:	033b      	lsls	r3, r7, #12
 80114d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80114d2:	0b1b      	lsrs	r3, r3, #12
 80114d4:	4333      	orrs	r3, r6
 80114d6:	4313      	orrs	r3, r2
 80114d8:	0004      	movs	r4, r0
 80114da:	000d      	movs	r5, r1
 80114dc:	4a37      	ldr	r2, [pc, #220]	; (80115bc <_strtod_l+0xbfc>)
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d054      	beq.n	801158c <_strtod_l+0xbcc>
 80114e2:	4b37      	ldr	r3, [pc, #220]	; (80115c0 <_strtod_l+0xc00>)
 80114e4:	f7ee ffb8 	bl	8000458 <__aeabi_dcmplt>
 80114e8:	2800      	cmp	r0, #0
 80114ea:	d000      	beq.n	80114ee <_strtod_l+0xb2e>
 80114ec:	e4d4      	b.n	8010e98 <_strtod_l+0x4d8>
 80114ee:	0020      	movs	r0, r4
 80114f0:	0029      	movs	r1, r5
 80114f2:	4a34      	ldr	r2, [pc, #208]	; (80115c4 <_strtod_l+0xc04>)
 80114f4:	4b2a      	ldr	r3, [pc, #168]	; (80115a0 <_strtod_l+0xbe0>)
 80114f6:	f7ee ffc3 	bl	8000480 <__aeabi_dcmpgt>
 80114fa:	2800      	cmp	r0, #0
 80114fc:	d090      	beq.n	8011420 <_strtod_l+0xa60>
 80114fe:	e4cb      	b.n	8010e98 <_strtod_l+0x4d8>
 8011500:	9b07      	ldr	r3, [sp, #28]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d02b      	beq.n	801155e <_strtod_l+0xb9e>
 8011506:	23d4      	movs	r3, #212	; 0xd4
 8011508:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801150a:	04db      	lsls	r3, r3, #19
 801150c:	429a      	cmp	r2, r3
 801150e:	d826      	bhi.n	801155e <_strtod_l+0xb9e>
 8011510:	0020      	movs	r0, r4
 8011512:	0029      	movs	r1, r5
 8011514:	4a2c      	ldr	r2, [pc, #176]	; (80115c8 <_strtod_l+0xc08>)
 8011516:	4b2d      	ldr	r3, [pc, #180]	; (80115cc <_strtod_l+0xc0c>)
 8011518:	f7ee ffa8 	bl	800046c <__aeabi_dcmple>
 801151c:	2800      	cmp	r0, #0
 801151e:	d017      	beq.n	8011550 <_strtod_l+0xb90>
 8011520:	0020      	movs	r0, r4
 8011522:	0029      	movs	r1, r5
 8011524:	f7ef f80e 	bl	8000544 <__aeabi_d2uiz>
 8011528:	2800      	cmp	r0, #0
 801152a:	d100      	bne.n	801152e <_strtod_l+0xb6e>
 801152c:	3001      	adds	r0, #1
 801152e:	f7f1 fbb7 	bl	8002ca0 <__aeabi_ui2d>
 8011532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011534:	0004      	movs	r4, r0
 8011536:	000b      	movs	r3, r1
 8011538:	000d      	movs	r5, r1
 801153a:	2a00      	cmp	r2, #0
 801153c:	d122      	bne.n	8011584 <_strtod_l+0xbc4>
 801153e:	2280      	movs	r2, #128	; 0x80
 8011540:	0612      	lsls	r2, r2, #24
 8011542:	188b      	adds	r3, r1, r2
 8011544:	9016      	str	r0, [sp, #88]	; 0x58
 8011546:	9317      	str	r3, [sp, #92]	; 0x5c
 8011548:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801154a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801154c:	9212      	str	r2, [sp, #72]	; 0x48
 801154e:	9313      	str	r3, [sp, #76]	; 0x4c
 8011550:	22d6      	movs	r2, #214	; 0xd6
 8011552:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011554:	04d2      	lsls	r2, r2, #19
 8011556:	189b      	adds	r3, r3, r2
 8011558:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801155a:	1a9b      	subs	r3, r3, r2
 801155c:	9313      	str	r3, [sp, #76]	; 0x4c
 801155e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011560:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011562:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011564:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8011566:	f7ff f8dd 	bl	8010724 <__ulp>
 801156a:	0002      	movs	r2, r0
 801156c:	000b      	movs	r3, r1
 801156e:	0030      	movs	r0, r6
 8011570:	0039      	movs	r1, r7
 8011572:	f7f0 fccd 	bl	8001f10 <__aeabi_dmul>
 8011576:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801157a:	f7ef fd6f 	bl	800105c <__aeabi_dadd>
 801157e:	0006      	movs	r6, r0
 8011580:	000f      	movs	r7, r1
 8011582:	e78f      	b.n	80114a4 <_strtod_l+0xae4>
 8011584:	0002      	movs	r2, r0
 8011586:	9216      	str	r2, [sp, #88]	; 0x58
 8011588:	9317      	str	r3, [sp, #92]	; 0x5c
 801158a:	e7dd      	b.n	8011548 <_strtod_l+0xb88>
 801158c:	4b10      	ldr	r3, [pc, #64]	; (80115d0 <_strtod_l+0xc10>)
 801158e:	f7ee ff63 	bl	8000458 <__aeabi_dcmplt>
 8011592:	e7b2      	b.n	80114fa <_strtod_l+0xb3a>
 8011594:	fff00000 	.word	0xfff00000
 8011598:	000fffff 	.word	0x000fffff
 801159c:	3ff00000 	.word	0x3ff00000
 80115a0:	3fe00000 	.word	0x3fe00000
 80115a4:	7ff00000 	.word	0x7ff00000
 80115a8:	7fe00000 	.word	0x7fe00000
 80115ac:	fcb00000 	.word	0xfcb00000
 80115b0:	7c9fffff 	.word	0x7c9fffff
 80115b4:	7fefffff 	.word	0x7fefffff
 80115b8:	bff00000 	.word	0xbff00000
 80115bc:	94a03595 	.word	0x94a03595
 80115c0:	3fdfffff 	.word	0x3fdfffff
 80115c4:	35afe535 	.word	0x35afe535
 80115c8:	ffc00000 	.word	0xffc00000
 80115cc:	41dfffff 	.word	0x41dfffff
 80115d0:	3fcfffff 	.word	0x3fcfffff

080115d4 <_strtod_r>:
 80115d4:	b510      	push	{r4, lr}
 80115d6:	4b02      	ldr	r3, [pc, #8]	; (80115e0 <_strtod_r+0xc>)
 80115d8:	f7ff f9f2 	bl	80109c0 <_strtod_l>
 80115dc:	bd10      	pop	{r4, pc}
 80115de:	46c0      	nop			; (mov r8, r8)
 80115e0:	20000088 	.word	0x20000088

080115e4 <_strtol_l.constprop.0>:
 80115e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115e6:	b087      	sub	sp, #28
 80115e8:	001e      	movs	r6, r3
 80115ea:	9005      	str	r0, [sp, #20]
 80115ec:	9101      	str	r1, [sp, #4]
 80115ee:	9202      	str	r2, [sp, #8]
 80115f0:	2b01      	cmp	r3, #1
 80115f2:	d048      	beq.n	8011686 <_strtol_l.constprop.0+0xa2>
 80115f4:	000b      	movs	r3, r1
 80115f6:	2e24      	cmp	r6, #36	; 0x24
 80115f8:	d845      	bhi.n	8011686 <_strtol_l.constprop.0+0xa2>
 80115fa:	4a3b      	ldr	r2, [pc, #236]	; (80116e8 <_strtol_l.constprop.0+0x104>)
 80115fc:	2108      	movs	r1, #8
 80115fe:	4694      	mov	ip, r2
 8011600:	001a      	movs	r2, r3
 8011602:	4660      	mov	r0, ip
 8011604:	7814      	ldrb	r4, [r2, #0]
 8011606:	3301      	adds	r3, #1
 8011608:	5d00      	ldrb	r0, [r0, r4]
 801160a:	001d      	movs	r5, r3
 801160c:	0007      	movs	r7, r0
 801160e:	400f      	ands	r7, r1
 8011610:	4208      	tst	r0, r1
 8011612:	d1f5      	bne.n	8011600 <_strtol_l.constprop.0+0x1c>
 8011614:	2c2d      	cmp	r4, #45	; 0x2d
 8011616:	d13d      	bne.n	8011694 <_strtol_l.constprop.0+0xb0>
 8011618:	2701      	movs	r7, #1
 801161a:	781c      	ldrb	r4, [r3, #0]
 801161c:	1c95      	adds	r5, r2, #2
 801161e:	2e00      	cmp	r6, #0
 8011620:	d05e      	beq.n	80116e0 <_strtol_l.constprop.0+0xfc>
 8011622:	2e10      	cmp	r6, #16
 8011624:	d109      	bne.n	801163a <_strtol_l.constprop.0+0x56>
 8011626:	2c30      	cmp	r4, #48	; 0x30
 8011628:	d107      	bne.n	801163a <_strtol_l.constprop.0+0x56>
 801162a:	2220      	movs	r2, #32
 801162c:	782b      	ldrb	r3, [r5, #0]
 801162e:	4393      	bics	r3, r2
 8011630:	2b58      	cmp	r3, #88	; 0x58
 8011632:	d150      	bne.n	80116d6 <_strtol_l.constprop.0+0xf2>
 8011634:	2610      	movs	r6, #16
 8011636:	786c      	ldrb	r4, [r5, #1]
 8011638:	3502      	adds	r5, #2
 801163a:	4b2c      	ldr	r3, [pc, #176]	; (80116ec <_strtol_l.constprop.0+0x108>)
 801163c:	0031      	movs	r1, r6
 801163e:	18fb      	adds	r3, r7, r3
 8011640:	0018      	movs	r0, r3
 8011642:	9303      	str	r3, [sp, #12]
 8011644:	f7ee fe02 	bl	800024c <__aeabi_uidivmod>
 8011648:	2200      	movs	r2, #0
 801164a:	9104      	str	r1, [sp, #16]
 801164c:	2101      	movs	r1, #1
 801164e:	4684      	mov	ip, r0
 8011650:	0010      	movs	r0, r2
 8011652:	4249      	negs	r1, r1
 8011654:	0023      	movs	r3, r4
 8011656:	3b30      	subs	r3, #48	; 0x30
 8011658:	2b09      	cmp	r3, #9
 801165a:	d903      	bls.n	8011664 <_strtol_l.constprop.0+0x80>
 801165c:	3b11      	subs	r3, #17
 801165e:	2b19      	cmp	r3, #25
 8011660:	d81d      	bhi.n	801169e <_strtol_l.constprop.0+0xba>
 8011662:	330a      	adds	r3, #10
 8011664:	429e      	cmp	r6, r3
 8011666:	dd1e      	ble.n	80116a6 <_strtol_l.constprop.0+0xc2>
 8011668:	1c54      	adds	r4, r2, #1
 801166a:	d009      	beq.n	8011680 <_strtol_l.constprop.0+0x9c>
 801166c:	000a      	movs	r2, r1
 801166e:	4584      	cmp	ip, r0
 8011670:	d306      	bcc.n	8011680 <_strtol_l.constprop.0+0x9c>
 8011672:	d102      	bne.n	801167a <_strtol_l.constprop.0+0x96>
 8011674:	9c04      	ldr	r4, [sp, #16]
 8011676:	429c      	cmp	r4, r3
 8011678:	db02      	blt.n	8011680 <_strtol_l.constprop.0+0x9c>
 801167a:	2201      	movs	r2, #1
 801167c:	4370      	muls	r0, r6
 801167e:	1818      	adds	r0, r3, r0
 8011680:	782c      	ldrb	r4, [r5, #0]
 8011682:	3501      	adds	r5, #1
 8011684:	e7e6      	b.n	8011654 <_strtol_l.constprop.0+0x70>
 8011686:	f7fd fcdb 	bl	800f040 <__errno>
 801168a:	2316      	movs	r3, #22
 801168c:	6003      	str	r3, [r0, #0]
 801168e:	2000      	movs	r0, #0
 8011690:	b007      	add	sp, #28
 8011692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011694:	2c2b      	cmp	r4, #43	; 0x2b
 8011696:	d1c2      	bne.n	801161e <_strtol_l.constprop.0+0x3a>
 8011698:	781c      	ldrb	r4, [r3, #0]
 801169a:	1c95      	adds	r5, r2, #2
 801169c:	e7bf      	b.n	801161e <_strtol_l.constprop.0+0x3a>
 801169e:	0023      	movs	r3, r4
 80116a0:	3b61      	subs	r3, #97	; 0x61
 80116a2:	2b19      	cmp	r3, #25
 80116a4:	d9dd      	bls.n	8011662 <_strtol_l.constprop.0+0x7e>
 80116a6:	1c53      	adds	r3, r2, #1
 80116a8:	d109      	bne.n	80116be <_strtol_l.constprop.0+0xda>
 80116aa:	2322      	movs	r3, #34	; 0x22
 80116ac:	9a05      	ldr	r2, [sp, #20]
 80116ae:	9803      	ldr	r0, [sp, #12]
 80116b0:	6013      	str	r3, [r2, #0]
 80116b2:	9b02      	ldr	r3, [sp, #8]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d0eb      	beq.n	8011690 <_strtol_l.constprop.0+0xac>
 80116b8:	1e6b      	subs	r3, r5, #1
 80116ba:	9301      	str	r3, [sp, #4]
 80116bc:	e007      	b.n	80116ce <_strtol_l.constprop.0+0xea>
 80116be:	2f00      	cmp	r7, #0
 80116c0:	d000      	beq.n	80116c4 <_strtol_l.constprop.0+0xe0>
 80116c2:	4240      	negs	r0, r0
 80116c4:	9b02      	ldr	r3, [sp, #8]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d0e2      	beq.n	8011690 <_strtol_l.constprop.0+0xac>
 80116ca:	2a00      	cmp	r2, #0
 80116cc:	d1f4      	bne.n	80116b8 <_strtol_l.constprop.0+0xd4>
 80116ce:	9b02      	ldr	r3, [sp, #8]
 80116d0:	9a01      	ldr	r2, [sp, #4]
 80116d2:	601a      	str	r2, [r3, #0]
 80116d4:	e7dc      	b.n	8011690 <_strtol_l.constprop.0+0xac>
 80116d6:	2430      	movs	r4, #48	; 0x30
 80116d8:	2e00      	cmp	r6, #0
 80116da:	d1ae      	bne.n	801163a <_strtol_l.constprop.0+0x56>
 80116dc:	3608      	adds	r6, #8
 80116de:	e7ac      	b.n	801163a <_strtol_l.constprop.0+0x56>
 80116e0:	2c30      	cmp	r4, #48	; 0x30
 80116e2:	d0a2      	beq.n	801162a <_strtol_l.constprop.0+0x46>
 80116e4:	260a      	movs	r6, #10
 80116e6:	e7a8      	b.n	801163a <_strtol_l.constprop.0+0x56>
 80116e8:	08013b55 	.word	0x08013b55
 80116ec:	7fffffff 	.word	0x7fffffff

080116f0 <_strtol_r>:
 80116f0:	b510      	push	{r4, lr}
 80116f2:	f7ff ff77 	bl	80115e4 <_strtol_l.constprop.0>
 80116f6:	bd10      	pop	{r4, pc}

080116f8 <__ssputs_r>:
 80116f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116fa:	b085      	sub	sp, #20
 80116fc:	9301      	str	r3, [sp, #4]
 80116fe:	9203      	str	r2, [sp, #12]
 8011700:	688e      	ldr	r6, [r1, #8]
 8011702:	9a01      	ldr	r2, [sp, #4]
 8011704:	0007      	movs	r7, r0
 8011706:	000c      	movs	r4, r1
 8011708:	680b      	ldr	r3, [r1, #0]
 801170a:	4296      	cmp	r6, r2
 801170c:	d831      	bhi.n	8011772 <__ssputs_r+0x7a>
 801170e:	898a      	ldrh	r2, [r1, #12]
 8011710:	2190      	movs	r1, #144	; 0x90
 8011712:	00c9      	lsls	r1, r1, #3
 8011714:	420a      	tst	r2, r1
 8011716:	d029      	beq.n	801176c <__ssputs_r+0x74>
 8011718:	2003      	movs	r0, #3
 801171a:	6921      	ldr	r1, [r4, #16]
 801171c:	1a5b      	subs	r3, r3, r1
 801171e:	9302      	str	r3, [sp, #8]
 8011720:	6963      	ldr	r3, [r4, #20]
 8011722:	4343      	muls	r3, r0
 8011724:	0fdd      	lsrs	r5, r3, #31
 8011726:	18ed      	adds	r5, r5, r3
 8011728:	9b01      	ldr	r3, [sp, #4]
 801172a:	9802      	ldr	r0, [sp, #8]
 801172c:	3301      	adds	r3, #1
 801172e:	181b      	adds	r3, r3, r0
 8011730:	106d      	asrs	r5, r5, #1
 8011732:	42ab      	cmp	r3, r5
 8011734:	d900      	bls.n	8011738 <__ssputs_r+0x40>
 8011736:	001d      	movs	r5, r3
 8011738:	0552      	lsls	r2, r2, #21
 801173a:	d529      	bpl.n	8011790 <__ssputs_r+0x98>
 801173c:	0029      	movs	r1, r5
 801173e:	0038      	movs	r0, r7
 8011740:	f7fe fbd8 	bl	800fef4 <_malloc_r>
 8011744:	1e06      	subs	r6, r0, #0
 8011746:	d02d      	beq.n	80117a4 <__ssputs_r+0xac>
 8011748:	9a02      	ldr	r2, [sp, #8]
 801174a:	6921      	ldr	r1, [r4, #16]
 801174c:	f7fd fcb0 	bl	800f0b0 <memcpy>
 8011750:	89a2      	ldrh	r2, [r4, #12]
 8011752:	4b19      	ldr	r3, [pc, #100]	; (80117b8 <__ssputs_r+0xc0>)
 8011754:	401a      	ands	r2, r3
 8011756:	2380      	movs	r3, #128	; 0x80
 8011758:	4313      	orrs	r3, r2
 801175a:	81a3      	strh	r3, [r4, #12]
 801175c:	9b02      	ldr	r3, [sp, #8]
 801175e:	6126      	str	r6, [r4, #16]
 8011760:	18f6      	adds	r6, r6, r3
 8011762:	6026      	str	r6, [r4, #0]
 8011764:	6165      	str	r5, [r4, #20]
 8011766:	9e01      	ldr	r6, [sp, #4]
 8011768:	1aed      	subs	r5, r5, r3
 801176a:	60a5      	str	r5, [r4, #8]
 801176c:	9b01      	ldr	r3, [sp, #4]
 801176e:	429e      	cmp	r6, r3
 8011770:	d900      	bls.n	8011774 <__ssputs_r+0x7c>
 8011772:	9e01      	ldr	r6, [sp, #4]
 8011774:	0032      	movs	r2, r6
 8011776:	9903      	ldr	r1, [sp, #12]
 8011778:	6820      	ldr	r0, [r4, #0]
 801177a:	f000 f9d4 	bl	8011b26 <memmove>
 801177e:	2000      	movs	r0, #0
 8011780:	68a3      	ldr	r3, [r4, #8]
 8011782:	1b9b      	subs	r3, r3, r6
 8011784:	60a3      	str	r3, [r4, #8]
 8011786:	6823      	ldr	r3, [r4, #0]
 8011788:	199b      	adds	r3, r3, r6
 801178a:	6023      	str	r3, [r4, #0]
 801178c:	b005      	add	sp, #20
 801178e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011790:	002a      	movs	r2, r5
 8011792:	0038      	movs	r0, r7
 8011794:	f000 fdbe 	bl	8012314 <_realloc_r>
 8011798:	1e06      	subs	r6, r0, #0
 801179a:	d1df      	bne.n	801175c <__ssputs_r+0x64>
 801179c:	0038      	movs	r0, r7
 801179e:	6921      	ldr	r1, [r4, #16]
 80117a0:	f7fe fb32 	bl	800fe08 <_free_r>
 80117a4:	230c      	movs	r3, #12
 80117a6:	2001      	movs	r0, #1
 80117a8:	603b      	str	r3, [r7, #0]
 80117aa:	89a2      	ldrh	r2, [r4, #12]
 80117ac:	3334      	adds	r3, #52	; 0x34
 80117ae:	4313      	orrs	r3, r2
 80117b0:	81a3      	strh	r3, [r4, #12]
 80117b2:	4240      	negs	r0, r0
 80117b4:	e7ea      	b.n	801178c <__ssputs_r+0x94>
 80117b6:	46c0      	nop			; (mov r8, r8)
 80117b8:	fffffb7f 	.word	0xfffffb7f

080117bc <_svfiprintf_r>:
 80117bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117be:	b0a1      	sub	sp, #132	; 0x84
 80117c0:	9003      	str	r0, [sp, #12]
 80117c2:	001d      	movs	r5, r3
 80117c4:	898b      	ldrh	r3, [r1, #12]
 80117c6:	000f      	movs	r7, r1
 80117c8:	0016      	movs	r6, r2
 80117ca:	061b      	lsls	r3, r3, #24
 80117cc:	d511      	bpl.n	80117f2 <_svfiprintf_r+0x36>
 80117ce:	690b      	ldr	r3, [r1, #16]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d10e      	bne.n	80117f2 <_svfiprintf_r+0x36>
 80117d4:	2140      	movs	r1, #64	; 0x40
 80117d6:	f7fe fb8d 	bl	800fef4 <_malloc_r>
 80117da:	6038      	str	r0, [r7, #0]
 80117dc:	6138      	str	r0, [r7, #16]
 80117de:	2800      	cmp	r0, #0
 80117e0:	d105      	bne.n	80117ee <_svfiprintf_r+0x32>
 80117e2:	230c      	movs	r3, #12
 80117e4:	9a03      	ldr	r2, [sp, #12]
 80117e6:	3801      	subs	r0, #1
 80117e8:	6013      	str	r3, [r2, #0]
 80117ea:	b021      	add	sp, #132	; 0x84
 80117ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117ee:	2340      	movs	r3, #64	; 0x40
 80117f0:	617b      	str	r3, [r7, #20]
 80117f2:	2300      	movs	r3, #0
 80117f4:	ac08      	add	r4, sp, #32
 80117f6:	6163      	str	r3, [r4, #20]
 80117f8:	3320      	adds	r3, #32
 80117fa:	7663      	strb	r3, [r4, #25]
 80117fc:	3310      	adds	r3, #16
 80117fe:	76a3      	strb	r3, [r4, #26]
 8011800:	9507      	str	r5, [sp, #28]
 8011802:	0035      	movs	r5, r6
 8011804:	782b      	ldrb	r3, [r5, #0]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d001      	beq.n	801180e <_svfiprintf_r+0x52>
 801180a:	2b25      	cmp	r3, #37	; 0x25
 801180c:	d148      	bne.n	80118a0 <_svfiprintf_r+0xe4>
 801180e:	1bab      	subs	r3, r5, r6
 8011810:	9305      	str	r3, [sp, #20]
 8011812:	42b5      	cmp	r5, r6
 8011814:	d00b      	beq.n	801182e <_svfiprintf_r+0x72>
 8011816:	0032      	movs	r2, r6
 8011818:	0039      	movs	r1, r7
 801181a:	9803      	ldr	r0, [sp, #12]
 801181c:	f7ff ff6c 	bl	80116f8 <__ssputs_r>
 8011820:	3001      	adds	r0, #1
 8011822:	d100      	bne.n	8011826 <_svfiprintf_r+0x6a>
 8011824:	e0af      	b.n	8011986 <_svfiprintf_r+0x1ca>
 8011826:	6963      	ldr	r3, [r4, #20]
 8011828:	9a05      	ldr	r2, [sp, #20]
 801182a:	189b      	adds	r3, r3, r2
 801182c:	6163      	str	r3, [r4, #20]
 801182e:	782b      	ldrb	r3, [r5, #0]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d100      	bne.n	8011836 <_svfiprintf_r+0x7a>
 8011834:	e0a7      	b.n	8011986 <_svfiprintf_r+0x1ca>
 8011836:	2201      	movs	r2, #1
 8011838:	2300      	movs	r3, #0
 801183a:	4252      	negs	r2, r2
 801183c:	6062      	str	r2, [r4, #4]
 801183e:	a904      	add	r1, sp, #16
 8011840:	3254      	adds	r2, #84	; 0x54
 8011842:	1852      	adds	r2, r2, r1
 8011844:	1c6e      	adds	r6, r5, #1
 8011846:	6023      	str	r3, [r4, #0]
 8011848:	60e3      	str	r3, [r4, #12]
 801184a:	60a3      	str	r3, [r4, #8]
 801184c:	7013      	strb	r3, [r2, #0]
 801184e:	65a3      	str	r3, [r4, #88]	; 0x58
 8011850:	4b55      	ldr	r3, [pc, #340]	; (80119a8 <_svfiprintf_r+0x1ec>)
 8011852:	2205      	movs	r2, #5
 8011854:	0018      	movs	r0, r3
 8011856:	7831      	ldrb	r1, [r6, #0]
 8011858:	9305      	str	r3, [sp, #20]
 801185a:	f7fd fc1e 	bl	800f09a <memchr>
 801185e:	1c75      	adds	r5, r6, #1
 8011860:	2800      	cmp	r0, #0
 8011862:	d11f      	bne.n	80118a4 <_svfiprintf_r+0xe8>
 8011864:	6822      	ldr	r2, [r4, #0]
 8011866:	06d3      	lsls	r3, r2, #27
 8011868:	d504      	bpl.n	8011874 <_svfiprintf_r+0xb8>
 801186a:	2353      	movs	r3, #83	; 0x53
 801186c:	a904      	add	r1, sp, #16
 801186e:	185b      	adds	r3, r3, r1
 8011870:	2120      	movs	r1, #32
 8011872:	7019      	strb	r1, [r3, #0]
 8011874:	0713      	lsls	r3, r2, #28
 8011876:	d504      	bpl.n	8011882 <_svfiprintf_r+0xc6>
 8011878:	2353      	movs	r3, #83	; 0x53
 801187a:	a904      	add	r1, sp, #16
 801187c:	185b      	adds	r3, r3, r1
 801187e:	212b      	movs	r1, #43	; 0x2b
 8011880:	7019      	strb	r1, [r3, #0]
 8011882:	7833      	ldrb	r3, [r6, #0]
 8011884:	2b2a      	cmp	r3, #42	; 0x2a
 8011886:	d016      	beq.n	80118b6 <_svfiprintf_r+0xfa>
 8011888:	0035      	movs	r5, r6
 801188a:	2100      	movs	r1, #0
 801188c:	200a      	movs	r0, #10
 801188e:	68e3      	ldr	r3, [r4, #12]
 8011890:	782a      	ldrb	r2, [r5, #0]
 8011892:	1c6e      	adds	r6, r5, #1
 8011894:	3a30      	subs	r2, #48	; 0x30
 8011896:	2a09      	cmp	r2, #9
 8011898:	d94e      	bls.n	8011938 <_svfiprintf_r+0x17c>
 801189a:	2900      	cmp	r1, #0
 801189c:	d111      	bne.n	80118c2 <_svfiprintf_r+0x106>
 801189e:	e017      	b.n	80118d0 <_svfiprintf_r+0x114>
 80118a0:	3501      	adds	r5, #1
 80118a2:	e7af      	b.n	8011804 <_svfiprintf_r+0x48>
 80118a4:	9b05      	ldr	r3, [sp, #20]
 80118a6:	6822      	ldr	r2, [r4, #0]
 80118a8:	1ac0      	subs	r0, r0, r3
 80118aa:	2301      	movs	r3, #1
 80118ac:	4083      	lsls	r3, r0
 80118ae:	4313      	orrs	r3, r2
 80118b0:	002e      	movs	r6, r5
 80118b2:	6023      	str	r3, [r4, #0]
 80118b4:	e7cc      	b.n	8011850 <_svfiprintf_r+0x94>
 80118b6:	9b07      	ldr	r3, [sp, #28]
 80118b8:	1d19      	adds	r1, r3, #4
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	9107      	str	r1, [sp, #28]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	db01      	blt.n	80118c6 <_svfiprintf_r+0x10a>
 80118c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80118c4:	e004      	b.n	80118d0 <_svfiprintf_r+0x114>
 80118c6:	425b      	negs	r3, r3
 80118c8:	60e3      	str	r3, [r4, #12]
 80118ca:	2302      	movs	r3, #2
 80118cc:	4313      	orrs	r3, r2
 80118ce:	6023      	str	r3, [r4, #0]
 80118d0:	782b      	ldrb	r3, [r5, #0]
 80118d2:	2b2e      	cmp	r3, #46	; 0x2e
 80118d4:	d10a      	bne.n	80118ec <_svfiprintf_r+0x130>
 80118d6:	786b      	ldrb	r3, [r5, #1]
 80118d8:	2b2a      	cmp	r3, #42	; 0x2a
 80118da:	d135      	bne.n	8011948 <_svfiprintf_r+0x18c>
 80118dc:	9b07      	ldr	r3, [sp, #28]
 80118de:	3502      	adds	r5, #2
 80118e0:	1d1a      	adds	r2, r3, #4
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	9207      	str	r2, [sp, #28]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	db2b      	blt.n	8011942 <_svfiprintf_r+0x186>
 80118ea:	9309      	str	r3, [sp, #36]	; 0x24
 80118ec:	4e2f      	ldr	r6, [pc, #188]	; (80119ac <_svfiprintf_r+0x1f0>)
 80118ee:	2203      	movs	r2, #3
 80118f0:	0030      	movs	r0, r6
 80118f2:	7829      	ldrb	r1, [r5, #0]
 80118f4:	f7fd fbd1 	bl	800f09a <memchr>
 80118f8:	2800      	cmp	r0, #0
 80118fa:	d006      	beq.n	801190a <_svfiprintf_r+0x14e>
 80118fc:	2340      	movs	r3, #64	; 0x40
 80118fe:	1b80      	subs	r0, r0, r6
 8011900:	4083      	lsls	r3, r0
 8011902:	6822      	ldr	r2, [r4, #0]
 8011904:	3501      	adds	r5, #1
 8011906:	4313      	orrs	r3, r2
 8011908:	6023      	str	r3, [r4, #0]
 801190a:	7829      	ldrb	r1, [r5, #0]
 801190c:	2206      	movs	r2, #6
 801190e:	4828      	ldr	r0, [pc, #160]	; (80119b0 <_svfiprintf_r+0x1f4>)
 8011910:	1c6e      	adds	r6, r5, #1
 8011912:	7621      	strb	r1, [r4, #24]
 8011914:	f7fd fbc1 	bl	800f09a <memchr>
 8011918:	2800      	cmp	r0, #0
 801191a:	d03c      	beq.n	8011996 <_svfiprintf_r+0x1da>
 801191c:	4b25      	ldr	r3, [pc, #148]	; (80119b4 <_svfiprintf_r+0x1f8>)
 801191e:	2b00      	cmp	r3, #0
 8011920:	d125      	bne.n	801196e <_svfiprintf_r+0x1b2>
 8011922:	2207      	movs	r2, #7
 8011924:	9b07      	ldr	r3, [sp, #28]
 8011926:	3307      	adds	r3, #7
 8011928:	4393      	bics	r3, r2
 801192a:	3308      	adds	r3, #8
 801192c:	9307      	str	r3, [sp, #28]
 801192e:	6963      	ldr	r3, [r4, #20]
 8011930:	9a04      	ldr	r2, [sp, #16]
 8011932:	189b      	adds	r3, r3, r2
 8011934:	6163      	str	r3, [r4, #20]
 8011936:	e764      	b.n	8011802 <_svfiprintf_r+0x46>
 8011938:	4343      	muls	r3, r0
 801193a:	0035      	movs	r5, r6
 801193c:	2101      	movs	r1, #1
 801193e:	189b      	adds	r3, r3, r2
 8011940:	e7a6      	b.n	8011890 <_svfiprintf_r+0xd4>
 8011942:	2301      	movs	r3, #1
 8011944:	425b      	negs	r3, r3
 8011946:	e7d0      	b.n	80118ea <_svfiprintf_r+0x12e>
 8011948:	2300      	movs	r3, #0
 801194a:	200a      	movs	r0, #10
 801194c:	001a      	movs	r2, r3
 801194e:	3501      	adds	r5, #1
 8011950:	6063      	str	r3, [r4, #4]
 8011952:	7829      	ldrb	r1, [r5, #0]
 8011954:	1c6e      	adds	r6, r5, #1
 8011956:	3930      	subs	r1, #48	; 0x30
 8011958:	2909      	cmp	r1, #9
 801195a:	d903      	bls.n	8011964 <_svfiprintf_r+0x1a8>
 801195c:	2b00      	cmp	r3, #0
 801195e:	d0c5      	beq.n	80118ec <_svfiprintf_r+0x130>
 8011960:	9209      	str	r2, [sp, #36]	; 0x24
 8011962:	e7c3      	b.n	80118ec <_svfiprintf_r+0x130>
 8011964:	4342      	muls	r2, r0
 8011966:	0035      	movs	r5, r6
 8011968:	2301      	movs	r3, #1
 801196a:	1852      	adds	r2, r2, r1
 801196c:	e7f1      	b.n	8011952 <_svfiprintf_r+0x196>
 801196e:	aa07      	add	r2, sp, #28
 8011970:	9200      	str	r2, [sp, #0]
 8011972:	0021      	movs	r1, r4
 8011974:	003a      	movs	r2, r7
 8011976:	4b10      	ldr	r3, [pc, #64]	; (80119b8 <_svfiprintf_r+0x1fc>)
 8011978:	9803      	ldr	r0, [sp, #12]
 801197a:	f7fc fbc5 	bl	800e108 <_printf_float>
 801197e:	9004      	str	r0, [sp, #16]
 8011980:	9b04      	ldr	r3, [sp, #16]
 8011982:	3301      	adds	r3, #1
 8011984:	d1d3      	bne.n	801192e <_svfiprintf_r+0x172>
 8011986:	89bb      	ldrh	r3, [r7, #12]
 8011988:	980d      	ldr	r0, [sp, #52]	; 0x34
 801198a:	065b      	lsls	r3, r3, #25
 801198c:	d400      	bmi.n	8011990 <_svfiprintf_r+0x1d4>
 801198e:	e72c      	b.n	80117ea <_svfiprintf_r+0x2e>
 8011990:	2001      	movs	r0, #1
 8011992:	4240      	negs	r0, r0
 8011994:	e729      	b.n	80117ea <_svfiprintf_r+0x2e>
 8011996:	aa07      	add	r2, sp, #28
 8011998:	9200      	str	r2, [sp, #0]
 801199a:	0021      	movs	r1, r4
 801199c:	003a      	movs	r2, r7
 801199e:	4b06      	ldr	r3, [pc, #24]	; (80119b8 <_svfiprintf_r+0x1fc>)
 80119a0:	9803      	ldr	r0, [sp, #12]
 80119a2:	f7fc fe77 	bl	800e694 <_printf_i>
 80119a6:	e7ea      	b.n	801197e <_svfiprintf_r+0x1c2>
 80119a8:	08013ec8 	.word	0x08013ec8
 80119ac:	08013ece 	.word	0x08013ece
 80119b0:	08013ed2 	.word	0x08013ed2
 80119b4:	0800e109 	.word	0x0800e109
 80119b8:	080116f9 	.word	0x080116f9

080119bc <__sflush_r>:
 80119bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119be:	898b      	ldrh	r3, [r1, #12]
 80119c0:	0005      	movs	r5, r0
 80119c2:	000c      	movs	r4, r1
 80119c4:	071a      	lsls	r2, r3, #28
 80119c6:	d45c      	bmi.n	8011a82 <__sflush_r+0xc6>
 80119c8:	684a      	ldr	r2, [r1, #4]
 80119ca:	2a00      	cmp	r2, #0
 80119cc:	dc04      	bgt.n	80119d8 <__sflush_r+0x1c>
 80119ce:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80119d0:	2a00      	cmp	r2, #0
 80119d2:	dc01      	bgt.n	80119d8 <__sflush_r+0x1c>
 80119d4:	2000      	movs	r0, #0
 80119d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80119d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80119da:	2f00      	cmp	r7, #0
 80119dc:	d0fa      	beq.n	80119d4 <__sflush_r+0x18>
 80119de:	2200      	movs	r2, #0
 80119e0:	2080      	movs	r0, #128	; 0x80
 80119e2:	682e      	ldr	r6, [r5, #0]
 80119e4:	602a      	str	r2, [r5, #0]
 80119e6:	001a      	movs	r2, r3
 80119e8:	0140      	lsls	r0, r0, #5
 80119ea:	6a21      	ldr	r1, [r4, #32]
 80119ec:	4002      	ands	r2, r0
 80119ee:	4203      	tst	r3, r0
 80119f0:	d034      	beq.n	8011a5c <__sflush_r+0xa0>
 80119f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80119f4:	89a3      	ldrh	r3, [r4, #12]
 80119f6:	075b      	lsls	r3, r3, #29
 80119f8:	d506      	bpl.n	8011a08 <__sflush_r+0x4c>
 80119fa:	6863      	ldr	r3, [r4, #4]
 80119fc:	1ac0      	subs	r0, r0, r3
 80119fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d001      	beq.n	8011a08 <__sflush_r+0x4c>
 8011a04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a06:	1ac0      	subs	r0, r0, r3
 8011a08:	0002      	movs	r2, r0
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	0028      	movs	r0, r5
 8011a0e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8011a10:	6a21      	ldr	r1, [r4, #32]
 8011a12:	47b8      	blx	r7
 8011a14:	89a2      	ldrh	r2, [r4, #12]
 8011a16:	1c43      	adds	r3, r0, #1
 8011a18:	d106      	bne.n	8011a28 <__sflush_r+0x6c>
 8011a1a:	6829      	ldr	r1, [r5, #0]
 8011a1c:	291d      	cmp	r1, #29
 8011a1e:	d82c      	bhi.n	8011a7a <__sflush_r+0xbe>
 8011a20:	4b2a      	ldr	r3, [pc, #168]	; (8011acc <__sflush_r+0x110>)
 8011a22:	410b      	asrs	r3, r1
 8011a24:	07db      	lsls	r3, r3, #31
 8011a26:	d428      	bmi.n	8011a7a <__sflush_r+0xbe>
 8011a28:	2300      	movs	r3, #0
 8011a2a:	6063      	str	r3, [r4, #4]
 8011a2c:	6923      	ldr	r3, [r4, #16]
 8011a2e:	6023      	str	r3, [r4, #0]
 8011a30:	04d2      	lsls	r2, r2, #19
 8011a32:	d505      	bpl.n	8011a40 <__sflush_r+0x84>
 8011a34:	1c43      	adds	r3, r0, #1
 8011a36:	d102      	bne.n	8011a3e <__sflush_r+0x82>
 8011a38:	682b      	ldr	r3, [r5, #0]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d100      	bne.n	8011a40 <__sflush_r+0x84>
 8011a3e:	6560      	str	r0, [r4, #84]	; 0x54
 8011a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a42:	602e      	str	r6, [r5, #0]
 8011a44:	2900      	cmp	r1, #0
 8011a46:	d0c5      	beq.n	80119d4 <__sflush_r+0x18>
 8011a48:	0023      	movs	r3, r4
 8011a4a:	3344      	adds	r3, #68	; 0x44
 8011a4c:	4299      	cmp	r1, r3
 8011a4e:	d002      	beq.n	8011a56 <__sflush_r+0x9a>
 8011a50:	0028      	movs	r0, r5
 8011a52:	f7fe f9d9 	bl	800fe08 <_free_r>
 8011a56:	2000      	movs	r0, #0
 8011a58:	6360      	str	r0, [r4, #52]	; 0x34
 8011a5a:	e7bc      	b.n	80119d6 <__sflush_r+0x1a>
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	0028      	movs	r0, r5
 8011a60:	47b8      	blx	r7
 8011a62:	1c43      	adds	r3, r0, #1
 8011a64:	d1c6      	bne.n	80119f4 <__sflush_r+0x38>
 8011a66:	682b      	ldr	r3, [r5, #0]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d0c3      	beq.n	80119f4 <__sflush_r+0x38>
 8011a6c:	2b1d      	cmp	r3, #29
 8011a6e:	d001      	beq.n	8011a74 <__sflush_r+0xb8>
 8011a70:	2b16      	cmp	r3, #22
 8011a72:	d101      	bne.n	8011a78 <__sflush_r+0xbc>
 8011a74:	602e      	str	r6, [r5, #0]
 8011a76:	e7ad      	b.n	80119d4 <__sflush_r+0x18>
 8011a78:	89a2      	ldrh	r2, [r4, #12]
 8011a7a:	2340      	movs	r3, #64	; 0x40
 8011a7c:	4313      	orrs	r3, r2
 8011a7e:	81a3      	strh	r3, [r4, #12]
 8011a80:	e7a9      	b.n	80119d6 <__sflush_r+0x1a>
 8011a82:	690e      	ldr	r6, [r1, #16]
 8011a84:	2e00      	cmp	r6, #0
 8011a86:	d0a5      	beq.n	80119d4 <__sflush_r+0x18>
 8011a88:	680f      	ldr	r7, [r1, #0]
 8011a8a:	600e      	str	r6, [r1, #0]
 8011a8c:	1bba      	subs	r2, r7, r6
 8011a8e:	9201      	str	r2, [sp, #4]
 8011a90:	2200      	movs	r2, #0
 8011a92:	079b      	lsls	r3, r3, #30
 8011a94:	d100      	bne.n	8011a98 <__sflush_r+0xdc>
 8011a96:	694a      	ldr	r2, [r1, #20]
 8011a98:	60a2      	str	r2, [r4, #8]
 8011a9a:	9b01      	ldr	r3, [sp, #4]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	dd99      	ble.n	80119d4 <__sflush_r+0x18>
 8011aa0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011aa2:	0032      	movs	r2, r6
 8011aa4:	001f      	movs	r7, r3
 8011aa6:	0028      	movs	r0, r5
 8011aa8:	9b01      	ldr	r3, [sp, #4]
 8011aaa:	6a21      	ldr	r1, [r4, #32]
 8011aac:	47b8      	blx	r7
 8011aae:	2800      	cmp	r0, #0
 8011ab0:	dc06      	bgt.n	8011ac0 <__sflush_r+0x104>
 8011ab2:	2340      	movs	r3, #64	; 0x40
 8011ab4:	2001      	movs	r0, #1
 8011ab6:	89a2      	ldrh	r2, [r4, #12]
 8011ab8:	4240      	negs	r0, r0
 8011aba:	4313      	orrs	r3, r2
 8011abc:	81a3      	strh	r3, [r4, #12]
 8011abe:	e78a      	b.n	80119d6 <__sflush_r+0x1a>
 8011ac0:	9b01      	ldr	r3, [sp, #4]
 8011ac2:	1836      	adds	r6, r6, r0
 8011ac4:	1a1b      	subs	r3, r3, r0
 8011ac6:	9301      	str	r3, [sp, #4]
 8011ac8:	e7e7      	b.n	8011a9a <__sflush_r+0xde>
 8011aca:	46c0      	nop			; (mov r8, r8)
 8011acc:	dfbffffe 	.word	0xdfbffffe

08011ad0 <_fflush_r>:
 8011ad0:	690b      	ldr	r3, [r1, #16]
 8011ad2:	b570      	push	{r4, r5, r6, lr}
 8011ad4:	0005      	movs	r5, r0
 8011ad6:	000c      	movs	r4, r1
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d102      	bne.n	8011ae2 <_fflush_r+0x12>
 8011adc:	2500      	movs	r5, #0
 8011ade:	0028      	movs	r0, r5
 8011ae0:	bd70      	pop	{r4, r5, r6, pc}
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	d004      	beq.n	8011af0 <_fflush_r+0x20>
 8011ae6:	6a03      	ldr	r3, [r0, #32]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d101      	bne.n	8011af0 <_fflush_r+0x20>
 8011aec:	f7fd f97a 	bl	800ede4 <__sinit>
 8011af0:	220c      	movs	r2, #12
 8011af2:	5ea3      	ldrsh	r3, [r4, r2]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d0f1      	beq.n	8011adc <_fflush_r+0xc>
 8011af8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011afa:	07d2      	lsls	r2, r2, #31
 8011afc:	d404      	bmi.n	8011b08 <_fflush_r+0x38>
 8011afe:	059b      	lsls	r3, r3, #22
 8011b00:	d402      	bmi.n	8011b08 <_fflush_r+0x38>
 8011b02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b04:	f7fd fac7 	bl	800f096 <__retarget_lock_acquire_recursive>
 8011b08:	0028      	movs	r0, r5
 8011b0a:	0021      	movs	r1, r4
 8011b0c:	f7ff ff56 	bl	80119bc <__sflush_r>
 8011b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b12:	0005      	movs	r5, r0
 8011b14:	07db      	lsls	r3, r3, #31
 8011b16:	d4e2      	bmi.n	8011ade <_fflush_r+0xe>
 8011b18:	89a3      	ldrh	r3, [r4, #12]
 8011b1a:	059b      	lsls	r3, r3, #22
 8011b1c:	d4df      	bmi.n	8011ade <_fflush_r+0xe>
 8011b1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b20:	f7fd faba 	bl	800f098 <__retarget_lock_release_recursive>
 8011b24:	e7db      	b.n	8011ade <_fflush_r+0xe>

08011b26 <memmove>:
 8011b26:	b510      	push	{r4, lr}
 8011b28:	4288      	cmp	r0, r1
 8011b2a:	d902      	bls.n	8011b32 <memmove+0xc>
 8011b2c:	188b      	adds	r3, r1, r2
 8011b2e:	4298      	cmp	r0, r3
 8011b30:	d303      	bcc.n	8011b3a <memmove+0x14>
 8011b32:	2300      	movs	r3, #0
 8011b34:	e007      	b.n	8011b46 <memmove+0x20>
 8011b36:	5c8b      	ldrb	r3, [r1, r2]
 8011b38:	5483      	strb	r3, [r0, r2]
 8011b3a:	3a01      	subs	r2, #1
 8011b3c:	d2fb      	bcs.n	8011b36 <memmove+0x10>
 8011b3e:	bd10      	pop	{r4, pc}
 8011b40:	5ccc      	ldrb	r4, [r1, r3]
 8011b42:	54c4      	strb	r4, [r0, r3]
 8011b44:	3301      	adds	r3, #1
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d1fa      	bne.n	8011b40 <memmove+0x1a>
 8011b4a:	e7f8      	b.n	8011b3e <memmove+0x18>

08011b4c <strncmp>:
 8011b4c:	b530      	push	{r4, r5, lr}
 8011b4e:	0005      	movs	r5, r0
 8011b50:	1e10      	subs	r0, r2, #0
 8011b52:	d00b      	beq.n	8011b6c <strncmp+0x20>
 8011b54:	2400      	movs	r4, #0
 8011b56:	3a01      	subs	r2, #1
 8011b58:	5d2b      	ldrb	r3, [r5, r4]
 8011b5a:	5d08      	ldrb	r0, [r1, r4]
 8011b5c:	4283      	cmp	r3, r0
 8011b5e:	d104      	bne.n	8011b6a <strncmp+0x1e>
 8011b60:	42a2      	cmp	r2, r4
 8011b62:	d002      	beq.n	8011b6a <strncmp+0x1e>
 8011b64:	3401      	adds	r4, #1
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d1f6      	bne.n	8011b58 <strncmp+0xc>
 8011b6a:	1a18      	subs	r0, r3, r0
 8011b6c:	bd30      	pop	{r4, r5, pc}
	...

08011b70 <_sbrk_r>:
 8011b70:	2300      	movs	r3, #0
 8011b72:	b570      	push	{r4, r5, r6, lr}
 8011b74:	4d06      	ldr	r5, [pc, #24]	; (8011b90 <_sbrk_r+0x20>)
 8011b76:	0004      	movs	r4, r0
 8011b78:	0008      	movs	r0, r1
 8011b7a:	602b      	str	r3, [r5, #0]
 8011b7c:	f7f4 fd52 	bl	8006624 <_sbrk>
 8011b80:	1c43      	adds	r3, r0, #1
 8011b82:	d103      	bne.n	8011b8c <_sbrk_r+0x1c>
 8011b84:	682b      	ldr	r3, [r5, #0]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d000      	beq.n	8011b8c <_sbrk_r+0x1c>
 8011b8a:	6023      	str	r3, [r4, #0]
 8011b8c:	bd70      	pop	{r4, r5, r6, pc}
 8011b8e:	46c0      	nop			; (mov r8, r8)
 8011b90:	200010bc 	.word	0x200010bc

08011b94 <nan>:
 8011b94:	2000      	movs	r0, #0
 8011b96:	4901      	ldr	r1, [pc, #4]	; (8011b9c <nan+0x8>)
 8011b98:	4770      	bx	lr
 8011b9a:	46c0      	nop			; (mov r8, r8)
 8011b9c:	7ff80000 	.word	0x7ff80000

08011ba0 <__assert_func>:
 8011ba0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011ba2:	0014      	movs	r4, r2
 8011ba4:	001a      	movs	r2, r3
 8011ba6:	4b09      	ldr	r3, [pc, #36]	; (8011bcc <__assert_func+0x2c>)
 8011ba8:	0005      	movs	r5, r0
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	000e      	movs	r6, r1
 8011bae:	68d8      	ldr	r0, [r3, #12]
 8011bb0:	4b07      	ldr	r3, [pc, #28]	; (8011bd0 <__assert_func+0x30>)
 8011bb2:	2c00      	cmp	r4, #0
 8011bb4:	d101      	bne.n	8011bba <__assert_func+0x1a>
 8011bb6:	4b07      	ldr	r3, [pc, #28]	; (8011bd4 <__assert_func+0x34>)
 8011bb8:	001c      	movs	r4, r3
 8011bba:	4907      	ldr	r1, [pc, #28]	; (8011bd8 <__assert_func+0x38>)
 8011bbc:	9301      	str	r3, [sp, #4]
 8011bbe:	9402      	str	r4, [sp, #8]
 8011bc0:	002b      	movs	r3, r5
 8011bc2:	9600      	str	r6, [sp, #0]
 8011bc4:	f000 fbe2 	bl	801238c <fiprintf>
 8011bc8:	f000 fbf0 	bl	80123ac <abort>
 8011bcc:	20000084 	.word	0x20000084
 8011bd0:	08013ee1 	.word	0x08013ee1
 8011bd4:	08013f1c 	.word	0x08013f1c
 8011bd8:	08013eee 	.word	0x08013eee

08011bdc <_calloc_r>:
 8011bdc:	b570      	push	{r4, r5, r6, lr}
 8011bde:	0c0b      	lsrs	r3, r1, #16
 8011be0:	0c15      	lsrs	r5, r2, #16
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d11e      	bne.n	8011c24 <_calloc_r+0x48>
 8011be6:	2d00      	cmp	r5, #0
 8011be8:	d10c      	bne.n	8011c04 <_calloc_r+0x28>
 8011bea:	b289      	uxth	r1, r1
 8011bec:	b294      	uxth	r4, r2
 8011bee:	434c      	muls	r4, r1
 8011bf0:	0021      	movs	r1, r4
 8011bf2:	f7fe f97f 	bl	800fef4 <_malloc_r>
 8011bf6:	1e05      	subs	r5, r0, #0
 8011bf8:	d01b      	beq.n	8011c32 <_calloc_r+0x56>
 8011bfa:	0022      	movs	r2, r4
 8011bfc:	2100      	movs	r1, #0
 8011bfe:	f7fd f9c5 	bl	800ef8c <memset>
 8011c02:	e016      	b.n	8011c32 <_calloc_r+0x56>
 8011c04:	1c2b      	adds	r3, r5, #0
 8011c06:	1c0c      	adds	r4, r1, #0
 8011c08:	b289      	uxth	r1, r1
 8011c0a:	b292      	uxth	r2, r2
 8011c0c:	434a      	muls	r2, r1
 8011c0e:	b2a1      	uxth	r1, r4
 8011c10:	b29c      	uxth	r4, r3
 8011c12:	434c      	muls	r4, r1
 8011c14:	0c13      	lsrs	r3, r2, #16
 8011c16:	18e4      	adds	r4, r4, r3
 8011c18:	0c23      	lsrs	r3, r4, #16
 8011c1a:	d107      	bne.n	8011c2c <_calloc_r+0x50>
 8011c1c:	0424      	lsls	r4, r4, #16
 8011c1e:	b292      	uxth	r2, r2
 8011c20:	4314      	orrs	r4, r2
 8011c22:	e7e5      	b.n	8011bf0 <_calloc_r+0x14>
 8011c24:	2d00      	cmp	r5, #0
 8011c26:	d101      	bne.n	8011c2c <_calloc_r+0x50>
 8011c28:	1c14      	adds	r4, r2, #0
 8011c2a:	e7ed      	b.n	8011c08 <_calloc_r+0x2c>
 8011c2c:	230c      	movs	r3, #12
 8011c2e:	2500      	movs	r5, #0
 8011c30:	6003      	str	r3, [r0, #0]
 8011c32:	0028      	movs	r0, r5
 8011c34:	bd70      	pop	{r4, r5, r6, pc}

08011c36 <rshift>:
 8011c36:	0002      	movs	r2, r0
 8011c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c3a:	6904      	ldr	r4, [r0, #16]
 8011c3c:	114b      	asrs	r3, r1, #5
 8011c3e:	b085      	sub	sp, #20
 8011c40:	3214      	adds	r2, #20
 8011c42:	9302      	str	r3, [sp, #8]
 8011c44:	114d      	asrs	r5, r1, #5
 8011c46:	0013      	movs	r3, r2
 8011c48:	42ac      	cmp	r4, r5
 8011c4a:	dd32      	ble.n	8011cb2 <rshift+0x7c>
 8011c4c:	261f      	movs	r6, #31
 8011c4e:	000f      	movs	r7, r1
 8011c50:	114b      	asrs	r3, r1, #5
 8011c52:	009b      	lsls	r3, r3, #2
 8011c54:	00a5      	lsls	r5, r4, #2
 8011c56:	18d3      	adds	r3, r2, r3
 8011c58:	4037      	ands	r7, r6
 8011c5a:	1955      	adds	r5, r2, r5
 8011c5c:	9300      	str	r3, [sp, #0]
 8011c5e:	9701      	str	r7, [sp, #4]
 8011c60:	4231      	tst	r1, r6
 8011c62:	d10d      	bne.n	8011c80 <rshift+0x4a>
 8011c64:	0016      	movs	r6, r2
 8011c66:	0019      	movs	r1, r3
 8011c68:	428d      	cmp	r5, r1
 8011c6a:	d836      	bhi.n	8011cda <rshift+0xa4>
 8011c6c:	9900      	ldr	r1, [sp, #0]
 8011c6e:	2300      	movs	r3, #0
 8011c70:	3903      	subs	r1, #3
 8011c72:	428d      	cmp	r5, r1
 8011c74:	d302      	bcc.n	8011c7c <rshift+0x46>
 8011c76:	9b02      	ldr	r3, [sp, #8]
 8011c78:	1ae4      	subs	r4, r4, r3
 8011c7a:	00a3      	lsls	r3, r4, #2
 8011c7c:	18d3      	adds	r3, r2, r3
 8011c7e:	e018      	b.n	8011cb2 <rshift+0x7c>
 8011c80:	2120      	movs	r1, #32
 8011c82:	9e01      	ldr	r6, [sp, #4]
 8011c84:	9f01      	ldr	r7, [sp, #4]
 8011c86:	1b89      	subs	r1, r1, r6
 8011c88:	9e00      	ldr	r6, [sp, #0]
 8011c8a:	9103      	str	r1, [sp, #12]
 8011c8c:	ce02      	ldmia	r6!, {r1}
 8011c8e:	4694      	mov	ip, r2
 8011c90:	40f9      	lsrs	r1, r7
 8011c92:	42b5      	cmp	r5, r6
 8011c94:	d816      	bhi.n	8011cc4 <rshift+0x8e>
 8011c96:	9e00      	ldr	r6, [sp, #0]
 8011c98:	2300      	movs	r3, #0
 8011c9a:	3601      	adds	r6, #1
 8011c9c:	42b5      	cmp	r5, r6
 8011c9e:	d303      	bcc.n	8011ca8 <rshift+0x72>
 8011ca0:	9b02      	ldr	r3, [sp, #8]
 8011ca2:	1ae3      	subs	r3, r4, r3
 8011ca4:	009b      	lsls	r3, r3, #2
 8011ca6:	3b04      	subs	r3, #4
 8011ca8:	18d3      	adds	r3, r2, r3
 8011caa:	6019      	str	r1, [r3, #0]
 8011cac:	2900      	cmp	r1, #0
 8011cae:	d000      	beq.n	8011cb2 <rshift+0x7c>
 8011cb0:	3304      	adds	r3, #4
 8011cb2:	1a99      	subs	r1, r3, r2
 8011cb4:	1089      	asrs	r1, r1, #2
 8011cb6:	6101      	str	r1, [r0, #16]
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d101      	bne.n	8011cc0 <rshift+0x8a>
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	6143      	str	r3, [r0, #20]
 8011cc0:	b005      	add	sp, #20
 8011cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cc4:	6837      	ldr	r7, [r6, #0]
 8011cc6:	9b03      	ldr	r3, [sp, #12]
 8011cc8:	409f      	lsls	r7, r3
 8011cca:	430f      	orrs	r7, r1
 8011ccc:	4661      	mov	r1, ip
 8011cce:	c180      	stmia	r1!, {r7}
 8011cd0:	468c      	mov	ip, r1
 8011cd2:	9b01      	ldr	r3, [sp, #4]
 8011cd4:	ce02      	ldmia	r6!, {r1}
 8011cd6:	40d9      	lsrs	r1, r3
 8011cd8:	e7db      	b.n	8011c92 <rshift+0x5c>
 8011cda:	c980      	ldmia	r1!, {r7}
 8011cdc:	c680      	stmia	r6!, {r7}
 8011cde:	e7c3      	b.n	8011c68 <rshift+0x32>

08011ce0 <__hexdig_fun>:
 8011ce0:	0002      	movs	r2, r0
 8011ce2:	3a30      	subs	r2, #48	; 0x30
 8011ce4:	0003      	movs	r3, r0
 8011ce6:	2a09      	cmp	r2, #9
 8011ce8:	d802      	bhi.n	8011cf0 <__hexdig_fun+0x10>
 8011cea:	3b20      	subs	r3, #32
 8011cec:	b2d8      	uxtb	r0, r3
 8011cee:	4770      	bx	lr
 8011cf0:	0002      	movs	r2, r0
 8011cf2:	3a61      	subs	r2, #97	; 0x61
 8011cf4:	2a05      	cmp	r2, #5
 8011cf6:	d801      	bhi.n	8011cfc <__hexdig_fun+0x1c>
 8011cf8:	3b47      	subs	r3, #71	; 0x47
 8011cfa:	e7f7      	b.n	8011cec <__hexdig_fun+0xc>
 8011cfc:	001a      	movs	r2, r3
 8011cfe:	3a41      	subs	r2, #65	; 0x41
 8011d00:	2000      	movs	r0, #0
 8011d02:	2a05      	cmp	r2, #5
 8011d04:	d8f3      	bhi.n	8011cee <__hexdig_fun+0xe>
 8011d06:	3b27      	subs	r3, #39	; 0x27
 8011d08:	e7f0      	b.n	8011cec <__hexdig_fun+0xc>
	...

08011d0c <__gethex>:
 8011d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d0e:	b089      	sub	sp, #36	; 0x24
 8011d10:	9307      	str	r3, [sp, #28]
 8011d12:	2302      	movs	r3, #2
 8011d14:	9201      	str	r2, [sp, #4]
 8011d16:	680a      	ldr	r2, [r1, #0]
 8011d18:	425b      	negs	r3, r3
 8011d1a:	9003      	str	r0, [sp, #12]
 8011d1c:	9106      	str	r1, [sp, #24]
 8011d1e:	1c96      	adds	r6, r2, #2
 8011d20:	1a9b      	subs	r3, r3, r2
 8011d22:	199a      	adds	r2, r3, r6
 8011d24:	9600      	str	r6, [sp, #0]
 8011d26:	9205      	str	r2, [sp, #20]
 8011d28:	9a00      	ldr	r2, [sp, #0]
 8011d2a:	3601      	adds	r6, #1
 8011d2c:	7810      	ldrb	r0, [r2, #0]
 8011d2e:	2830      	cmp	r0, #48	; 0x30
 8011d30:	d0f7      	beq.n	8011d22 <__gethex+0x16>
 8011d32:	f7ff ffd5 	bl	8011ce0 <__hexdig_fun>
 8011d36:	2300      	movs	r3, #0
 8011d38:	001d      	movs	r5, r3
 8011d3a:	9302      	str	r3, [sp, #8]
 8011d3c:	4298      	cmp	r0, r3
 8011d3e:	d11d      	bne.n	8011d7c <__gethex+0x70>
 8011d40:	2201      	movs	r2, #1
 8011d42:	49a6      	ldr	r1, [pc, #664]	; (8011fdc <__gethex+0x2d0>)
 8011d44:	9800      	ldr	r0, [sp, #0]
 8011d46:	f7ff ff01 	bl	8011b4c <strncmp>
 8011d4a:	0007      	movs	r7, r0
 8011d4c:	42a8      	cmp	r0, r5
 8011d4e:	d169      	bne.n	8011e24 <__gethex+0x118>
 8011d50:	9b00      	ldr	r3, [sp, #0]
 8011d52:	0034      	movs	r4, r6
 8011d54:	7858      	ldrb	r0, [r3, #1]
 8011d56:	f7ff ffc3 	bl	8011ce0 <__hexdig_fun>
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	9302      	str	r3, [sp, #8]
 8011d5e:	42a8      	cmp	r0, r5
 8011d60:	d02f      	beq.n	8011dc2 <__gethex+0xb6>
 8011d62:	9600      	str	r6, [sp, #0]
 8011d64:	9b00      	ldr	r3, [sp, #0]
 8011d66:	7818      	ldrb	r0, [r3, #0]
 8011d68:	2830      	cmp	r0, #48	; 0x30
 8011d6a:	d009      	beq.n	8011d80 <__gethex+0x74>
 8011d6c:	f7ff ffb8 	bl	8011ce0 <__hexdig_fun>
 8011d70:	4242      	negs	r2, r0
 8011d72:	4142      	adcs	r2, r0
 8011d74:	2301      	movs	r3, #1
 8011d76:	0035      	movs	r5, r6
 8011d78:	9202      	str	r2, [sp, #8]
 8011d7a:	9305      	str	r3, [sp, #20]
 8011d7c:	9c00      	ldr	r4, [sp, #0]
 8011d7e:	e004      	b.n	8011d8a <__gethex+0x7e>
 8011d80:	9b00      	ldr	r3, [sp, #0]
 8011d82:	3301      	adds	r3, #1
 8011d84:	9300      	str	r3, [sp, #0]
 8011d86:	e7ed      	b.n	8011d64 <__gethex+0x58>
 8011d88:	3401      	adds	r4, #1
 8011d8a:	7820      	ldrb	r0, [r4, #0]
 8011d8c:	f7ff ffa8 	bl	8011ce0 <__hexdig_fun>
 8011d90:	1e07      	subs	r7, r0, #0
 8011d92:	d1f9      	bne.n	8011d88 <__gethex+0x7c>
 8011d94:	2201      	movs	r2, #1
 8011d96:	0020      	movs	r0, r4
 8011d98:	4990      	ldr	r1, [pc, #576]	; (8011fdc <__gethex+0x2d0>)
 8011d9a:	f7ff fed7 	bl	8011b4c <strncmp>
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	d10d      	bne.n	8011dbe <__gethex+0xb2>
 8011da2:	2d00      	cmp	r5, #0
 8011da4:	d106      	bne.n	8011db4 <__gethex+0xa8>
 8011da6:	3401      	adds	r4, #1
 8011da8:	0025      	movs	r5, r4
 8011daa:	7820      	ldrb	r0, [r4, #0]
 8011dac:	f7ff ff98 	bl	8011ce0 <__hexdig_fun>
 8011db0:	2800      	cmp	r0, #0
 8011db2:	d102      	bne.n	8011dba <__gethex+0xae>
 8011db4:	1b2d      	subs	r5, r5, r4
 8011db6:	00af      	lsls	r7, r5, #2
 8011db8:	e003      	b.n	8011dc2 <__gethex+0xb6>
 8011dba:	3401      	adds	r4, #1
 8011dbc:	e7f5      	b.n	8011daa <__gethex+0x9e>
 8011dbe:	2d00      	cmp	r5, #0
 8011dc0:	d1f8      	bne.n	8011db4 <__gethex+0xa8>
 8011dc2:	2220      	movs	r2, #32
 8011dc4:	7823      	ldrb	r3, [r4, #0]
 8011dc6:	0026      	movs	r6, r4
 8011dc8:	4393      	bics	r3, r2
 8011dca:	2b50      	cmp	r3, #80	; 0x50
 8011dcc:	d11d      	bne.n	8011e0a <__gethex+0xfe>
 8011dce:	7863      	ldrb	r3, [r4, #1]
 8011dd0:	2b2b      	cmp	r3, #43	; 0x2b
 8011dd2:	d02c      	beq.n	8011e2e <__gethex+0x122>
 8011dd4:	2b2d      	cmp	r3, #45	; 0x2d
 8011dd6:	d02e      	beq.n	8011e36 <__gethex+0x12a>
 8011dd8:	2300      	movs	r3, #0
 8011dda:	1c66      	adds	r6, r4, #1
 8011ddc:	9304      	str	r3, [sp, #16]
 8011dde:	7830      	ldrb	r0, [r6, #0]
 8011de0:	f7ff ff7e 	bl	8011ce0 <__hexdig_fun>
 8011de4:	1e43      	subs	r3, r0, #1
 8011de6:	b2db      	uxtb	r3, r3
 8011de8:	2b18      	cmp	r3, #24
 8011dea:	d82b      	bhi.n	8011e44 <__gethex+0x138>
 8011dec:	3810      	subs	r0, #16
 8011dee:	0005      	movs	r5, r0
 8011df0:	7870      	ldrb	r0, [r6, #1]
 8011df2:	f7ff ff75 	bl	8011ce0 <__hexdig_fun>
 8011df6:	1e43      	subs	r3, r0, #1
 8011df8:	b2db      	uxtb	r3, r3
 8011dfa:	3601      	adds	r6, #1
 8011dfc:	2b18      	cmp	r3, #24
 8011dfe:	d91c      	bls.n	8011e3a <__gethex+0x12e>
 8011e00:	9b04      	ldr	r3, [sp, #16]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d000      	beq.n	8011e08 <__gethex+0xfc>
 8011e06:	426d      	negs	r5, r5
 8011e08:	197f      	adds	r7, r7, r5
 8011e0a:	9b06      	ldr	r3, [sp, #24]
 8011e0c:	601e      	str	r6, [r3, #0]
 8011e0e:	9b02      	ldr	r3, [sp, #8]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d019      	beq.n	8011e48 <__gethex+0x13c>
 8011e14:	2600      	movs	r6, #0
 8011e16:	9b05      	ldr	r3, [sp, #20]
 8011e18:	42b3      	cmp	r3, r6
 8011e1a:	d100      	bne.n	8011e1e <__gethex+0x112>
 8011e1c:	3606      	adds	r6, #6
 8011e1e:	0030      	movs	r0, r6
 8011e20:	b009      	add	sp, #36	; 0x24
 8011e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e24:	2301      	movs	r3, #1
 8011e26:	2700      	movs	r7, #0
 8011e28:	9c00      	ldr	r4, [sp, #0]
 8011e2a:	9302      	str	r3, [sp, #8]
 8011e2c:	e7c9      	b.n	8011dc2 <__gethex+0xb6>
 8011e2e:	2300      	movs	r3, #0
 8011e30:	9304      	str	r3, [sp, #16]
 8011e32:	1ca6      	adds	r6, r4, #2
 8011e34:	e7d3      	b.n	8011dde <__gethex+0xd2>
 8011e36:	2301      	movs	r3, #1
 8011e38:	e7fa      	b.n	8011e30 <__gethex+0x124>
 8011e3a:	230a      	movs	r3, #10
 8011e3c:	435d      	muls	r5, r3
 8011e3e:	182d      	adds	r5, r5, r0
 8011e40:	3d10      	subs	r5, #16
 8011e42:	e7d5      	b.n	8011df0 <__gethex+0xe4>
 8011e44:	0026      	movs	r6, r4
 8011e46:	e7e0      	b.n	8011e0a <__gethex+0xfe>
 8011e48:	9b00      	ldr	r3, [sp, #0]
 8011e4a:	9902      	ldr	r1, [sp, #8]
 8011e4c:	1ae3      	subs	r3, r4, r3
 8011e4e:	3b01      	subs	r3, #1
 8011e50:	2b07      	cmp	r3, #7
 8011e52:	dc0a      	bgt.n	8011e6a <__gethex+0x15e>
 8011e54:	9803      	ldr	r0, [sp, #12]
 8011e56:	f7fe f8df 	bl	8010018 <_Balloc>
 8011e5a:	1e05      	subs	r5, r0, #0
 8011e5c:	d108      	bne.n	8011e70 <__gethex+0x164>
 8011e5e:	002a      	movs	r2, r5
 8011e60:	21e4      	movs	r1, #228	; 0xe4
 8011e62:	4b5f      	ldr	r3, [pc, #380]	; (8011fe0 <__gethex+0x2d4>)
 8011e64:	485f      	ldr	r0, [pc, #380]	; (8011fe4 <__gethex+0x2d8>)
 8011e66:	f7ff fe9b 	bl	8011ba0 <__assert_func>
 8011e6a:	3101      	adds	r1, #1
 8011e6c:	105b      	asrs	r3, r3, #1
 8011e6e:	e7ef      	b.n	8011e50 <__gethex+0x144>
 8011e70:	0003      	movs	r3, r0
 8011e72:	3314      	adds	r3, #20
 8011e74:	9302      	str	r3, [sp, #8]
 8011e76:	9305      	str	r3, [sp, #20]
 8011e78:	2300      	movs	r3, #0
 8011e7a:	001e      	movs	r6, r3
 8011e7c:	9304      	str	r3, [sp, #16]
 8011e7e:	9b00      	ldr	r3, [sp, #0]
 8011e80:	42a3      	cmp	r3, r4
 8011e82:	d33f      	bcc.n	8011f04 <__gethex+0x1f8>
 8011e84:	9c05      	ldr	r4, [sp, #20]
 8011e86:	9b02      	ldr	r3, [sp, #8]
 8011e88:	c440      	stmia	r4!, {r6}
 8011e8a:	1ae4      	subs	r4, r4, r3
 8011e8c:	10a4      	asrs	r4, r4, #2
 8011e8e:	0030      	movs	r0, r6
 8011e90:	612c      	str	r4, [r5, #16]
 8011e92:	f7fe f9b9 	bl	8010208 <__hi0bits>
 8011e96:	9b01      	ldr	r3, [sp, #4]
 8011e98:	0164      	lsls	r4, r4, #5
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	1a26      	subs	r6, r4, r0
 8011e9e:	9300      	str	r3, [sp, #0]
 8011ea0:	429e      	cmp	r6, r3
 8011ea2:	dd51      	ble.n	8011f48 <__gethex+0x23c>
 8011ea4:	1af6      	subs	r6, r6, r3
 8011ea6:	0031      	movs	r1, r6
 8011ea8:	0028      	movs	r0, r5
 8011eaa:	f7fe fd4d 	bl	8010948 <__any_on>
 8011eae:	1e04      	subs	r4, r0, #0
 8011eb0:	d016      	beq.n	8011ee0 <__gethex+0x1d4>
 8011eb2:	2401      	movs	r4, #1
 8011eb4:	231f      	movs	r3, #31
 8011eb6:	0020      	movs	r0, r4
 8011eb8:	1e72      	subs	r2, r6, #1
 8011eba:	4013      	ands	r3, r2
 8011ebc:	4098      	lsls	r0, r3
 8011ebe:	0003      	movs	r3, r0
 8011ec0:	1151      	asrs	r1, r2, #5
 8011ec2:	9802      	ldr	r0, [sp, #8]
 8011ec4:	0089      	lsls	r1, r1, #2
 8011ec6:	5809      	ldr	r1, [r1, r0]
 8011ec8:	4219      	tst	r1, r3
 8011eca:	d009      	beq.n	8011ee0 <__gethex+0x1d4>
 8011ecc:	42a2      	cmp	r2, r4
 8011ece:	dd06      	ble.n	8011ede <__gethex+0x1d2>
 8011ed0:	0028      	movs	r0, r5
 8011ed2:	1eb1      	subs	r1, r6, #2
 8011ed4:	f7fe fd38 	bl	8010948 <__any_on>
 8011ed8:	3402      	adds	r4, #2
 8011eda:	2800      	cmp	r0, #0
 8011edc:	d100      	bne.n	8011ee0 <__gethex+0x1d4>
 8011ede:	2402      	movs	r4, #2
 8011ee0:	0031      	movs	r1, r6
 8011ee2:	0028      	movs	r0, r5
 8011ee4:	f7ff fea7 	bl	8011c36 <rshift>
 8011ee8:	19bf      	adds	r7, r7, r6
 8011eea:	9b01      	ldr	r3, [sp, #4]
 8011eec:	689b      	ldr	r3, [r3, #8]
 8011eee:	42bb      	cmp	r3, r7
 8011ef0:	da3a      	bge.n	8011f68 <__gethex+0x25c>
 8011ef2:	0029      	movs	r1, r5
 8011ef4:	9803      	ldr	r0, [sp, #12]
 8011ef6:	f7fe f8d3 	bl	80100a0 <_Bfree>
 8011efa:	2300      	movs	r3, #0
 8011efc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011efe:	26a3      	movs	r6, #163	; 0xa3
 8011f00:	6013      	str	r3, [r2, #0]
 8011f02:	e78c      	b.n	8011e1e <__gethex+0x112>
 8011f04:	3c01      	subs	r4, #1
 8011f06:	7823      	ldrb	r3, [r4, #0]
 8011f08:	2b2e      	cmp	r3, #46	; 0x2e
 8011f0a:	d012      	beq.n	8011f32 <__gethex+0x226>
 8011f0c:	9b04      	ldr	r3, [sp, #16]
 8011f0e:	2b20      	cmp	r3, #32
 8011f10:	d104      	bne.n	8011f1c <__gethex+0x210>
 8011f12:	9b05      	ldr	r3, [sp, #20]
 8011f14:	c340      	stmia	r3!, {r6}
 8011f16:	2600      	movs	r6, #0
 8011f18:	9305      	str	r3, [sp, #20]
 8011f1a:	9604      	str	r6, [sp, #16]
 8011f1c:	7820      	ldrb	r0, [r4, #0]
 8011f1e:	f7ff fedf 	bl	8011ce0 <__hexdig_fun>
 8011f22:	230f      	movs	r3, #15
 8011f24:	4018      	ands	r0, r3
 8011f26:	9b04      	ldr	r3, [sp, #16]
 8011f28:	4098      	lsls	r0, r3
 8011f2a:	3304      	adds	r3, #4
 8011f2c:	4306      	orrs	r6, r0
 8011f2e:	9304      	str	r3, [sp, #16]
 8011f30:	e7a5      	b.n	8011e7e <__gethex+0x172>
 8011f32:	9b00      	ldr	r3, [sp, #0]
 8011f34:	42a3      	cmp	r3, r4
 8011f36:	d8e9      	bhi.n	8011f0c <__gethex+0x200>
 8011f38:	2201      	movs	r2, #1
 8011f3a:	0020      	movs	r0, r4
 8011f3c:	4927      	ldr	r1, [pc, #156]	; (8011fdc <__gethex+0x2d0>)
 8011f3e:	f7ff fe05 	bl	8011b4c <strncmp>
 8011f42:	2800      	cmp	r0, #0
 8011f44:	d1e2      	bne.n	8011f0c <__gethex+0x200>
 8011f46:	e79a      	b.n	8011e7e <__gethex+0x172>
 8011f48:	9b00      	ldr	r3, [sp, #0]
 8011f4a:	2400      	movs	r4, #0
 8011f4c:	429e      	cmp	r6, r3
 8011f4e:	dacc      	bge.n	8011eea <__gethex+0x1de>
 8011f50:	1b9e      	subs	r6, r3, r6
 8011f52:	0029      	movs	r1, r5
 8011f54:	0032      	movs	r2, r6
 8011f56:	9803      	ldr	r0, [sp, #12]
 8011f58:	f7fe fac2 	bl	80104e0 <__lshift>
 8011f5c:	0003      	movs	r3, r0
 8011f5e:	3314      	adds	r3, #20
 8011f60:	0005      	movs	r5, r0
 8011f62:	1bbf      	subs	r7, r7, r6
 8011f64:	9302      	str	r3, [sp, #8]
 8011f66:	e7c0      	b.n	8011eea <__gethex+0x1de>
 8011f68:	9b01      	ldr	r3, [sp, #4]
 8011f6a:	685e      	ldr	r6, [r3, #4]
 8011f6c:	42be      	cmp	r6, r7
 8011f6e:	dd70      	ble.n	8012052 <__gethex+0x346>
 8011f70:	9b00      	ldr	r3, [sp, #0]
 8011f72:	1bf6      	subs	r6, r6, r7
 8011f74:	42b3      	cmp	r3, r6
 8011f76:	dc37      	bgt.n	8011fe8 <__gethex+0x2dc>
 8011f78:	9b01      	ldr	r3, [sp, #4]
 8011f7a:	68db      	ldr	r3, [r3, #12]
 8011f7c:	2b02      	cmp	r3, #2
 8011f7e:	d024      	beq.n	8011fca <__gethex+0x2be>
 8011f80:	2b03      	cmp	r3, #3
 8011f82:	d026      	beq.n	8011fd2 <__gethex+0x2c6>
 8011f84:	2b01      	cmp	r3, #1
 8011f86:	d117      	bne.n	8011fb8 <__gethex+0x2ac>
 8011f88:	9b00      	ldr	r3, [sp, #0]
 8011f8a:	42b3      	cmp	r3, r6
 8011f8c:	d114      	bne.n	8011fb8 <__gethex+0x2ac>
 8011f8e:	2b01      	cmp	r3, #1
 8011f90:	d10b      	bne.n	8011faa <__gethex+0x29e>
 8011f92:	9b01      	ldr	r3, [sp, #4]
 8011f94:	9a07      	ldr	r2, [sp, #28]
 8011f96:	685b      	ldr	r3, [r3, #4]
 8011f98:	2662      	movs	r6, #98	; 0x62
 8011f9a:	6013      	str	r3, [r2, #0]
 8011f9c:	2301      	movs	r3, #1
 8011f9e:	9a02      	ldr	r2, [sp, #8]
 8011fa0:	612b      	str	r3, [r5, #16]
 8011fa2:	6013      	str	r3, [r2, #0]
 8011fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011fa6:	601d      	str	r5, [r3, #0]
 8011fa8:	e739      	b.n	8011e1e <__gethex+0x112>
 8011faa:	9900      	ldr	r1, [sp, #0]
 8011fac:	0028      	movs	r0, r5
 8011fae:	3901      	subs	r1, #1
 8011fb0:	f7fe fcca 	bl	8010948 <__any_on>
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	d1ec      	bne.n	8011f92 <__gethex+0x286>
 8011fb8:	0029      	movs	r1, r5
 8011fba:	9803      	ldr	r0, [sp, #12]
 8011fbc:	f7fe f870 	bl	80100a0 <_Bfree>
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011fc4:	2650      	movs	r6, #80	; 0x50
 8011fc6:	6013      	str	r3, [r2, #0]
 8011fc8:	e729      	b.n	8011e1e <__gethex+0x112>
 8011fca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d1f3      	bne.n	8011fb8 <__gethex+0x2ac>
 8011fd0:	e7df      	b.n	8011f92 <__gethex+0x286>
 8011fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d1dc      	bne.n	8011f92 <__gethex+0x286>
 8011fd8:	e7ee      	b.n	8011fb8 <__gethex+0x2ac>
 8011fda:	46c0      	nop			; (mov r8, r8)
 8011fdc:	08013e74 	.word	0x08013e74
 8011fe0:	08013d0a 	.word	0x08013d0a
 8011fe4:	08013f1d 	.word	0x08013f1d
 8011fe8:	1e77      	subs	r7, r6, #1
 8011fea:	2c00      	cmp	r4, #0
 8011fec:	d12f      	bne.n	801204e <__gethex+0x342>
 8011fee:	2f00      	cmp	r7, #0
 8011ff0:	d004      	beq.n	8011ffc <__gethex+0x2f0>
 8011ff2:	0039      	movs	r1, r7
 8011ff4:	0028      	movs	r0, r5
 8011ff6:	f7fe fca7 	bl	8010948 <__any_on>
 8011ffa:	0004      	movs	r4, r0
 8011ffc:	231f      	movs	r3, #31
 8011ffe:	117a      	asrs	r2, r7, #5
 8012000:	401f      	ands	r7, r3
 8012002:	3b1e      	subs	r3, #30
 8012004:	40bb      	lsls	r3, r7
 8012006:	9902      	ldr	r1, [sp, #8]
 8012008:	0092      	lsls	r2, r2, #2
 801200a:	5852      	ldr	r2, [r2, r1]
 801200c:	421a      	tst	r2, r3
 801200e:	d001      	beq.n	8012014 <__gethex+0x308>
 8012010:	2302      	movs	r3, #2
 8012012:	431c      	orrs	r4, r3
 8012014:	9b00      	ldr	r3, [sp, #0]
 8012016:	0031      	movs	r1, r6
 8012018:	1b9b      	subs	r3, r3, r6
 801201a:	2602      	movs	r6, #2
 801201c:	0028      	movs	r0, r5
 801201e:	9300      	str	r3, [sp, #0]
 8012020:	f7ff fe09 	bl	8011c36 <rshift>
 8012024:	9b01      	ldr	r3, [sp, #4]
 8012026:	685f      	ldr	r7, [r3, #4]
 8012028:	2c00      	cmp	r4, #0
 801202a:	d041      	beq.n	80120b0 <__gethex+0x3a4>
 801202c:	9b01      	ldr	r3, [sp, #4]
 801202e:	68db      	ldr	r3, [r3, #12]
 8012030:	2b02      	cmp	r3, #2
 8012032:	d010      	beq.n	8012056 <__gethex+0x34a>
 8012034:	2b03      	cmp	r3, #3
 8012036:	d012      	beq.n	801205e <__gethex+0x352>
 8012038:	2b01      	cmp	r3, #1
 801203a:	d106      	bne.n	801204a <__gethex+0x33e>
 801203c:	07a2      	lsls	r2, r4, #30
 801203e:	d504      	bpl.n	801204a <__gethex+0x33e>
 8012040:	9a02      	ldr	r2, [sp, #8]
 8012042:	6812      	ldr	r2, [r2, #0]
 8012044:	4314      	orrs	r4, r2
 8012046:	421c      	tst	r4, r3
 8012048:	d10c      	bne.n	8012064 <__gethex+0x358>
 801204a:	2310      	movs	r3, #16
 801204c:	e02f      	b.n	80120ae <__gethex+0x3a2>
 801204e:	2401      	movs	r4, #1
 8012050:	e7d4      	b.n	8011ffc <__gethex+0x2f0>
 8012052:	2601      	movs	r6, #1
 8012054:	e7e8      	b.n	8012028 <__gethex+0x31c>
 8012056:	2301      	movs	r3, #1
 8012058:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801205a:	1a9b      	subs	r3, r3, r2
 801205c:	930f      	str	r3, [sp, #60]	; 0x3c
 801205e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012060:	2b00      	cmp	r3, #0
 8012062:	d0f2      	beq.n	801204a <__gethex+0x33e>
 8012064:	692b      	ldr	r3, [r5, #16]
 8012066:	2000      	movs	r0, #0
 8012068:	9302      	str	r3, [sp, #8]
 801206a:	009b      	lsls	r3, r3, #2
 801206c:	9304      	str	r3, [sp, #16]
 801206e:	002b      	movs	r3, r5
 8012070:	9a04      	ldr	r2, [sp, #16]
 8012072:	3314      	adds	r3, #20
 8012074:	1899      	adds	r1, r3, r2
 8012076:	681a      	ldr	r2, [r3, #0]
 8012078:	1c54      	adds	r4, r2, #1
 801207a:	d01e      	beq.n	80120ba <__gethex+0x3ae>
 801207c:	3201      	adds	r2, #1
 801207e:	601a      	str	r2, [r3, #0]
 8012080:	002b      	movs	r3, r5
 8012082:	3314      	adds	r3, #20
 8012084:	2e02      	cmp	r6, #2
 8012086:	d141      	bne.n	801210c <__gethex+0x400>
 8012088:	9a01      	ldr	r2, [sp, #4]
 801208a:	9900      	ldr	r1, [sp, #0]
 801208c:	6812      	ldr	r2, [r2, #0]
 801208e:	3a01      	subs	r2, #1
 8012090:	428a      	cmp	r2, r1
 8012092:	d10b      	bne.n	80120ac <__gethex+0x3a0>
 8012094:	221f      	movs	r2, #31
 8012096:	9800      	ldr	r0, [sp, #0]
 8012098:	1149      	asrs	r1, r1, #5
 801209a:	4002      	ands	r2, r0
 801209c:	2001      	movs	r0, #1
 801209e:	0004      	movs	r4, r0
 80120a0:	4094      	lsls	r4, r2
 80120a2:	0089      	lsls	r1, r1, #2
 80120a4:	58cb      	ldr	r3, [r1, r3]
 80120a6:	4223      	tst	r3, r4
 80120a8:	d000      	beq.n	80120ac <__gethex+0x3a0>
 80120aa:	2601      	movs	r6, #1
 80120ac:	2320      	movs	r3, #32
 80120ae:	431e      	orrs	r6, r3
 80120b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80120b2:	601d      	str	r5, [r3, #0]
 80120b4:	9b07      	ldr	r3, [sp, #28]
 80120b6:	601f      	str	r7, [r3, #0]
 80120b8:	e6b1      	b.n	8011e1e <__gethex+0x112>
 80120ba:	c301      	stmia	r3!, {r0}
 80120bc:	4299      	cmp	r1, r3
 80120be:	d8da      	bhi.n	8012076 <__gethex+0x36a>
 80120c0:	68ab      	ldr	r3, [r5, #8]
 80120c2:	9a02      	ldr	r2, [sp, #8]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	db18      	blt.n	80120fa <__gethex+0x3ee>
 80120c8:	6869      	ldr	r1, [r5, #4]
 80120ca:	9803      	ldr	r0, [sp, #12]
 80120cc:	3101      	adds	r1, #1
 80120ce:	f7fd ffa3 	bl	8010018 <_Balloc>
 80120d2:	1e04      	subs	r4, r0, #0
 80120d4:	d104      	bne.n	80120e0 <__gethex+0x3d4>
 80120d6:	0022      	movs	r2, r4
 80120d8:	2184      	movs	r1, #132	; 0x84
 80120da:	4b1c      	ldr	r3, [pc, #112]	; (801214c <__gethex+0x440>)
 80120dc:	481c      	ldr	r0, [pc, #112]	; (8012150 <__gethex+0x444>)
 80120de:	e6c2      	b.n	8011e66 <__gethex+0x15a>
 80120e0:	0029      	movs	r1, r5
 80120e2:	692a      	ldr	r2, [r5, #16]
 80120e4:	310c      	adds	r1, #12
 80120e6:	3202      	adds	r2, #2
 80120e8:	0092      	lsls	r2, r2, #2
 80120ea:	300c      	adds	r0, #12
 80120ec:	f7fc ffe0 	bl	800f0b0 <memcpy>
 80120f0:	0029      	movs	r1, r5
 80120f2:	9803      	ldr	r0, [sp, #12]
 80120f4:	f7fd ffd4 	bl	80100a0 <_Bfree>
 80120f8:	0025      	movs	r5, r4
 80120fa:	692b      	ldr	r3, [r5, #16]
 80120fc:	1c5a      	adds	r2, r3, #1
 80120fe:	612a      	str	r2, [r5, #16]
 8012100:	2201      	movs	r2, #1
 8012102:	3304      	adds	r3, #4
 8012104:	009b      	lsls	r3, r3, #2
 8012106:	18eb      	adds	r3, r5, r3
 8012108:	605a      	str	r2, [r3, #4]
 801210a:	e7b9      	b.n	8012080 <__gethex+0x374>
 801210c:	692a      	ldr	r2, [r5, #16]
 801210e:	9902      	ldr	r1, [sp, #8]
 8012110:	428a      	cmp	r2, r1
 8012112:	dd09      	ble.n	8012128 <__gethex+0x41c>
 8012114:	2101      	movs	r1, #1
 8012116:	0028      	movs	r0, r5
 8012118:	f7ff fd8d 	bl	8011c36 <rshift>
 801211c:	9b01      	ldr	r3, [sp, #4]
 801211e:	3701      	adds	r7, #1
 8012120:	689b      	ldr	r3, [r3, #8]
 8012122:	42bb      	cmp	r3, r7
 8012124:	dac1      	bge.n	80120aa <__gethex+0x39e>
 8012126:	e6e4      	b.n	8011ef2 <__gethex+0x1e6>
 8012128:	221f      	movs	r2, #31
 801212a:	9c00      	ldr	r4, [sp, #0]
 801212c:	9900      	ldr	r1, [sp, #0]
 801212e:	2601      	movs	r6, #1
 8012130:	4014      	ands	r4, r2
 8012132:	4211      	tst	r1, r2
 8012134:	d0ba      	beq.n	80120ac <__gethex+0x3a0>
 8012136:	9a04      	ldr	r2, [sp, #16]
 8012138:	189b      	adds	r3, r3, r2
 801213a:	3b04      	subs	r3, #4
 801213c:	6818      	ldr	r0, [r3, #0]
 801213e:	f7fe f863 	bl	8010208 <__hi0bits>
 8012142:	2320      	movs	r3, #32
 8012144:	1b1b      	subs	r3, r3, r4
 8012146:	4298      	cmp	r0, r3
 8012148:	dbe4      	blt.n	8012114 <__gethex+0x408>
 801214a:	e7af      	b.n	80120ac <__gethex+0x3a0>
 801214c:	08013d0a 	.word	0x08013d0a
 8012150:	08013f1d 	.word	0x08013f1d

08012154 <L_shift>:
 8012154:	2308      	movs	r3, #8
 8012156:	b570      	push	{r4, r5, r6, lr}
 8012158:	2520      	movs	r5, #32
 801215a:	1a9a      	subs	r2, r3, r2
 801215c:	0092      	lsls	r2, r2, #2
 801215e:	1aad      	subs	r5, r5, r2
 8012160:	6843      	ldr	r3, [r0, #4]
 8012162:	6804      	ldr	r4, [r0, #0]
 8012164:	001e      	movs	r6, r3
 8012166:	40ae      	lsls	r6, r5
 8012168:	40d3      	lsrs	r3, r2
 801216a:	4334      	orrs	r4, r6
 801216c:	6004      	str	r4, [r0, #0]
 801216e:	6043      	str	r3, [r0, #4]
 8012170:	3004      	adds	r0, #4
 8012172:	4288      	cmp	r0, r1
 8012174:	d3f4      	bcc.n	8012160 <L_shift+0xc>
 8012176:	bd70      	pop	{r4, r5, r6, pc}

08012178 <__match>:
 8012178:	b530      	push	{r4, r5, lr}
 801217a:	6803      	ldr	r3, [r0, #0]
 801217c:	780c      	ldrb	r4, [r1, #0]
 801217e:	3301      	adds	r3, #1
 8012180:	2c00      	cmp	r4, #0
 8012182:	d102      	bne.n	801218a <__match+0x12>
 8012184:	6003      	str	r3, [r0, #0]
 8012186:	2001      	movs	r0, #1
 8012188:	bd30      	pop	{r4, r5, pc}
 801218a:	781a      	ldrb	r2, [r3, #0]
 801218c:	0015      	movs	r5, r2
 801218e:	3d41      	subs	r5, #65	; 0x41
 8012190:	2d19      	cmp	r5, #25
 8012192:	d800      	bhi.n	8012196 <__match+0x1e>
 8012194:	3220      	adds	r2, #32
 8012196:	3101      	adds	r1, #1
 8012198:	42a2      	cmp	r2, r4
 801219a:	d0ef      	beq.n	801217c <__match+0x4>
 801219c:	2000      	movs	r0, #0
 801219e:	e7f3      	b.n	8012188 <__match+0x10>

080121a0 <__hexnan>:
 80121a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121a2:	680b      	ldr	r3, [r1, #0]
 80121a4:	b08b      	sub	sp, #44	; 0x2c
 80121a6:	9201      	str	r2, [sp, #4]
 80121a8:	9901      	ldr	r1, [sp, #4]
 80121aa:	115a      	asrs	r2, r3, #5
 80121ac:	0092      	lsls	r2, r2, #2
 80121ae:	188a      	adds	r2, r1, r2
 80121b0:	9202      	str	r2, [sp, #8]
 80121b2:	0019      	movs	r1, r3
 80121b4:	221f      	movs	r2, #31
 80121b6:	4011      	ands	r1, r2
 80121b8:	9008      	str	r0, [sp, #32]
 80121ba:	9106      	str	r1, [sp, #24]
 80121bc:	4213      	tst	r3, r2
 80121be:	d002      	beq.n	80121c6 <__hexnan+0x26>
 80121c0:	9b02      	ldr	r3, [sp, #8]
 80121c2:	3304      	adds	r3, #4
 80121c4:	9302      	str	r3, [sp, #8]
 80121c6:	9b02      	ldr	r3, [sp, #8]
 80121c8:	2500      	movs	r5, #0
 80121ca:	1f1f      	subs	r7, r3, #4
 80121cc:	003e      	movs	r6, r7
 80121ce:	003c      	movs	r4, r7
 80121d0:	9b08      	ldr	r3, [sp, #32]
 80121d2:	603d      	str	r5, [r7, #0]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	9507      	str	r5, [sp, #28]
 80121d8:	9305      	str	r3, [sp, #20]
 80121da:	9503      	str	r5, [sp, #12]
 80121dc:	9b05      	ldr	r3, [sp, #20]
 80121de:	3301      	adds	r3, #1
 80121e0:	9309      	str	r3, [sp, #36]	; 0x24
 80121e2:	9b05      	ldr	r3, [sp, #20]
 80121e4:	785b      	ldrb	r3, [r3, #1]
 80121e6:	9304      	str	r3, [sp, #16]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d028      	beq.n	801223e <__hexnan+0x9e>
 80121ec:	9804      	ldr	r0, [sp, #16]
 80121ee:	f7ff fd77 	bl	8011ce0 <__hexdig_fun>
 80121f2:	2800      	cmp	r0, #0
 80121f4:	d154      	bne.n	80122a0 <__hexnan+0x100>
 80121f6:	9b04      	ldr	r3, [sp, #16]
 80121f8:	2b20      	cmp	r3, #32
 80121fa:	d819      	bhi.n	8012230 <__hexnan+0x90>
 80121fc:	9b03      	ldr	r3, [sp, #12]
 80121fe:	9a07      	ldr	r2, [sp, #28]
 8012200:	4293      	cmp	r3, r2
 8012202:	dd12      	ble.n	801222a <__hexnan+0x8a>
 8012204:	42b4      	cmp	r4, r6
 8012206:	d206      	bcs.n	8012216 <__hexnan+0x76>
 8012208:	2d07      	cmp	r5, #7
 801220a:	dc04      	bgt.n	8012216 <__hexnan+0x76>
 801220c:	002a      	movs	r2, r5
 801220e:	0031      	movs	r1, r6
 8012210:	0020      	movs	r0, r4
 8012212:	f7ff ff9f 	bl	8012154 <L_shift>
 8012216:	9b01      	ldr	r3, [sp, #4]
 8012218:	2508      	movs	r5, #8
 801221a:	429c      	cmp	r4, r3
 801221c:	d905      	bls.n	801222a <__hexnan+0x8a>
 801221e:	1f26      	subs	r6, r4, #4
 8012220:	2500      	movs	r5, #0
 8012222:	0034      	movs	r4, r6
 8012224:	9b03      	ldr	r3, [sp, #12]
 8012226:	6035      	str	r5, [r6, #0]
 8012228:	9307      	str	r3, [sp, #28]
 801222a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801222c:	9305      	str	r3, [sp, #20]
 801222e:	e7d5      	b.n	80121dc <__hexnan+0x3c>
 8012230:	9b04      	ldr	r3, [sp, #16]
 8012232:	2b29      	cmp	r3, #41	; 0x29
 8012234:	d159      	bne.n	80122ea <__hexnan+0x14a>
 8012236:	9b05      	ldr	r3, [sp, #20]
 8012238:	9a08      	ldr	r2, [sp, #32]
 801223a:	3302      	adds	r3, #2
 801223c:	6013      	str	r3, [r2, #0]
 801223e:	9b03      	ldr	r3, [sp, #12]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d052      	beq.n	80122ea <__hexnan+0x14a>
 8012244:	42b4      	cmp	r4, r6
 8012246:	d206      	bcs.n	8012256 <__hexnan+0xb6>
 8012248:	2d07      	cmp	r5, #7
 801224a:	dc04      	bgt.n	8012256 <__hexnan+0xb6>
 801224c:	002a      	movs	r2, r5
 801224e:	0031      	movs	r1, r6
 8012250:	0020      	movs	r0, r4
 8012252:	f7ff ff7f 	bl	8012154 <L_shift>
 8012256:	9b01      	ldr	r3, [sp, #4]
 8012258:	429c      	cmp	r4, r3
 801225a:	d935      	bls.n	80122c8 <__hexnan+0x128>
 801225c:	001a      	movs	r2, r3
 801225e:	0023      	movs	r3, r4
 8012260:	cb02      	ldmia	r3!, {r1}
 8012262:	c202      	stmia	r2!, {r1}
 8012264:	429f      	cmp	r7, r3
 8012266:	d2fb      	bcs.n	8012260 <__hexnan+0xc0>
 8012268:	9b02      	ldr	r3, [sp, #8]
 801226a:	1c62      	adds	r2, r4, #1
 801226c:	1ed9      	subs	r1, r3, #3
 801226e:	2304      	movs	r3, #4
 8012270:	4291      	cmp	r1, r2
 8012272:	d305      	bcc.n	8012280 <__hexnan+0xe0>
 8012274:	9b02      	ldr	r3, [sp, #8]
 8012276:	3b04      	subs	r3, #4
 8012278:	1b1b      	subs	r3, r3, r4
 801227a:	089b      	lsrs	r3, r3, #2
 801227c:	3301      	adds	r3, #1
 801227e:	009b      	lsls	r3, r3, #2
 8012280:	9a01      	ldr	r2, [sp, #4]
 8012282:	18d3      	adds	r3, r2, r3
 8012284:	2200      	movs	r2, #0
 8012286:	c304      	stmia	r3!, {r2}
 8012288:	429f      	cmp	r7, r3
 801228a:	d2fc      	bcs.n	8012286 <__hexnan+0xe6>
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d104      	bne.n	801229c <__hexnan+0xfc>
 8012292:	9b01      	ldr	r3, [sp, #4]
 8012294:	429f      	cmp	r7, r3
 8012296:	d126      	bne.n	80122e6 <__hexnan+0x146>
 8012298:	2301      	movs	r3, #1
 801229a:	603b      	str	r3, [r7, #0]
 801229c:	2005      	movs	r0, #5
 801229e:	e025      	b.n	80122ec <__hexnan+0x14c>
 80122a0:	9b03      	ldr	r3, [sp, #12]
 80122a2:	3501      	adds	r5, #1
 80122a4:	3301      	adds	r3, #1
 80122a6:	9303      	str	r3, [sp, #12]
 80122a8:	2d08      	cmp	r5, #8
 80122aa:	dd06      	ble.n	80122ba <__hexnan+0x11a>
 80122ac:	9b01      	ldr	r3, [sp, #4]
 80122ae:	429c      	cmp	r4, r3
 80122b0:	d9bb      	bls.n	801222a <__hexnan+0x8a>
 80122b2:	2300      	movs	r3, #0
 80122b4:	2501      	movs	r5, #1
 80122b6:	3c04      	subs	r4, #4
 80122b8:	6023      	str	r3, [r4, #0]
 80122ba:	220f      	movs	r2, #15
 80122bc:	6823      	ldr	r3, [r4, #0]
 80122be:	4010      	ands	r0, r2
 80122c0:	011b      	lsls	r3, r3, #4
 80122c2:	4303      	orrs	r3, r0
 80122c4:	6023      	str	r3, [r4, #0]
 80122c6:	e7b0      	b.n	801222a <__hexnan+0x8a>
 80122c8:	9b06      	ldr	r3, [sp, #24]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d0de      	beq.n	801228c <__hexnan+0xec>
 80122ce:	2320      	movs	r3, #32
 80122d0:	9a06      	ldr	r2, [sp, #24]
 80122d2:	9902      	ldr	r1, [sp, #8]
 80122d4:	1a9b      	subs	r3, r3, r2
 80122d6:	2201      	movs	r2, #1
 80122d8:	4252      	negs	r2, r2
 80122da:	40da      	lsrs	r2, r3
 80122dc:	3904      	subs	r1, #4
 80122de:	680b      	ldr	r3, [r1, #0]
 80122e0:	4013      	ands	r3, r2
 80122e2:	600b      	str	r3, [r1, #0]
 80122e4:	e7d2      	b.n	801228c <__hexnan+0xec>
 80122e6:	3f04      	subs	r7, #4
 80122e8:	e7d0      	b.n	801228c <__hexnan+0xec>
 80122ea:	2004      	movs	r0, #4
 80122ec:	b00b      	add	sp, #44	; 0x2c
 80122ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080122f0 <__ascii_mbtowc>:
 80122f0:	b082      	sub	sp, #8
 80122f2:	2900      	cmp	r1, #0
 80122f4:	d100      	bne.n	80122f8 <__ascii_mbtowc+0x8>
 80122f6:	a901      	add	r1, sp, #4
 80122f8:	1e10      	subs	r0, r2, #0
 80122fa:	d006      	beq.n	801230a <__ascii_mbtowc+0x1a>
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d006      	beq.n	801230e <__ascii_mbtowc+0x1e>
 8012300:	7813      	ldrb	r3, [r2, #0]
 8012302:	600b      	str	r3, [r1, #0]
 8012304:	7810      	ldrb	r0, [r2, #0]
 8012306:	1e43      	subs	r3, r0, #1
 8012308:	4198      	sbcs	r0, r3
 801230a:	b002      	add	sp, #8
 801230c:	4770      	bx	lr
 801230e:	2002      	movs	r0, #2
 8012310:	4240      	negs	r0, r0
 8012312:	e7fa      	b.n	801230a <__ascii_mbtowc+0x1a>

08012314 <_realloc_r>:
 8012314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012316:	0007      	movs	r7, r0
 8012318:	000e      	movs	r6, r1
 801231a:	0014      	movs	r4, r2
 801231c:	2900      	cmp	r1, #0
 801231e:	d105      	bne.n	801232c <_realloc_r+0x18>
 8012320:	0011      	movs	r1, r2
 8012322:	f7fd fde7 	bl	800fef4 <_malloc_r>
 8012326:	0005      	movs	r5, r0
 8012328:	0028      	movs	r0, r5
 801232a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801232c:	2a00      	cmp	r2, #0
 801232e:	d103      	bne.n	8012338 <_realloc_r+0x24>
 8012330:	f7fd fd6a 	bl	800fe08 <_free_r>
 8012334:	0025      	movs	r5, r4
 8012336:	e7f7      	b.n	8012328 <_realloc_r+0x14>
 8012338:	f000 f83f 	bl	80123ba <_malloc_usable_size_r>
 801233c:	9001      	str	r0, [sp, #4]
 801233e:	4284      	cmp	r4, r0
 8012340:	d803      	bhi.n	801234a <_realloc_r+0x36>
 8012342:	0035      	movs	r5, r6
 8012344:	0843      	lsrs	r3, r0, #1
 8012346:	42a3      	cmp	r3, r4
 8012348:	d3ee      	bcc.n	8012328 <_realloc_r+0x14>
 801234a:	0021      	movs	r1, r4
 801234c:	0038      	movs	r0, r7
 801234e:	f7fd fdd1 	bl	800fef4 <_malloc_r>
 8012352:	1e05      	subs	r5, r0, #0
 8012354:	d0e8      	beq.n	8012328 <_realloc_r+0x14>
 8012356:	9b01      	ldr	r3, [sp, #4]
 8012358:	0022      	movs	r2, r4
 801235a:	429c      	cmp	r4, r3
 801235c:	d900      	bls.n	8012360 <_realloc_r+0x4c>
 801235e:	001a      	movs	r2, r3
 8012360:	0031      	movs	r1, r6
 8012362:	0028      	movs	r0, r5
 8012364:	f7fc fea4 	bl	800f0b0 <memcpy>
 8012368:	0031      	movs	r1, r6
 801236a:	0038      	movs	r0, r7
 801236c:	f7fd fd4c 	bl	800fe08 <_free_r>
 8012370:	e7da      	b.n	8012328 <_realloc_r+0x14>

08012372 <__ascii_wctomb>:
 8012372:	0003      	movs	r3, r0
 8012374:	1e08      	subs	r0, r1, #0
 8012376:	d005      	beq.n	8012384 <__ascii_wctomb+0x12>
 8012378:	2aff      	cmp	r2, #255	; 0xff
 801237a:	d904      	bls.n	8012386 <__ascii_wctomb+0x14>
 801237c:	228a      	movs	r2, #138	; 0x8a
 801237e:	2001      	movs	r0, #1
 8012380:	601a      	str	r2, [r3, #0]
 8012382:	4240      	negs	r0, r0
 8012384:	4770      	bx	lr
 8012386:	2001      	movs	r0, #1
 8012388:	700a      	strb	r2, [r1, #0]
 801238a:	e7fb      	b.n	8012384 <__ascii_wctomb+0x12>

0801238c <fiprintf>:
 801238c:	b40e      	push	{r1, r2, r3}
 801238e:	b517      	push	{r0, r1, r2, r4, lr}
 8012390:	4c05      	ldr	r4, [pc, #20]	; (80123a8 <fiprintf+0x1c>)
 8012392:	ab05      	add	r3, sp, #20
 8012394:	cb04      	ldmia	r3!, {r2}
 8012396:	0001      	movs	r1, r0
 8012398:	6820      	ldr	r0, [r4, #0]
 801239a:	9301      	str	r3, [sp, #4]
 801239c:	f000 f83c 	bl	8012418 <_vfiprintf_r>
 80123a0:	bc1e      	pop	{r1, r2, r3, r4}
 80123a2:	bc08      	pop	{r3}
 80123a4:	b003      	add	sp, #12
 80123a6:	4718      	bx	r3
 80123a8:	20000084 	.word	0x20000084

080123ac <abort>:
 80123ac:	2006      	movs	r0, #6
 80123ae:	b510      	push	{r4, lr}
 80123b0:	f000 fa1e 	bl	80127f0 <raise>
 80123b4:	2001      	movs	r0, #1
 80123b6:	f7f4 f8c3 	bl	8006540 <_exit>

080123ba <_malloc_usable_size_r>:
 80123ba:	1f0b      	subs	r3, r1, #4
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	1f18      	subs	r0, r3, #4
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	da01      	bge.n	80123c8 <_malloc_usable_size_r+0xe>
 80123c4:	580b      	ldr	r3, [r1, r0]
 80123c6:	18c0      	adds	r0, r0, r3
 80123c8:	4770      	bx	lr

080123ca <__sfputc_r>:
 80123ca:	6893      	ldr	r3, [r2, #8]
 80123cc:	b510      	push	{r4, lr}
 80123ce:	3b01      	subs	r3, #1
 80123d0:	6093      	str	r3, [r2, #8]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	da04      	bge.n	80123e0 <__sfputc_r+0x16>
 80123d6:	6994      	ldr	r4, [r2, #24]
 80123d8:	42a3      	cmp	r3, r4
 80123da:	db07      	blt.n	80123ec <__sfputc_r+0x22>
 80123dc:	290a      	cmp	r1, #10
 80123de:	d005      	beq.n	80123ec <__sfputc_r+0x22>
 80123e0:	6813      	ldr	r3, [r2, #0]
 80123e2:	1c58      	adds	r0, r3, #1
 80123e4:	6010      	str	r0, [r2, #0]
 80123e6:	7019      	strb	r1, [r3, #0]
 80123e8:	0008      	movs	r0, r1
 80123ea:	bd10      	pop	{r4, pc}
 80123ec:	f000 f930 	bl	8012650 <__swbuf_r>
 80123f0:	0001      	movs	r1, r0
 80123f2:	e7f9      	b.n	80123e8 <__sfputc_r+0x1e>

080123f4 <__sfputs_r>:
 80123f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123f6:	0006      	movs	r6, r0
 80123f8:	000f      	movs	r7, r1
 80123fa:	0014      	movs	r4, r2
 80123fc:	18d5      	adds	r5, r2, r3
 80123fe:	42ac      	cmp	r4, r5
 8012400:	d101      	bne.n	8012406 <__sfputs_r+0x12>
 8012402:	2000      	movs	r0, #0
 8012404:	e007      	b.n	8012416 <__sfputs_r+0x22>
 8012406:	7821      	ldrb	r1, [r4, #0]
 8012408:	003a      	movs	r2, r7
 801240a:	0030      	movs	r0, r6
 801240c:	f7ff ffdd 	bl	80123ca <__sfputc_r>
 8012410:	3401      	adds	r4, #1
 8012412:	1c43      	adds	r3, r0, #1
 8012414:	d1f3      	bne.n	80123fe <__sfputs_r+0xa>
 8012416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012418 <_vfiprintf_r>:
 8012418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801241a:	b0a1      	sub	sp, #132	; 0x84
 801241c:	000f      	movs	r7, r1
 801241e:	0015      	movs	r5, r2
 8012420:	001e      	movs	r6, r3
 8012422:	9003      	str	r0, [sp, #12]
 8012424:	2800      	cmp	r0, #0
 8012426:	d004      	beq.n	8012432 <_vfiprintf_r+0x1a>
 8012428:	6a03      	ldr	r3, [r0, #32]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d101      	bne.n	8012432 <_vfiprintf_r+0x1a>
 801242e:	f7fc fcd9 	bl	800ede4 <__sinit>
 8012432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012434:	07db      	lsls	r3, r3, #31
 8012436:	d405      	bmi.n	8012444 <_vfiprintf_r+0x2c>
 8012438:	89bb      	ldrh	r3, [r7, #12]
 801243a:	059b      	lsls	r3, r3, #22
 801243c:	d402      	bmi.n	8012444 <_vfiprintf_r+0x2c>
 801243e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012440:	f7fc fe29 	bl	800f096 <__retarget_lock_acquire_recursive>
 8012444:	89bb      	ldrh	r3, [r7, #12]
 8012446:	071b      	lsls	r3, r3, #28
 8012448:	d502      	bpl.n	8012450 <_vfiprintf_r+0x38>
 801244a:	693b      	ldr	r3, [r7, #16]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d113      	bne.n	8012478 <_vfiprintf_r+0x60>
 8012450:	0039      	movs	r1, r7
 8012452:	9803      	ldr	r0, [sp, #12]
 8012454:	f000 f93e 	bl	80126d4 <__swsetup_r>
 8012458:	2800      	cmp	r0, #0
 801245a:	d00d      	beq.n	8012478 <_vfiprintf_r+0x60>
 801245c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801245e:	07db      	lsls	r3, r3, #31
 8012460:	d503      	bpl.n	801246a <_vfiprintf_r+0x52>
 8012462:	2001      	movs	r0, #1
 8012464:	4240      	negs	r0, r0
 8012466:	b021      	add	sp, #132	; 0x84
 8012468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801246a:	89bb      	ldrh	r3, [r7, #12]
 801246c:	059b      	lsls	r3, r3, #22
 801246e:	d4f8      	bmi.n	8012462 <_vfiprintf_r+0x4a>
 8012470:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8012472:	f7fc fe11 	bl	800f098 <__retarget_lock_release_recursive>
 8012476:	e7f4      	b.n	8012462 <_vfiprintf_r+0x4a>
 8012478:	2300      	movs	r3, #0
 801247a:	ac08      	add	r4, sp, #32
 801247c:	6163      	str	r3, [r4, #20]
 801247e:	3320      	adds	r3, #32
 8012480:	7663      	strb	r3, [r4, #25]
 8012482:	3310      	adds	r3, #16
 8012484:	76a3      	strb	r3, [r4, #26]
 8012486:	9607      	str	r6, [sp, #28]
 8012488:	002e      	movs	r6, r5
 801248a:	7833      	ldrb	r3, [r6, #0]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d001      	beq.n	8012494 <_vfiprintf_r+0x7c>
 8012490:	2b25      	cmp	r3, #37	; 0x25
 8012492:	d148      	bne.n	8012526 <_vfiprintf_r+0x10e>
 8012494:	1b73      	subs	r3, r6, r5
 8012496:	9305      	str	r3, [sp, #20]
 8012498:	42ae      	cmp	r6, r5
 801249a:	d00b      	beq.n	80124b4 <_vfiprintf_r+0x9c>
 801249c:	002a      	movs	r2, r5
 801249e:	0039      	movs	r1, r7
 80124a0:	9803      	ldr	r0, [sp, #12]
 80124a2:	f7ff ffa7 	bl	80123f4 <__sfputs_r>
 80124a6:	3001      	adds	r0, #1
 80124a8:	d100      	bne.n	80124ac <_vfiprintf_r+0x94>
 80124aa:	e0af      	b.n	801260c <_vfiprintf_r+0x1f4>
 80124ac:	6963      	ldr	r3, [r4, #20]
 80124ae:	9a05      	ldr	r2, [sp, #20]
 80124b0:	189b      	adds	r3, r3, r2
 80124b2:	6163      	str	r3, [r4, #20]
 80124b4:	7833      	ldrb	r3, [r6, #0]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d100      	bne.n	80124bc <_vfiprintf_r+0xa4>
 80124ba:	e0a7      	b.n	801260c <_vfiprintf_r+0x1f4>
 80124bc:	2201      	movs	r2, #1
 80124be:	2300      	movs	r3, #0
 80124c0:	4252      	negs	r2, r2
 80124c2:	6062      	str	r2, [r4, #4]
 80124c4:	a904      	add	r1, sp, #16
 80124c6:	3254      	adds	r2, #84	; 0x54
 80124c8:	1852      	adds	r2, r2, r1
 80124ca:	1c75      	adds	r5, r6, #1
 80124cc:	6023      	str	r3, [r4, #0]
 80124ce:	60e3      	str	r3, [r4, #12]
 80124d0:	60a3      	str	r3, [r4, #8]
 80124d2:	7013      	strb	r3, [r2, #0]
 80124d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80124d6:	4b59      	ldr	r3, [pc, #356]	; (801263c <_vfiprintf_r+0x224>)
 80124d8:	2205      	movs	r2, #5
 80124da:	0018      	movs	r0, r3
 80124dc:	7829      	ldrb	r1, [r5, #0]
 80124de:	9305      	str	r3, [sp, #20]
 80124e0:	f7fc fddb 	bl	800f09a <memchr>
 80124e4:	1c6e      	adds	r6, r5, #1
 80124e6:	2800      	cmp	r0, #0
 80124e8:	d11f      	bne.n	801252a <_vfiprintf_r+0x112>
 80124ea:	6822      	ldr	r2, [r4, #0]
 80124ec:	06d3      	lsls	r3, r2, #27
 80124ee:	d504      	bpl.n	80124fa <_vfiprintf_r+0xe2>
 80124f0:	2353      	movs	r3, #83	; 0x53
 80124f2:	a904      	add	r1, sp, #16
 80124f4:	185b      	adds	r3, r3, r1
 80124f6:	2120      	movs	r1, #32
 80124f8:	7019      	strb	r1, [r3, #0]
 80124fa:	0713      	lsls	r3, r2, #28
 80124fc:	d504      	bpl.n	8012508 <_vfiprintf_r+0xf0>
 80124fe:	2353      	movs	r3, #83	; 0x53
 8012500:	a904      	add	r1, sp, #16
 8012502:	185b      	adds	r3, r3, r1
 8012504:	212b      	movs	r1, #43	; 0x2b
 8012506:	7019      	strb	r1, [r3, #0]
 8012508:	782b      	ldrb	r3, [r5, #0]
 801250a:	2b2a      	cmp	r3, #42	; 0x2a
 801250c:	d016      	beq.n	801253c <_vfiprintf_r+0x124>
 801250e:	002e      	movs	r6, r5
 8012510:	2100      	movs	r1, #0
 8012512:	200a      	movs	r0, #10
 8012514:	68e3      	ldr	r3, [r4, #12]
 8012516:	7832      	ldrb	r2, [r6, #0]
 8012518:	1c75      	adds	r5, r6, #1
 801251a:	3a30      	subs	r2, #48	; 0x30
 801251c:	2a09      	cmp	r2, #9
 801251e:	d94e      	bls.n	80125be <_vfiprintf_r+0x1a6>
 8012520:	2900      	cmp	r1, #0
 8012522:	d111      	bne.n	8012548 <_vfiprintf_r+0x130>
 8012524:	e017      	b.n	8012556 <_vfiprintf_r+0x13e>
 8012526:	3601      	adds	r6, #1
 8012528:	e7af      	b.n	801248a <_vfiprintf_r+0x72>
 801252a:	9b05      	ldr	r3, [sp, #20]
 801252c:	6822      	ldr	r2, [r4, #0]
 801252e:	1ac0      	subs	r0, r0, r3
 8012530:	2301      	movs	r3, #1
 8012532:	4083      	lsls	r3, r0
 8012534:	4313      	orrs	r3, r2
 8012536:	0035      	movs	r5, r6
 8012538:	6023      	str	r3, [r4, #0]
 801253a:	e7cc      	b.n	80124d6 <_vfiprintf_r+0xbe>
 801253c:	9b07      	ldr	r3, [sp, #28]
 801253e:	1d19      	adds	r1, r3, #4
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	9107      	str	r1, [sp, #28]
 8012544:	2b00      	cmp	r3, #0
 8012546:	db01      	blt.n	801254c <_vfiprintf_r+0x134>
 8012548:	930b      	str	r3, [sp, #44]	; 0x2c
 801254a:	e004      	b.n	8012556 <_vfiprintf_r+0x13e>
 801254c:	425b      	negs	r3, r3
 801254e:	60e3      	str	r3, [r4, #12]
 8012550:	2302      	movs	r3, #2
 8012552:	4313      	orrs	r3, r2
 8012554:	6023      	str	r3, [r4, #0]
 8012556:	7833      	ldrb	r3, [r6, #0]
 8012558:	2b2e      	cmp	r3, #46	; 0x2e
 801255a:	d10a      	bne.n	8012572 <_vfiprintf_r+0x15a>
 801255c:	7873      	ldrb	r3, [r6, #1]
 801255e:	2b2a      	cmp	r3, #42	; 0x2a
 8012560:	d135      	bne.n	80125ce <_vfiprintf_r+0x1b6>
 8012562:	9b07      	ldr	r3, [sp, #28]
 8012564:	3602      	adds	r6, #2
 8012566:	1d1a      	adds	r2, r3, #4
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	9207      	str	r2, [sp, #28]
 801256c:	2b00      	cmp	r3, #0
 801256e:	db2b      	blt.n	80125c8 <_vfiprintf_r+0x1b0>
 8012570:	9309      	str	r3, [sp, #36]	; 0x24
 8012572:	4d33      	ldr	r5, [pc, #204]	; (8012640 <_vfiprintf_r+0x228>)
 8012574:	2203      	movs	r2, #3
 8012576:	0028      	movs	r0, r5
 8012578:	7831      	ldrb	r1, [r6, #0]
 801257a:	f7fc fd8e 	bl	800f09a <memchr>
 801257e:	2800      	cmp	r0, #0
 8012580:	d006      	beq.n	8012590 <_vfiprintf_r+0x178>
 8012582:	2340      	movs	r3, #64	; 0x40
 8012584:	1b40      	subs	r0, r0, r5
 8012586:	4083      	lsls	r3, r0
 8012588:	6822      	ldr	r2, [r4, #0]
 801258a:	3601      	adds	r6, #1
 801258c:	4313      	orrs	r3, r2
 801258e:	6023      	str	r3, [r4, #0]
 8012590:	7831      	ldrb	r1, [r6, #0]
 8012592:	2206      	movs	r2, #6
 8012594:	482b      	ldr	r0, [pc, #172]	; (8012644 <_vfiprintf_r+0x22c>)
 8012596:	1c75      	adds	r5, r6, #1
 8012598:	7621      	strb	r1, [r4, #24]
 801259a:	f7fc fd7e 	bl	800f09a <memchr>
 801259e:	2800      	cmp	r0, #0
 80125a0:	d043      	beq.n	801262a <_vfiprintf_r+0x212>
 80125a2:	4b29      	ldr	r3, [pc, #164]	; (8012648 <_vfiprintf_r+0x230>)
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d125      	bne.n	80125f4 <_vfiprintf_r+0x1dc>
 80125a8:	2207      	movs	r2, #7
 80125aa:	9b07      	ldr	r3, [sp, #28]
 80125ac:	3307      	adds	r3, #7
 80125ae:	4393      	bics	r3, r2
 80125b0:	3308      	adds	r3, #8
 80125b2:	9307      	str	r3, [sp, #28]
 80125b4:	6963      	ldr	r3, [r4, #20]
 80125b6:	9a04      	ldr	r2, [sp, #16]
 80125b8:	189b      	adds	r3, r3, r2
 80125ba:	6163      	str	r3, [r4, #20]
 80125bc:	e764      	b.n	8012488 <_vfiprintf_r+0x70>
 80125be:	4343      	muls	r3, r0
 80125c0:	002e      	movs	r6, r5
 80125c2:	2101      	movs	r1, #1
 80125c4:	189b      	adds	r3, r3, r2
 80125c6:	e7a6      	b.n	8012516 <_vfiprintf_r+0xfe>
 80125c8:	2301      	movs	r3, #1
 80125ca:	425b      	negs	r3, r3
 80125cc:	e7d0      	b.n	8012570 <_vfiprintf_r+0x158>
 80125ce:	2300      	movs	r3, #0
 80125d0:	200a      	movs	r0, #10
 80125d2:	001a      	movs	r2, r3
 80125d4:	3601      	adds	r6, #1
 80125d6:	6063      	str	r3, [r4, #4]
 80125d8:	7831      	ldrb	r1, [r6, #0]
 80125da:	1c75      	adds	r5, r6, #1
 80125dc:	3930      	subs	r1, #48	; 0x30
 80125de:	2909      	cmp	r1, #9
 80125e0:	d903      	bls.n	80125ea <_vfiprintf_r+0x1d2>
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d0c5      	beq.n	8012572 <_vfiprintf_r+0x15a>
 80125e6:	9209      	str	r2, [sp, #36]	; 0x24
 80125e8:	e7c3      	b.n	8012572 <_vfiprintf_r+0x15a>
 80125ea:	4342      	muls	r2, r0
 80125ec:	002e      	movs	r6, r5
 80125ee:	2301      	movs	r3, #1
 80125f0:	1852      	adds	r2, r2, r1
 80125f2:	e7f1      	b.n	80125d8 <_vfiprintf_r+0x1c0>
 80125f4:	aa07      	add	r2, sp, #28
 80125f6:	9200      	str	r2, [sp, #0]
 80125f8:	0021      	movs	r1, r4
 80125fa:	003a      	movs	r2, r7
 80125fc:	4b13      	ldr	r3, [pc, #76]	; (801264c <_vfiprintf_r+0x234>)
 80125fe:	9803      	ldr	r0, [sp, #12]
 8012600:	f7fb fd82 	bl	800e108 <_printf_float>
 8012604:	9004      	str	r0, [sp, #16]
 8012606:	9b04      	ldr	r3, [sp, #16]
 8012608:	3301      	adds	r3, #1
 801260a:	d1d3      	bne.n	80125b4 <_vfiprintf_r+0x19c>
 801260c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801260e:	07db      	lsls	r3, r3, #31
 8012610:	d405      	bmi.n	801261e <_vfiprintf_r+0x206>
 8012612:	89bb      	ldrh	r3, [r7, #12]
 8012614:	059b      	lsls	r3, r3, #22
 8012616:	d402      	bmi.n	801261e <_vfiprintf_r+0x206>
 8012618:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801261a:	f7fc fd3d 	bl	800f098 <__retarget_lock_release_recursive>
 801261e:	89bb      	ldrh	r3, [r7, #12]
 8012620:	065b      	lsls	r3, r3, #25
 8012622:	d500      	bpl.n	8012626 <_vfiprintf_r+0x20e>
 8012624:	e71d      	b.n	8012462 <_vfiprintf_r+0x4a>
 8012626:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012628:	e71d      	b.n	8012466 <_vfiprintf_r+0x4e>
 801262a:	aa07      	add	r2, sp, #28
 801262c:	9200      	str	r2, [sp, #0]
 801262e:	0021      	movs	r1, r4
 8012630:	003a      	movs	r2, r7
 8012632:	4b06      	ldr	r3, [pc, #24]	; (801264c <_vfiprintf_r+0x234>)
 8012634:	9803      	ldr	r0, [sp, #12]
 8012636:	f7fc f82d 	bl	800e694 <_printf_i>
 801263a:	e7e3      	b.n	8012604 <_vfiprintf_r+0x1ec>
 801263c:	08013ec8 	.word	0x08013ec8
 8012640:	08013ece 	.word	0x08013ece
 8012644:	08013ed2 	.word	0x08013ed2
 8012648:	0800e109 	.word	0x0800e109
 801264c:	080123f5 	.word	0x080123f5

08012650 <__swbuf_r>:
 8012650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012652:	0006      	movs	r6, r0
 8012654:	000d      	movs	r5, r1
 8012656:	0014      	movs	r4, r2
 8012658:	2800      	cmp	r0, #0
 801265a:	d004      	beq.n	8012666 <__swbuf_r+0x16>
 801265c:	6a03      	ldr	r3, [r0, #32]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d101      	bne.n	8012666 <__swbuf_r+0x16>
 8012662:	f7fc fbbf 	bl	800ede4 <__sinit>
 8012666:	69a3      	ldr	r3, [r4, #24]
 8012668:	60a3      	str	r3, [r4, #8]
 801266a:	89a3      	ldrh	r3, [r4, #12]
 801266c:	071b      	lsls	r3, r3, #28
 801266e:	d528      	bpl.n	80126c2 <__swbuf_r+0x72>
 8012670:	6923      	ldr	r3, [r4, #16]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d025      	beq.n	80126c2 <__swbuf_r+0x72>
 8012676:	6923      	ldr	r3, [r4, #16]
 8012678:	6820      	ldr	r0, [r4, #0]
 801267a:	b2ef      	uxtb	r7, r5
 801267c:	1ac0      	subs	r0, r0, r3
 801267e:	6963      	ldr	r3, [r4, #20]
 8012680:	b2ed      	uxtb	r5, r5
 8012682:	4283      	cmp	r3, r0
 8012684:	dc05      	bgt.n	8012692 <__swbuf_r+0x42>
 8012686:	0021      	movs	r1, r4
 8012688:	0030      	movs	r0, r6
 801268a:	f7ff fa21 	bl	8011ad0 <_fflush_r>
 801268e:	2800      	cmp	r0, #0
 8012690:	d11d      	bne.n	80126ce <__swbuf_r+0x7e>
 8012692:	68a3      	ldr	r3, [r4, #8]
 8012694:	3001      	adds	r0, #1
 8012696:	3b01      	subs	r3, #1
 8012698:	60a3      	str	r3, [r4, #8]
 801269a:	6823      	ldr	r3, [r4, #0]
 801269c:	1c5a      	adds	r2, r3, #1
 801269e:	6022      	str	r2, [r4, #0]
 80126a0:	701f      	strb	r7, [r3, #0]
 80126a2:	6963      	ldr	r3, [r4, #20]
 80126a4:	4283      	cmp	r3, r0
 80126a6:	d004      	beq.n	80126b2 <__swbuf_r+0x62>
 80126a8:	89a3      	ldrh	r3, [r4, #12]
 80126aa:	07db      	lsls	r3, r3, #31
 80126ac:	d507      	bpl.n	80126be <__swbuf_r+0x6e>
 80126ae:	2d0a      	cmp	r5, #10
 80126b0:	d105      	bne.n	80126be <__swbuf_r+0x6e>
 80126b2:	0021      	movs	r1, r4
 80126b4:	0030      	movs	r0, r6
 80126b6:	f7ff fa0b 	bl	8011ad0 <_fflush_r>
 80126ba:	2800      	cmp	r0, #0
 80126bc:	d107      	bne.n	80126ce <__swbuf_r+0x7e>
 80126be:	0028      	movs	r0, r5
 80126c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126c2:	0021      	movs	r1, r4
 80126c4:	0030      	movs	r0, r6
 80126c6:	f000 f805 	bl	80126d4 <__swsetup_r>
 80126ca:	2800      	cmp	r0, #0
 80126cc:	d0d3      	beq.n	8012676 <__swbuf_r+0x26>
 80126ce:	2501      	movs	r5, #1
 80126d0:	426d      	negs	r5, r5
 80126d2:	e7f4      	b.n	80126be <__swbuf_r+0x6e>

080126d4 <__swsetup_r>:
 80126d4:	4b30      	ldr	r3, [pc, #192]	; (8012798 <__swsetup_r+0xc4>)
 80126d6:	b570      	push	{r4, r5, r6, lr}
 80126d8:	0005      	movs	r5, r0
 80126da:	6818      	ldr	r0, [r3, #0]
 80126dc:	000c      	movs	r4, r1
 80126de:	2800      	cmp	r0, #0
 80126e0:	d004      	beq.n	80126ec <__swsetup_r+0x18>
 80126e2:	6a03      	ldr	r3, [r0, #32]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d101      	bne.n	80126ec <__swsetup_r+0x18>
 80126e8:	f7fc fb7c 	bl	800ede4 <__sinit>
 80126ec:	230c      	movs	r3, #12
 80126ee:	5ee2      	ldrsh	r2, [r4, r3]
 80126f0:	b293      	uxth	r3, r2
 80126f2:	0711      	lsls	r1, r2, #28
 80126f4:	d423      	bmi.n	801273e <__swsetup_r+0x6a>
 80126f6:	06d9      	lsls	r1, r3, #27
 80126f8:	d407      	bmi.n	801270a <__swsetup_r+0x36>
 80126fa:	2309      	movs	r3, #9
 80126fc:	2001      	movs	r0, #1
 80126fe:	602b      	str	r3, [r5, #0]
 8012700:	3337      	adds	r3, #55	; 0x37
 8012702:	4313      	orrs	r3, r2
 8012704:	81a3      	strh	r3, [r4, #12]
 8012706:	4240      	negs	r0, r0
 8012708:	bd70      	pop	{r4, r5, r6, pc}
 801270a:	075b      	lsls	r3, r3, #29
 801270c:	d513      	bpl.n	8012736 <__swsetup_r+0x62>
 801270e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012710:	2900      	cmp	r1, #0
 8012712:	d008      	beq.n	8012726 <__swsetup_r+0x52>
 8012714:	0023      	movs	r3, r4
 8012716:	3344      	adds	r3, #68	; 0x44
 8012718:	4299      	cmp	r1, r3
 801271a:	d002      	beq.n	8012722 <__swsetup_r+0x4e>
 801271c:	0028      	movs	r0, r5
 801271e:	f7fd fb73 	bl	800fe08 <_free_r>
 8012722:	2300      	movs	r3, #0
 8012724:	6363      	str	r3, [r4, #52]	; 0x34
 8012726:	2224      	movs	r2, #36	; 0x24
 8012728:	89a3      	ldrh	r3, [r4, #12]
 801272a:	4393      	bics	r3, r2
 801272c:	81a3      	strh	r3, [r4, #12]
 801272e:	2300      	movs	r3, #0
 8012730:	6063      	str	r3, [r4, #4]
 8012732:	6923      	ldr	r3, [r4, #16]
 8012734:	6023      	str	r3, [r4, #0]
 8012736:	2308      	movs	r3, #8
 8012738:	89a2      	ldrh	r2, [r4, #12]
 801273a:	4313      	orrs	r3, r2
 801273c:	81a3      	strh	r3, [r4, #12]
 801273e:	6923      	ldr	r3, [r4, #16]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d10b      	bne.n	801275c <__swsetup_r+0x88>
 8012744:	21a0      	movs	r1, #160	; 0xa0
 8012746:	2280      	movs	r2, #128	; 0x80
 8012748:	89a3      	ldrh	r3, [r4, #12]
 801274a:	0089      	lsls	r1, r1, #2
 801274c:	0092      	lsls	r2, r2, #2
 801274e:	400b      	ands	r3, r1
 8012750:	4293      	cmp	r3, r2
 8012752:	d003      	beq.n	801275c <__swsetup_r+0x88>
 8012754:	0021      	movs	r1, r4
 8012756:	0028      	movs	r0, r5
 8012758:	f000 f892 	bl	8012880 <__smakebuf_r>
 801275c:	220c      	movs	r2, #12
 801275e:	5ea3      	ldrsh	r3, [r4, r2]
 8012760:	2001      	movs	r0, #1
 8012762:	001a      	movs	r2, r3
 8012764:	b299      	uxth	r1, r3
 8012766:	4002      	ands	r2, r0
 8012768:	4203      	tst	r3, r0
 801276a:	d00f      	beq.n	801278c <__swsetup_r+0xb8>
 801276c:	2200      	movs	r2, #0
 801276e:	60a2      	str	r2, [r4, #8]
 8012770:	6962      	ldr	r2, [r4, #20]
 8012772:	4252      	negs	r2, r2
 8012774:	61a2      	str	r2, [r4, #24]
 8012776:	2000      	movs	r0, #0
 8012778:	6922      	ldr	r2, [r4, #16]
 801277a:	4282      	cmp	r2, r0
 801277c:	d1c4      	bne.n	8012708 <__swsetup_r+0x34>
 801277e:	0609      	lsls	r1, r1, #24
 8012780:	d5c2      	bpl.n	8012708 <__swsetup_r+0x34>
 8012782:	2240      	movs	r2, #64	; 0x40
 8012784:	4313      	orrs	r3, r2
 8012786:	81a3      	strh	r3, [r4, #12]
 8012788:	3801      	subs	r0, #1
 801278a:	e7bd      	b.n	8012708 <__swsetup_r+0x34>
 801278c:	0788      	lsls	r0, r1, #30
 801278e:	d400      	bmi.n	8012792 <__swsetup_r+0xbe>
 8012790:	6962      	ldr	r2, [r4, #20]
 8012792:	60a2      	str	r2, [r4, #8]
 8012794:	e7ef      	b.n	8012776 <__swsetup_r+0xa2>
 8012796:	46c0      	nop			; (mov r8, r8)
 8012798:	20000084 	.word	0x20000084

0801279c <_raise_r>:
 801279c:	b570      	push	{r4, r5, r6, lr}
 801279e:	0004      	movs	r4, r0
 80127a0:	000d      	movs	r5, r1
 80127a2:	291f      	cmp	r1, #31
 80127a4:	d904      	bls.n	80127b0 <_raise_r+0x14>
 80127a6:	2316      	movs	r3, #22
 80127a8:	6003      	str	r3, [r0, #0]
 80127aa:	2001      	movs	r0, #1
 80127ac:	4240      	negs	r0, r0
 80127ae:	bd70      	pop	{r4, r5, r6, pc}
 80127b0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d004      	beq.n	80127c0 <_raise_r+0x24>
 80127b6:	008a      	lsls	r2, r1, #2
 80127b8:	189b      	adds	r3, r3, r2
 80127ba:	681a      	ldr	r2, [r3, #0]
 80127bc:	2a00      	cmp	r2, #0
 80127be:	d108      	bne.n	80127d2 <_raise_r+0x36>
 80127c0:	0020      	movs	r0, r4
 80127c2:	f000 f831 	bl	8012828 <_getpid_r>
 80127c6:	002a      	movs	r2, r5
 80127c8:	0001      	movs	r1, r0
 80127ca:	0020      	movs	r0, r4
 80127cc:	f000 f81a 	bl	8012804 <_kill_r>
 80127d0:	e7ed      	b.n	80127ae <_raise_r+0x12>
 80127d2:	2000      	movs	r0, #0
 80127d4:	2a01      	cmp	r2, #1
 80127d6:	d0ea      	beq.n	80127ae <_raise_r+0x12>
 80127d8:	1c51      	adds	r1, r2, #1
 80127da:	d103      	bne.n	80127e4 <_raise_r+0x48>
 80127dc:	2316      	movs	r3, #22
 80127de:	3001      	adds	r0, #1
 80127e0:	6023      	str	r3, [r4, #0]
 80127e2:	e7e4      	b.n	80127ae <_raise_r+0x12>
 80127e4:	2400      	movs	r4, #0
 80127e6:	0028      	movs	r0, r5
 80127e8:	601c      	str	r4, [r3, #0]
 80127ea:	4790      	blx	r2
 80127ec:	0020      	movs	r0, r4
 80127ee:	e7de      	b.n	80127ae <_raise_r+0x12>

080127f0 <raise>:
 80127f0:	b510      	push	{r4, lr}
 80127f2:	4b03      	ldr	r3, [pc, #12]	; (8012800 <raise+0x10>)
 80127f4:	0001      	movs	r1, r0
 80127f6:	6818      	ldr	r0, [r3, #0]
 80127f8:	f7ff ffd0 	bl	801279c <_raise_r>
 80127fc:	bd10      	pop	{r4, pc}
 80127fe:	46c0      	nop			; (mov r8, r8)
 8012800:	20000084 	.word	0x20000084

08012804 <_kill_r>:
 8012804:	2300      	movs	r3, #0
 8012806:	b570      	push	{r4, r5, r6, lr}
 8012808:	4d06      	ldr	r5, [pc, #24]	; (8012824 <_kill_r+0x20>)
 801280a:	0004      	movs	r4, r0
 801280c:	0008      	movs	r0, r1
 801280e:	0011      	movs	r1, r2
 8012810:	602b      	str	r3, [r5, #0]
 8012812:	f7f3 fe85 	bl	8006520 <_kill>
 8012816:	1c43      	adds	r3, r0, #1
 8012818:	d103      	bne.n	8012822 <_kill_r+0x1e>
 801281a:	682b      	ldr	r3, [r5, #0]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d000      	beq.n	8012822 <_kill_r+0x1e>
 8012820:	6023      	str	r3, [r4, #0]
 8012822:	bd70      	pop	{r4, r5, r6, pc}
 8012824:	200010bc 	.word	0x200010bc

08012828 <_getpid_r>:
 8012828:	b510      	push	{r4, lr}
 801282a:	f7f3 fe73 	bl	8006514 <_getpid>
 801282e:	bd10      	pop	{r4, pc}

08012830 <__swhatbuf_r>:
 8012830:	b570      	push	{r4, r5, r6, lr}
 8012832:	000e      	movs	r6, r1
 8012834:	001d      	movs	r5, r3
 8012836:	230e      	movs	r3, #14
 8012838:	5ec9      	ldrsh	r1, [r1, r3]
 801283a:	0014      	movs	r4, r2
 801283c:	b096      	sub	sp, #88	; 0x58
 801283e:	2900      	cmp	r1, #0
 8012840:	da0c      	bge.n	801285c <__swhatbuf_r+0x2c>
 8012842:	89b2      	ldrh	r2, [r6, #12]
 8012844:	2380      	movs	r3, #128	; 0x80
 8012846:	0011      	movs	r1, r2
 8012848:	4019      	ands	r1, r3
 801284a:	421a      	tst	r2, r3
 801284c:	d013      	beq.n	8012876 <__swhatbuf_r+0x46>
 801284e:	2100      	movs	r1, #0
 8012850:	3b40      	subs	r3, #64	; 0x40
 8012852:	2000      	movs	r0, #0
 8012854:	6029      	str	r1, [r5, #0]
 8012856:	6023      	str	r3, [r4, #0]
 8012858:	b016      	add	sp, #88	; 0x58
 801285a:	bd70      	pop	{r4, r5, r6, pc}
 801285c:	466a      	mov	r2, sp
 801285e:	f000 f84d 	bl	80128fc <_fstat_r>
 8012862:	2800      	cmp	r0, #0
 8012864:	dbed      	blt.n	8012842 <__swhatbuf_r+0x12>
 8012866:	23f0      	movs	r3, #240	; 0xf0
 8012868:	9901      	ldr	r1, [sp, #4]
 801286a:	021b      	lsls	r3, r3, #8
 801286c:	4019      	ands	r1, r3
 801286e:	4b03      	ldr	r3, [pc, #12]	; (801287c <__swhatbuf_r+0x4c>)
 8012870:	18c9      	adds	r1, r1, r3
 8012872:	424b      	negs	r3, r1
 8012874:	4159      	adcs	r1, r3
 8012876:	2380      	movs	r3, #128	; 0x80
 8012878:	00db      	lsls	r3, r3, #3
 801287a:	e7ea      	b.n	8012852 <__swhatbuf_r+0x22>
 801287c:	ffffe000 	.word	0xffffe000

08012880 <__smakebuf_r>:
 8012880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012882:	2602      	movs	r6, #2
 8012884:	898b      	ldrh	r3, [r1, #12]
 8012886:	0005      	movs	r5, r0
 8012888:	000c      	movs	r4, r1
 801288a:	4233      	tst	r3, r6
 801288c:	d006      	beq.n	801289c <__smakebuf_r+0x1c>
 801288e:	0023      	movs	r3, r4
 8012890:	3347      	adds	r3, #71	; 0x47
 8012892:	6023      	str	r3, [r4, #0]
 8012894:	6123      	str	r3, [r4, #16]
 8012896:	2301      	movs	r3, #1
 8012898:	6163      	str	r3, [r4, #20]
 801289a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801289c:	466a      	mov	r2, sp
 801289e:	ab01      	add	r3, sp, #4
 80128a0:	f7ff ffc6 	bl	8012830 <__swhatbuf_r>
 80128a4:	9900      	ldr	r1, [sp, #0]
 80128a6:	0007      	movs	r7, r0
 80128a8:	0028      	movs	r0, r5
 80128aa:	f7fd fb23 	bl	800fef4 <_malloc_r>
 80128ae:	2800      	cmp	r0, #0
 80128b0:	d108      	bne.n	80128c4 <__smakebuf_r+0x44>
 80128b2:	220c      	movs	r2, #12
 80128b4:	5ea3      	ldrsh	r3, [r4, r2]
 80128b6:	059a      	lsls	r2, r3, #22
 80128b8:	d4ef      	bmi.n	801289a <__smakebuf_r+0x1a>
 80128ba:	2203      	movs	r2, #3
 80128bc:	4393      	bics	r3, r2
 80128be:	431e      	orrs	r6, r3
 80128c0:	81a6      	strh	r6, [r4, #12]
 80128c2:	e7e4      	b.n	801288e <__smakebuf_r+0xe>
 80128c4:	2380      	movs	r3, #128	; 0x80
 80128c6:	89a2      	ldrh	r2, [r4, #12]
 80128c8:	6020      	str	r0, [r4, #0]
 80128ca:	4313      	orrs	r3, r2
 80128cc:	81a3      	strh	r3, [r4, #12]
 80128ce:	9b00      	ldr	r3, [sp, #0]
 80128d0:	6120      	str	r0, [r4, #16]
 80128d2:	6163      	str	r3, [r4, #20]
 80128d4:	9b01      	ldr	r3, [sp, #4]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d00c      	beq.n	80128f4 <__smakebuf_r+0x74>
 80128da:	0028      	movs	r0, r5
 80128dc:	230e      	movs	r3, #14
 80128de:	5ee1      	ldrsh	r1, [r4, r3]
 80128e0:	f000 f81e 	bl	8012920 <_isatty_r>
 80128e4:	2800      	cmp	r0, #0
 80128e6:	d005      	beq.n	80128f4 <__smakebuf_r+0x74>
 80128e8:	2303      	movs	r3, #3
 80128ea:	89a2      	ldrh	r2, [r4, #12]
 80128ec:	439a      	bics	r2, r3
 80128ee:	3b02      	subs	r3, #2
 80128f0:	4313      	orrs	r3, r2
 80128f2:	81a3      	strh	r3, [r4, #12]
 80128f4:	89a3      	ldrh	r3, [r4, #12]
 80128f6:	433b      	orrs	r3, r7
 80128f8:	81a3      	strh	r3, [r4, #12]
 80128fa:	e7ce      	b.n	801289a <__smakebuf_r+0x1a>

080128fc <_fstat_r>:
 80128fc:	2300      	movs	r3, #0
 80128fe:	b570      	push	{r4, r5, r6, lr}
 8012900:	4d06      	ldr	r5, [pc, #24]	; (801291c <_fstat_r+0x20>)
 8012902:	0004      	movs	r4, r0
 8012904:	0008      	movs	r0, r1
 8012906:	0011      	movs	r1, r2
 8012908:	602b      	str	r3, [r5, #0]
 801290a:	f7f3 fe68 	bl	80065de <_fstat>
 801290e:	1c43      	adds	r3, r0, #1
 8012910:	d103      	bne.n	801291a <_fstat_r+0x1e>
 8012912:	682b      	ldr	r3, [r5, #0]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d000      	beq.n	801291a <_fstat_r+0x1e>
 8012918:	6023      	str	r3, [r4, #0]
 801291a:	bd70      	pop	{r4, r5, r6, pc}
 801291c:	200010bc 	.word	0x200010bc

08012920 <_isatty_r>:
 8012920:	2300      	movs	r3, #0
 8012922:	b570      	push	{r4, r5, r6, lr}
 8012924:	4d06      	ldr	r5, [pc, #24]	; (8012940 <_isatty_r+0x20>)
 8012926:	0004      	movs	r4, r0
 8012928:	0008      	movs	r0, r1
 801292a:	602b      	str	r3, [r5, #0]
 801292c:	f7f3 fe65 	bl	80065fa <_isatty>
 8012930:	1c43      	adds	r3, r0, #1
 8012932:	d103      	bne.n	801293c <_isatty_r+0x1c>
 8012934:	682b      	ldr	r3, [r5, #0]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d000      	beq.n	801293c <_isatty_r+0x1c>
 801293a:	6023      	str	r3, [r4, #0]
 801293c:	bd70      	pop	{r4, r5, r6, pc}
 801293e:	46c0      	nop			; (mov r8, r8)
 8012940:	200010bc 	.word	0x200010bc

08012944 <_init>:
 8012944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012946:	46c0      	nop			; (mov r8, r8)
 8012948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801294a:	bc08      	pop	{r3}
 801294c:	469e      	mov	lr, r3
 801294e:	4770      	bx	lr

08012950 <_fini>:
 8012950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012952:	46c0      	nop			; (mov r8, r8)
 8012954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012956:	bc08      	pop	{r3}
 8012958:	469e      	mov	lr, r3
 801295a:	4770      	bx	lr
